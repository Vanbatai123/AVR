
keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  000002e2  00000356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000078  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000816  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000026c  00000000  00000000  00000c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002b6  00000000  00000000  00000eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000188  00000000  00000000  0000116c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001f6  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000005cc  00000000  00000000  000014ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000080  00000000  00000000  00001ab6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ee       	ldi	r30, 0xE2	; 226
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 39       	cpi	r26, 0x96	; 150
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  7a:	0c 94 6f 01 	jmp	0x2de	; 0x2de <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Write2Nib>:
		clrb(KEYPAD_PORT,i);
		for (j=0;j<4;j++)
		{
			if (inbit(KEYPAD_PIN,(j+4))==0)
			{
				vietso_LCD(button[i][j]);
  82:	2b b3       	in	r18, 0x1b	; 27
  84:	2f 70       	andi	r18, 0x0F	; 15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	98 2f       	mov	r25, r24
  88:	90 7f       	andi	r25, 0xF0	; 240
  8a:	92 2b       	or	r25, r18
  8c:	9b bb       	out	0x1b, r25	; 27
  8e:	db 9a       	sbi	0x1b, 3	; 27
  90:	db 98       	cbi	0x1b, 3	; 27
  92:	30 e1       	ldi	r19, 0x10	; 16
  94:	83 9f       	mul	r24, r19
  96:	c0 01       	movw	r24, r0
{	
	int i,j;
	for(i=0;i<4;i++)
	{
		clrb(KEYPAD_PORT,i);
		for (j=0;j<4;j++)
  98:	11 24       	eor	r1, r1
  9a:	82 2b       	or	r24, r18
  9c:	8b bb       	out	0x1b, r24	; 27
  9e:	db 9a       	sbi	0x1b, 3	; 27
			{
				vietso_LCD(button[i][j]);
				_delay_ms(300);
			}
		}
		setb(KEYPAD_PORT,i);
  a0:	db 98       	cbi	0x1b, 3	; 27
  a2:	08 95       	ret

000000a4 <init_LCD>:
  a4:	8f ef       	ldi	r24, 0xFF	; 255
					10,0,11,12
					};
void keypadfunc()
{	
	int i,j;
	for(i=0;i<4;i++)
  a6:	8a bb       	out	0x1a, r24	; 26
  a8:	d4 9a       	sbi	0x1a, 4	; 26
  aa:	d5 9a       	sbi	0x1a, 5	; 26
  ac:	d6 9a       	sbi	0x1a, 6	; 26
  ae:	d7 9a       	sbi	0x1a, 7	; 26
  b0:	da 98       	cbi	0x1b, 2	; 27
  b2:	db 98       	cbi	0x1b, 3	; 27
  b4:	db 9a       	sbi	0x1b, 3	; 27
  b6:	dd 9a       	sbi	0x1b, 5	; 27
  b8:	db 98       	cbi	0x1b, 3	; 27
  ba:	8f ec       	ldi	r24, 0xCF	; 207
				_delay_ms(300);
			}
		}
		setb(KEYPAD_PORT,i);
	}
}
  bc:	97 e0       	ldi	r25, 0x07	; 7
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <init_LCD+0x1a>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <init_LCD+0x20>
  c4:	00 00       	nop
  c6:	88 e2       	ldi	r24, 0x28	; 40
  c8:	0e 94 41 00 	call	0x82	; 0x82 <Write2Nib>
  cc:	8f ec       	ldi	r24, 0xCF	; 207
  ce:	97 e0       	ldi	r25, 0x07	; 7
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <init_LCD+0x2c>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <init_LCD+0x32>
  d6:	00 00       	nop
	wait_LCD();
	Write2Nib(0x28);//4 bit mode, 2 line, 5x8 font
	wait_LCD();
	
	//Display control-------------------------------------------------------------------------
	cbi(CTRL,RS); // the following data is COMMAND
  d8:	da 98       	cbi	0x1b, 2	; 27
	
	Write2Nib(0x0C);
  da:	8c e0       	ldi	r24, 0x0C	; 12
  dc:	0e 94 41 00 	call	0x82	; 0x82 <Write2Nib>
  e0:	8f ec       	ldi	r24, 0xCF	; 207
  e2:	97 e0       	ldi	r25, 0x07	; 7
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <init_LCD+0x40>
  e8:	00 c0       	rjmp	.+0      	; 0xea <init_LCD+0x46>
  ea:	00 00       	nop
	//Write2Nib(0x0E);-------------co con tro
	wait_LCD();
	
	//Entry mode set------------------------------------------------------------------------
	cbi(CTRL,RS); // the following data is COMMAND
  ec:	da 98       	cbi	0x1b, 2	; 27
	
	Write2Nib(0x06);
  ee:	86 e0       	ldi	r24, 0x06	; 6
  f0:	0e 94 41 00 	call	0x82	; 0x82 <Write2Nib>
  f4:	8f ec       	ldi	r24, 0xCF	; 207
  f6:	97 e0       	ldi	r25, 0x07	; 7
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <init_LCD+0x54>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <init_LCD+0x5a>
  fe:	00 00       	nop
 100:	08 95       	ret

00000102 <move_LCD>:
}
void move_LCD(uint8_t y,uint8_t x)
{
	uint8_t Ad;
	Ad=64*(y-1)+(x-1)+0x80; // tính mã l?nh
	cbi(CTRL,RS); // the following data is COMMAND
 102:	da 98       	cbi	0x1b, 2	; 27
	
}
void move_LCD(uint8_t y,uint8_t x)
{
	uint8_t Ad;
	Ad=64*(y-1)+(x-1)+0x80; // tính mã l?nh
 104:	90 e4       	ldi	r25, 0x40	; 64
 106:	89 9f       	mul	r24, r25
 108:	60 0d       	add	r22, r0
 10a:	11 24       	eor	r1, r1
 10c:	86 2f       	mov	r24, r22
	cbi(CTRL,RS); // the following data is COMMAND
	
	Write2Nib(Ad);
 10e:	81 5c       	subi	r24, 0xC1	; 193
 110:	0e 94 41 00 	call	0x82	; 0x82 <Write2Nib>
 114:	8f ec       	ldi	r24, 0xCF	; 207
 116:	97 e0       	ldi	r25, 0x07	; 7
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <move_LCD+0x16>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <move_LCD+0x1c>
 11e:	00 00       	nop
 120:	08 95       	ret

00000122 <putChar_LCD>:
}


void putChar_LCD(uint8_t chr)
{ //hi?n th? 1 ký t? chr lên LCD
	sbi(CTRL,RS); //this is a normal DATA
 122:	da 9a       	sbi	0x1b, 2	; 27
	
	Write2Nib(chr);
 124:	0e 94 41 00 	call	0x82	; 0x82 <Write2Nib>
 128:	8f ec       	ldi	r24, 0xCF	; 207
 12a:	97 e0       	ldi	r25, 0x07	; 7
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <putChar_LCD+0xa>
 130:	00 c0       	rjmp	.+0      	; 0x132 <putChar_LCD+0x10>
 132:	00 00       	nop
 134:	08 95       	ret

00000136 <print_LCD>:
	wait_LCD();
	
}
void print_LCD(char* str)//******__HIEN THI CHUOI KI TU__*********************
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	ec 01       	movw	r28, r24
	int i;
	for (i=0; str[i]!=0; i++) 
 13c:	88 81       	ld	r24, Y
 13e:	88 23       	and	r24, r24
 140:	31 f0       	breq	.+12     	; 0x14e <print_LCD+0x18>
 142:	21 96       	adiw	r28, 0x01	; 1
	putChar_LCD(str[i]);
 144:	0e 94 91 00 	call	0x122	; 0x122 <putChar_LCD>
	
}
void print_LCD(char* str)//******__HIEN THI CHUOI KI TU__*********************
{
	int i;
	for (i=0; str[i]!=0; i++) 
 148:	89 91       	ld	r24, Y+
 14a:	81 11       	cpse	r24, r1
 14c:	fb cf       	rjmp	.-10     	; 0x144 <print_LCD+0xe>
	putChar_LCD(str[i]);
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <clr_LCD>:
void clr_LCD()
{ //xóa toàn b? LCD
	//cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
	//Write2Nib(0x01);
	//wait_LCD();
	move_LCD(1,1);
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 81 00 	call	0x102	; 0x102 <move_LCD>
	print_LCD("                ");
 15c:	83 e7       	ldi	r24, 0x73	; 115
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 9b 00 	call	0x136	; 0x136 <print_LCD>
	move_LCD(2,1);
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	0e 94 81 00 	call	0x102	; 0x102 <move_LCD>
	print_LCD("                ");
 16c:	83 e7       	ldi	r24, 0x73	; 115
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 9b 00 	call	0x136	; 0x136 <print_LCD>
	move_LCD(1,1);
 174:	61 e0       	ldi	r22, 0x01	; 1
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	0e 94 81 00 	call	0x102	; 0x102 <move_LCD>
 17c:	08 95       	ret

0000017e <main>:
int main(void)
{
 17e:	4f 92       	push	r4
 180:	5f 92       	push	r5
 182:	6f 92       	push	r6
 184:	7f 92       	push	r7
 186:	8f 92       	push	r8
 188:	9f 92       	push	r9
 18a:	af 92       	push	r10
 18c:	bf 92       	push	r11
 18e:	cf 92       	push	r12
 190:	df 92       	push	r13
 192:	ef 92       	push	r14
 194:	ff 92       	push	r15
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
	KEYPAD_PORT=0xF0;
 19e:	80 ef       	ldi	r24, 0xF0	; 240
 1a0:	82 bb       	out	0x12, r24	; 18
	KEYPAD_DDR=0x0F;
 1a2:	8f e0       	ldi	r24, 0x0F	; 15
 1a4:	81 bb       	out	0x11, r24	; 17
	int a=0,dem=0,pass=1234;
	init_LCD();
 1a6:	0e 94 52 00 	call	0xa4	; 0xa4 <init_LCD>
	clr_LCD();
 1aa:	0e 94 aa 00 	call	0x154	; 0x154 <clr_LCD>
	   while(1)
    {
		int i,j;
		for(i=0;i<4;i++)
 1ae:	00 e0       	ldi	r16, 0x00	; 0
 1b0:	10 e0       	ldi	r17, 0x00	; 0
}
int main(void)
{
	KEYPAD_PORT=0xF0;
	KEYPAD_DDR=0x0F;
	int a=0,dem=0,pass=1234;
 1b2:	c1 2c       	mov	r12, r1
 1b4:	d1 2c       	mov	r13, r1
 1b6:	61 2c       	mov	r6, r1
 1b8:	71 2c       	mov	r7, r1
	init_LCD();
	clr_LCD();
	   while(1)
    {
		int i,j;
		for(i=0;i<4;i++)
 1ba:	41 2c       	mov	r4, r1
 1bc:	51 2c       	mov	r5, r1
		{
			clrb(KEYPAD_PORT,i);
 1be:	ee 24       	eor	r14, r14
 1c0:	e3 94       	inc	r14
 1c2:	f1 2c       	mov	r15, r1
 1c4:	5b c0       	rjmp	.+182    	; 0x27c <main+0xfe>
 1c6:	82 b3       	in	r24, 0x12	; 18
 1c8:	57 01       	movw	r10, r14
 1ca:	00 2e       	mov	r0, r16
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <main+0x54>
 1ce:	aa 0c       	add	r10, r10
 1d0:	bb 1c       	adc	r11, r11
 1d2:	0a 94       	dec	r0
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <main+0x50>
 1d6:	9a 2d       	mov	r25, r10
 1d8:	90 95       	com	r25
 1da:	89 23       	and	r24, r25
 1dc:	82 bb       	out	0x12, r24	; 18
 1de:	c8 01       	movw	r24, r16
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	9c 01       	movw	r18, r24
 1ea:	20 5a       	subi	r18, 0xA0	; 160
 1ec:	3f 4f       	sbci	r19, 0xFF	; 255
 1ee:	49 01       	movw	r8, r18
			for (j=0;j<4;j++)
 1f0:	c4 2d       	mov	r28, r4
 1f2:	d5 2d       	mov	r29, r5
			{
				if (inbit(KEYPAD_PIN,(j+4))==0)
 1f4:	20 b3       	in	r18, 0x10	; 16
 1f6:	ce 01       	movw	r24, r28
 1f8:	04 96       	adiw	r24, 0x04	; 4
 1fa:	a7 01       	movw	r20, r14
 1fc:	08 2e       	mov	r0, r24
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <main+0x86>
 200:	44 0f       	add	r20, r20
 202:	55 1f       	adc	r21, r21
 204:	0a 94       	dec	r0
 206:	e2 f7       	brpl	.-8      	; 0x200 <main+0x82>
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	24 23       	and	r18, r20
 20c:	35 23       	and	r19, r21
 20e:	a9 01       	movw	r20, r18
 210:	02 c0       	rjmp	.+4      	; 0x216 <main+0x98>
 212:	55 95       	asr	r21
 214:	47 95       	ror	r20
 216:	8a 95       	dec	r24
 218:	e2 f7       	brpl	.-8      	; 0x212 <main+0x94>
 21a:	ca 01       	movw	r24, r20
 21c:	89 2b       	or	r24, r25
 21e:	11 f5       	brne	.+68     	; 0x264 <main+0xe6>
				{
					dem++;
 220:	5f ef       	ldi	r21, 0xFF	; 255
 222:	c5 1a       	sub	r12, r21
 224:	d5 0a       	sbc	r13, r21
					putChar_LCD('*');
 226:	8a e2       	ldi	r24, 0x2A	; 42
 228:	0e 94 91 00 	call	0x122	; 0x122 <putChar_LCD>
 22c:	8f ef       	ldi	r24, 0xFF	; 255
 22e:	92 e5       	ldi	r25, 0x52	; 82
 230:	27 e0       	ldi	r18, 0x07	; 7
 232:	81 50       	subi	r24, 0x01	; 1
 234:	90 40       	sbci	r25, 0x00	; 0
 236:	20 40       	sbci	r18, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <main+0xb4>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0xbe>
 23c:	00 00       	nop
 23e:	f4 01       	movw	r30, r8
 240:	ec 0f       	add	r30, r28
 242:	fd 1f       	adc	r31, r29
					//vietso_LCD(button[i][j]);
					_delay_ms(300);
					if ((button[i][j]<10)&&(button[i][j]>-1))
 244:	20 81       	ld	r18, Z
 246:	2a 30       	cpi	r18, 0x0A	; 10
 248:	68 f4       	brcc	.+26     	; 0x264 <main+0xe6>
					{
						a=10*a+button[i][j];
 24a:	c3 01       	movw	r24, r6
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	66 0c       	add	r6, r6
 252:	77 1c       	adc	r7, r7
 254:	66 0c       	add	r6, r6
 256:	77 1c       	adc	r7, r7
 258:	66 0c       	add	r6, r6
 25a:	77 1c       	adc	r7, r7
 25c:	68 0e       	add	r6, r24
 25e:	79 1e       	adc	r7, r25
 260:	62 0e       	add	r6, r18
 262:	71 1c       	adc	r7, r1
    {
		int i,j;
		for(i=0;i<4;i++)
		{
			clrb(KEYPAD_PORT,i);
			for (j=0;j<4;j++)
 264:	21 96       	adiw	r28, 0x01	; 1
 266:	c4 30       	cpi	r28, 0x04	; 4
 268:	d1 05       	cpc	r29, r1
 26a:	21 f6       	brne	.-120    	; 0x1f4 <main+0x76>
					{
						a=10*a+button[i][j];
					}
				}
			}
			setb(KEYPAD_PORT,i);
 26c:	82 b3       	in	r24, 0x12	; 18
 26e:	a8 2a       	or	r10, r24
 270:	a2 ba       	out	0x12, r10	; 18
	init_LCD();
	clr_LCD();
	   while(1)
    {
		int i,j;
		for(i=0;i<4;i++)
 272:	0f 5f       	subi	r16, 0xFF	; 255
 274:	1f 4f       	sbci	r17, 0xFF	; 255
 276:	02 c0       	rjmp	.+4      	; 0x27c <main+0xfe>
 278:	04 2d       	mov	r16, r4
 27a:	15 2d       	mov	r17, r5
 27c:	04 30       	cpi	r16, 0x04	; 4
 27e:	11 05       	cpc	r17, r1
 280:	0c f4       	brge	.+2      	; 0x284 <main+0x106>
 282:	a1 cf       	rjmp	.-190    	; 0x1c6 <main+0x48>
					}
				}
			}
			setb(KEYPAD_PORT,i);
		}
		if (dem==4)
 284:	34 e0       	ldi	r19, 0x04	; 4
 286:	c3 16       	cp	r12, r19
 288:	d1 04       	cpc	r13, r1
 28a:	b1 f7       	brne	.-20     	; 0x278 <main+0xfa>
		{
			if (a==pass)
 28c:	42 ed       	ldi	r20, 0xD2	; 210
 28e:	64 16       	cp	r6, r20
 290:	44 e0       	ldi	r20, 0x04	; 4
 292:	74 06       	cpc	r7, r20
 294:	49 f4       	brne	.+18     	; 0x2a8 <main+0x12a>
			{
				move_LCD(2,1);
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	0e 94 81 00 	call	0x102	; 0x102 <move_LCD>
				print_LCD("DUNG ROI");
 29e:	84 e8       	ldi	r24, 0x84	; 132
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 9b 00 	call	0x136	; 0x136 <print_LCD>
 2a6:	08 c0       	rjmp	.+16     	; 0x2b8 <main+0x13a>
			}
			else
			{
				move_LCD(2,1);
 2a8:	61 e0       	ldi	r22, 0x01	; 1
 2aa:	82 e0       	ldi	r24, 0x02	; 2
 2ac:	0e 94 81 00 	call	0x102	; 0x102 <move_LCD>
				print_LCD("SAI ROI");
 2b0:	8d e8       	ldi	r24, 0x8D	; 141
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 9b 00 	call	0x136	; 0x136 <print_LCD>
			}
			break;
		}
    }
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	1f 91       	pop	r17
 2c2:	0f 91       	pop	r16
 2c4:	ff 90       	pop	r15
 2c6:	ef 90       	pop	r14
 2c8:	df 90       	pop	r13
 2ca:	cf 90       	pop	r12
 2cc:	bf 90       	pop	r11
 2ce:	af 90       	pop	r10
 2d0:	9f 90       	pop	r9
 2d2:	8f 90       	pop	r8
 2d4:	7f 90       	pop	r7
 2d6:	6f 90       	pop	r6
 2d8:	5f 90       	pop	r5
 2da:	4f 90       	pop	r4
 2dc:	08 95       	ret

000002de <_exit>:
 2de:	f8 94       	cli

000002e0 <__stop_program>:
 2e0:	ff cf       	rjmp	.-2      	; 0x2e0 <__stop_program>
