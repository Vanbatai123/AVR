
LEDQUAY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  000000d0  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001a5  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000111  00000000  00000000  0000035d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000144  00000000  00000000  0000046e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  000005b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000016b  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000005e  00000000  00000000  00000743  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  000007a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
  #include <util/delay.h>
  int code1[]={0xE1,0xC0,0x80,0x01,0x80,0xC0,0xE1,0xFF,0XFF,0XFF,0XFF};
  int code[]={0xFE,0xFE,0x80,0xFE,0xFE,0xFF,0x83,0xF5,0xF6,0xF5,0x83,0xFF,0xFF,0xBE,0x80,0xBE,0xFF,0xFF};
  int main(void)
  {
	  DDRD=0XFF;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	81 bb       	out	0x11, r24	; 17
	  PORTD=0xFF;	
  86:	82 bb       	out	0x12, r24	; 18
	  while(1)
	  {
		  for (int x=0;x<18;x++)
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	0e c0       	rjmp	.+28     	; 0xae <main+0x2c>
		  {
			  PORTD=code[x];_delay_ms(2);
  92:	fc 01       	movw	r30, r24
  94:	ee 0f       	add	r30, r30
  96:	ff 1f       	adc	r31, r31
  98:	e0 5a       	subi	r30, 0xA0	; 160
  9a:	ff 4f       	sbci	r31, 0xFF	; 255
  9c:	20 81       	ld	r18, Z
  9e:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	ef e9       	ldi	r30, 0x9F	; 159
  a2:	ff e0       	ldi	r31, 0x0F	; 15
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <main+0x22>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x28>
  aa:	00 00       	nop
  {
	  DDRD=0XFF;
	  PORTD=0xFF;	
	  while(1)
	  {
		  for (int x=0;x<18;x++)
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	82 31       	cpi	r24, 0x12	; 18
  b0:	91 05       	cpc	r25, r1
  b2:	7c f3       	brlt	.-34     	; 0x92 <main+0x10>
  b4:	ff ef       	ldi	r31, 0xFF	; 255
  b6:	20 ee       	ldi	r18, 0xE0	; 224
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	f1 50       	subi	r31, 0x01	; 1
  bc:	20 40       	sbci	r18, 0x00	; 0
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x38>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x42>
  c4:	00 00       	nop
  c6:	84 2f       	mov	r24, r20
  c8:	93 2f       	mov	r25, r19
  ca:	f1 cf       	rjmp	.-30     	; 0xae <main+0x2c>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
