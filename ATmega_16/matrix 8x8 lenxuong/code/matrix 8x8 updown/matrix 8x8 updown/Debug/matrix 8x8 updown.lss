
matrix 8x8 updown.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000132  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000224  00800060  00000132  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800284  00800284  000003ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ea  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001b9  00000000  00000000  00000442  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000126  00000000  00000000  000005fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000016e  00000000  00000000  00000721  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00000890  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000018f  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f3  00000000  00000000  00000a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00000b52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a4 e8       	ldi	r26, 0x84	; 132
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 90 00 	call	0x120	; 0x120 <main>
  8a:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <quet>:
	

	
};
void quet()
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
	
	int x=n+8;
  96:	40 91 84 02 	lds	r20, 0x0284
  9a:	50 91 85 02 	lds	r21, 0x0285
  9e:	48 5f       	subi	r20, 0xF8	; 248
  a0:	5f 4f       	sbci	r21, 0xFF	; 255
  a2:	6a e0       	ldi	r22, 0x0A	; 10
  a4:	70 e0       	ldi	r23, 0x00	; 0
	for (int g=0;g<10;g++)
	{
		int j=0xFE;
  a6:	ce ef       	ldi	r28, 0xFE	; 254
  a8:	d0 e0       	ldi	r29, 0x00	; 0
		for (int i=n;i<x;i++)
  aa:	80 91 84 02 	lds	r24, 0x0284
  ae:	90 91 85 02 	lds	r25, 0x0285
  b2:	84 17       	cp	r24, r20
  b4:	95 07       	cpc	r25, r21
  b6:	d4 f4       	brge	.+52     	; 0xec <quet+0x5a>
  b8:	fc 01       	movw	r30, r24
  ba:	ee 0f       	add	r30, r30
  bc:	ff 1f       	adc	r31, r31
  be:	e0 5a       	subi	r30, 0xA0	; 160
  c0:	ff 4f       	sbci	r31, 0xFF	; 255
{
	
	int x=n+8;
	for (int g=0;g<10;g++)
	{
		int j=0xFE;
  c2:	2c 2f       	mov	r18, r28
  c4:	3d 2f       	mov	r19, r29
		for (int i=n;i<x;i++)
		{
			PORTC=j;
  c6:	25 bb       	out	0x15, r18	; 21
			PORTA=~ma[i];
  c8:	a0 81       	ld	r26, Z
  ca:	32 96       	adiw	r30, 0x02	; 2
  cc:	a0 95       	com	r26
  ce:	ab bb       	out	0x1b, r26	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	a9 ef       	ldi	r26, 0xF9	; 249
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	11 97       	sbiw	r26, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <quet+0x42>
  d8:	00 c0       	rjmp	.+0      	; 0xda <quet+0x48>
  da:	00 00       	nop
			_delay_ms(1);
			j<<=1;
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
			j++;
  e0:	2f 5f       	subi	r18, 0xFF	; 255
  e2:	3f 4f       	sbci	r19, 0xFF	; 255
	
	int x=n+8;
	for (int g=0;g<10;g++)
	{
		int j=0xFE;
		for (int i=n;i<x;i++)
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	84 17       	cp	r24, r20
  e8:	95 07       	cpc	r25, r21
  ea:	6c f3       	brlt	.-38     	; 0xc6 <quet+0x34>
  ec:	61 50       	subi	r22, 0x01	; 1
  ee:	71 09       	sbc	r23, r1
};
void quet()
{
	
	int x=n+8;
	for (int g=0;g<10;g++)
  f0:	61 15       	cp	r22, r1
  f2:	71 05       	cpc	r23, r1
  f4:	d1 f6       	brne	.-76     	; 0xaa <quet+0x18>
			_delay_ms(1);
			j<<=1;
			j++;
		}
	}
	n++;
  f6:	80 91 84 02 	lds	r24, 0x0284
  fa:	90 91 85 02 	lds	r25, 0x0285
  fe:	01 96       	adiw	r24, 0x01	; 1
	if (n==267)
 100:	8b 30       	cpi	r24, 0x0B	; 11
 102:	b1 e0       	ldi	r27, 0x01	; 1
 104:	9b 07       	cpc	r25, r27
 106:	29 f0       	breq	.+10     	; 0x112 <quet+0x80>
			_delay_ms(1);
			j<<=1;
			j++;
		}
	}
	n++;
 108:	90 93 85 02 	sts	0x0285, r25
 10c:	80 93 84 02 	sts	0x0284, r24
 110:	04 c0       	rjmp	.+8      	; 0x11a <quet+0x88>
	if (n==267)
	n=0;
 112:	10 92 85 02 	sts	0x0285, r1
 116:	10 92 84 02 	sts	0x0284, r1
}
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <main>:
int main(void)
{
	//int a=0;
	DDRA=0XFF;
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	8a bb       	out	0x1a, r24	; 26
	DDRC=0XFF;
 124:	84 bb       	out	0x14, r24	; 20
	PORTA=0x00;
 126:	1b ba       	out	0x1b, r1	; 27
	while(1)
	{
		
		
		
		quet();
 128:	0e 94 49 00 	call	0x92	; 0x92 <quet>
 12c:	fd cf       	rjmp	.-6      	; 0x128 <main+0x8>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
