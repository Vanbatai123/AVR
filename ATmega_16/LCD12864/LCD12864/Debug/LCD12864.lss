
LCD12864.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000276  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000276  0000030a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800076  00800076  00000320  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dfc  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000761  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000073c  00000000  00000000  000019c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000270  00000000  00000000  00002100  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045d  00000000  00000000  00002370  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000081c  00000000  00000000  000027cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00002fe9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e7       	ldi	r30, 0x76	; 118
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 37       	cpi	r26, 0x7B	; 123
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 22 01 	call	0x244	; 0x244 <main>
  8a:	0c 94 39 01 	jmp	0x272	; 0x272 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <putchar_UART>:
{
	if (mode == MODE_GRAPHIC)
	{
		writeCmd(MODE_NORMAL);//8 bit parallel interface + normal
	}
	writeCmd(0x01);
  92:	5d 9b       	sbis	0x0b, 5	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <putchar_UART>
  96:	8c b9       	out	0x0c, r24	; 12
  98:	08 95       	ret

0000009a <print_UART>:
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	ec 01       	movw	r28, r24
  a0:	88 81       	ld	r24, Y
  a2:	88 23       	and	r24, r24
  a4:	39 f0       	breq	.+14     	; 0xb4 <print_UART+0x1a>
  a6:	21 96       	adiw	r28, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 49 00 	call	0x92	; 0x92 <putchar_UART>
  ae:	89 91       	ld	r24, Y+
  b0:	81 11       	cpse	r24, r1
  b2:	fa cf       	rjmp	.-12     	; 0xa8 <print_UART+0xe>
  b4:	df 91       	pop	r29
  b6:	cf 91       	pop	r28
  b8:	08 95       	ret

000000ba <init_UART>:
  ba:	10 bc       	out	0x20, r1	; 32
  bc:	83 e3       	ldi	r24, 0x33	; 51
  be:	89 b9       	out	0x09, r24	; 9
  c0:	86 e8       	ldi	r24, 0x86	; 134
  c2:	80 bd       	out	0x20, r24	; 32
  c4:	88 e9       	ldi	r24, 0x98	; 152
  c6:	8a b9       	out	0x0a, r24	; 10
  c8:	08 95       	ret

000000ca <readBusyFlag>:
  ca:	a9 9a       	sbi	0x15, 1	; 21
  cc:	a8 98       	cbi	0x15, 0	; 21
  ce:	aa 9a       	sbi	0x15, 2	; 21
  d0:	9f ef       	ldi	r25, 0xFF	; 255
  d2:	9b bb       	out	0x1b, r25	; 27
  d4:	1a ba       	out	0x1a, r1	; 26
  d6:	ef e9       	ldi	r30, 0x9F	; 159
  d8:	ff e0       	ldi	r31, 0x0F	; 15
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <readBusyFlag+0x10>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <readBusyFlag+0x16>
  e0:	00 00       	nop
  e2:	89 b3       	in	r24, 0x19	; 25
  e4:	aa 98       	cbi	0x15, 2	; 21
  e6:	9a bb       	out	0x1a, r25	; 26
  e8:	08 95       	ret

000000ea <writeCmd>:
  ea:	cf 93       	push	r28
  ec:	c8 2f       	mov	r28, r24
  ee:	0e 94 65 00 	call	0xca	; 0xca <readBusyFlag>
  f2:	88 23       	and	r24, r24
  f4:	e4 f3       	brlt	.-8      	; 0xee <writeCmd+0x4>
  f6:	a8 98       	cbi	0x15, 0	; 21
  f8:	a9 98       	cbi	0x15, 1	; 21
  fa:	cb bb       	out	0x1b, r28	; 27
  fc:	aa 9a       	sbi	0x15, 2	; 21
  fe:	aa 98       	cbi	0x15, 2	; 21
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <writeData>:
 104:	cf 93       	push	r28
 106:	c8 2f       	mov	r28, r24
 108:	0e 94 65 00 	call	0xca	; 0xca <readBusyFlag>
 10c:	88 23       	and	r24, r24
 10e:	e4 f3       	brlt	.-8      	; 0x108 <writeData+0x4>
 110:	a9 98       	cbi	0x15, 1	; 21
 112:	a8 9a       	sbi	0x15, 0	; 21
 114:	cb bb       	out	0x1b, r28	; 27
 116:	aa 9a       	sbi	0x15, 2	; 21
 118:	aa 98       	cbi	0x15, 2	; 21
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <init_LCD>:
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	80 e7       	ldi	r24, 0x70	; 112
 122:	92 e0       	ldi	r25, 0x02	; 2
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <init_LCD+0x6>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <init_LCD+0x10>
 12e:	00 00       	nop
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	8a bb       	out	0x1a, r24	; 26
 134:	84 b3       	in	r24, 0x14	; 20
 136:	87 60       	ori	r24, 0x07	; 7
 138:	84 bb       	out	0x14, r24	; 20
 13a:	aa 98       	cbi	0x15, 2	; 21
 13c:	a8 98       	cbi	0x15, 0	; 21
 13e:	80 e3       	ldi	r24, 0x30	; 48
 140:	0e 94 75 00 	call	0xea	; 0xea <writeCmd>
 144:	8c e0       	ldi	r24, 0x0C	; 12
 146:	0e 94 75 00 	call	0xea	; 0xea <writeCmd>
 14a:	86 e0       	ldi	r24, 0x06	; 6
 14c:	0e 94 75 00 	call	0xea	; 0xea <writeCmd>
 150:	80 e3       	ldi	r24, 0x30	; 48
 152:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
 156:	08 95       	ret

00000158 <home_LCD>:
 158:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 15c:	86 33       	cpi	r24, 0x36	; 54
 15e:	19 f4       	brne	.+6      	; 0x166 <home_LCD+0xe>
 160:	80 e3       	ldi	r24, 0x30	; 48
 162:	0e 94 75 00 	call	0xea	; 0xea <writeCmd>
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	0e 94 75 00 	call	0xea	; 0xea <writeCmd>
 16c:	80 e3       	ldi	r24, 0x30	; 48
 16e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
 172:	08 95       	ret

00000174 <move_LCD>:
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	c8 2f       	mov	r28, r24
 17a:	d6 2f       	mov	r29, r22
 17c:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 180:	86 33       	cpi	r24, 0x36	; 54
 182:	19 f4       	brne	.+6      	; 0x18a <move_LCD+0x16>
 184:	80 e3       	ldi	r24, 0x30	; 48
 186:	0e 94 75 00 	call	0xea	; 0xea <writeCmd>
 18a:	9f ef       	ldi	r25, 0xFF	; 255
 18c:	9c 0f       	add	r25, r28
 18e:	95 30       	cpi	r25, 0x05	; 5
 190:	d0 f4       	brcc	.+52     	; 0x1c6 <move_LCD+0x52>
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	8d 0f       	add	r24, r29
 196:	91 30       	cpi	r25, 0x01	; 1
 198:	49 f0       	breq	.+18     	; 0x1ac <move_LCD+0x38>
 19a:	28 f0       	brcs	.+10     	; 0x1a6 <move_LCD+0x32>
 19c:	92 30       	cpi	r25, 0x02	; 2
 19e:	49 f0       	breq	.+18     	; 0x1b2 <move_LCD+0x3e>
 1a0:	93 30       	cpi	r25, 0x03	; 3
 1a2:	51 f0       	breq	.+20     	; 0x1b8 <move_LCD+0x44>
 1a4:	0b c0       	rjmp	.+22     	; 0x1bc <move_LCD+0x48>
 1a6:	d1 58       	subi	r29, 0x81	; 129
 1a8:	8d 2b       	or	r24, r29
 1aa:	08 c0       	rjmp	.+16     	; 0x1bc <move_LCD+0x48>
 1ac:	d1 57       	subi	r29, 0x71	; 113
 1ae:	8d 2b       	or	r24, r29
 1b0:	05 c0       	rjmp	.+10     	; 0x1bc <move_LCD+0x48>
 1b2:	d9 57       	subi	r29, 0x79	; 121
 1b4:	8d 2b       	or	r24, r29
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <move_LCD+0x48>
 1b8:	d9 56       	subi	r29, 0x69	; 105
 1ba:	8d 2b       	or	r24, r29
 1bc:	0e 94 75 00 	call	0xea	; 0xea <writeCmd>
 1c0:	80 e3       	ldi	r24, 0x30	; 48
 1c2:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <putChar_LCD>:
 1cc:	cf 93       	push	r28
 1ce:	c8 2f       	mov	r28, r24
 1d0:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 1d4:	86 33       	cpi	r24, 0x36	; 54
 1d6:	19 f4       	brne	.+6      	; 0x1de <putChar_LCD+0x12>
 1d8:	80 e3       	ldi	r24, 0x30	; 48
 1da:	0e 94 75 00 	call	0xea	; 0xea <writeCmd>
 1de:	8c 2f       	mov	r24, r28
 1e0:	0e 94 82 00 	call	0x104	; 0x104 <writeData>
 1e4:	80 e3       	ldi	r24, 0x30	; 48
 1e6:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <clr_GLCD>:
}

void clr_GLCD()
{
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
	if (mode == MODE_NORMAL)
 1f2:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 1f6:	80 33       	cpi	r24, 0x30	; 48
 1f8:	01 f5       	brne	.+64     	; 0x23a <clr_GLCD+0x4c>
	{
		writeCmd(MODE_GRAPHIC);//8 bit parallel interface + normal
 1fa:	86 e3       	ldi	r24, 0x36	; 54
 1fc:	0e 94 75 00 	call	0xea	; 0xea <writeCmd>
 200:	1c c0       	rjmp	.+56     	; 0x23a <clr_GLCD+0x4c>
	}
	
	for(uint8_t x = 0;x < 64; x++)
	{
		writeCmd(0x80 + x%32);// 32 line of first cell
 202:	8d 2f       	mov	r24, r29
 204:	8f 71       	andi	r24, 0x1F	; 31
 206:	80 58       	subi	r24, 0x80	; 128
 208:	0e 94 75 00 	call	0xea	; 0xea <writeCmd>
		writeCmd(0x80 + x/32 * 8);// select cell 1 or 2
 20c:	8d 2f       	mov	r24, r29
 20e:	82 95       	swap	r24
 210:	86 95       	lsr	r24
 212:	87 70       	andi	r24, 0x07	; 7
 214:	88 0f       	add	r24, r24
 216:	88 0f       	add	r24, r24
 218:	88 0f       	add	r24, r24
 21a:	80 58       	subi	r24, 0x80	; 128
 21c:	0e 94 75 00 	call	0xea	; 0xea <writeCmd>
 220:	c0 e1       	ldi	r28, 0x10	; 16
		for(uint8_t y = 0;y < 16; y++)	writeData(0x00);
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	0e 94 82 00 	call	0x104	; 0x104 <writeData>
 228:	c1 50       	subi	r28, 0x01	; 1
 22a:	d9 f7       	brne	.-10     	; 0x222 <clr_GLCD+0x34>
	if (mode == MODE_NORMAL)
	{
		writeCmd(MODE_GRAPHIC);//8 bit parallel interface + normal
	}
	
	for(uint8_t x = 0;x < 64; x++)
 22c:	df 5f       	subi	r29, 0xFF	; 255
 22e:	d0 34       	cpi	r29, 0x40	; 64
 230:	41 f7       	brne	.-48     	; 0x202 <clr_GLCD+0x14>
	{
		writeCmd(0x80 + x%32);// 32 line of first cell
		writeCmd(0x80 + x/32 * 8);// select cell 1 or 2
		for(uint8_t y = 0;y < 16; y++)	writeData(0x00);
	}
	mode = MODE_GRAPHIC;
 232:	86 e3       	ldi	r24, 0x36	; 54
 234:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
 238:	02 c0       	rjmp	.+4      	; 0x23e <clr_GLCD+0x50>
	}
	writeCmd(0x01);
}

void clr_GLCD()
{
 23a:	d0 e0       	ldi	r29, 0x00	; 0
 23c:	e2 cf       	rjmp	.-60     	; 0x202 <clr_GLCD+0x14>
		writeCmd(0x80 + x%32);// 32 line of first cell
		writeCmd(0x80 + x/32 * 8);// select cell 1 or 2
		for(uint8_t y = 0;y < 16; y++)	writeData(0x00);
	}
	mode = MODE_GRAPHIC;
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <main>:



int main(void)
{
	init_UART();
 244:	0e 94 5d 00 	call	0xba	; 0xba <init_UART>
	print_UART("OKE!!!\r\n");
 248:	8d e6       	ldi	r24, 0x6D	; 109
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 4d 00 	call	0x9a	; 0x9a <print_UART>
	
	init_LCD();
 250:	0e 94 8f 00 	call	0x11e	; 0x11e <init_LCD>
	//clr_LCD();
	clr_GLCD();
 254:	0e 94 f7 00 	call	0x1ee	; 0x1ee <clr_GLCD>
	
	home_LCD();
 258:	0e 94 ac 00 	call	0x158	; 0x158 <home_LCD>
	putChar_LCD('a');
 25c:	81 e6       	ldi	r24, 0x61	; 97
 25e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <putChar_LCD>
	move_LCD(3,3);
 262:	63 e0       	ldi	r22, 0x03	; 3
 264:	83 e0       	ldi	r24, 0x03	; 3
 266:	0e 94 ba 00 	call	0x174	; 0x174 <move_LCD>
	putChar_LCD('b');
 26a:	82 e6       	ldi	r24, 0x62	; 98
 26c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <putChar_LCD>
 270:	ff cf       	rjmp	.-2      	; 0x270 <main+0x2c>

00000272 <_exit>:
 272:	f8 94       	cli

00000274 <__stop_program>:
 274:	ff cf       	rjmp	.-2      	; 0x274 <__stop_program>
