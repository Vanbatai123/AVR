
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000232  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000232  000002a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000080  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000810  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000023e  00000000  00000000  00000b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002ba  00000000  00000000  00000daa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000010c  00000000  00000000  00001064  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001ea  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002e1  00000000  00000000  0000135a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000070  00000000  00000000  0000163b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  7a:	0c 94 17 01 	jmp	0x22e	; 0x22e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Write2Nib>:
}

void Write2Nib(uint8_t chr)
{
	uint8_t HNib, LNib, temp_data;
	temp_data=DATA_O & 0x0F; //doc 4 bit thap cua DATA_O de mask,
  82:	2b b3       	in	r18, 0x1b	; 27
  84:	2f 70       	andi	r18, 0x0F	; 15

	HNib=chr & 0xF0;
  86:	98 2f       	mov	r25, r24
  88:	90 7f       	andi	r25, 0xF0	; 240
	LNib=(chr<<4) & 0xF0;

	DATA_O =(HNib |temp_data);
  8a:	92 2b       	or	r25, r18
  8c:	9b bb       	out	0x1b, r25	; 27
	sbi(CTRL,EN); //enable
  8e:	db 9a       	sbi	0x1b, 3	; 27
	cbi(CTRL,EN); //disable
  90:	db 98       	cbi	0x1b, 3	; 27
{
	uint8_t HNib, LNib, temp_data;
	temp_data=DATA_O & 0x0F; //doc 4 bit thap cua DATA_O de mask,

	HNib=chr & 0xF0;
	LNib=(chr<<4) & 0xF0;
  92:	30 e1       	ldi	r19, 0x10	; 16
  94:	83 9f       	mul	r24, r19
  96:	c0 01       	movw	r24, r0
  98:	11 24       	eor	r1, r1

	DATA_O =(HNib |temp_data);
	sbi(CTRL,EN); //enable
	cbi(CTRL,EN); //disable

	DATA_O =(LNib|temp_data);
  9a:	82 2b       	or	r24, r18
  9c:	8b bb       	out	0x1b, r24	; 27
	sbi(CTRL,EN); //enable
  9e:	db 9a       	sbi	0x1b, 3	; 27
	cbi(CTRL,EN); //disable
  a0:	db 98       	cbi	0x1b, 3	; 27
  a2:	08 95       	ret

000000a4 <init_LCD>:
	_delay_ms(1);
}

void init_LCD()
{
	DDR_CTRL=0xFF;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	8a bb       	out	0x1a, r24	; 26
	sbi(DDR_DATA,4);
  a8:	d4 9a       	sbi	0x1a, 4	; 26
	sbi(DDR_DATA,5);
  aa:	d5 9a       	sbi	0x1a, 5	; 26
	sbi(DDR_DATA,6);
  ac:	d6 9a       	sbi	0x1a, 6	; 26
	sbi(DDR_DATA,7);
  ae:	d7 9a       	sbi	0x1a, 7	; 26
	//Function set------------------------------------------------------------------------------
	cbi(CTRL,RS);   // the following data is COMMAND
  b0:	da 98       	cbi	0x1b, 2	; 27
	
	cbi(CTRL, EN);
  b2:	db 98       	cbi	0x1b, 3	; 27
	
	sbi(CTRL,EN); //enable
  b4:	db 9a       	sbi	0x1b, 3	; 27
	sbi(DATA_O, 5);
  b6:	dd 9a       	sbi	0x1b, 5	; 27
	cbi(CTRL,EN); //disable
  b8:	db 98       	cbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	8f ec       	ldi	r24, 0xCF	; 207
  bc:	97 e0       	ldi	r25, 0x07	; 7
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <init_LCD+0x1a>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <init_LCD+0x20>
  c4:	00 00       	nop
	wait_LCD();
	Write2Nib(0x28);//4 bit mode, 2 line, 5x8 font
  c6:	88 e2       	ldi	r24, 0x28	; 40
  c8:	0e 94 41 00 	call	0x82	; 0x82 <Write2Nib>
  cc:	8f ec       	ldi	r24, 0xCF	; 207
  ce:	97 e0       	ldi	r25, 0x07	; 7
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <init_LCD+0x2c>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <init_LCD+0x32>
  d6:	00 00       	nop
	wait_LCD();
	
	//Display control-------------------------------------------------------------------------
	cbi(CTRL,RS); // the following data is COMMAND
  d8:	da 98       	cbi	0x1b, 2	; 27
	
	Write2Nib(0x0C);
  da:	8c e0       	ldi	r24, 0x0C	; 12
  dc:	0e 94 41 00 	call	0x82	; 0x82 <Write2Nib>
  e0:	8f ec       	ldi	r24, 0xCF	; 207
  e2:	97 e0       	ldi	r25, 0x07	; 7
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <init_LCD+0x40>
  e8:	00 c0       	rjmp	.+0      	; 0xea <init_LCD+0x46>
  ea:	00 00       	nop
	//Write2Nib(0x0E);-------------co con tro
	wait_LCD();
	
	//Entry mode set------------------------------------------------------------------------
	cbi(CTRL,RS); // the following data is COMMAND
  ec:	da 98       	cbi	0x1b, 2	; 27
	
	Write2Nib(0x06);
  ee:	86 e0       	ldi	r24, 0x06	; 6
  f0:	0e 94 41 00 	call	0x82	; 0x82 <Write2Nib>
  f4:	8f ec       	ldi	r24, 0xCF	; 207
  f6:	97 e0       	ldi	r25, 0x07	; 7
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <init_LCD+0x54>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <init_LCD+0x5a>
  fe:	00 00       	nop
 100:	08 95       	ret

00000102 <SPI_MasterInit>:
int wData[3]={0, 80, 160}; //wData: du lieu de send

//Khoi dong SPI o che do Master
void SPI_MasterInit(void)
{
	SPI_DDR |=(1<<SCK_PIN)|(1<<MOSI_PIN);
 102:	87 b3       	in	r24, 0x17	; 23
 104:	80 6a       	ori	r24, 0xA0	; 160
 106:	87 bb       	out	0x17, r24	; 23
	SPI_PORT|=(1<<MISO_PIN); //dien tro keo len cho chan MISO
 108:	c6 9a       	sbi	0x18, 6	; 24
	SPCR=(1<<SPIE)|(1<<SPE)|(1<<MSTR)|(1<<CPHA)|(1<<SPR1)|(1<<SPR0);
 10a:	87 ed       	ldi	r24, 0xD7	; 215
 10c:	8d b9       	out	0x0d, r24	; 13
	//SPIE: interrupt, SPE: enable, MSTR: Master mode, CPHA: Phase, SPR1:0: prescaler=128
	//Setup cho cac chan dieu khien dia chi Slave
	ADDRESS_DDR |=(1<<Slave(2))|(1<<Slave(1))|(1<<Slave(0));
 10e:	87 b3       	in	r24, 0x17	; 23
 110:	87 60       	ori	r24, 0x07	; 7
 112:	87 bb       	out	0x17, r24	; 23
	ADDRESS_PORT|=(1<<Slave(2))|(1<<Slave(1))|(1<<Slave(0)); //keo len muc cao de disable Slavers
 114:	88 b3       	in	r24, 0x18	; 24
 116:	87 60       	ori	r24, 0x07	; 7
 118:	88 bb       	out	0x18, r24	; 24
 11a:	08 95       	ret

0000011c <SPI_Transmit>:
}

//Send data, 1 byte, qua SPI
void SPI_Transmit(int i, int data)
{
	cbi(ADDRESS_PORT, Slave(i));
 11c:	48 b3       	in	r20, 0x18	; 24
 11e:	21 e0       	ldi	r18, 0x01	; 1
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	f9 01       	movw	r30, r18
 124:	02 c0       	rjmp	.+4      	; 0x12a <SPI_Transmit+0xe>
 126:	ee 0f       	add	r30, r30
 128:	ff 1f       	adc	r31, r31
 12a:	8a 95       	dec	r24
 12c:	e2 f7       	brpl	.-8      	; 0x126 <SPI_Transmit+0xa>
 12e:	cf 01       	movw	r24, r30
 130:	2e 2f       	mov	r18, r30
 132:	20 95       	com	r18
 134:	42 23       	and	r20, r18
 136:	48 bb       	out	0x18, r20	; 24
	SPDR=data;
 138:	6f b9       	out	0x0f, r22	; 15
	while (inbit(SPSR,SPIF)==0); //cho den khi bit SPIF duoc set, qua trinh truyen ket thuc
 13a:	77 9b       	sbis	0x0e, 7	; 14
 13c:	fe cf       	rjmp	.-4      	; 0x13a <SPI_Transmit+0x1e>
	sbi(ADDRESS_PORT, Slave(i));
 13e:	98 b3       	in	r25, 0x18	; 24
 140:	89 2b       	or	r24, r25
 142:	88 bb       	out	0x18, r24	; 24
 144:	08 95       	ret

00000146 <main>:
}

//chuong trinh chinh
int main()
{
	SPI_MasterInit(); //khoi dong SPI Master
 146:	0e 94 81 00 	call	0x102	; 0x102 <SPI_MasterInit>
	init_LCD();
 14a:	0e 94 52 00 	call	0xa4	; 0xa4 <init_LCD>
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	80 e7       	ldi	r24, 0x70	; 112
 152:	92 e0       	ldi	r25, 0x02	; 2
 154:	21 50       	subi	r18, 0x01	; 1
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <main+0xe>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0x18>
 15e:	00 00       	nop
	_delay_ms(100);	  //cho 1 khoang ngan de Slave kip khoi dong
	while(1)
	{
		SPI_Transmit(0, wData[0]++);
 160:	0f 2e       	mov	r0, r31
 162:	f0 e6       	ldi	r31, 0x60	; 96
 164:	ef 2e       	mov	r14, r31
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	ff 2e       	mov	r15, r31
 16a:	f0 2d       	mov	r31, r0
		if (wData[0]>80) 
		{
			wData[0]=0;
		} 
		_delay_ms(10);	//to Salve 0
		SPI_Transmit(1, wData[1]++);
 16c:	02 e6       	ldi	r16, 0x62	; 98
 16e:	10 e0       	ldi	r17, 0x00	; 0
		if (wData[1]>160)
		{
			wData[1]=80;
 170:	0f 2e       	mov	r0, r31
 172:	f0 e5       	ldi	r31, 0x50	; 80
 174:	af 2e       	mov	r10, r31
 176:	b1 2c       	mov	r11, r1
 178:	f0 2d       	mov	r31, r0
		}
		_delay_ms(10);	//to Salve 1
		SPI_Transmit(2, wData[2]++);
 17a:	c4 e6       	ldi	r28, 0x64	; 100
 17c:	d0 e0       	ldi	r29, 0x00	; 0
		if (wData[2]>240)
		{
			wData[2]=160;
 17e:	0f 2e       	mov	r0, r31
 180:	f0 ea       	ldi	r31, 0xA0	; 160
 182:	cf 2e       	mov	r12, r31
 184:	d1 2c       	mov	r13, r1
 186:	f0 2d       	mov	r31, r0
	SPI_MasterInit(); //khoi dong SPI Master
	init_LCD();
	_delay_ms(100);	  //cho 1 khoang ngan de Slave kip khoi dong
	while(1)
	{
		SPI_Transmit(0, wData[0]++);
 188:	f7 01       	movw	r30, r14
 18a:	60 81       	ld	r22, Z
 18c:	71 81       	ldd	r23, Z+1	; 0x01
 18e:	cb 01       	movw	r24, r22
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	91 83       	std	Z+1, r25	; 0x01
 194:	80 83       	st	Z, r24
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 8e 00 	call	0x11c	; 0x11c <SPI_Transmit>
		if (wData[0]>80) 
 19e:	f7 01       	movw	r30, r14
 1a0:	80 81       	ld	r24, Z
 1a2:	91 81       	ldd	r25, Z+1	; 0x01
 1a4:	81 35       	cpi	r24, 0x51	; 81
 1a6:	91 05       	cpc	r25, r1
 1a8:	14 f0       	brlt	.+4      	; 0x1ae <main+0x68>
		{
			wData[0]=0;
 1aa:	11 82       	std	Z+1, r1	; 0x01
 1ac:	10 82       	st	Z, r1
 1ae:	8f e1       	ldi	r24, 0x1F	; 31
 1b0:	9e e4       	ldi	r25, 0x4E	; 78
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <main+0x6c>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0x72>
 1b8:	00 00       	nop
		} 
		_delay_ms(10);	//to Salve 0
		SPI_Transmit(1, wData[1]++);
 1ba:	f8 01       	movw	r30, r16
 1bc:	60 81       	ld	r22, Z
 1be:	71 81       	ldd	r23, Z+1	; 0x01
 1c0:	cb 01       	movw	r24, r22
 1c2:	01 96       	adiw	r24, 0x01	; 1
 1c4:	91 83       	std	Z+1, r25	; 0x01
 1c6:	80 83       	st	Z, r24
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 8e 00 	call	0x11c	; 0x11c <SPI_Transmit>
		if (wData[1]>160)
 1d0:	f8 01       	movw	r30, r16
 1d2:	80 81       	ld	r24, Z
 1d4:	91 81       	ldd	r25, Z+1	; 0x01
 1d6:	81 3a       	cpi	r24, 0xA1	; 161
 1d8:	91 05       	cpc	r25, r1
 1da:	14 f0       	brlt	.+4      	; 0x1e0 <main+0x9a>
		{
			wData[1]=80;
 1dc:	b1 82       	std	Z+1, r11	; 0x01
 1de:	a0 82       	st	Z, r10
 1e0:	8f e1       	ldi	r24, 0x1F	; 31
 1e2:	9e e4       	ldi	r25, 0x4E	; 78
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <main+0x9e>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <main+0xa4>
 1ea:	00 00       	nop
		}
		_delay_ms(10);	//to Salve 1
		SPI_Transmit(2, wData[2]++);
 1ec:	68 81       	ld	r22, Y
 1ee:	79 81       	ldd	r23, Y+1	; 0x01
 1f0:	cb 01       	movw	r24, r22
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	99 83       	std	Y+1, r25	; 0x01
 1f6:	88 83       	st	Y, r24
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 8e 00 	call	0x11c	; 0x11c <SPI_Transmit>
		if (wData[2]>240)
 200:	88 81       	ld	r24, Y
 202:	99 81       	ldd	r25, Y+1	; 0x01
 204:	81 3f       	cpi	r24, 0xF1	; 241
 206:	91 05       	cpc	r25, r1
 208:	14 f0       	brlt	.+4      	; 0x20e <main+0xc8>
		{
			wData[2]=160;
 20a:	d9 82       	std	Y+1, r13	; 0x01
 20c:	c8 82       	st	Y, r12
 20e:	ef e1       	ldi	r30, 0x1F	; 31
 210:	fe e4       	ldi	r31, 0x4E	; 78
 212:	31 97       	sbiw	r30, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <main+0xcc>
 216:	00 c0       	rjmp	.+0      	; 0x218 <main+0xd2>
 218:	00 00       	nop
 21a:	ff e7       	ldi	r31, 0x7F	; 127
 21c:	28 e3       	ldi	r18, 0x38	; 56
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	f1 50       	subi	r31, 0x01	; 1
 222:	20 40       	sbci	r18, 0x00	; 0
 224:	80 40       	sbci	r24, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <main+0xda>
 228:	00 c0       	rjmp	.+0      	; 0x22a <main+0xe4>
 22a:	00 00       	nop
 22c:	ad cf       	rjmp	.-166    	; 0x188 <main+0x42>

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
