
LED MATRIX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000102  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000028a  00800060  00000102  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001c7  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000013d  00000000  00000000  0000061f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000016b  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  000008c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000178  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000ca  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000b3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3e       	cpi	r26, 0xEA	; 234
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 67 00 	call	0xce	; 0xce <main>
  7a:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <quet>:
	int bit=0x01;
	for (int i=0;i<5;i++)
	{
	
		PORTC=bit;
		PORTA=~ma[giatri-32][i];
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	80 97       	sbiw	r24, 0x20	; 32
  86:	fc 01       	movw	r30, r24
  88:	ee 0f       	add	r30, r30
  8a:	ff 1f       	adc	r31, r31
  8c:	88 0f       	add	r24, r24
  8e:	99 1f       	adc	r25, r25
  90:	88 0f       	add	r24, r24
  92:	99 1f       	adc	r25, r25
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
  98:	e8 0f       	add	r30, r24
  9a:	f9 1f       	adc	r31, r25
  9c:	e0 5a       	subi	r30, 0xA0	; 160
  9e:	ff 4f       	sbci	r31, 0xFF	; 255

				};//5 hang 10 cot:[5][10];
void quet(char giatri)
{
	int bit=0x01;
	for (int i=0;i<5;i++)
  a0:	20 e0       	ldi	r18, 0x00	; 0
  a2:	30 e0       	ldi	r19, 0x00	; 0


				};//5 hang 10 cot:[5][10];
void quet(char giatri)
{
	int bit=0x01;
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
	for (int i=0;i<5;i++)
	{
	
		PORTC=bit;
  a8:	85 bb       	out	0x15, r24	; 21
		PORTA=~ma[giatri-32][i];
  aa:	40 81       	ld	r20, Z
  ac:	32 96       	adiw	r30, 0x02	; 2
  ae:	40 95       	com	r20
  b0:	4b bb       	out	0x1b, r20	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	af ec       	ldi	r26, 0xCF	; 207
  b4:	b7 e0       	ldi	r27, 0x07	; 7
  b6:	11 97       	sbiw	r26, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <quet+0x34>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <quet+0x3a>
  bc:	00 00       	nop
		_delay_ms(1);
		bit<<=1;
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25

				};//5 hang 10 cot:[5][10];
void quet(char giatri)
{
	int bit=0x01;
	for (int i=0;i<5;i++)
  c2:	2f 5f       	subi	r18, 0xFF	; 255
  c4:	3f 4f       	sbci	r19, 0xFF	; 255
  c6:	25 30       	cpi	r18, 0x05	; 5
  c8:	31 05       	cpc	r19, r1
  ca:	71 f7       	brne	.-36     	; 0xa8 <quet+0x26>
		PORTA=~ma[giatri-32][i];
		_delay_ms(1);
		bit<<=1;
	}
	
}
  cc:	08 95       	ret

000000ce <main>:
int main(void)
{
	DDRA=0xff;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	8a bb       	out	0x1a, r24	; 26
	PORTC=0XFF;
  d2:	85 bb       	out	0x15, r24	; 21
	DDRC=0XFF;
  d4:	84 bb       	out	0x14, r24	; 20
    while(1)
    {
		for (char j=' ';j<='Z';j++)
  d6:	10 e2       	ldi	r17, 0x20	; 32
		bit<<=1;
	}
	
}
int main(void)
{
  d8:	0f 2e       	mov	r0, r31
  da:	fa e0       	ldi	r31, 0x0A	; 10
  dc:	ff 2e       	mov	r15, r31
  de:	f0 2d       	mov	r31, r0
  e0:	00 e0       	ldi	r16, 0x00	; 0
  e2:	0a c0       	rjmp	.+20     	; 0xf8 <main+0x2a>
		for (char j=' ';j<='Z';j++)
		{
			for (int x=0;x<10;x++)
			{
			
			quet(j);
  e4:	81 2f       	mov	r24, r17
  e6:	0e 94 41 00 	call	0x82	; 0x82 <quet>
  ea:	21 97       	sbiw	r28, 0x01	; 1
	DDRC=0XFF;
    while(1)
    {
		for (char j=' ';j<='Z';j++)
		{
			for (int x=0;x<10;x++)
  ec:	20 97       	sbiw	r28, 0x00	; 0
  ee:	d1 f7       	brne	.-12     	; 0xe4 <main+0x16>
	DDRA=0xff;
	PORTC=0XFF;
	DDRC=0XFF;
    while(1)
    {
		for (char j=' ';j<='Z';j++)
  f0:	1f 5f       	subi	r17, 0xFF	; 255
  f2:	1b 35       	cpi	r17, 0x5B	; 91
  f4:	08 f0       	brcs	.+2      	; 0xf8 <main+0x2a>
  f6:	10 e2       	ldi	r17, 0x20	; 32
		bit<<=1;
	}
	
}
int main(void)
{
  f8:	cf 2d       	mov	r28, r15
  fa:	d0 2f       	mov	r29, r16
  fc:	f3 cf       	rjmp	.-26     	; 0xe4 <main+0x16>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
