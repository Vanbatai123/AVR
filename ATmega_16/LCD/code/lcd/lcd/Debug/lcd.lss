
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  0000019c  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000070  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000688  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000219  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000025c  00000000  00000000  00000b71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000ec  00000000  00000000  00000dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001cc  00000000  00000000  00000ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002ba  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00001342  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  7a:	0c 94 cc 00 	jmp	0x198	; 0x198 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Write2Nib>:
}

void Write2Nib(uint8_t chr)
{
	uint8_t HNib, LNib, temp_data;
	temp_data=DATA_O & 0x0F; //doc 4 bit thap cua DATA_O de mask,
  82:	2b b3       	in	r18, 0x1b	; 27
  84:	2f 70       	andi	r18, 0x0F	; 15

	HNib=chr & 0xF0;
  86:	98 2f       	mov	r25, r24
  88:	90 7f       	andi	r25, 0xF0	; 240
	LNib=(chr<<4) & 0xF0;

	DATA_O =(HNib |temp_data);
  8a:	92 2b       	or	r25, r18
  8c:	9b bb       	out	0x1b, r25	; 27
	sbi(CTRL,EN); //enable
  8e:	db 9a       	sbi	0x1b, 3	; 27
	cbi(CTRL,EN); //disable
  90:	db 98       	cbi	0x1b, 3	; 27
{
	uint8_t HNib, LNib, temp_data;
	temp_data=DATA_O & 0x0F; //doc 4 bit thap cua DATA_O de mask,

	HNib=chr & 0xF0;
	LNib=(chr<<4) & 0xF0;
  92:	30 e1       	ldi	r19, 0x10	; 16
  94:	83 9f       	mul	r24, r19
  96:	c0 01       	movw	r24, r0
  98:	11 24       	eor	r1, r1

	DATA_O =(HNib |temp_data);
	sbi(CTRL,EN); //enable
	cbi(CTRL,EN); //disable

	DATA_O =(LNib|temp_data);
  9a:	82 2b       	or	r24, r18
  9c:	8b bb       	out	0x1b, r24	; 27
	sbi(CTRL,EN); //enable
  9e:	db 9a       	sbi	0x1b, 3	; 27
	cbi(CTRL,EN); //disable
  a0:	db 98       	cbi	0x1b, 3	; 27
  a2:	08 95       	ret

000000a4 <init_LCD>:
	_delay_ms(1);
}

void init_LCD()
{
	DDR_CTRL=0xFF;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	8a bb       	out	0x1a, r24	; 26
	sbi(DDR_DATA,4);
  a8:	d4 9a       	sbi	0x1a, 4	; 26
	sbi(DDR_DATA,5);
  aa:	d5 9a       	sbi	0x1a, 5	; 26
	sbi(DDR_DATA,6);
  ac:	d6 9a       	sbi	0x1a, 6	; 26
	sbi(DDR_DATA,7);
  ae:	d7 9a       	sbi	0x1a, 7	; 26
	//Function set------------------------------------------------------------------------------
	cbi(CTRL,RS);   // the following data is COMMAND
  b0:	da 98       	cbi	0x1b, 2	; 27
	
	cbi(CTRL, EN);
  b2:	db 98       	cbi	0x1b, 3	; 27
	
	sbi(CTRL,EN); //enable
  b4:	db 9a       	sbi	0x1b, 3	; 27
	sbi(DATA_O, 5);
  b6:	dd 9a       	sbi	0x1b, 5	; 27
	cbi(CTRL,EN); //disable
  b8:	db 98       	cbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	8f e9       	ldi	r24, 0x9F	; 159
  bc:	9f e0       	ldi	r25, 0x0F	; 15
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <init_LCD+0x1a>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <init_LCD+0x20>
  c4:	00 00       	nop
	wait_LCD();
	Write2Nib(0x28);//4 bit mode, 2 line, 5x8 font
  c6:	88 e2       	ldi	r24, 0x28	; 40
  c8:	0e 94 41 00 	call	0x82	; 0x82 <Write2Nib>
  cc:	8f e9       	ldi	r24, 0x9F	; 159
  ce:	9f e0       	ldi	r25, 0x0F	; 15
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <init_LCD+0x2c>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <init_LCD+0x32>
  d6:	00 00       	nop
	wait_LCD();
	
	//Display control-------------------------------------------------------------------------
	cbi(CTRL,RS); // the following data is COMMAND
  d8:	da 98       	cbi	0x1b, 2	; 27
	
	Write2Nib(0x0C);
  da:	8c e0       	ldi	r24, 0x0C	; 12
  dc:	0e 94 41 00 	call	0x82	; 0x82 <Write2Nib>
  e0:	8f e9       	ldi	r24, 0x9F	; 159
  e2:	9f e0       	ldi	r25, 0x0F	; 15
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <init_LCD+0x40>
  e8:	00 c0       	rjmp	.+0      	; 0xea <init_LCD+0x46>
  ea:	00 00       	nop
	//Write2Nib(0x0E);-------------co con tro
	wait_LCD();
	
	//Entry mode set------------------------------------------------------------------------
	cbi(CTRL,RS); // the following data is COMMAND
  ec:	da 98       	cbi	0x1b, 2	; 27
	
	Write2Nib(0x06);
  ee:	86 e0       	ldi	r24, 0x06	; 6
  f0:	0e 94 41 00 	call	0x82	; 0x82 <Write2Nib>
  f4:	8f e9       	ldi	r24, 0x9F	; 159
  f6:	9f e0       	ldi	r25, 0x0F	; 15
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <init_LCD+0x54>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <init_LCD+0x5a>
  fe:	00 00       	nop
 100:	08 95       	ret

00000102 <move_LCD>:
}
void move_LCD(uint8_t y,uint8_t x)
{
	uint8_t Ad;
	Ad=64*(y-1)+(x-1)+0x80; // tính mã l?nh
	cbi(CTRL,RS); // the following data is COMMAND
 102:	da 98       	cbi	0x1b, 2	; 27
	
}
void move_LCD(uint8_t y,uint8_t x)
{
	uint8_t Ad;
	Ad=64*(y-1)+(x-1)+0x80; // tính mã l?nh
 104:	90 e4       	ldi	r25, 0x40	; 64
 106:	89 9f       	mul	r24, r25
 108:	60 0d       	add	r22, r0
 10a:	11 24       	eor	r1, r1
 10c:	86 2f       	mov	r24, r22
	cbi(CTRL,RS); // the following data is COMMAND
	
	Write2Nib(Ad);
 10e:	81 5c       	subi	r24, 0xC1	; 193
 110:	0e 94 41 00 	call	0x82	; 0x82 <Write2Nib>
 114:	8f e9       	ldi	r24, 0x9F	; 159
 116:	9f e0       	ldi	r25, 0x0F	; 15
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <move_LCD+0x16>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <move_LCD+0x1c>
 11e:	00 00       	nop
 120:	08 95       	ret

00000122 <putChar_LCD>:
}


void putChar_LCD(uint8_t chr)
{ //hi?n th? 1 ký t? chr lên LCD
	sbi(CTRL,RS); //this is a normal DATA
 122:	da 9a       	sbi	0x1b, 2	; 27
	
	Write2Nib(chr);
 124:	0e 94 41 00 	call	0x82	; 0x82 <Write2Nib>
 128:	8f e9       	ldi	r24, 0x9F	; 159
 12a:	9f e0       	ldi	r25, 0x0F	; 15
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <putChar_LCD+0xa>
 130:	00 c0       	rjmp	.+0      	; 0x132 <putChar_LCD+0x10>
 132:	00 00       	nop
 134:	08 95       	ret

00000136 <print_LCD>:
	wait_LCD();
	
}
void print_LCD(char* str)//******__HIEN THI CHUOI KI TU__*********************
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	ec 01       	movw	r28, r24
	int i;
	for (i=0; str[i]!=0; i++) 
 13c:	88 81       	ld	r24, Y
 13e:	88 23       	and	r24, r24
 140:	31 f0       	breq	.+12     	; 0x14e <print_LCD+0x18>
 142:	21 96       	adiw	r28, 0x01	; 1
	putChar_LCD(str[i]);
 144:	0e 94 91 00 	call	0x122	; 0x122 <putChar_LCD>
	
}
void print_LCD(char* str)//******__HIEN THI CHUOI KI TU__*********************
{
	int i;
	for (i=0; str[i]!=0; i++) 
 148:	89 91       	ld	r24, Y+
 14a:	81 11       	cpse	r24, r1
 14c:	fb cf       	rjmp	.-10     	; 0x144 <print_LCD+0xe>
	putChar_LCD(str[i]);
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <clr_LCD>:
void clr_LCD()
{ //xóa toàn b? LCD
	//cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
	//Write2Nib(0x01);
	//wait_LCD();
	move_LCD(1,1);
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 81 00 	call	0x102	; 0x102 <move_LCD>
	print_LCD("                ");
 15c:	83 e6       	ldi	r24, 0x63	; 99
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 9b 00 	call	0x136	; 0x136 <print_LCD>
	move_LCD(2,1);
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	0e 94 81 00 	call	0x102	; 0x102 <move_LCD>
	print_LCD("                ");
 16c:	83 e6       	ldi	r24, 0x63	; 99
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 9b 00 	call	0x136	; 0x136 <print_LCD>
	move_LCD(1,1);
 174:	61 e0       	ldi	r22, 0x01	; 1
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	0e 94 81 00 	call	0x102	; 0x102 <move_LCD>
 17c:	08 95       	ret

0000017e <main>:
#define inbit(thanhghi,bit) (thanhghi&(1<<bit))>>bit

int main(void)
{
	
	init_LCD();
 17e:	0e 94 52 00 	call	0xa4	; 0xa4 <init_LCD>
	clr_LCD();
 182:	0e 94 aa 00 	call	0x154	; 0x154 <clr_LCD>
    while(1)
    {
		move_LCD(1,1);
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 81 00 	call	0x102	; 0x102 <move_LCD>
		print_LCD("van ba tai");
 18e:	84 e7       	ldi	r24, 0x74	; 116
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 9b 00 	call	0x136	; 0x136 <print_LCD>
 196:	f7 cf       	rjmp	.-18     	; 0x186 <main+0x8>

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
