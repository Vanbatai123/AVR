
DS1307_BY_ME.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000008be  00000952  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800074  00800074  00000966  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000966  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000009c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a44  00000000  00000000  00000a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000242  00000000  00000000  000014be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037e  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000017c  00000000  00000000  00001a80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000279  00000000  00000000  00001bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000303  00000000  00000000  00001e75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00002178  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 37       	cpi	r26, 0x78	; 120
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 82 01 	call	0x304	; 0x304 <main>
  8a:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Write2Nib>:
}

void Write2Nib(uint8_t chr)
{
	uint8_t HNib, LNib, temp_data;
	temp_data=DATA_O & 0x0F; //doc 4 bit thap cua DATA_O de mask,
  92:	25 b3       	in	r18, 0x15	; 21
  94:	2f 70       	andi	r18, 0x0F	; 15

	HNib=chr & 0xF0;
  96:	98 2f       	mov	r25, r24
  98:	90 7f       	andi	r25, 0xF0	; 240
	LNib=(chr<<4) & 0xF0;

	DATA_O =(HNib |temp_data);
  9a:	92 2b       	or	r25, r18
  9c:	95 bb       	out	0x15, r25	; 21
	sbi(CTRL,EN); //enable
  9e:	ab 9a       	sbi	0x15, 3	; 21
	cbi(CTRL,EN); //disable
  a0:	ab 98       	cbi	0x15, 3	; 21
{
	uint8_t HNib, LNib, temp_data;
	temp_data=DATA_O & 0x0F; //doc 4 bit thap cua DATA_O de mask,

	HNib=chr & 0xF0;
	LNib=(chr<<4) & 0xF0;
  a2:	30 e1       	ldi	r19, 0x10	; 16
  a4:	83 9f       	mul	r24, r19
  a6:	c0 01       	movw	r24, r0
  a8:	11 24       	eor	r1, r1

	DATA_O =(HNib |temp_data);
	sbi(CTRL,EN); //enable
	cbi(CTRL,EN); //disable

	DATA_O =(LNib|temp_data);
  aa:	82 2b       	or	r24, r18
  ac:	85 bb       	out	0x15, r24	; 21
	sbi(CTRL,EN); //enable
  ae:	ab 9a       	sbi	0x15, 3	; 21
	cbi(CTRL,EN); //disable
  b0:	ab 98       	cbi	0x15, 3	; 21
  b2:	08 95       	ret

000000b4 <init_LCD>:
	_delay_ms(1);
}

void init_LCD()
{
	DDR_CTRL=0xFF;
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	84 bb       	out	0x14, r24	; 20
	sbi(DDR_DATA,4);
  b8:	a4 9a       	sbi	0x14, 4	; 20
	sbi(DDR_DATA,5);
  ba:	a5 9a       	sbi	0x14, 5	; 20
	sbi(DDR_DATA,6);
  bc:	a6 9a       	sbi	0x14, 6	; 20
	sbi(DDR_DATA,7);
  be:	a7 9a       	sbi	0x14, 7	; 20
	//Function set------------------------------------------------------------------------------
	cbi(CTRL,RS);   // the following data is COMMAND
  c0:	aa 98       	cbi	0x15, 2	; 21
	
	cbi(CTRL, EN);
  c2:	ab 98       	cbi	0x15, 3	; 21
	
	sbi(CTRL,EN); //enable
  c4:	ab 9a       	sbi	0x15, 3	; 21
	sbi(DATA_O, 5);
  c6:	ad 9a       	sbi	0x15, 5	; 21
	cbi(CTRL,EN); //disable
  c8:	ab 98       	cbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	8f ec       	ldi	r24, 0xCF	; 207
  cc:	97 e0       	ldi	r25, 0x07	; 7
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <init_LCD+0x1a>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <init_LCD+0x20>
  d4:	00 00       	nop
	wait_LCD();
	Write2Nib(0x28);//4 bit mode, 2 line, 5x8 font
  d6:	88 e2       	ldi	r24, 0x28	; 40
  d8:	0e 94 49 00 	call	0x92	; 0x92 <Write2Nib>
  dc:	8f ec       	ldi	r24, 0xCF	; 207
  de:	97 e0       	ldi	r25, 0x07	; 7
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <init_LCD+0x2c>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <init_LCD+0x32>
  e6:	00 00       	nop
	wait_LCD();
	
	//Display control-------------------------------------------------------------------------
	cbi(CTRL,RS); // the following data is COMMAND
  e8:	aa 98       	cbi	0x15, 2	; 21
	
	Write2Nib(0x0C);
  ea:	8c e0       	ldi	r24, 0x0C	; 12
  ec:	0e 94 49 00 	call	0x92	; 0x92 <Write2Nib>
  f0:	8f ec       	ldi	r24, 0xCF	; 207
  f2:	97 e0       	ldi	r25, 0x07	; 7
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <init_LCD+0x40>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <init_LCD+0x46>
  fa:	00 00       	nop
	//Write2Nib(0x0E);-------------co con tro
	wait_LCD();
	
	//Entry mode set------------------------------------------------------------------------
	cbi(CTRL,RS); // the following data is COMMAND
  fc:	aa 98       	cbi	0x15, 2	; 21
	
	Write2Nib(0x06);
  fe:	86 e0       	ldi	r24, 0x06	; 6
 100:	0e 94 49 00 	call	0x92	; 0x92 <Write2Nib>
 104:	8f ec       	ldi	r24, 0xCF	; 207
 106:	97 e0       	ldi	r25, 0x07	; 7
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <init_LCD+0x54>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <init_LCD+0x5a>
 10e:	00 00       	nop
 110:	08 95       	ret

00000112 <move_LCD>:
}
void move_LCD(uint8_t y,uint8_t x)
{
	uint8_t Ad;
	Ad=64*(y-1)+(x-1)+0x80; // tính mã l?nh
	cbi(CTRL,RS); // the following data is COMMAND
 112:	aa 98       	cbi	0x15, 2	; 21
	
}
void move_LCD(uint8_t y,uint8_t x)
{
	uint8_t Ad;
	Ad=64*(y-1)+(x-1)+0x80; // tính mã l?nh
 114:	90 e4       	ldi	r25, 0x40	; 64
 116:	89 9f       	mul	r24, r25
 118:	60 0d       	add	r22, r0
 11a:	11 24       	eor	r1, r1
 11c:	86 2f       	mov	r24, r22
	cbi(CTRL,RS); // the following data is COMMAND
	
	Write2Nib(Ad);
 11e:	81 5c       	subi	r24, 0xC1	; 193
 120:	0e 94 49 00 	call	0x92	; 0x92 <Write2Nib>
 124:	8f ec       	ldi	r24, 0xCF	; 207
 126:	97 e0       	ldi	r25, 0x07	; 7
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <move_LCD+0x16>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <move_LCD+0x1c>
 12e:	00 00       	nop
 130:	08 95       	ret

00000132 <putChar_LCD>:
}


void putChar_LCD(uint8_t chr)
{ //hi?n th? 1 ký t? chr lên LCD
	sbi(CTRL,RS); //this is a normal DATA
 132:	aa 9a       	sbi	0x15, 2	; 21
	
	Write2Nib(chr);
 134:	0e 94 49 00 	call	0x92	; 0x92 <Write2Nib>
 138:	8f ec       	ldi	r24, 0xCF	; 207
 13a:	97 e0       	ldi	r25, 0x07	; 7
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <putChar_LCD+0xa>
 140:	00 c0       	rjmp	.+0      	; 0x142 <putChar_LCD+0x10>
 142:	00 00       	nop
 144:	08 95       	ret

00000146 <print_LCD>:
	wait_LCD();
	
}
void print_LCD(char* str)//******__HIEN THI CHUOI KI TU__*********************
{
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	ec 01       	movw	r28, r24
	int i;
	for (i=0; str[i]!=0; i++) 
 14c:	88 81       	ld	r24, Y
 14e:	88 23       	and	r24, r24
 150:	31 f0       	breq	.+12     	; 0x15e <print_LCD+0x18>
 152:	21 96       	adiw	r28, 0x01	; 1
	putChar_LCD(str[i]);
 154:	0e 94 99 00 	call	0x132	; 0x132 <putChar_LCD>
	
}
void print_LCD(char* str)//******__HIEN THI CHUOI KI TU__*********************
{
	int i;
	for (i=0; str[i]!=0; i++) 
 158:	89 91       	ld	r24, Y+
 15a:	81 11       	cpse	r24, r1
 15c:	fb cf       	rjmp	.-10     	; 0x154 <print_LCD+0xe>
	putChar_LCD(str[i]);
}
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <vietso_LCD>:
void vietso_LCD(int num)
{
 164:	0f 93       	push	r16
 166:	1f 93       	push	r17
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
 170:	2a 97       	sbiw	r28, 0x0a	; 10
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	f8 94       	cli
 176:	de bf       	out	0x3e, r29	; 62
 178:	0f be       	out	0x3f, r0	; 63
 17a:	cd bf       	out	0x3d, r28	; 61
	char dis[10];
	sprintf(dis, "%d", num);
 17c:	9f 93       	push	r25
 17e:	8f 93       	push	r24
 180:	80 e6       	ldi	r24, 0x60	; 96
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	9f 93       	push	r25
 186:	8f 93       	push	r24
 188:	8e 01       	movw	r16, r28
 18a:	0f 5f       	subi	r16, 0xFF	; 255
 18c:	1f 4f       	sbci	r17, 0xFF	; 255
 18e:	1f 93       	push	r17
 190:	0f 93       	push	r16
 192:	0e 94 8c 01 	call	0x318	; 0x318 <sprintf>
	print_LCD(dis);
 196:	c8 01       	movw	r24, r16
 198:	0e 94 a3 00 	call	0x146	; 0x146 <print_LCD>
 19c:	0f 90       	pop	r0
 19e:	0f 90       	pop	r0
 1a0:	0f 90       	pop	r0
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	0f 90       	pop	r0
}
 1a8:	2a 96       	adiw	r28, 0x0a	; 10
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	f8 94       	cli
 1ae:	de bf       	out	0x3e, r29	; 62
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	cd bf       	out	0x3d, r28	; 61
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	08 95       	ret

000001be <i2c_start>:
char count, second;
int dataa;

void i2c_start()
{
	write_data;
 1be:	89 9a       	sbi	0x11, 1	; 17
	I2C_PORT|=(1<<SDA)|(1<<SCL);
 1c0:	82 b3       	in	r24, 0x12	; 18
 1c2:	83 60       	ori	r24, 0x03	; 3
 1c4:	82 bb       	out	0x12, r24	; 18
	clrb(I2C_PORT, SDA);
 1c6:	91 98       	cbi	0x12, 1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c8:	8a e1       	ldi	r24, 0x1A	; 26
 1ca:	8a 95       	dec	r24
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <i2c_start+0xc>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <i2c_start+0x12>
 1d0:	08 95       	ret

000001d2 <i2c_stop>:
	_delay_us(10);
	
}
void i2c_stop()
{
	write_data;
 1d2:	89 9a       	sbi	0x11, 1	; 17
	I2C_PORT|=(0<<SDA)|(1<<SCL);
 1d4:	90 9a       	sbi	0x12, 0	; 18
 1d6:	8a e1       	ldi	r24, 0x1A	; 26
 1d8:	8a 95       	dec	r24
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <i2c_stop+0x6>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <i2c_stop+0xc>
	_delay_us(10);
	setb(I2C_PORT, SDA);
 1de:	91 9a       	sbi	0x12, 1	; 18
 1e0:	08 95       	ret

000001e2 <i2c_write1byte>:
}
void i2c_write1byte(int data)
{
	write_data;
 1e2:	89 9a       	sbi	0x11, 1	; 17
	clrb(I2C_PORT, SCL);
 1e4:	90 98       	cbi	0x12, 0	; 18
	for (count = 0; count < 8; count++)
 1e6:	10 92 77 00 	sts	0x0077, r1
	{
		if ((data & 0x80) == 0x80)
 1ea:	87 ff       	sbrs	r24, 7
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <i2c_write1byte+0x10>
			setb(I2C_PORT, SDA);
 1ee:	91 9a       	sbi	0x12, 1	; 18
 1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <i2c_write1byte+0x12>
		else
			clrb(I2C_PORT, SDA);
 1f2:	91 98       	cbi	0x12, 1	; 18
		setb(I2C_PORT, SCL);
 1f4:	90 9a       	sbi	0x12, 0	; 18
 1f6:	2a e1       	ldi	r18, 0x1A	; 26
 1f8:	2a 95       	dec	r18
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <i2c_write1byte+0x16>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <i2c_write1byte+0x1c>
		_delay_us(10);
		clrb(I2C_PORT, SCL);
 1fe:	90 98       	cbi	0x12, 0	; 18
		data = data<<1;
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
}
void i2c_write1byte(int data)
{
	write_data;
	clrb(I2C_PORT, SCL);
	for (count = 0; count < 8; count++)
 204:	20 91 77 00 	lds	r18, 0x0077
 208:	2f 5f       	subi	r18, 0xFF	; 255
 20a:	20 93 77 00 	sts	0x0077, r18
 20e:	28 30       	cpi	r18, 0x08	; 8
 210:	60 f3       	brcs	.-40     	; 0x1ea <i2c_write1byte+0x8>
		setb(I2C_PORT, SCL);
		_delay_us(10);
		clrb(I2C_PORT, SCL);
		data = data<<1;
	}
}
 212:	08 95       	ret

00000214 <i2c_read1byte>:
int i2c_read1byte()
{
	read_data;
 214:	89 98       	cbi	0x11, 1	; 17
	I2C_PORT|=(0<<SCL);
 216:	82 b3       	in	r24, 0x12	; 18
 218:	82 bb       	out	0x12, r24	; 18
	for (count = 0; count < 8; count++)
 21a:	10 92 77 00 	sts	0x0077, r1
	{
		setb(I2C_PORT, SCL);
 21e:	90 9a       	sbi	0x12, 0	; 18
		if (inbit(I2C_PIN, SDA))
 220:	81 9b       	sbis	0x10, 1	; 16
 222:	0c c0       	rjmp	.+24     	; 0x23c <i2c_read1byte+0x28>
			dataa = (dataa<<1) + 1;
 224:	80 91 75 00 	lds	r24, 0x0075
 228:	90 91 76 00 	lds	r25, 0x0076
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	01 96       	adiw	r24, 0x01	; 1
 232:	90 93 76 00 	sts	0x0076, r25
 236:	80 93 75 00 	sts	0x0075, r24
 23a:	0a c0       	rjmp	.+20     	; 0x250 <i2c_read1byte+0x3c>
		else
			dataa = dataa<<1;
 23c:	80 91 75 00 	lds	r24, 0x0075
 240:	90 91 76 00 	lds	r25, 0x0076
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	90 93 76 00 	sts	0x0076, r25
 24c:	80 93 75 00 	sts	0x0075, r24
 250:	8a e1       	ldi	r24, 0x1A	; 26
 252:	8a 95       	dec	r24
 254:	f1 f7       	brne	.-4      	; 0x252 <i2c_read1byte+0x3e>
 256:	00 c0       	rjmp	.+0      	; 0x258 <i2c_read1byte+0x44>
		_delay_us(10);
		clrb(I2C_PORT, SCL);
 258:	90 98       	cbi	0x12, 0	; 18
}
int i2c_read1byte()
{
	read_data;
	I2C_PORT|=(0<<SCL);
	for (count = 0; count < 8; count++)
 25a:	80 91 77 00 	lds	r24, 0x0077
 25e:	8f 5f       	subi	r24, 0xFF	; 255
 260:	80 93 77 00 	sts	0x0077, r24
 264:	88 30       	cpi	r24, 0x08	; 8
 266:	d8 f2       	brcs	.-74     	; 0x21e <i2c_read1byte+0xa>
			dataa = dataa<<1;
		_delay_us(10);
		clrb(I2C_PORT, SCL);
	}
	return dataa;
}
 268:	80 91 75 00 	lds	r24, 0x0075
 26c:	90 91 76 00 	lds	r25, 0x0076
 270:	08 95       	ret

00000272 <i2c_read_ack>:
void i2c_read_ack()
{
	read_data;
 272:	89 98       	cbi	0x11, 1	; 17
	setb(I2C_PORT, SCL);
 274:	90 9a       	sbi	0x12, 0	; 18
 276:	8a e1       	ldi	r24, 0x1A	; 26
 278:	8a 95       	dec	r24
 27a:	f1 f7       	brne	.-4      	; 0x278 <i2c_read_ack+0x6>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <i2c_read_ack+0xc>
	_delay_us(10);
	clrb(I2C_PORT, SCL);
 27e:	90 98       	cbi	0x12, 0	; 18
 280:	08 95       	ret

00000282 <i2c_write_ack>:
}
void i2c_write_ack()
{
	write_data;
 282:	89 9a       	sbi	0x11, 1	; 17
	clrb(I2C_PORT, SDA);
 284:	91 98       	cbi	0x12, 1	; 18
	setb(I2C_PORT, SCL);
 286:	90 9a       	sbi	0x12, 0	; 18
 288:	8a e1       	ldi	r24, 0x1A	; 26
 28a:	8a 95       	dec	r24
 28c:	f1 f7       	brne	.-4      	; 0x28a <i2c_write_ack+0x8>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <i2c_write_ack+0xe>
	_delay_us(10);
	clrb(I2C_PORT, SCL);
 290:	90 98       	cbi	0x12, 0	; 18
 292:	08 95       	ret

00000294 <i2c_WRbit>:
	_delay_us(10);
	clrb(I2C_PORT, SCL);
}
void i2c_WRbit(char wr)
{
	if (wr)
 294:	88 23       	and	r24, r24
 296:	11 f0       	breq	.+4      	; 0x29c <i2c_WRbit+0x8>
		setb(I2C_PORT, SDA);
 298:	91 9a       	sbi	0x12, 1	; 18
 29a:	01 c0       	rjmp	.+2      	; 0x29e <i2c_WRbit+0xa>
	else
		clrb(I2C_PORT, SDA);
 29c:	91 98       	cbi	0x12, 1	; 18
	setb(I2C_PORT, SCL);
 29e:	90 9a       	sbi	0x12, 0	; 18
 2a0:	8a e1       	ldi	r24, 0x1A	; 26
 2a2:	8a 95       	dec	r24
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <i2c_WRbit+0xe>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <i2c_WRbit+0x14>
	_delay_us(10);
	clrb(I2C_PORT, SCL);
 2a8:	90 98       	cbi	0x12, 0	; 18
 2aa:	08 95       	ret

000002ac <i2c_read>:
}
void i2c_read()
{
	i2c_start();
 2ac:	0e 94 df 00 	call	0x1be	; 0x1be <i2c_start>
	i2c_write1byte(0xD0);
 2b0:	80 ed       	ldi	r24, 0xD0	; 208
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <i2c_write1byte>
	i2c_WRbit(0);
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	0e 94 4a 01 	call	0x294	; 0x294 <i2c_WRbit>
	i2c_read_ack();
 2be:	0e 94 39 01 	call	0x272	; 0x272 <i2c_read_ack>
	i2c_write1byte(0x00);
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <i2c_write1byte>
	i2c_start();
 2ca:	0e 94 df 00 	call	0x1be	; 0x1be <i2c_start>
	i2c_write1byte(0xD0);
 2ce:	80 ed       	ldi	r24, 0xD0	; 208
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <i2c_write1byte>
	i2c_WRbit(1);
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0e 94 4a 01 	call	0x294	; 0x294 <i2c_WRbit>
	i2c_read_ack();
 2dc:	0e 94 39 01 	call	0x272	; 0x272 <i2c_read_ack>
	second = i2c_read1byte();
 2e0:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_read1byte>
 2e4:	80 93 74 00 	sts	0x0074, r24
	i2c_write_ack();
 2e8:	0e 94 41 01 	call	0x282	; 0x282 <i2c_write_ack>
	i2c_stop();
 2ec:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <i2c_stop>
	move_LCD(1,1);
 2f0:	61 e0       	ldi	r22, 0x01	; 1
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	0e 94 89 00 	call	0x112	; 0x112 <move_LCD>
	vietso_LCD(second);
 2f8:	80 91 74 00 	lds	r24, 0x0074
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 b2 00 	call	0x164	; 0x164 <vietso_LCD>
 302:	08 95       	ret

00000304 <main>:
}
int main(void)
{
	I2C_PORT|=(0<<SDA)|(0<<SCL);
 304:	82 b3       	in	r24, 0x12	; 18
 306:	82 bb       	out	0x12, r24	; 18
	I2C_DDR|=(1<<SDA)|(1<<SCL); 
 308:	81 b3       	in	r24, 0x11	; 17
 30a:	83 60       	ori	r24, 0x03	; 3
 30c:	81 bb       	out	0x11, r24	; 17
	init_LCD();
 30e:	0e 94 5a 00 	call	0xb4	; 0xb4 <init_LCD>
	while(1)
	{
		i2c_read();
 312:	0e 94 56 01 	call	0x2ac	; 0x2ac <i2c_read>
 316:	fd cf       	rjmp	.-6      	; 0x312 <main+0xe>

00000318 <sprintf>:
 318:	ae e0       	ldi	r26, 0x0E	; 14
 31a:	b0 e0       	ldi	r27, 0x00	; 0
 31c:	e2 e9       	ldi	r30, 0x92	; 146
 31e:	f1 e0       	ldi	r31, 0x01	; 1
 320:	0c 94 34 04 	jmp	0x868	; 0x868 <__prologue_saves__+0x1c>
 324:	0d 89       	ldd	r16, Y+21	; 0x15
 326:	1e 89       	ldd	r17, Y+22	; 0x16
 328:	86 e0       	ldi	r24, 0x06	; 6
 32a:	8c 83       	std	Y+4, r24	; 0x04
 32c:	1a 83       	std	Y+2, r17	; 0x02
 32e:	09 83       	std	Y+1, r16	; 0x01
 330:	8f ef       	ldi	r24, 0xFF	; 255
 332:	9f e7       	ldi	r25, 0x7F	; 127
 334:	9e 83       	std	Y+6, r25	; 0x06
 336:	8d 83       	std	Y+5, r24	; 0x05
 338:	ae 01       	movw	r20, r28
 33a:	47 5e       	subi	r20, 0xE7	; 231
 33c:	5f 4f       	sbci	r21, 0xFF	; 255
 33e:	6f 89       	ldd	r22, Y+23	; 0x17
 340:	78 8d       	ldd	r23, Y+24	; 0x18
 342:	ce 01       	movw	r24, r28
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	0e 94 ae 01 	call	0x35c	; 0x35c <vfprintf>
 34a:	ef 81       	ldd	r30, Y+7	; 0x07
 34c:	f8 85       	ldd	r31, Y+8	; 0x08
 34e:	e0 0f       	add	r30, r16
 350:	f1 1f       	adc	r31, r17
 352:	10 82       	st	Z, r1
 354:	2e 96       	adiw	r28, 0x0e	; 14
 356:	e4 e0       	ldi	r30, 0x04	; 4
 358:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__epilogue_restores__+0x1c>

0000035c <vfprintf>:
 35c:	ac e0       	ldi	r26, 0x0C	; 12
 35e:	b0 e0       	ldi	r27, 0x00	; 0
 360:	e4 eb       	ldi	r30, 0xB4	; 180
 362:	f1 e0       	ldi	r31, 0x01	; 1
 364:	0c 94 26 04 	jmp	0x84c	; 0x84c <__prologue_saves__>
 368:	7c 01       	movw	r14, r24
 36a:	6b 01       	movw	r12, r22
 36c:	8a 01       	movw	r16, r20
 36e:	fc 01       	movw	r30, r24
 370:	17 82       	std	Z+7, r1	; 0x07
 372:	16 82       	std	Z+6, r1	; 0x06
 374:	83 81       	ldd	r24, Z+3	; 0x03
 376:	81 ff       	sbrs	r24, 1
 378:	bd c1       	rjmp	.+890    	; 0x6f4 <__stack+0x295>
 37a:	ce 01       	movw	r24, r28
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	4c 01       	movw	r8, r24
 380:	f7 01       	movw	r30, r14
 382:	93 81       	ldd	r25, Z+3	; 0x03
 384:	f6 01       	movw	r30, r12
 386:	93 fd       	sbrc	r25, 3
 388:	85 91       	lpm	r24, Z+
 38a:	93 ff       	sbrs	r25, 3
 38c:	81 91       	ld	r24, Z+
 38e:	6f 01       	movw	r12, r30
 390:	88 23       	and	r24, r24
 392:	09 f4       	brne	.+2      	; 0x396 <vfprintf+0x3a>
 394:	ab c1       	rjmp	.+854    	; 0x6ec <__stack+0x28d>
 396:	85 32       	cpi	r24, 0x25	; 37
 398:	39 f4       	brne	.+14     	; 0x3a8 <vfprintf+0x4c>
 39a:	93 fd       	sbrc	r25, 3
 39c:	85 91       	lpm	r24, Z+
 39e:	93 ff       	sbrs	r25, 3
 3a0:	81 91       	ld	r24, Z+
 3a2:	6f 01       	movw	r12, r30
 3a4:	85 32       	cpi	r24, 0x25	; 37
 3a6:	29 f4       	brne	.+10     	; 0x3b2 <vfprintf+0x56>
 3a8:	b7 01       	movw	r22, r14
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 96 03 	call	0x72c	; 0x72c <fputc>
 3b0:	e7 cf       	rjmp	.-50     	; 0x380 <vfprintf+0x24>
 3b2:	51 2c       	mov	r5, r1
 3b4:	31 2c       	mov	r3, r1
 3b6:	20 e0       	ldi	r18, 0x00	; 0
 3b8:	20 32       	cpi	r18, 0x20	; 32
 3ba:	a0 f4       	brcc	.+40     	; 0x3e4 <vfprintf+0x88>
 3bc:	8b 32       	cpi	r24, 0x2B	; 43
 3be:	69 f0       	breq	.+26     	; 0x3da <vfprintf+0x7e>
 3c0:	30 f4       	brcc	.+12     	; 0x3ce <vfprintf+0x72>
 3c2:	80 32       	cpi	r24, 0x20	; 32
 3c4:	59 f0       	breq	.+22     	; 0x3dc <vfprintf+0x80>
 3c6:	83 32       	cpi	r24, 0x23	; 35
 3c8:	69 f4       	brne	.+26     	; 0x3e4 <vfprintf+0x88>
 3ca:	20 61       	ori	r18, 0x10	; 16
 3cc:	2c c0       	rjmp	.+88     	; 0x426 <vfprintf+0xca>
 3ce:	8d 32       	cpi	r24, 0x2D	; 45
 3d0:	39 f0       	breq	.+14     	; 0x3e0 <vfprintf+0x84>
 3d2:	80 33       	cpi	r24, 0x30	; 48
 3d4:	39 f4       	brne	.+14     	; 0x3e4 <vfprintf+0x88>
 3d6:	21 60       	ori	r18, 0x01	; 1
 3d8:	26 c0       	rjmp	.+76     	; 0x426 <vfprintf+0xca>
 3da:	22 60       	ori	r18, 0x02	; 2
 3dc:	24 60       	ori	r18, 0x04	; 4
 3de:	23 c0       	rjmp	.+70     	; 0x426 <vfprintf+0xca>
 3e0:	28 60       	ori	r18, 0x08	; 8
 3e2:	21 c0       	rjmp	.+66     	; 0x426 <vfprintf+0xca>
 3e4:	27 fd       	sbrc	r18, 7
 3e6:	27 c0       	rjmp	.+78     	; 0x436 <vfprintf+0xda>
 3e8:	30 ed       	ldi	r19, 0xD0	; 208
 3ea:	38 0f       	add	r19, r24
 3ec:	3a 30       	cpi	r19, 0x0A	; 10
 3ee:	78 f4       	brcc	.+30     	; 0x40e <vfprintf+0xb2>
 3f0:	26 ff       	sbrs	r18, 6
 3f2:	06 c0       	rjmp	.+12     	; 0x400 <vfprintf+0xa4>
 3f4:	fa e0       	ldi	r31, 0x0A	; 10
 3f6:	5f 9e       	mul	r5, r31
 3f8:	30 0d       	add	r19, r0
 3fa:	11 24       	eor	r1, r1
 3fc:	53 2e       	mov	r5, r19
 3fe:	13 c0       	rjmp	.+38     	; 0x426 <vfprintf+0xca>
 400:	8a e0       	ldi	r24, 0x0A	; 10
 402:	38 9e       	mul	r3, r24
 404:	30 0d       	add	r19, r0
 406:	11 24       	eor	r1, r1
 408:	33 2e       	mov	r3, r19
 40a:	20 62       	ori	r18, 0x20	; 32
 40c:	0c c0       	rjmp	.+24     	; 0x426 <vfprintf+0xca>
 40e:	8e 32       	cpi	r24, 0x2E	; 46
 410:	21 f4       	brne	.+8      	; 0x41a <vfprintf+0xbe>
 412:	26 fd       	sbrc	r18, 6
 414:	6b c1       	rjmp	.+726    	; 0x6ec <__stack+0x28d>
 416:	20 64       	ori	r18, 0x40	; 64
 418:	06 c0       	rjmp	.+12     	; 0x426 <vfprintf+0xca>
 41a:	8c 36       	cpi	r24, 0x6C	; 108
 41c:	11 f4       	brne	.+4      	; 0x422 <vfprintf+0xc6>
 41e:	20 68       	ori	r18, 0x80	; 128
 420:	02 c0       	rjmp	.+4      	; 0x426 <vfprintf+0xca>
 422:	88 36       	cpi	r24, 0x68	; 104
 424:	41 f4       	brne	.+16     	; 0x436 <vfprintf+0xda>
 426:	f6 01       	movw	r30, r12
 428:	93 fd       	sbrc	r25, 3
 42a:	85 91       	lpm	r24, Z+
 42c:	93 ff       	sbrs	r25, 3
 42e:	81 91       	ld	r24, Z+
 430:	6f 01       	movw	r12, r30
 432:	81 11       	cpse	r24, r1
 434:	c1 cf       	rjmp	.-126    	; 0x3b8 <vfprintf+0x5c>
 436:	98 2f       	mov	r25, r24
 438:	9f 7d       	andi	r25, 0xDF	; 223
 43a:	95 54       	subi	r25, 0x45	; 69
 43c:	93 30       	cpi	r25, 0x03	; 3
 43e:	28 f4       	brcc	.+10     	; 0x44a <vfprintf+0xee>
 440:	0c 5f       	subi	r16, 0xFC	; 252
 442:	1f 4f       	sbci	r17, 0xFF	; 255
 444:	ff e3       	ldi	r31, 0x3F	; 63
 446:	f9 83       	std	Y+1, r31	; 0x01
 448:	0d c0       	rjmp	.+26     	; 0x464 <__stack+0x5>
 44a:	83 36       	cpi	r24, 0x63	; 99
 44c:	31 f0       	breq	.+12     	; 0x45a <vfprintf+0xfe>
 44e:	83 37       	cpi	r24, 0x73	; 115
 450:	71 f0       	breq	.+28     	; 0x46e <__stack+0xf>
 452:	83 35       	cpi	r24, 0x53	; 83
 454:	09 f0       	breq	.+2      	; 0x458 <vfprintf+0xfc>
 456:	5b c0       	rjmp	.+182    	; 0x50e <__stack+0xaf>
 458:	22 c0       	rjmp	.+68     	; 0x49e <__stack+0x3f>
 45a:	f8 01       	movw	r30, r16
 45c:	80 81       	ld	r24, Z
 45e:	89 83       	std	Y+1, r24	; 0x01
 460:	0e 5f       	subi	r16, 0xFE	; 254
 462:	1f 4f       	sbci	r17, 0xFF	; 255
 464:	44 24       	eor	r4, r4
 466:	43 94       	inc	r4
 468:	51 2c       	mov	r5, r1
 46a:	54 01       	movw	r10, r8
 46c:	15 c0       	rjmp	.+42     	; 0x498 <__stack+0x39>
 46e:	38 01       	movw	r6, r16
 470:	f2 e0       	ldi	r31, 0x02	; 2
 472:	6f 0e       	add	r6, r31
 474:	71 1c       	adc	r7, r1
 476:	f8 01       	movw	r30, r16
 478:	a0 80       	ld	r10, Z
 47a:	b1 80       	ldd	r11, Z+1	; 0x01
 47c:	26 ff       	sbrs	r18, 6
 47e:	03 c0       	rjmp	.+6      	; 0x486 <__stack+0x27>
 480:	65 2d       	mov	r22, r5
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	02 c0       	rjmp	.+4      	; 0x48a <__stack+0x2b>
 486:	6f ef       	ldi	r22, 0xFF	; 255
 488:	7f ef       	ldi	r23, 0xFF	; 255
 48a:	c5 01       	movw	r24, r10
 48c:	2c 87       	std	Y+12, r18	; 0x0c
 48e:	0e 94 8b 03 	call	0x716	; 0x716 <strnlen>
 492:	2c 01       	movw	r4, r24
 494:	83 01       	movw	r16, r6
 496:	2c 85       	ldd	r18, Y+12	; 0x0c
 498:	2f 77       	andi	r18, 0x7F	; 127
 49a:	22 2e       	mov	r2, r18
 49c:	17 c0       	rjmp	.+46     	; 0x4cc <__stack+0x6d>
 49e:	38 01       	movw	r6, r16
 4a0:	f2 e0       	ldi	r31, 0x02	; 2
 4a2:	6f 0e       	add	r6, r31
 4a4:	71 1c       	adc	r7, r1
 4a6:	f8 01       	movw	r30, r16
 4a8:	a0 80       	ld	r10, Z
 4aa:	b1 80       	ldd	r11, Z+1	; 0x01
 4ac:	26 ff       	sbrs	r18, 6
 4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <__stack+0x57>
 4b0:	65 2d       	mov	r22, r5
 4b2:	70 e0       	ldi	r23, 0x00	; 0
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <__stack+0x5b>
 4b6:	6f ef       	ldi	r22, 0xFF	; 255
 4b8:	7f ef       	ldi	r23, 0xFF	; 255
 4ba:	c5 01       	movw	r24, r10
 4bc:	2c 87       	std	Y+12, r18	; 0x0c
 4be:	0e 94 80 03 	call	0x700	; 0x700 <strnlen_P>
 4c2:	2c 01       	movw	r4, r24
 4c4:	2c 85       	ldd	r18, Y+12	; 0x0c
 4c6:	20 68       	ori	r18, 0x80	; 128
 4c8:	22 2e       	mov	r2, r18
 4ca:	83 01       	movw	r16, r6
 4cc:	23 fc       	sbrc	r2, 3
 4ce:	1b c0       	rjmp	.+54     	; 0x506 <__stack+0xa7>
 4d0:	83 2d       	mov	r24, r3
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	48 16       	cp	r4, r24
 4d6:	59 06       	cpc	r5, r25
 4d8:	b0 f4       	brcc	.+44     	; 0x506 <__stack+0xa7>
 4da:	b7 01       	movw	r22, r14
 4dc:	80 e2       	ldi	r24, 0x20	; 32
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 96 03 	call	0x72c	; 0x72c <fputc>
 4e4:	3a 94       	dec	r3
 4e6:	f4 cf       	rjmp	.-24     	; 0x4d0 <__stack+0x71>
 4e8:	f5 01       	movw	r30, r10
 4ea:	27 fc       	sbrc	r2, 7
 4ec:	85 91       	lpm	r24, Z+
 4ee:	27 fe       	sbrs	r2, 7
 4f0:	81 91       	ld	r24, Z+
 4f2:	5f 01       	movw	r10, r30
 4f4:	b7 01       	movw	r22, r14
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	0e 94 96 03 	call	0x72c	; 0x72c <fputc>
 4fc:	31 10       	cpse	r3, r1
 4fe:	3a 94       	dec	r3
 500:	f1 e0       	ldi	r31, 0x01	; 1
 502:	4f 1a       	sub	r4, r31
 504:	51 08       	sbc	r5, r1
 506:	41 14       	cp	r4, r1
 508:	51 04       	cpc	r5, r1
 50a:	71 f7       	brne	.-36     	; 0x4e8 <__stack+0x89>
 50c:	e5 c0       	rjmp	.+458    	; 0x6d8 <__stack+0x279>
 50e:	84 36       	cpi	r24, 0x64	; 100
 510:	11 f0       	breq	.+4      	; 0x516 <__stack+0xb7>
 512:	89 36       	cpi	r24, 0x69	; 105
 514:	39 f5       	brne	.+78     	; 0x564 <__stack+0x105>
 516:	f8 01       	movw	r30, r16
 518:	27 ff       	sbrs	r18, 7
 51a:	07 c0       	rjmp	.+14     	; 0x52a <__stack+0xcb>
 51c:	60 81       	ld	r22, Z
 51e:	71 81       	ldd	r23, Z+1	; 0x01
 520:	82 81       	ldd	r24, Z+2	; 0x02
 522:	93 81       	ldd	r25, Z+3	; 0x03
 524:	0c 5f       	subi	r16, 0xFC	; 252
 526:	1f 4f       	sbci	r17, 0xFF	; 255
 528:	08 c0       	rjmp	.+16     	; 0x53a <__stack+0xdb>
 52a:	60 81       	ld	r22, Z
 52c:	71 81       	ldd	r23, Z+1	; 0x01
 52e:	88 27       	eor	r24, r24
 530:	77 fd       	sbrc	r23, 7
 532:	80 95       	com	r24
 534:	98 2f       	mov	r25, r24
 536:	0e 5f       	subi	r16, 0xFE	; 254
 538:	1f 4f       	sbci	r17, 0xFF	; 255
 53a:	2f 76       	andi	r18, 0x6F	; 111
 53c:	b2 2e       	mov	r11, r18
 53e:	97 ff       	sbrs	r25, 7
 540:	09 c0       	rjmp	.+18     	; 0x554 <__stack+0xf5>
 542:	90 95       	com	r25
 544:	80 95       	com	r24
 546:	70 95       	com	r23
 548:	61 95       	neg	r22
 54a:	7f 4f       	sbci	r23, 0xFF	; 255
 54c:	8f 4f       	sbci	r24, 0xFF	; 255
 54e:	9f 4f       	sbci	r25, 0xFF	; 255
 550:	20 68       	ori	r18, 0x80	; 128
 552:	b2 2e       	mov	r11, r18
 554:	2a e0       	ldi	r18, 0x0A	; 10
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	a4 01       	movw	r20, r8
 55a:	0e 94 c8 03 	call	0x790	; 0x790 <__ultoa_invert>
 55e:	a8 2e       	mov	r10, r24
 560:	a8 18       	sub	r10, r8
 562:	44 c0       	rjmp	.+136    	; 0x5ec <__stack+0x18d>
 564:	85 37       	cpi	r24, 0x75	; 117
 566:	29 f4       	brne	.+10     	; 0x572 <__stack+0x113>
 568:	2f 7e       	andi	r18, 0xEF	; 239
 56a:	b2 2e       	mov	r11, r18
 56c:	2a e0       	ldi	r18, 0x0A	; 10
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	25 c0       	rjmp	.+74     	; 0x5bc <__stack+0x15d>
 572:	f2 2f       	mov	r31, r18
 574:	f9 7f       	andi	r31, 0xF9	; 249
 576:	bf 2e       	mov	r11, r31
 578:	8f 36       	cpi	r24, 0x6F	; 111
 57a:	c1 f0       	breq	.+48     	; 0x5ac <__stack+0x14d>
 57c:	18 f4       	brcc	.+6      	; 0x584 <__stack+0x125>
 57e:	88 35       	cpi	r24, 0x58	; 88
 580:	79 f0       	breq	.+30     	; 0x5a0 <__stack+0x141>
 582:	b4 c0       	rjmp	.+360    	; 0x6ec <__stack+0x28d>
 584:	80 37       	cpi	r24, 0x70	; 112
 586:	19 f0       	breq	.+6      	; 0x58e <__stack+0x12f>
 588:	88 37       	cpi	r24, 0x78	; 120
 58a:	21 f0       	breq	.+8      	; 0x594 <__stack+0x135>
 58c:	af c0       	rjmp	.+350    	; 0x6ec <__stack+0x28d>
 58e:	2f 2f       	mov	r18, r31
 590:	20 61       	ori	r18, 0x10	; 16
 592:	b2 2e       	mov	r11, r18
 594:	b4 fe       	sbrs	r11, 4
 596:	0d c0       	rjmp	.+26     	; 0x5b2 <__stack+0x153>
 598:	8b 2d       	mov	r24, r11
 59a:	84 60       	ori	r24, 0x04	; 4
 59c:	b8 2e       	mov	r11, r24
 59e:	09 c0       	rjmp	.+18     	; 0x5b2 <__stack+0x153>
 5a0:	24 ff       	sbrs	r18, 4
 5a2:	0a c0       	rjmp	.+20     	; 0x5b8 <__stack+0x159>
 5a4:	9f 2f       	mov	r25, r31
 5a6:	96 60       	ori	r25, 0x06	; 6
 5a8:	b9 2e       	mov	r11, r25
 5aa:	06 c0       	rjmp	.+12     	; 0x5b8 <__stack+0x159>
 5ac:	28 e0       	ldi	r18, 0x08	; 8
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	05 c0       	rjmp	.+10     	; 0x5bc <__stack+0x15d>
 5b2:	20 e1       	ldi	r18, 0x10	; 16
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <__stack+0x15d>
 5b8:	20 e1       	ldi	r18, 0x10	; 16
 5ba:	32 e0       	ldi	r19, 0x02	; 2
 5bc:	f8 01       	movw	r30, r16
 5be:	b7 fe       	sbrs	r11, 7
 5c0:	07 c0       	rjmp	.+14     	; 0x5d0 <__stack+0x171>
 5c2:	60 81       	ld	r22, Z
 5c4:	71 81       	ldd	r23, Z+1	; 0x01
 5c6:	82 81       	ldd	r24, Z+2	; 0x02
 5c8:	93 81       	ldd	r25, Z+3	; 0x03
 5ca:	0c 5f       	subi	r16, 0xFC	; 252
 5cc:	1f 4f       	sbci	r17, 0xFF	; 255
 5ce:	06 c0       	rjmp	.+12     	; 0x5dc <__stack+0x17d>
 5d0:	60 81       	ld	r22, Z
 5d2:	71 81       	ldd	r23, Z+1	; 0x01
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	0e 5f       	subi	r16, 0xFE	; 254
 5da:	1f 4f       	sbci	r17, 0xFF	; 255
 5dc:	a4 01       	movw	r20, r8
 5de:	0e 94 c8 03 	call	0x790	; 0x790 <__ultoa_invert>
 5e2:	a8 2e       	mov	r10, r24
 5e4:	a8 18       	sub	r10, r8
 5e6:	fb 2d       	mov	r31, r11
 5e8:	ff 77       	andi	r31, 0x7F	; 127
 5ea:	bf 2e       	mov	r11, r31
 5ec:	b6 fe       	sbrs	r11, 6
 5ee:	0b c0       	rjmp	.+22     	; 0x606 <__stack+0x1a7>
 5f0:	2b 2d       	mov	r18, r11
 5f2:	2e 7f       	andi	r18, 0xFE	; 254
 5f4:	a5 14       	cp	r10, r5
 5f6:	50 f4       	brcc	.+20     	; 0x60c <__stack+0x1ad>
 5f8:	b4 fe       	sbrs	r11, 4
 5fa:	0a c0       	rjmp	.+20     	; 0x610 <__stack+0x1b1>
 5fc:	b2 fc       	sbrc	r11, 2
 5fe:	08 c0       	rjmp	.+16     	; 0x610 <__stack+0x1b1>
 600:	2b 2d       	mov	r18, r11
 602:	2e 7e       	andi	r18, 0xEE	; 238
 604:	05 c0       	rjmp	.+10     	; 0x610 <__stack+0x1b1>
 606:	7a 2c       	mov	r7, r10
 608:	2b 2d       	mov	r18, r11
 60a:	03 c0       	rjmp	.+6      	; 0x612 <__stack+0x1b3>
 60c:	7a 2c       	mov	r7, r10
 60e:	01 c0       	rjmp	.+2      	; 0x612 <__stack+0x1b3>
 610:	75 2c       	mov	r7, r5
 612:	24 ff       	sbrs	r18, 4
 614:	0d c0       	rjmp	.+26     	; 0x630 <__stack+0x1d1>
 616:	fe 01       	movw	r30, r28
 618:	ea 0d       	add	r30, r10
 61a:	f1 1d       	adc	r31, r1
 61c:	80 81       	ld	r24, Z
 61e:	80 33       	cpi	r24, 0x30	; 48
 620:	11 f4       	brne	.+4      	; 0x626 <__stack+0x1c7>
 622:	29 7e       	andi	r18, 0xE9	; 233
 624:	09 c0       	rjmp	.+18     	; 0x638 <__stack+0x1d9>
 626:	22 ff       	sbrs	r18, 2
 628:	06 c0       	rjmp	.+12     	; 0x636 <__stack+0x1d7>
 62a:	73 94       	inc	r7
 62c:	73 94       	inc	r7
 62e:	04 c0       	rjmp	.+8      	; 0x638 <__stack+0x1d9>
 630:	82 2f       	mov	r24, r18
 632:	86 78       	andi	r24, 0x86	; 134
 634:	09 f0       	breq	.+2      	; 0x638 <__stack+0x1d9>
 636:	73 94       	inc	r7
 638:	23 fd       	sbrc	r18, 3
 63a:	13 c0       	rjmp	.+38     	; 0x662 <__stack+0x203>
 63c:	20 ff       	sbrs	r18, 0
 63e:	06 c0       	rjmp	.+12     	; 0x64c <__stack+0x1ed>
 640:	5a 2c       	mov	r5, r10
 642:	73 14       	cp	r7, r3
 644:	18 f4       	brcc	.+6      	; 0x64c <__stack+0x1ed>
 646:	53 0c       	add	r5, r3
 648:	57 18       	sub	r5, r7
 64a:	73 2c       	mov	r7, r3
 64c:	73 14       	cp	r7, r3
 64e:	68 f4       	brcc	.+26     	; 0x66a <__stack+0x20b>
 650:	b7 01       	movw	r22, r14
 652:	80 e2       	ldi	r24, 0x20	; 32
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	2c 87       	std	Y+12, r18	; 0x0c
 658:	0e 94 96 03 	call	0x72c	; 0x72c <fputc>
 65c:	73 94       	inc	r7
 65e:	2c 85       	ldd	r18, Y+12	; 0x0c
 660:	f5 cf       	rjmp	.-22     	; 0x64c <__stack+0x1ed>
 662:	73 14       	cp	r7, r3
 664:	10 f4       	brcc	.+4      	; 0x66a <__stack+0x20b>
 666:	37 18       	sub	r3, r7
 668:	01 c0       	rjmp	.+2      	; 0x66c <__stack+0x20d>
 66a:	31 2c       	mov	r3, r1
 66c:	24 ff       	sbrs	r18, 4
 66e:	12 c0       	rjmp	.+36     	; 0x694 <__stack+0x235>
 670:	b7 01       	movw	r22, r14
 672:	80 e3       	ldi	r24, 0x30	; 48
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	2c 87       	std	Y+12, r18	; 0x0c
 678:	0e 94 96 03 	call	0x72c	; 0x72c <fputc>
 67c:	2c 85       	ldd	r18, Y+12	; 0x0c
 67e:	22 ff       	sbrs	r18, 2
 680:	17 c0       	rjmp	.+46     	; 0x6b0 <__stack+0x251>
 682:	21 ff       	sbrs	r18, 1
 684:	03 c0       	rjmp	.+6      	; 0x68c <__stack+0x22d>
 686:	88 e5       	ldi	r24, 0x58	; 88
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	02 c0       	rjmp	.+4      	; 0x690 <__stack+0x231>
 68c:	88 e7       	ldi	r24, 0x78	; 120
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	b7 01       	movw	r22, r14
 692:	0c c0       	rjmp	.+24     	; 0x6ac <__stack+0x24d>
 694:	82 2f       	mov	r24, r18
 696:	86 78       	andi	r24, 0x86	; 134
 698:	59 f0       	breq	.+22     	; 0x6b0 <__stack+0x251>
 69a:	21 fd       	sbrc	r18, 1
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <__stack+0x243>
 69e:	80 e2       	ldi	r24, 0x20	; 32
 6a0:	01 c0       	rjmp	.+2      	; 0x6a4 <__stack+0x245>
 6a2:	8b e2       	ldi	r24, 0x2B	; 43
 6a4:	27 fd       	sbrc	r18, 7
 6a6:	8d e2       	ldi	r24, 0x2D	; 45
 6a8:	b7 01       	movw	r22, r14
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	0e 94 96 03 	call	0x72c	; 0x72c <fputc>
 6b0:	a5 14       	cp	r10, r5
 6b2:	38 f4       	brcc	.+14     	; 0x6c2 <__stack+0x263>
 6b4:	b7 01       	movw	r22, r14
 6b6:	80 e3       	ldi	r24, 0x30	; 48
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	0e 94 96 03 	call	0x72c	; 0x72c <fputc>
 6be:	5a 94       	dec	r5
 6c0:	f7 cf       	rjmp	.-18     	; 0x6b0 <__stack+0x251>
 6c2:	aa 94       	dec	r10
 6c4:	f4 01       	movw	r30, r8
 6c6:	ea 0d       	add	r30, r10
 6c8:	f1 1d       	adc	r31, r1
 6ca:	80 81       	ld	r24, Z
 6cc:	b7 01       	movw	r22, r14
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	0e 94 96 03 	call	0x72c	; 0x72c <fputc>
 6d4:	a1 10       	cpse	r10, r1
 6d6:	f5 cf       	rjmp	.-22     	; 0x6c2 <__stack+0x263>
 6d8:	33 20       	and	r3, r3
 6da:	09 f4       	brne	.+2      	; 0x6de <__stack+0x27f>
 6dc:	51 ce       	rjmp	.-862    	; 0x380 <vfprintf+0x24>
 6de:	b7 01       	movw	r22, r14
 6e0:	80 e2       	ldi	r24, 0x20	; 32
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	0e 94 96 03 	call	0x72c	; 0x72c <fputc>
 6e8:	3a 94       	dec	r3
 6ea:	f6 cf       	rjmp	.-20     	; 0x6d8 <__stack+0x279>
 6ec:	f7 01       	movw	r30, r14
 6ee:	86 81       	ldd	r24, Z+6	; 0x06
 6f0:	97 81       	ldd	r25, Z+7	; 0x07
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <__stack+0x299>
 6f4:	8f ef       	ldi	r24, 0xFF	; 255
 6f6:	9f ef       	ldi	r25, 0xFF	; 255
 6f8:	2c 96       	adiw	r28, 0x0c	; 12
 6fa:	e2 e1       	ldi	r30, 0x12	; 18
 6fc:	0c 94 42 04 	jmp	0x884	; 0x884 <__epilogue_restores__>

00000700 <strnlen_P>:
 700:	fc 01       	movw	r30, r24
 702:	05 90       	lpm	r0, Z+
 704:	61 50       	subi	r22, 0x01	; 1
 706:	70 40       	sbci	r23, 0x00	; 0
 708:	01 10       	cpse	r0, r1
 70a:	d8 f7       	brcc	.-10     	; 0x702 <strnlen_P+0x2>
 70c:	80 95       	com	r24
 70e:	90 95       	com	r25
 710:	8e 0f       	add	r24, r30
 712:	9f 1f       	adc	r25, r31
 714:	08 95       	ret

00000716 <strnlen>:
 716:	fc 01       	movw	r30, r24
 718:	61 50       	subi	r22, 0x01	; 1
 71a:	70 40       	sbci	r23, 0x00	; 0
 71c:	01 90       	ld	r0, Z+
 71e:	01 10       	cpse	r0, r1
 720:	d8 f7       	brcc	.-10     	; 0x718 <strnlen+0x2>
 722:	80 95       	com	r24
 724:	90 95       	com	r25
 726:	8e 0f       	add	r24, r30
 728:	9f 1f       	adc	r25, r31
 72a:	08 95       	ret

0000072c <fputc>:
 72c:	0f 93       	push	r16
 72e:	1f 93       	push	r17
 730:	cf 93       	push	r28
 732:	df 93       	push	r29
 734:	18 2f       	mov	r17, r24
 736:	09 2f       	mov	r16, r25
 738:	eb 01       	movw	r28, r22
 73a:	8b 81       	ldd	r24, Y+3	; 0x03
 73c:	81 fd       	sbrc	r24, 1
 73e:	03 c0       	rjmp	.+6      	; 0x746 <fputc+0x1a>
 740:	8f ef       	ldi	r24, 0xFF	; 255
 742:	9f ef       	ldi	r25, 0xFF	; 255
 744:	20 c0       	rjmp	.+64     	; 0x786 <fputc+0x5a>
 746:	82 ff       	sbrs	r24, 2
 748:	10 c0       	rjmp	.+32     	; 0x76a <fputc+0x3e>
 74a:	4e 81       	ldd	r20, Y+6	; 0x06
 74c:	5f 81       	ldd	r21, Y+7	; 0x07
 74e:	2c 81       	ldd	r18, Y+4	; 0x04
 750:	3d 81       	ldd	r19, Y+5	; 0x05
 752:	42 17       	cp	r20, r18
 754:	53 07       	cpc	r21, r19
 756:	7c f4       	brge	.+30     	; 0x776 <fputc+0x4a>
 758:	e8 81       	ld	r30, Y
 75a:	f9 81       	ldd	r31, Y+1	; 0x01
 75c:	9f 01       	movw	r18, r30
 75e:	2f 5f       	subi	r18, 0xFF	; 255
 760:	3f 4f       	sbci	r19, 0xFF	; 255
 762:	39 83       	std	Y+1, r19	; 0x01
 764:	28 83       	st	Y, r18
 766:	10 83       	st	Z, r17
 768:	06 c0       	rjmp	.+12     	; 0x776 <fputc+0x4a>
 76a:	e8 85       	ldd	r30, Y+8	; 0x08
 76c:	f9 85       	ldd	r31, Y+9	; 0x09
 76e:	81 2f       	mov	r24, r17
 770:	09 95       	icall
 772:	89 2b       	or	r24, r25
 774:	29 f7       	brne	.-54     	; 0x740 <fputc+0x14>
 776:	2e 81       	ldd	r18, Y+6	; 0x06
 778:	3f 81       	ldd	r19, Y+7	; 0x07
 77a:	2f 5f       	subi	r18, 0xFF	; 255
 77c:	3f 4f       	sbci	r19, 0xFF	; 255
 77e:	3f 83       	std	Y+7, r19	; 0x07
 780:	2e 83       	std	Y+6, r18	; 0x06
 782:	81 2f       	mov	r24, r17
 784:	90 2f       	mov	r25, r16
 786:	df 91       	pop	r29
 788:	cf 91       	pop	r28
 78a:	1f 91       	pop	r17
 78c:	0f 91       	pop	r16
 78e:	08 95       	ret

00000790 <__ultoa_invert>:
 790:	fa 01       	movw	r30, r20
 792:	aa 27       	eor	r26, r26
 794:	28 30       	cpi	r18, 0x08	; 8
 796:	51 f1       	breq	.+84     	; 0x7ec <__ultoa_invert+0x5c>
 798:	20 31       	cpi	r18, 0x10	; 16
 79a:	81 f1       	breq	.+96     	; 0x7fc <__ultoa_invert+0x6c>
 79c:	e8 94       	clt
 79e:	6f 93       	push	r22
 7a0:	6e 7f       	andi	r22, 0xFE	; 254
 7a2:	6e 5f       	subi	r22, 0xFE	; 254
 7a4:	7f 4f       	sbci	r23, 0xFF	; 255
 7a6:	8f 4f       	sbci	r24, 0xFF	; 255
 7a8:	9f 4f       	sbci	r25, 0xFF	; 255
 7aa:	af 4f       	sbci	r26, 0xFF	; 255
 7ac:	b1 e0       	ldi	r27, 0x01	; 1
 7ae:	3e d0       	rcall	.+124    	; 0x82c <__ultoa_invert+0x9c>
 7b0:	b4 e0       	ldi	r27, 0x04	; 4
 7b2:	3c d0       	rcall	.+120    	; 0x82c <__ultoa_invert+0x9c>
 7b4:	67 0f       	add	r22, r23
 7b6:	78 1f       	adc	r23, r24
 7b8:	89 1f       	adc	r24, r25
 7ba:	9a 1f       	adc	r25, r26
 7bc:	a1 1d       	adc	r26, r1
 7be:	68 0f       	add	r22, r24
 7c0:	79 1f       	adc	r23, r25
 7c2:	8a 1f       	adc	r24, r26
 7c4:	91 1d       	adc	r25, r1
 7c6:	a1 1d       	adc	r26, r1
 7c8:	6a 0f       	add	r22, r26
 7ca:	71 1d       	adc	r23, r1
 7cc:	81 1d       	adc	r24, r1
 7ce:	91 1d       	adc	r25, r1
 7d0:	a1 1d       	adc	r26, r1
 7d2:	20 d0       	rcall	.+64     	; 0x814 <__ultoa_invert+0x84>
 7d4:	09 f4       	brne	.+2      	; 0x7d8 <__ultoa_invert+0x48>
 7d6:	68 94       	set
 7d8:	3f 91       	pop	r19
 7da:	2a e0       	ldi	r18, 0x0A	; 10
 7dc:	26 9f       	mul	r18, r22
 7de:	11 24       	eor	r1, r1
 7e0:	30 19       	sub	r19, r0
 7e2:	30 5d       	subi	r19, 0xD0	; 208
 7e4:	31 93       	st	Z+, r19
 7e6:	de f6       	brtc	.-74     	; 0x79e <__ultoa_invert+0xe>
 7e8:	cf 01       	movw	r24, r30
 7ea:	08 95       	ret
 7ec:	46 2f       	mov	r20, r22
 7ee:	47 70       	andi	r20, 0x07	; 7
 7f0:	40 5d       	subi	r20, 0xD0	; 208
 7f2:	41 93       	st	Z+, r20
 7f4:	b3 e0       	ldi	r27, 0x03	; 3
 7f6:	0f d0       	rcall	.+30     	; 0x816 <__ultoa_invert+0x86>
 7f8:	c9 f7       	brne	.-14     	; 0x7ec <__ultoa_invert+0x5c>
 7fa:	f6 cf       	rjmp	.-20     	; 0x7e8 <__ultoa_invert+0x58>
 7fc:	46 2f       	mov	r20, r22
 7fe:	4f 70       	andi	r20, 0x0F	; 15
 800:	40 5d       	subi	r20, 0xD0	; 208
 802:	4a 33       	cpi	r20, 0x3A	; 58
 804:	18 f0       	brcs	.+6      	; 0x80c <__ultoa_invert+0x7c>
 806:	49 5d       	subi	r20, 0xD9	; 217
 808:	31 fd       	sbrc	r19, 1
 80a:	40 52       	subi	r20, 0x20	; 32
 80c:	41 93       	st	Z+, r20
 80e:	02 d0       	rcall	.+4      	; 0x814 <__ultoa_invert+0x84>
 810:	a9 f7       	brne	.-22     	; 0x7fc <__ultoa_invert+0x6c>
 812:	ea cf       	rjmp	.-44     	; 0x7e8 <__ultoa_invert+0x58>
 814:	b4 e0       	ldi	r27, 0x04	; 4
 816:	a6 95       	lsr	r26
 818:	97 95       	ror	r25
 81a:	87 95       	ror	r24
 81c:	77 95       	ror	r23
 81e:	67 95       	ror	r22
 820:	ba 95       	dec	r27
 822:	c9 f7       	brne	.-14     	; 0x816 <__ultoa_invert+0x86>
 824:	00 97       	sbiw	r24, 0x00	; 0
 826:	61 05       	cpc	r22, r1
 828:	71 05       	cpc	r23, r1
 82a:	08 95       	ret
 82c:	9b 01       	movw	r18, r22
 82e:	ac 01       	movw	r20, r24
 830:	0a 2e       	mov	r0, r26
 832:	06 94       	lsr	r0
 834:	57 95       	ror	r21
 836:	47 95       	ror	r20
 838:	37 95       	ror	r19
 83a:	27 95       	ror	r18
 83c:	ba 95       	dec	r27
 83e:	c9 f7       	brne	.-14     	; 0x832 <__ultoa_invert+0xa2>
 840:	62 0f       	add	r22, r18
 842:	73 1f       	adc	r23, r19
 844:	84 1f       	adc	r24, r20
 846:	95 1f       	adc	r25, r21
 848:	a0 1d       	adc	r26, r0
 84a:	08 95       	ret

0000084c <__prologue_saves__>:
 84c:	2f 92       	push	r2
 84e:	3f 92       	push	r3
 850:	4f 92       	push	r4
 852:	5f 92       	push	r5
 854:	6f 92       	push	r6
 856:	7f 92       	push	r7
 858:	8f 92       	push	r8
 85a:	9f 92       	push	r9
 85c:	af 92       	push	r10
 85e:	bf 92       	push	r11
 860:	cf 92       	push	r12
 862:	df 92       	push	r13
 864:	ef 92       	push	r14
 866:	ff 92       	push	r15
 868:	0f 93       	push	r16
 86a:	1f 93       	push	r17
 86c:	cf 93       	push	r28
 86e:	df 93       	push	r29
 870:	cd b7       	in	r28, 0x3d	; 61
 872:	de b7       	in	r29, 0x3e	; 62
 874:	ca 1b       	sub	r28, r26
 876:	db 0b       	sbc	r29, r27
 878:	0f b6       	in	r0, 0x3f	; 63
 87a:	f8 94       	cli
 87c:	de bf       	out	0x3e, r29	; 62
 87e:	0f be       	out	0x3f, r0	; 63
 880:	cd bf       	out	0x3d, r28	; 61
 882:	09 94       	ijmp

00000884 <__epilogue_restores__>:
 884:	2a 88       	ldd	r2, Y+18	; 0x12
 886:	39 88       	ldd	r3, Y+17	; 0x11
 888:	48 88       	ldd	r4, Y+16	; 0x10
 88a:	5f 84       	ldd	r5, Y+15	; 0x0f
 88c:	6e 84       	ldd	r6, Y+14	; 0x0e
 88e:	7d 84       	ldd	r7, Y+13	; 0x0d
 890:	8c 84       	ldd	r8, Y+12	; 0x0c
 892:	9b 84       	ldd	r9, Y+11	; 0x0b
 894:	aa 84       	ldd	r10, Y+10	; 0x0a
 896:	b9 84       	ldd	r11, Y+9	; 0x09
 898:	c8 84       	ldd	r12, Y+8	; 0x08
 89a:	df 80       	ldd	r13, Y+7	; 0x07
 89c:	ee 80       	ldd	r14, Y+6	; 0x06
 89e:	fd 80       	ldd	r15, Y+5	; 0x05
 8a0:	0c 81       	ldd	r16, Y+4	; 0x04
 8a2:	1b 81       	ldd	r17, Y+3	; 0x03
 8a4:	aa 81       	ldd	r26, Y+2	; 0x02
 8a6:	b9 81       	ldd	r27, Y+1	; 0x01
 8a8:	ce 0f       	add	r28, r30
 8aa:	d1 1d       	adc	r29, r1
 8ac:	0f b6       	in	r0, 0x3f	; 63
 8ae:	f8 94       	cli
 8b0:	de bf       	out	0x3e, r29	; 62
 8b2:	0f be       	out	0x3f, r0	; 63
 8b4:	cd bf       	out	0x3d, r28	; 61
 8b6:	ed 01       	movw	r28, r26
 8b8:	08 95       	ret

000008ba <_exit>:
 8ba:	f8 94       	cli

000008bc <__stop_program>:
 8bc:	ff cf       	rjmp	.-2      	; 0x8bc <__stop_program>
