
quet led +74.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000001dc  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002ce  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000017b  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000019b  00000000  00000000  00000703  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  000008a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000186  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002ae  00000000  00000000  00000a76  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ed       	ldi	r30, 0xDC	; 220
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ba 00 	call	0x174	; 0x174 <main>
  7a:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <truyen595>:
///#define data_in clrb(PORTC,0)
//#define clk clrb(PORTC,1)
//#define latch clrb(PORTC,2)
#include <avr/io.h>
void truyen595(int data)
{
  82:	28 e0       	ldi	r18, 0x08	; 8
  84:	30 e0       	ldi	r19, 0x00	; 0
	for (int i=8;i>0;i--)
	{
		
		if((data&0x80)==0x80)
  86:	87 ff       	sbrs	r24, 7
  88:	02 c0       	rjmp	.+4      	; 0x8e <truyen595+0xc>
		{setb(PORTA,0);}
  8a:	d8 9a       	sbi	0x1b, 0	; 27
  8c:	01 c0       	rjmp	.+2      	; 0x90 <truyen595+0xe>
		else
		{clrb(PORTA,0);}
  8e:	d8 98       	cbi	0x1b, 0	; 27
		data=data<<1;
  90:	88 0f       	add	r24, r24
  92:	99 1f       	adc	r25, r25
		//xung clk cua thanh ghi dich
		clrb(PORTA,1);
  94:	d9 98       	cbi	0x1b, 1	; 27
		setb(PORTA,1);
  96:	d9 9a       	sbi	0x1b, 1	; 27
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	31 09       	sbc	r19, r1
//#define clk clrb(PORTC,1)
//#define latch clrb(PORTC,2)
#include <avr/io.h>
void truyen595(int data)
{
	for (int i=8;i>0;i--)
  9c:	21 15       	cp	r18, r1
  9e:	31 05       	cpc	r19, r1
  a0:	91 f7       	brne	.-28     	; 0x86 <truyen595+0x4>
		//xung clk cua thanh ghi dich
		clrb(PORTA,1);
		setb(PORTA,1);
	}
	//xung chot
	clrb(PORTA,2);
  a2:	da 98       	cbi	0x1b, 2	; 27
	setb(PORTA,2);
  a4:	da 9a       	sbi	0x1b, 2	; 27
  a6:	08 95       	ret

000000a8 <quetled>:
	
	
}
void quetled(int so)
{
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	ec 01       	movw	r28, r24
	t=(so%1000)/100;
	c=(so%100)/10;
	dv=so%10;
	
	
	PORTD=0xFF;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	82 bb       	out	0x12, r24	; 18
	PORTD=0xFE;
  b2:	8e ef       	ldi	r24, 0xFE	; 254
  b4:	82 bb       	out	0x12, r24	; 18
	int n,t,c,dv;
	
	n=so/1000;
	t=(so%1000)/100;
	c=(so%100)/10;
	dv=so%10;
  b6:	ce 01       	movw	r24, r28
  b8:	6a e0       	ldi	r22, 0x0A	; 10
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	0e 94 c4 00 	call	0x188	; 0x188 <__divmodhi4>
	
	
	PORTD=0xFF;
	PORTD=0xFE;
	truyen595(ma[dv]);
  c0:	fc 01       	movw	r30, r24
  c2:	e0 5a       	subi	r30, 0xA0	; 160
  c4:	ff 4f       	sbci	r31, 0xFF	; 255
  c6:	80 81       	ld	r24, Z
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 41 00 	call	0x82	; 0x82 <truyen595>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	87 e0       	ldi	r24, 0x07	; 7
  d0:	97 e0       	ldi	r25, 0x07	; 7
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <quetled+0x2a>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <quetled+0x30>
  d8:	00 00       	nop
	_delay_us(900);
	
	PORTD=0xFF;
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	82 bb       	out	0x12, r24	; 18
	PORTD=0xFD;
  de:	8d ef       	ldi	r24, 0xFD	; 253
  e0:	82 bb       	out	0x12, r24	; 18
{
	int n,t,c,dv;
	
	n=so/1000;
	t=(so%1000)/100;
	c=(so%100)/10;
  e2:	ce 01       	movw	r24, r28
  e4:	64 e6       	ldi	r22, 0x64	; 100
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	0e 94 c4 00 	call	0x188	; 0x188 <__divmodhi4>
  ec:	6a e0       	ldi	r22, 0x0A	; 10
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	0e 94 c4 00 	call	0x188	; 0x188 <__divmodhi4>
	truyen595(ma[dv]);
	_delay_us(900);
	
	PORTD=0xFF;
	PORTD=0xFD;
	truyen595(ma[c]);
  f4:	fb 01       	movw	r30, r22
  f6:	e0 5a       	subi	r30, 0xA0	; 160
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	80 81       	ld	r24, Z
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 41 00 	call	0x82	; 0x82 <truyen595>
 102:	87 e0       	ldi	r24, 0x07	; 7
 104:	97 e0       	ldi	r25, 0x07	; 7
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <quetled+0x5e>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <quetled+0x64>
 10c:	00 00       	nop
	_delay_us(900);
	
	
	PORTD=0xFF;
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	82 bb       	out	0x12, r24	; 18
	PORTD=0xFB;
 112:	8b ef       	ldi	r24, 0xFB	; 251
 114:	82 bb       	out	0x12, r24	; 18
void quetled(int so)
{
	int n,t,c,dv;
	
	n=so/1000;
	t=(so%1000)/100;
 116:	ce 01       	movw	r24, r28
 118:	68 ee       	ldi	r22, 0xE8	; 232
 11a:	73 e0       	ldi	r23, 0x03	; 3
 11c:	0e 94 c4 00 	call	0x188	; 0x188 <__divmodhi4>
 120:	64 e6       	ldi	r22, 0x64	; 100
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	0e 94 c4 00 	call	0x188	; 0x188 <__divmodhi4>
	_delay_us(900);
	
	
	PORTD=0xFF;
	PORTD=0xFB;
	truyen595(ma[t]);
 128:	fb 01       	movw	r30, r22
 12a:	e0 5a       	subi	r30, 0xA0	; 160
 12c:	ff 4f       	sbci	r31, 0xFF	; 255
 12e:	80 81       	ld	r24, Z
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 41 00 	call	0x82	; 0x82 <truyen595>
 136:	87 e0       	ldi	r24, 0x07	; 7
 138:	97 e0       	ldi	r25, 0x07	; 7
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <quetled+0x92>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <quetled+0x98>
 140:	00 00       	nop
	_delay_us(900);
	
	PORTD=0xFF;
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	82 bb       	out	0x12, r24	; 18
	PORTD=0xF7;
 146:	87 ef       	ldi	r24, 0xF7	; 247
 148:	82 bb       	out	0x12, r24	; 18
}
void quetled(int so)
{
	int n,t,c,dv;
	
	n=so/1000;
 14a:	ce 01       	movw	r24, r28
 14c:	68 ee       	ldi	r22, 0xE8	; 232
 14e:	73 e0       	ldi	r23, 0x03	; 3
 150:	0e 94 c4 00 	call	0x188	; 0x188 <__divmodhi4>
	truyen595(ma[t]);
	_delay_us(900);
	
	PORTD=0xFF;
	PORTD=0xF7;
	truyen595(ma[n]);
 154:	fb 01       	movw	r30, r22
 156:	e0 5a       	subi	r30, 0xA0	; 160
 158:	ff 4f       	sbci	r31, 0xFF	; 255
 15a:	80 81       	ld	r24, Z
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 41 00 	call	0x82	; 0x82 <truyen595>
 162:	87 e0       	ldi	r24, 0x07	; 7
 164:	97 e0       	ldi	r25, 0x07	; 7
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <quetled+0xbe>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <quetled+0xc4>
 16c:	00 00       	nop
	_delay_us(900);
}
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <main>:

int main(void)
{
	DDRD=0xff;
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	81 bb       	out	0x11, r24	; 17
	PORTA=0X00;
 178:	1b ba       	out	0x1b, r1	; 27
	DDRA=0XFF;
 17a:	8a bb       	out	0x1a, r24	; 26
	PORTD=0X00;
 17c:	12 ba       	out	0x12, r1	; 18
    while(1)
    {
		
		
			
			quetled(a);
 17e:	89 e2       	ldi	r24, 0x29	; 41
 180:	99 e0       	ldi	r25, 0x09	; 9
 182:	0e 94 54 00 	call	0xa8	; 0xa8 <quetled>
 186:	fb cf       	rjmp	.-10     	; 0x17e <main+0xa>

00000188 <__divmodhi4>:
 188:	97 fb       	bst	r25, 7
 18a:	07 2e       	mov	r0, r23
 18c:	16 f4       	brtc	.+4      	; 0x192 <__divmodhi4+0xa>
 18e:	00 94       	com	r0
 190:	07 d0       	rcall	.+14     	; 0x1a0 <__divmodhi4_neg1>
 192:	77 fd       	sbrc	r23, 7
 194:	09 d0       	rcall	.+18     	; 0x1a8 <__divmodhi4_neg2>
 196:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__udivmodhi4>
 19a:	07 fc       	sbrc	r0, 7
 19c:	05 d0       	rcall	.+10     	; 0x1a8 <__divmodhi4_neg2>
 19e:	3e f4       	brtc	.+14     	; 0x1ae <__divmodhi4_exit>

000001a0 <__divmodhi4_neg1>:
 1a0:	90 95       	com	r25
 1a2:	81 95       	neg	r24
 1a4:	9f 4f       	sbci	r25, 0xFF	; 255
 1a6:	08 95       	ret

000001a8 <__divmodhi4_neg2>:
 1a8:	70 95       	com	r23
 1aa:	61 95       	neg	r22
 1ac:	7f 4f       	sbci	r23, 0xFF	; 255

000001ae <__divmodhi4_exit>:
 1ae:	08 95       	ret

000001b0 <__udivmodhi4>:
 1b0:	aa 1b       	sub	r26, r26
 1b2:	bb 1b       	sub	r27, r27
 1b4:	51 e1       	ldi	r21, 0x11	; 17
 1b6:	07 c0       	rjmp	.+14     	; 0x1c6 <__udivmodhi4_ep>

000001b8 <__udivmodhi4_loop>:
 1b8:	aa 1f       	adc	r26, r26
 1ba:	bb 1f       	adc	r27, r27
 1bc:	a6 17       	cp	r26, r22
 1be:	b7 07       	cpc	r27, r23
 1c0:	10 f0       	brcs	.+4      	; 0x1c6 <__udivmodhi4_ep>
 1c2:	a6 1b       	sub	r26, r22
 1c4:	b7 0b       	sbc	r27, r23

000001c6 <__udivmodhi4_ep>:
 1c6:	88 1f       	adc	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	5a 95       	dec	r21
 1cc:	a9 f7       	brne	.-22     	; 0x1b8 <__udivmodhi4_loop>
 1ce:	80 95       	com	r24
 1d0:	90 95       	com	r25
 1d2:	bc 01       	movw	r22, r24
 1d4:	cd 01       	movw	r24, r26
 1d6:	08 95       	ret

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>
