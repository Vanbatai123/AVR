
PS2MOUS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000008e4  00000978  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800066  00800066  0000097e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000097e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000009da  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005cd  00000000  00000000  00000a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000027a  00000000  00000000  00001027  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f9  00000000  00000000  000012a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  0000159c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000023b  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000354  00000000  00000000  0000191f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00001c73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 36       	cpi	r26, 0x6D	; 109
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0c 01 	call	0x218	; 0x218 <main>
  8a:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <putchar_UART>:
void putchar_UART(int kitu)
{
	while (inbit(UCSRA,UDRE)==0); //cho den khi bit UDRE=1 Neu = 1 thi viet code vao
  92:	5d 9b       	sbis	0x0b, 5	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <putchar_UART>
	UDR=kitu;
  96:	8c b9       	out	0x0c, r24	; 12
  98:	08 95       	ret

0000009a <print_UART>:
}
void print_UART(char* str)//******__HIEN THI CHUOI KI TU__*********************
{
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	ec 01       	movw	r28, r24
	int i;
	for (i=0; str[i]!=0; i++) 
  a0:	88 81       	ld	r24, Y
  a2:	88 23       	and	r24, r24
  a4:	39 f0       	breq	.+14     	; 0xb4 <print_UART+0x1a>
  a6:	21 96       	adiw	r28, 0x01	; 1
	putchar_UART(str[i]);
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 49 00 	call	0x92	; 0x92 <putchar_UART>
	UDR=kitu;
}
void print_UART(char* str)//******__HIEN THI CHUOI KI TU__*********************
{
	int i;
	for (i=0; str[i]!=0; i++) 
  ae:	89 91       	ld	r24, Y+
  b0:	81 11       	cpse	r24, r1
  b2:	fa cf       	rjmp	.-12     	; 0xa8 <print_UART+0xe>
	putchar_UART(str[i]);
}
  b4:	df 91       	pop	r29
  b6:	cf 91       	pop	r28
  b8:	08 95       	ret

000000ba <vietso_UART>:
void vietso_UART(int num)
{
  ba:	0f 93       	push	r16
  bc:	1f 93       	push	r17
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	2a 97       	sbiw	r28, 0x0a	; 10
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	cd bf       	out	0x3d, r28	; 61
	char dis[10];
	sprintf(dis, "%i", num);
  d2:	9f 93       	push	r25
  d4:	8f 93       	push	r24
  d6:	82 e6       	ldi	r24, 0x62	; 98
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	9f 93       	push	r25
  dc:	8f 93       	push	r24
  de:	8e 01       	movw	r16, r28
  e0:	0f 5f       	subi	r16, 0xFF	; 255
  e2:	1f 4f       	sbci	r17, 0xFF	; 255
  e4:	1f 93       	push	r17
  e6:	0f 93       	push	r16
  e8:	0e 94 9f 01 	call	0x33e	; 0x33e <sprintf>
	print_UART(dis);
  ec:	c8 01       	movw	r24, r16
  ee:	0e 94 4d 00 	call	0x9a	; 0x9a <print_UART>
  f2:	0f 90       	pop	r0
  f4:	0f 90       	pop	r0
  f6:	0f 90       	pop	r0
  f8:	0f 90       	pop	r0
  fa:	0f 90       	pop	r0
  fc:	0f 90       	pop	r0
}
  fe:	2a 96       	adiw	r28, 0x0a	; 10
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	f8 94       	cli
 104:	de bf       	out	0x3e, r29	; 62
 106:	0f be       	out	0x3f, r0	; 63
 108:	cd bf       	out	0x3d, r28	; 61
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	1f 91       	pop	r17
 110:	0f 91       	pop	r16
 112:	08 95       	ret

00000114 <init_UART>:
}
void init_UART()

{
	//UART
	UBRRH=0;		//set toc do truyen baud
 114:	10 bc       	out	0x20, r1	; 32
	UBRRL=102;
 116:	86 e6       	ldi	r24, 0x66	; 102
 118:	89 b9       	out	0x09, r24	; 9
	UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
 11a:	86 e8       	ldi	r24, 0x86	; 134
 11c:	80 bd       	out	0x20, r24	; 32
	UCSRB=(1<<TXEN)|(1<<RXEN)|(1<<RXCIE);
 11e:	88 e9       	ldi	r24, 0x98	; 152
 120:	8a b9       	out	0x0a, r24	; 10
 122:	08 95       	ret

00000124 <space_UART>:
}
void space_UART(char num)
{
 124:	cf 93       	push	r28
 126:	c8 2f       	mov	r28, r24
	for (;num>0;num--)
 128:	88 23       	and	r24, r24
 12a:	31 f0       	breq	.+12     	; 0x138 <space_UART+0x14>
	{
		putchar_UART(32);
 12c:	80 e2       	ldi	r24, 0x20	; 32
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 49 00 	call	0x92	; 0x92 <putchar_UART>
	UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
	UCSRB=(1<<TXEN)|(1<<RXEN)|(1<<RXCIE);
}
void space_UART(char num)
{
	for (;num>0;num--)
 134:	c1 50       	subi	r28, 0x01	; 1
 136:	d1 f7       	brne	.-12     	; 0x12c <space_UART+0x8>
	{
		putchar_UART(32);
	}
}
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <newline_UART>:
void newline_UART()
{
	putchar_UART(13);
 13c:	8d e0       	ldi	r24, 0x0D	; 13
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 49 00 	call	0x92	; 0x92 <putchar_UART>
 144:	08 95       	ret

00000146 <host_send>:

int i,dembit=11,data=0;

void host_send(int byte)
{
	UP_CLK;//CLK=1
 146:	c3 98       	cbi	0x18, 3	; 24
	UP_DATA;			//DATA=1
 148:	c2 98       	cbi	0x18, 2	; 24
	char parity=1;		//parity bit
	clrb(GICR,INT1);	//disable interrupt 1
 14a:	2b b7       	in	r18, 0x3b	; 59
 14c:	2f 77       	andi	r18, 0x7F	; 127
 14e:	2b bf       	out	0x3b, r18	; 59
	DOWN_CLK;			//CLK=0
 150:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	ef ec       	ldi	r30, 0xCF	; 207
 154:	f7 e0       	ldi	r31, 0x07	; 7
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <host_send+0x10>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <host_send+0x16>
 15c:	00 00       	nop
	_delay_us(500);
	DOWN_DATA;			//data=0
 15e:	c2 9a       	sbi	0x18, 2	; 24
	UP_CLK;				//clk=1
 160:	c3 98       	cbi	0x18, 3	; 24
	WAIT_CLK_DOWN;
 162:	83 99       	sbic	0x10, 3	; 16
 164:	fe cf       	rjmp	.-4      	; 0x162 <host_send+0x1c>
	for (i=0;i<8;i++)	//send 8 bit data
 166:	10 92 6a 00 	sts	0x006A, r1
 16a:	10 92 69 00 	sts	0x0069, r1
 16e:	20 e0       	ldi	r18, 0x00	; 0

void host_send(int byte)
{
	UP_CLK;//CLK=1
	UP_DATA;			//DATA=1
	char parity=1;		//parity bit
 170:	41 e0       	ldi	r20, 0x01	; 1
	for (i=0;i<8;i++)	//send 8 bit data
	{
		if ((byte>>i)&0x01)
		{
			UP_DATA;	//data=1
			parity ^= 0x01;
 172:	51 e0       	ldi	r21, 0x01	; 1
	DOWN_DATA;			//data=0
	UP_CLK;				//clk=1
	WAIT_CLK_DOWN;
	for (i=0;i<8;i++)	//send 8 bit data
	{
		if ((byte>>i)&0x01)
 174:	bc 01       	movw	r22, r24
 176:	02 c0       	rjmp	.+4      	; 0x17c <host_send+0x36>
 178:	75 95       	asr	r23
 17a:	67 95       	ror	r22
 17c:	2a 95       	dec	r18
 17e:	e2 f7       	brpl	.-8      	; 0x178 <host_send+0x32>
 180:	60 ff       	sbrs	r22, 0
 182:	03 c0       	rjmp	.+6      	; 0x18a <host_send+0x44>
		{
			UP_DATA;	//data=1
 184:	c2 98       	cbi	0x18, 2	; 24
			parity ^= 0x01;
 186:	45 27       	eor	r20, r21
 188:	01 c0       	rjmp	.+2      	; 0x18c <host_send+0x46>
		}
		else
			DOWN_DATA;	//data=0
 18a:	c2 9a       	sbi	0x18, 2	; 24
		WAIT_CLK_UP;
 18c:	83 9b       	sbis	0x10, 3	; 16
 18e:	fe cf       	rjmp	.-4      	; 0x18c <host_send+0x46>
		WAIT_CLK_DOWN;
 190:	83 99       	sbic	0x10, 3	; 16
 192:	fe cf       	rjmp	.-4      	; 0x190 <host_send+0x4a>
	DOWN_CLK;			//CLK=0
	_delay_us(500);
	DOWN_DATA;			//data=0
	UP_CLK;				//clk=1
	WAIT_CLK_DOWN;
	for (i=0;i<8;i++)	//send 8 bit data
 194:	20 91 69 00 	lds	r18, 0x0069
 198:	30 91 6a 00 	lds	r19, 0x006A
 19c:	2f 5f       	subi	r18, 0xFF	; 255
 19e:	3f 4f       	sbci	r19, 0xFF	; 255
 1a0:	30 93 6a 00 	sts	0x006A, r19
 1a4:	20 93 69 00 	sts	0x0069, r18
 1a8:	28 30       	cpi	r18, 0x08	; 8
 1aa:	31 05       	cpc	r19, r1
 1ac:	1c f3       	brlt	.-58     	; 0x174 <host_send+0x2e>
		else
			DOWN_DATA;	//data=0
		WAIT_CLK_UP;
		WAIT_CLK_DOWN;
	}					//end send 8 bit data
	if (parity)			//set/reset parity bit
 1ae:	44 23       	and	r20, r20
 1b0:	11 f0       	breq	.+4      	; 0x1b6 <host_send+0x70>
		UP_DATA;		//data=1
 1b2:	c2 98       	cbi	0x18, 2	; 24
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <host_send+0x72>
	else
		DOWN_DATA;		//data=0
 1b6:	c2 9a       	sbi	0x18, 2	; 24
	WAIT_CLK_UP;
 1b8:	83 9b       	sbis	0x10, 3	; 16
 1ba:	fe cf       	rjmp	.-4      	; 0x1b8 <host_send+0x72>
	WAIT_CLK_DOWN;
 1bc:	83 99       	sbic	0x10, 3	; 16
 1be:	fe cf       	rjmp	.-4      	; 0x1bc <host_send+0x76>
	UP_DATA;			//data=1 (stop bit)
 1c0:	c2 98       	cbi	0x18, 2	; 24
 1c2:	87 ec       	ldi	r24, 0xC7	; 199
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <host_send+0x80>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <host_send+0x86>
 1cc:	00 00       	nop
	_delay_us(50);
	WAIT_DATA_DOWN;
 1ce:	82 99       	sbic	0x10, 2	; 16
 1d0:	fe cf       	rjmp	.-4      	; 0x1ce <host_send+0x88>
	WAIT_CLK_DOWN;
 1d2:	83 99       	sbic	0x10, 3	; 16
 1d4:	fe cf       	rjmp	.-4      	; 0x1d2 <host_send+0x8c>
	while((inbit(PIN_PS2,CLK)==0)&&(inbit(PIN_PS2,DATA)==0));//wait CLK UP and DATA UP
 1d6:	83 99       	sbic	0x10, 3	; 16
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <host_send+0x98>
 1da:	82 9b       	sbis	0x10, 2	; 16
 1dc:	fc cf       	rjmp	.-8      	; 0x1d6 <host_send+0x90>
	dembit=11;
 1de:	8b e0       	ldi	r24, 0x0B	; 11
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	90 93 61 00 	sts	0x0061, r25
 1e6:	80 93 60 00 	sts	0x0060, r24
	data=0;
 1ea:	10 92 67 00 	sts	0x0067, r1
 1ee:	10 92 66 00 	sts	0x0066, r1
	setb(GICR,INT1);	//enable interrupt 1
 1f2:	8b b7       	in	r24, 0x3b	; 59
 1f4:	80 68       	ori	r24, 0x80	; 128
 1f6:	8b bf       	out	0x3b, r24	; 59
 1f8:	08 95       	ret

000001fa <mouse_init>:
	//_delay_ms(400);
}
void mouse_init()
{
	host_send(0xff);
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 a3 00 	call	0x146	; 0x146 <host_send>
	//mouse_read();  /* ack byte */
	//mouse_read();  /* blank */
	//mouse_read();  /* blank */
	host_send(0xf0);  /* remote mode */
 202:	80 ef       	ldi	r24, 0xF0	; 240
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 a3 00 	call	0x146	; 0x146 <host_send>
 20a:	8f e8       	ldi	r24, 0x8F	; 143
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <mouse_init+0x14>
 212:	00 c0       	rjmp	.+0      	; 0x214 <mouse_init+0x1a>
 214:	00 00       	nop
 216:	08 95       	ret

00000218 <main>:
#include "F:\AVR\Header\myPS2MOUSE_INTRRUPT.h"

char status,mx,my;
int main(void)
{
	init_UART();//khai bao UART
 218:	0e 94 8a 00 	call	0x114	; 0x114 <init_UART>
	//vietso_UART(123);
	DDR_BJT=0xff;
 21c:	8f ef       	ldi	r24, 0xFF	; 255
 21e:	87 bb       	out	0x17, r24	; 23
	PORT_BJT=0x00;
 220:	18 ba       	out	0x18, r1	; 24
	DDR_PS2=0X03;
 222:	83 e0       	ldi	r24, 0x03	; 3
 224:	81 bb       	out	0x11, r24	; 17
	MCUCR=1<<ISC11;//ngat suon xuong timer 1
 226:	88 e0       	ldi	r24, 0x08	; 8
 228:	85 bf       	out	0x35, r24	; 53
	sei();
 22a:	78 94       	sei
	
	mouse_init();
 22c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <mouse_init>
	while(1)
	{
		host_send(0xEB);
 230:	8b ee       	ldi	r24, 0xEB	; 235
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 a3 00 	call	0x146	; 0x146 <host_send>
		while(inbit(GICR,INT1));
 238:	0b b6       	in	r0, 0x3b	; 59
 23a:	07 fc       	sbrc	r0, 7
 23c:	fd cf       	rjmp	.-6      	; 0x238 <main+0x20>
		vietso_UART(data);
 23e:	80 91 66 00 	lds	r24, 0x0066
 242:	90 91 67 00 	lds	r25, 0x0067
 246:	0e 94 5d 00 	call	0xba	; 0xba <vietso_UART>
		space_UART(2);
 24a:	82 e0       	ldi	r24, 0x02	; 2
 24c:	0e 94 92 00 	call	0x124	; 0x124 <space_UART>
		setb(GICR,INT1);
 250:	8b b7       	in	r24, 0x3b	; 59
 252:	80 68       	ori	r24, 0x80	; 128
 254:	8b bf       	out	0x3b, r24	; 59
		while(inbit(GICR,INT1));
 256:	0b b6       	in	r0, 0x3b	; 59
 258:	07 fc       	sbrc	r0, 7
 25a:	fd cf       	rjmp	.-6      	; 0x256 <main+0x3e>
		vietso_UART(data);
 25c:	80 91 66 00 	lds	r24, 0x0066
 260:	90 91 67 00 	lds	r25, 0x0067
 264:	0e 94 5d 00 	call	0xba	; 0xba <vietso_UART>
		space_UART(2);
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	0e 94 92 00 	call	0x124	; 0x124 <space_UART>
		setb(GICR,INT1);
 26e:	8b b7       	in	r24, 0x3b	; 59
 270:	80 68       	ori	r24, 0x80	; 128
 272:	8b bf       	out	0x3b, r24	; 59
		while(inbit(GICR,INT1));
 274:	0b b6       	in	r0, 0x3b	; 59
 276:	07 fc       	sbrc	r0, 7
 278:	fd cf       	rjmp	.-6      	; 0x274 <main+0x5c>
		vietso_UART(data);
 27a:	80 91 66 00 	lds	r24, 0x0066
 27e:	90 91 67 00 	lds	r25, 0x0067
 282:	0e 94 5d 00 	call	0xba	; 0xba <vietso_UART>
		space_UART(2);
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	0e 94 92 00 	call	0x124	; 0x124 <space_UART>
		setb(GICR,INT1);
 28c:	8b b7       	in	r24, 0x3b	; 59
 28e:	80 68       	ori	r24, 0x80	; 128
 290:	8b bf       	out	0x3b, r24	; 59
		while(inbit(GICR,INT1));
 292:	0b b6       	in	r0, 0x3b	; 59
 294:	07 fc       	sbrc	r0, 7
 296:	fd cf       	rjmp	.-6      	; 0x292 <main+0x7a>
		vietso_UART(data);
 298:	80 91 66 00 	lds	r24, 0x0066
 29c:	90 91 67 00 	lds	r25, 0x0067
 2a0:	0e 94 5d 00 	call	0xba	; 0xba <vietso_UART>
		newline_UART();
 2a4:	0e 94 9e 00 	call	0x13c	; 0x13c <newline_UART>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a8:	2f ef       	ldi	r18, 0xFF	; 255
 2aa:	87 e8       	ldi	r24, 0x87	; 135
 2ac:	93 e1       	ldi	r25, 0x13	; 19
 2ae:	21 50       	subi	r18, 0x01	; 1
 2b0:	80 40       	sbci	r24, 0x00	; 0
 2b2:	90 40       	sbci	r25, 0x00	; 0
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <main+0x96>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <main+0xa0>
 2b8:	00 00       	nop
 2ba:	ba cf       	rjmp	.-140    	; 0x230 <main+0x18>

000002bc <__vector_2>:
		//vietso_UART(555);
		//newline_UART();
	}//end while(1)
}//edn main
ISR(INT1_vect)
{
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	2f 93       	push	r18
 2c8:	3f 93       	push	r19
 2ca:	8f 93       	push	r24
 2cc:	9f 93       	push	r25
	if (dembit>2 && dembit<11) //read 8 bit in 11 bit from mouse
 2ce:	80 91 60 00 	lds	r24, 0x0060
 2d2:	90 91 61 00 	lds	r25, 0x0061
 2d6:	9c 01       	movw	r18, r24
 2d8:	23 50       	subi	r18, 0x03	; 3
 2da:	31 09       	sbc	r19, r1
 2dc:	28 30       	cpi	r18, 0x08	; 8
 2de:	31 05       	cpc	r19, r1
 2e0:	90 f4       	brcc	.+36     	; 0x306 <__vector_2+0x4a>
	{
		data=data>>1;
 2e2:	20 91 66 00 	lds	r18, 0x0066
 2e6:	30 91 67 00 	lds	r19, 0x0067
 2ea:	35 95       	asr	r19
 2ec:	27 95       	ror	r18
 2ee:	30 93 67 00 	sts	0x0067, r19
 2f2:	20 93 66 00 	sts	0x0066, r18
		if(inbit(PIN_PS2,DATA)==1)
 2f6:	82 9b       	sbis	0x10, 2	; 16
 2f8:	06 c0       	rjmp	.+12     	; 0x306 <__vector_2+0x4a>
			data=data+0x80;
 2fa:	20 58       	subi	r18, 0x80	; 128
 2fc:	3f 4f       	sbci	r19, 0xFF	; 255
 2fe:	30 93 67 00 	sts	0x0067, r19
 302:	20 93 66 00 	sts	0x0066, r18
	}//end if
	if (--dembit==0)
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	00 97       	sbiw	r24, 0x00	; 0
 30a:	29 f0       	breq	.+10     	; 0x316 <__vector_2+0x5a>
 30c:	90 93 61 00 	sts	0x0061, r25
 310:	80 93 60 00 	sts	0x0060, r24
 314:	0b c0       	rjmp	.+22     	; 0x32c <__vector_2+0x70>
	{
		dembit=11;
 316:	8b e0       	ldi	r24, 0x0B	; 11
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	90 93 61 00 	sts	0x0061, r25
 31e:	80 93 60 00 	sts	0x0060, r24
		clrb(GICR,INT1);	//disable interrupt 1
 322:	8b b7       	in	r24, 0x3b	; 59
 324:	8f 77       	andi	r24, 0x7F	; 127
 326:	8b bf       	out	0x3b, r24	; 59
		UP_CLK;				//CLK=1
 328:	c3 98       	cbi	0x18, 3	; 24
		UP_DATA;			//DATA=1
 32a:	c2 98       	cbi	0x18, 2	; 24
		
	}	
 32c:	9f 91       	pop	r25
 32e:	8f 91       	pop	r24
 330:	3f 91       	pop	r19
 332:	2f 91       	pop	r18
 334:	0f 90       	pop	r0
 336:	0f be       	out	0x3f, r0	; 63
 338:	0f 90       	pop	r0
 33a:	1f 90       	pop	r1
 33c:	18 95       	reti

0000033e <sprintf>:
 33e:	ae e0       	ldi	r26, 0x0E	; 14
 340:	b0 e0       	ldi	r27, 0x00	; 0
 342:	e5 ea       	ldi	r30, 0xA5	; 165
 344:	f1 e0       	ldi	r31, 0x01	; 1
 346:	0c 94 47 04 	jmp	0x88e	; 0x88e <__prologue_saves__+0x1c>
 34a:	0d 89       	ldd	r16, Y+21	; 0x15
 34c:	1e 89       	ldd	r17, Y+22	; 0x16
 34e:	86 e0       	ldi	r24, 0x06	; 6
 350:	8c 83       	std	Y+4, r24	; 0x04
 352:	1a 83       	std	Y+2, r17	; 0x02
 354:	09 83       	std	Y+1, r16	; 0x01
 356:	8f ef       	ldi	r24, 0xFF	; 255
 358:	9f e7       	ldi	r25, 0x7F	; 127
 35a:	9e 83       	std	Y+6, r25	; 0x06
 35c:	8d 83       	std	Y+5, r24	; 0x05
 35e:	ae 01       	movw	r20, r28
 360:	47 5e       	subi	r20, 0xE7	; 231
 362:	5f 4f       	sbci	r21, 0xFF	; 255
 364:	6f 89       	ldd	r22, Y+23	; 0x17
 366:	78 8d       	ldd	r23, Y+24	; 0x18
 368:	ce 01       	movw	r24, r28
 36a:	01 96       	adiw	r24, 0x01	; 1
 36c:	0e 94 c1 01 	call	0x382	; 0x382 <vfprintf>
 370:	ef 81       	ldd	r30, Y+7	; 0x07
 372:	f8 85       	ldd	r31, Y+8	; 0x08
 374:	e0 0f       	add	r30, r16
 376:	f1 1f       	adc	r31, r17
 378:	10 82       	st	Z, r1
 37a:	2e 96       	adiw	r28, 0x0e	; 14
 37c:	e4 e0       	ldi	r30, 0x04	; 4
 37e:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__epilogue_restores__+0x1c>

00000382 <vfprintf>:
 382:	ac e0       	ldi	r26, 0x0C	; 12
 384:	b0 e0       	ldi	r27, 0x00	; 0
 386:	e7 ec       	ldi	r30, 0xC7	; 199
 388:	f1 e0       	ldi	r31, 0x01	; 1
 38a:	0c 94 39 04 	jmp	0x872	; 0x872 <__prologue_saves__>
 38e:	7c 01       	movw	r14, r24
 390:	6b 01       	movw	r12, r22
 392:	8a 01       	movw	r16, r20
 394:	fc 01       	movw	r30, r24
 396:	17 82       	std	Z+7, r1	; 0x07
 398:	16 82       	std	Z+6, r1	; 0x06
 39a:	83 81       	ldd	r24, Z+3	; 0x03
 39c:	81 ff       	sbrs	r24, 1
 39e:	bd c1       	rjmp	.+890    	; 0x71a <__stack+0x2bb>
 3a0:	ce 01       	movw	r24, r28
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	4c 01       	movw	r8, r24
 3a6:	f7 01       	movw	r30, r14
 3a8:	93 81       	ldd	r25, Z+3	; 0x03
 3aa:	f6 01       	movw	r30, r12
 3ac:	93 fd       	sbrc	r25, 3
 3ae:	85 91       	lpm	r24, Z+
 3b0:	93 ff       	sbrs	r25, 3
 3b2:	81 91       	ld	r24, Z+
 3b4:	6f 01       	movw	r12, r30
 3b6:	88 23       	and	r24, r24
 3b8:	09 f4       	brne	.+2      	; 0x3bc <vfprintf+0x3a>
 3ba:	ab c1       	rjmp	.+854    	; 0x712 <__stack+0x2b3>
 3bc:	85 32       	cpi	r24, 0x25	; 37
 3be:	39 f4       	brne	.+14     	; 0x3ce <vfprintf+0x4c>
 3c0:	93 fd       	sbrc	r25, 3
 3c2:	85 91       	lpm	r24, Z+
 3c4:	93 ff       	sbrs	r25, 3
 3c6:	81 91       	ld	r24, Z+
 3c8:	6f 01       	movw	r12, r30
 3ca:	85 32       	cpi	r24, 0x25	; 37
 3cc:	29 f4       	brne	.+10     	; 0x3d8 <vfprintf+0x56>
 3ce:	b7 01       	movw	r22, r14
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 a9 03 	call	0x752	; 0x752 <fputc>
 3d6:	e7 cf       	rjmp	.-50     	; 0x3a6 <vfprintf+0x24>
 3d8:	51 2c       	mov	r5, r1
 3da:	31 2c       	mov	r3, r1
 3dc:	20 e0       	ldi	r18, 0x00	; 0
 3de:	20 32       	cpi	r18, 0x20	; 32
 3e0:	a0 f4       	brcc	.+40     	; 0x40a <vfprintf+0x88>
 3e2:	8b 32       	cpi	r24, 0x2B	; 43
 3e4:	69 f0       	breq	.+26     	; 0x400 <vfprintf+0x7e>
 3e6:	30 f4       	brcc	.+12     	; 0x3f4 <vfprintf+0x72>
 3e8:	80 32       	cpi	r24, 0x20	; 32
 3ea:	59 f0       	breq	.+22     	; 0x402 <vfprintf+0x80>
 3ec:	83 32       	cpi	r24, 0x23	; 35
 3ee:	69 f4       	brne	.+26     	; 0x40a <vfprintf+0x88>
 3f0:	20 61       	ori	r18, 0x10	; 16
 3f2:	2c c0       	rjmp	.+88     	; 0x44c <vfprintf+0xca>
 3f4:	8d 32       	cpi	r24, 0x2D	; 45
 3f6:	39 f0       	breq	.+14     	; 0x406 <vfprintf+0x84>
 3f8:	80 33       	cpi	r24, 0x30	; 48
 3fa:	39 f4       	brne	.+14     	; 0x40a <vfprintf+0x88>
 3fc:	21 60       	ori	r18, 0x01	; 1
 3fe:	26 c0       	rjmp	.+76     	; 0x44c <vfprintf+0xca>
 400:	22 60       	ori	r18, 0x02	; 2
 402:	24 60       	ori	r18, 0x04	; 4
 404:	23 c0       	rjmp	.+70     	; 0x44c <vfprintf+0xca>
 406:	28 60       	ori	r18, 0x08	; 8
 408:	21 c0       	rjmp	.+66     	; 0x44c <vfprintf+0xca>
 40a:	27 fd       	sbrc	r18, 7
 40c:	27 c0       	rjmp	.+78     	; 0x45c <vfprintf+0xda>
 40e:	30 ed       	ldi	r19, 0xD0	; 208
 410:	38 0f       	add	r19, r24
 412:	3a 30       	cpi	r19, 0x0A	; 10
 414:	78 f4       	brcc	.+30     	; 0x434 <vfprintf+0xb2>
 416:	26 ff       	sbrs	r18, 6
 418:	06 c0       	rjmp	.+12     	; 0x426 <vfprintf+0xa4>
 41a:	fa e0       	ldi	r31, 0x0A	; 10
 41c:	5f 9e       	mul	r5, r31
 41e:	30 0d       	add	r19, r0
 420:	11 24       	eor	r1, r1
 422:	53 2e       	mov	r5, r19
 424:	13 c0       	rjmp	.+38     	; 0x44c <vfprintf+0xca>
 426:	8a e0       	ldi	r24, 0x0A	; 10
 428:	38 9e       	mul	r3, r24
 42a:	30 0d       	add	r19, r0
 42c:	11 24       	eor	r1, r1
 42e:	33 2e       	mov	r3, r19
 430:	20 62       	ori	r18, 0x20	; 32
 432:	0c c0       	rjmp	.+24     	; 0x44c <vfprintf+0xca>
 434:	8e 32       	cpi	r24, 0x2E	; 46
 436:	21 f4       	brne	.+8      	; 0x440 <vfprintf+0xbe>
 438:	26 fd       	sbrc	r18, 6
 43a:	6b c1       	rjmp	.+726    	; 0x712 <__stack+0x2b3>
 43c:	20 64       	ori	r18, 0x40	; 64
 43e:	06 c0       	rjmp	.+12     	; 0x44c <vfprintf+0xca>
 440:	8c 36       	cpi	r24, 0x6C	; 108
 442:	11 f4       	brne	.+4      	; 0x448 <vfprintf+0xc6>
 444:	20 68       	ori	r18, 0x80	; 128
 446:	02 c0       	rjmp	.+4      	; 0x44c <vfprintf+0xca>
 448:	88 36       	cpi	r24, 0x68	; 104
 44a:	41 f4       	brne	.+16     	; 0x45c <vfprintf+0xda>
 44c:	f6 01       	movw	r30, r12
 44e:	93 fd       	sbrc	r25, 3
 450:	85 91       	lpm	r24, Z+
 452:	93 ff       	sbrs	r25, 3
 454:	81 91       	ld	r24, Z+
 456:	6f 01       	movw	r12, r30
 458:	81 11       	cpse	r24, r1
 45a:	c1 cf       	rjmp	.-126    	; 0x3de <vfprintf+0x5c>
 45c:	98 2f       	mov	r25, r24
 45e:	9f 7d       	andi	r25, 0xDF	; 223
 460:	95 54       	subi	r25, 0x45	; 69
 462:	93 30       	cpi	r25, 0x03	; 3
 464:	28 f4       	brcc	.+10     	; 0x470 <__stack+0x11>
 466:	0c 5f       	subi	r16, 0xFC	; 252
 468:	1f 4f       	sbci	r17, 0xFF	; 255
 46a:	ff e3       	ldi	r31, 0x3F	; 63
 46c:	f9 83       	std	Y+1, r31	; 0x01
 46e:	0d c0       	rjmp	.+26     	; 0x48a <__stack+0x2b>
 470:	83 36       	cpi	r24, 0x63	; 99
 472:	31 f0       	breq	.+12     	; 0x480 <__stack+0x21>
 474:	83 37       	cpi	r24, 0x73	; 115
 476:	71 f0       	breq	.+28     	; 0x494 <__stack+0x35>
 478:	83 35       	cpi	r24, 0x53	; 83
 47a:	09 f0       	breq	.+2      	; 0x47e <__stack+0x1f>
 47c:	5b c0       	rjmp	.+182    	; 0x534 <__stack+0xd5>
 47e:	22 c0       	rjmp	.+68     	; 0x4c4 <__stack+0x65>
 480:	f8 01       	movw	r30, r16
 482:	80 81       	ld	r24, Z
 484:	89 83       	std	Y+1, r24	; 0x01
 486:	0e 5f       	subi	r16, 0xFE	; 254
 488:	1f 4f       	sbci	r17, 0xFF	; 255
 48a:	44 24       	eor	r4, r4
 48c:	43 94       	inc	r4
 48e:	51 2c       	mov	r5, r1
 490:	54 01       	movw	r10, r8
 492:	15 c0       	rjmp	.+42     	; 0x4be <__stack+0x5f>
 494:	38 01       	movw	r6, r16
 496:	f2 e0       	ldi	r31, 0x02	; 2
 498:	6f 0e       	add	r6, r31
 49a:	71 1c       	adc	r7, r1
 49c:	f8 01       	movw	r30, r16
 49e:	a0 80       	ld	r10, Z
 4a0:	b1 80       	ldd	r11, Z+1	; 0x01
 4a2:	26 ff       	sbrs	r18, 6
 4a4:	03 c0       	rjmp	.+6      	; 0x4ac <__stack+0x4d>
 4a6:	65 2d       	mov	r22, r5
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <__stack+0x51>
 4ac:	6f ef       	ldi	r22, 0xFF	; 255
 4ae:	7f ef       	ldi	r23, 0xFF	; 255
 4b0:	c5 01       	movw	r24, r10
 4b2:	2c 87       	std	Y+12, r18	; 0x0c
 4b4:	0e 94 9e 03 	call	0x73c	; 0x73c <strnlen>
 4b8:	2c 01       	movw	r4, r24
 4ba:	83 01       	movw	r16, r6
 4bc:	2c 85       	ldd	r18, Y+12	; 0x0c
 4be:	2f 77       	andi	r18, 0x7F	; 127
 4c0:	22 2e       	mov	r2, r18
 4c2:	17 c0       	rjmp	.+46     	; 0x4f2 <__stack+0x93>
 4c4:	38 01       	movw	r6, r16
 4c6:	f2 e0       	ldi	r31, 0x02	; 2
 4c8:	6f 0e       	add	r6, r31
 4ca:	71 1c       	adc	r7, r1
 4cc:	f8 01       	movw	r30, r16
 4ce:	a0 80       	ld	r10, Z
 4d0:	b1 80       	ldd	r11, Z+1	; 0x01
 4d2:	26 ff       	sbrs	r18, 6
 4d4:	03 c0       	rjmp	.+6      	; 0x4dc <__stack+0x7d>
 4d6:	65 2d       	mov	r22, r5
 4d8:	70 e0       	ldi	r23, 0x00	; 0
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <__stack+0x81>
 4dc:	6f ef       	ldi	r22, 0xFF	; 255
 4de:	7f ef       	ldi	r23, 0xFF	; 255
 4e0:	c5 01       	movw	r24, r10
 4e2:	2c 87       	std	Y+12, r18	; 0x0c
 4e4:	0e 94 93 03 	call	0x726	; 0x726 <strnlen_P>
 4e8:	2c 01       	movw	r4, r24
 4ea:	2c 85       	ldd	r18, Y+12	; 0x0c
 4ec:	20 68       	ori	r18, 0x80	; 128
 4ee:	22 2e       	mov	r2, r18
 4f0:	83 01       	movw	r16, r6
 4f2:	23 fc       	sbrc	r2, 3
 4f4:	1b c0       	rjmp	.+54     	; 0x52c <__stack+0xcd>
 4f6:	83 2d       	mov	r24, r3
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	48 16       	cp	r4, r24
 4fc:	59 06       	cpc	r5, r25
 4fe:	b0 f4       	brcc	.+44     	; 0x52c <__stack+0xcd>
 500:	b7 01       	movw	r22, r14
 502:	80 e2       	ldi	r24, 0x20	; 32
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 a9 03 	call	0x752	; 0x752 <fputc>
 50a:	3a 94       	dec	r3
 50c:	f4 cf       	rjmp	.-24     	; 0x4f6 <__stack+0x97>
 50e:	f5 01       	movw	r30, r10
 510:	27 fc       	sbrc	r2, 7
 512:	85 91       	lpm	r24, Z+
 514:	27 fe       	sbrs	r2, 7
 516:	81 91       	ld	r24, Z+
 518:	5f 01       	movw	r10, r30
 51a:	b7 01       	movw	r22, r14
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	0e 94 a9 03 	call	0x752	; 0x752 <fputc>
 522:	31 10       	cpse	r3, r1
 524:	3a 94       	dec	r3
 526:	f1 e0       	ldi	r31, 0x01	; 1
 528:	4f 1a       	sub	r4, r31
 52a:	51 08       	sbc	r5, r1
 52c:	41 14       	cp	r4, r1
 52e:	51 04       	cpc	r5, r1
 530:	71 f7       	brne	.-36     	; 0x50e <__stack+0xaf>
 532:	e5 c0       	rjmp	.+458    	; 0x6fe <__stack+0x29f>
 534:	84 36       	cpi	r24, 0x64	; 100
 536:	11 f0       	breq	.+4      	; 0x53c <__stack+0xdd>
 538:	89 36       	cpi	r24, 0x69	; 105
 53a:	39 f5       	brne	.+78     	; 0x58a <__stack+0x12b>
 53c:	f8 01       	movw	r30, r16
 53e:	27 ff       	sbrs	r18, 7
 540:	07 c0       	rjmp	.+14     	; 0x550 <__stack+0xf1>
 542:	60 81       	ld	r22, Z
 544:	71 81       	ldd	r23, Z+1	; 0x01
 546:	82 81       	ldd	r24, Z+2	; 0x02
 548:	93 81       	ldd	r25, Z+3	; 0x03
 54a:	0c 5f       	subi	r16, 0xFC	; 252
 54c:	1f 4f       	sbci	r17, 0xFF	; 255
 54e:	08 c0       	rjmp	.+16     	; 0x560 <__stack+0x101>
 550:	60 81       	ld	r22, Z
 552:	71 81       	ldd	r23, Z+1	; 0x01
 554:	88 27       	eor	r24, r24
 556:	77 fd       	sbrc	r23, 7
 558:	80 95       	com	r24
 55a:	98 2f       	mov	r25, r24
 55c:	0e 5f       	subi	r16, 0xFE	; 254
 55e:	1f 4f       	sbci	r17, 0xFF	; 255
 560:	2f 76       	andi	r18, 0x6F	; 111
 562:	b2 2e       	mov	r11, r18
 564:	97 ff       	sbrs	r25, 7
 566:	09 c0       	rjmp	.+18     	; 0x57a <__stack+0x11b>
 568:	90 95       	com	r25
 56a:	80 95       	com	r24
 56c:	70 95       	com	r23
 56e:	61 95       	neg	r22
 570:	7f 4f       	sbci	r23, 0xFF	; 255
 572:	8f 4f       	sbci	r24, 0xFF	; 255
 574:	9f 4f       	sbci	r25, 0xFF	; 255
 576:	20 68       	ori	r18, 0x80	; 128
 578:	b2 2e       	mov	r11, r18
 57a:	2a e0       	ldi	r18, 0x0A	; 10
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	a4 01       	movw	r20, r8
 580:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__ultoa_invert>
 584:	a8 2e       	mov	r10, r24
 586:	a8 18       	sub	r10, r8
 588:	44 c0       	rjmp	.+136    	; 0x612 <__stack+0x1b3>
 58a:	85 37       	cpi	r24, 0x75	; 117
 58c:	29 f4       	brne	.+10     	; 0x598 <__stack+0x139>
 58e:	2f 7e       	andi	r18, 0xEF	; 239
 590:	b2 2e       	mov	r11, r18
 592:	2a e0       	ldi	r18, 0x0A	; 10
 594:	30 e0       	ldi	r19, 0x00	; 0
 596:	25 c0       	rjmp	.+74     	; 0x5e2 <__stack+0x183>
 598:	f2 2f       	mov	r31, r18
 59a:	f9 7f       	andi	r31, 0xF9	; 249
 59c:	bf 2e       	mov	r11, r31
 59e:	8f 36       	cpi	r24, 0x6F	; 111
 5a0:	c1 f0       	breq	.+48     	; 0x5d2 <__stack+0x173>
 5a2:	18 f4       	brcc	.+6      	; 0x5aa <__stack+0x14b>
 5a4:	88 35       	cpi	r24, 0x58	; 88
 5a6:	79 f0       	breq	.+30     	; 0x5c6 <__stack+0x167>
 5a8:	b4 c0       	rjmp	.+360    	; 0x712 <__stack+0x2b3>
 5aa:	80 37       	cpi	r24, 0x70	; 112
 5ac:	19 f0       	breq	.+6      	; 0x5b4 <__stack+0x155>
 5ae:	88 37       	cpi	r24, 0x78	; 120
 5b0:	21 f0       	breq	.+8      	; 0x5ba <__stack+0x15b>
 5b2:	af c0       	rjmp	.+350    	; 0x712 <__stack+0x2b3>
 5b4:	2f 2f       	mov	r18, r31
 5b6:	20 61       	ori	r18, 0x10	; 16
 5b8:	b2 2e       	mov	r11, r18
 5ba:	b4 fe       	sbrs	r11, 4
 5bc:	0d c0       	rjmp	.+26     	; 0x5d8 <__stack+0x179>
 5be:	8b 2d       	mov	r24, r11
 5c0:	84 60       	ori	r24, 0x04	; 4
 5c2:	b8 2e       	mov	r11, r24
 5c4:	09 c0       	rjmp	.+18     	; 0x5d8 <__stack+0x179>
 5c6:	24 ff       	sbrs	r18, 4
 5c8:	0a c0       	rjmp	.+20     	; 0x5de <__stack+0x17f>
 5ca:	9f 2f       	mov	r25, r31
 5cc:	96 60       	ori	r25, 0x06	; 6
 5ce:	b9 2e       	mov	r11, r25
 5d0:	06 c0       	rjmp	.+12     	; 0x5de <__stack+0x17f>
 5d2:	28 e0       	ldi	r18, 0x08	; 8
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	05 c0       	rjmp	.+10     	; 0x5e2 <__stack+0x183>
 5d8:	20 e1       	ldi	r18, 0x10	; 16
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <__stack+0x183>
 5de:	20 e1       	ldi	r18, 0x10	; 16
 5e0:	32 e0       	ldi	r19, 0x02	; 2
 5e2:	f8 01       	movw	r30, r16
 5e4:	b7 fe       	sbrs	r11, 7
 5e6:	07 c0       	rjmp	.+14     	; 0x5f6 <__stack+0x197>
 5e8:	60 81       	ld	r22, Z
 5ea:	71 81       	ldd	r23, Z+1	; 0x01
 5ec:	82 81       	ldd	r24, Z+2	; 0x02
 5ee:	93 81       	ldd	r25, Z+3	; 0x03
 5f0:	0c 5f       	subi	r16, 0xFC	; 252
 5f2:	1f 4f       	sbci	r17, 0xFF	; 255
 5f4:	06 c0       	rjmp	.+12     	; 0x602 <__stack+0x1a3>
 5f6:	60 81       	ld	r22, Z
 5f8:	71 81       	ldd	r23, Z+1	; 0x01
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	0e 5f       	subi	r16, 0xFE	; 254
 600:	1f 4f       	sbci	r17, 0xFF	; 255
 602:	a4 01       	movw	r20, r8
 604:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__ultoa_invert>
 608:	a8 2e       	mov	r10, r24
 60a:	a8 18       	sub	r10, r8
 60c:	fb 2d       	mov	r31, r11
 60e:	ff 77       	andi	r31, 0x7F	; 127
 610:	bf 2e       	mov	r11, r31
 612:	b6 fe       	sbrs	r11, 6
 614:	0b c0       	rjmp	.+22     	; 0x62c <__stack+0x1cd>
 616:	2b 2d       	mov	r18, r11
 618:	2e 7f       	andi	r18, 0xFE	; 254
 61a:	a5 14       	cp	r10, r5
 61c:	50 f4       	brcc	.+20     	; 0x632 <__stack+0x1d3>
 61e:	b4 fe       	sbrs	r11, 4
 620:	0a c0       	rjmp	.+20     	; 0x636 <__stack+0x1d7>
 622:	b2 fc       	sbrc	r11, 2
 624:	08 c0       	rjmp	.+16     	; 0x636 <__stack+0x1d7>
 626:	2b 2d       	mov	r18, r11
 628:	2e 7e       	andi	r18, 0xEE	; 238
 62a:	05 c0       	rjmp	.+10     	; 0x636 <__stack+0x1d7>
 62c:	7a 2c       	mov	r7, r10
 62e:	2b 2d       	mov	r18, r11
 630:	03 c0       	rjmp	.+6      	; 0x638 <__stack+0x1d9>
 632:	7a 2c       	mov	r7, r10
 634:	01 c0       	rjmp	.+2      	; 0x638 <__stack+0x1d9>
 636:	75 2c       	mov	r7, r5
 638:	24 ff       	sbrs	r18, 4
 63a:	0d c0       	rjmp	.+26     	; 0x656 <__stack+0x1f7>
 63c:	fe 01       	movw	r30, r28
 63e:	ea 0d       	add	r30, r10
 640:	f1 1d       	adc	r31, r1
 642:	80 81       	ld	r24, Z
 644:	80 33       	cpi	r24, 0x30	; 48
 646:	11 f4       	brne	.+4      	; 0x64c <__stack+0x1ed>
 648:	29 7e       	andi	r18, 0xE9	; 233
 64a:	09 c0       	rjmp	.+18     	; 0x65e <__stack+0x1ff>
 64c:	22 ff       	sbrs	r18, 2
 64e:	06 c0       	rjmp	.+12     	; 0x65c <__stack+0x1fd>
 650:	73 94       	inc	r7
 652:	73 94       	inc	r7
 654:	04 c0       	rjmp	.+8      	; 0x65e <__stack+0x1ff>
 656:	82 2f       	mov	r24, r18
 658:	86 78       	andi	r24, 0x86	; 134
 65a:	09 f0       	breq	.+2      	; 0x65e <__stack+0x1ff>
 65c:	73 94       	inc	r7
 65e:	23 fd       	sbrc	r18, 3
 660:	13 c0       	rjmp	.+38     	; 0x688 <__stack+0x229>
 662:	20 ff       	sbrs	r18, 0
 664:	06 c0       	rjmp	.+12     	; 0x672 <__stack+0x213>
 666:	5a 2c       	mov	r5, r10
 668:	73 14       	cp	r7, r3
 66a:	18 f4       	brcc	.+6      	; 0x672 <__stack+0x213>
 66c:	53 0c       	add	r5, r3
 66e:	57 18       	sub	r5, r7
 670:	73 2c       	mov	r7, r3
 672:	73 14       	cp	r7, r3
 674:	68 f4       	brcc	.+26     	; 0x690 <__stack+0x231>
 676:	b7 01       	movw	r22, r14
 678:	80 e2       	ldi	r24, 0x20	; 32
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	2c 87       	std	Y+12, r18	; 0x0c
 67e:	0e 94 a9 03 	call	0x752	; 0x752 <fputc>
 682:	73 94       	inc	r7
 684:	2c 85       	ldd	r18, Y+12	; 0x0c
 686:	f5 cf       	rjmp	.-22     	; 0x672 <__stack+0x213>
 688:	73 14       	cp	r7, r3
 68a:	10 f4       	brcc	.+4      	; 0x690 <__stack+0x231>
 68c:	37 18       	sub	r3, r7
 68e:	01 c0       	rjmp	.+2      	; 0x692 <__stack+0x233>
 690:	31 2c       	mov	r3, r1
 692:	24 ff       	sbrs	r18, 4
 694:	12 c0       	rjmp	.+36     	; 0x6ba <__stack+0x25b>
 696:	b7 01       	movw	r22, r14
 698:	80 e3       	ldi	r24, 0x30	; 48
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	2c 87       	std	Y+12, r18	; 0x0c
 69e:	0e 94 a9 03 	call	0x752	; 0x752 <fputc>
 6a2:	2c 85       	ldd	r18, Y+12	; 0x0c
 6a4:	22 ff       	sbrs	r18, 2
 6a6:	17 c0       	rjmp	.+46     	; 0x6d6 <__stack+0x277>
 6a8:	21 ff       	sbrs	r18, 1
 6aa:	03 c0       	rjmp	.+6      	; 0x6b2 <__stack+0x253>
 6ac:	88 e5       	ldi	r24, 0x58	; 88
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <__stack+0x257>
 6b2:	88 e7       	ldi	r24, 0x78	; 120
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	b7 01       	movw	r22, r14
 6b8:	0c c0       	rjmp	.+24     	; 0x6d2 <__stack+0x273>
 6ba:	82 2f       	mov	r24, r18
 6bc:	86 78       	andi	r24, 0x86	; 134
 6be:	59 f0       	breq	.+22     	; 0x6d6 <__stack+0x277>
 6c0:	21 fd       	sbrc	r18, 1
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <__stack+0x269>
 6c4:	80 e2       	ldi	r24, 0x20	; 32
 6c6:	01 c0       	rjmp	.+2      	; 0x6ca <__stack+0x26b>
 6c8:	8b e2       	ldi	r24, 0x2B	; 43
 6ca:	27 fd       	sbrc	r18, 7
 6cc:	8d e2       	ldi	r24, 0x2D	; 45
 6ce:	b7 01       	movw	r22, r14
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	0e 94 a9 03 	call	0x752	; 0x752 <fputc>
 6d6:	a5 14       	cp	r10, r5
 6d8:	38 f4       	brcc	.+14     	; 0x6e8 <__stack+0x289>
 6da:	b7 01       	movw	r22, r14
 6dc:	80 e3       	ldi	r24, 0x30	; 48
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	0e 94 a9 03 	call	0x752	; 0x752 <fputc>
 6e4:	5a 94       	dec	r5
 6e6:	f7 cf       	rjmp	.-18     	; 0x6d6 <__stack+0x277>
 6e8:	aa 94       	dec	r10
 6ea:	f4 01       	movw	r30, r8
 6ec:	ea 0d       	add	r30, r10
 6ee:	f1 1d       	adc	r31, r1
 6f0:	80 81       	ld	r24, Z
 6f2:	b7 01       	movw	r22, r14
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	0e 94 a9 03 	call	0x752	; 0x752 <fputc>
 6fa:	a1 10       	cpse	r10, r1
 6fc:	f5 cf       	rjmp	.-22     	; 0x6e8 <__stack+0x289>
 6fe:	33 20       	and	r3, r3
 700:	09 f4       	brne	.+2      	; 0x704 <__stack+0x2a5>
 702:	51 ce       	rjmp	.-862    	; 0x3a6 <vfprintf+0x24>
 704:	b7 01       	movw	r22, r14
 706:	80 e2       	ldi	r24, 0x20	; 32
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	0e 94 a9 03 	call	0x752	; 0x752 <fputc>
 70e:	3a 94       	dec	r3
 710:	f6 cf       	rjmp	.-20     	; 0x6fe <__stack+0x29f>
 712:	f7 01       	movw	r30, r14
 714:	86 81       	ldd	r24, Z+6	; 0x06
 716:	97 81       	ldd	r25, Z+7	; 0x07
 718:	02 c0       	rjmp	.+4      	; 0x71e <__stack+0x2bf>
 71a:	8f ef       	ldi	r24, 0xFF	; 255
 71c:	9f ef       	ldi	r25, 0xFF	; 255
 71e:	2c 96       	adiw	r28, 0x0c	; 12
 720:	e2 e1       	ldi	r30, 0x12	; 18
 722:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__epilogue_restores__>

00000726 <strnlen_P>:
 726:	fc 01       	movw	r30, r24
 728:	05 90       	lpm	r0, Z+
 72a:	61 50       	subi	r22, 0x01	; 1
 72c:	70 40       	sbci	r23, 0x00	; 0
 72e:	01 10       	cpse	r0, r1
 730:	d8 f7       	brcc	.-10     	; 0x728 <strnlen_P+0x2>
 732:	80 95       	com	r24
 734:	90 95       	com	r25
 736:	8e 0f       	add	r24, r30
 738:	9f 1f       	adc	r25, r31
 73a:	08 95       	ret

0000073c <strnlen>:
 73c:	fc 01       	movw	r30, r24
 73e:	61 50       	subi	r22, 0x01	; 1
 740:	70 40       	sbci	r23, 0x00	; 0
 742:	01 90       	ld	r0, Z+
 744:	01 10       	cpse	r0, r1
 746:	d8 f7       	brcc	.-10     	; 0x73e <strnlen+0x2>
 748:	80 95       	com	r24
 74a:	90 95       	com	r25
 74c:	8e 0f       	add	r24, r30
 74e:	9f 1f       	adc	r25, r31
 750:	08 95       	ret

00000752 <fputc>:
 752:	0f 93       	push	r16
 754:	1f 93       	push	r17
 756:	cf 93       	push	r28
 758:	df 93       	push	r29
 75a:	18 2f       	mov	r17, r24
 75c:	09 2f       	mov	r16, r25
 75e:	eb 01       	movw	r28, r22
 760:	8b 81       	ldd	r24, Y+3	; 0x03
 762:	81 fd       	sbrc	r24, 1
 764:	03 c0       	rjmp	.+6      	; 0x76c <fputc+0x1a>
 766:	8f ef       	ldi	r24, 0xFF	; 255
 768:	9f ef       	ldi	r25, 0xFF	; 255
 76a:	20 c0       	rjmp	.+64     	; 0x7ac <fputc+0x5a>
 76c:	82 ff       	sbrs	r24, 2
 76e:	10 c0       	rjmp	.+32     	; 0x790 <fputc+0x3e>
 770:	4e 81       	ldd	r20, Y+6	; 0x06
 772:	5f 81       	ldd	r21, Y+7	; 0x07
 774:	2c 81       	ldd	r18, Y+4	; 0x04
 776:	3d 81       	ldd	r19, Y+5	; 0x05
 778:	42 17       	cp	r20, r18
 77a:	53 07       	cpc	r21, r19
 77c:	7c f4       	brge	.+30     	; 0x79c <fputc+0x4a>
 77e:	e8 81       	ld	r30, Y
 780:	f9 81       	ldd	r31, Y+1	; 0x01
 782:	9f 01       	movw	r18, r30
 784:	2f 5f       	subi	r18, 0xFF	; 255
 786:	3f 4f       	sbci	r19, 0xFF	; 255
 788:	39 83       	std	Y+1, r19	; 0x01
 78a:	28 83       	st	Y, r18
 78c:	10 83       	st	Z, r17
 78e:	06 c0       	rjmp	.+12     	; 0x79c <fputc+0x4a>
 790:	e8 85       	ldd	r30, Y+8	; 0x08
 792:	f9 85       	ldd	r31, Y+9	; 0x09
 794:	81 2f       	mov	r24, r17
 796:	09 95       	icall
 798:	89 2b       	or	r24, r25
 79a:	29 f7       	brne	.-54     	; 0x766 <fputc+0x14>
 79c:	2e 81       	ldd	r18, Y+6	; 0x06
 79e:	3f 81       	ldd	r19, Y+7	; 0x07
 7a0:	2f 5f       	subi	r18, 0xFF	; 255
 7a2:	3f 4f       	sbci	r19, 0xFF	; 255
 7a4:	3f 83       	std	Y+7, r19	; 0x07
 7a6:	2e 83       	std	Y+6, r18	; 0x06
 7a8:	81 2f       	mov	r24, r17
 7aa:	90 2f       	mov	r25, r16
 7ac:	df 91       	pop	r29
 7ae:	cf 91       	pop	r28
 7b0:	1f 91       	pop	r17
 7b2:	0f 91       	pop	r16
 7b4:	08 95       	ret

000007b6 <__ultoa_invert>:
 7b6:	fa 01       	movw	r30, r20
 7b8:	aa 27       	eor	r26, r26
 7ba:	28 30       	cpi	r18, 0x08	; 8
 7bc:	51 f1       	breq	.+84     	; 0x812 <__ultoa_invert+0x5c>
 7be:	20 31       	cpi	r18, 0x10	; 16
 7c0:	81 f1       	breq	.+96     	; 0x822 <__ultoa_invert+0x6c>
 7c2:	e8 94       	clt
 7c4:	6f 93       	push	r22
 7c6:	6e 7f       	andi	r22, 0xFE	; 254
 7c8:	6e 5f       	subi	r22, 0xFE	; 254
 7ca:	7f 4f       	sbci	r23, 0xFF	; 255
 7cc:	8f 4f       	sbci	r24, 0xFF	; 255
 7ce:	9f 4f       	sbci	r25, 0xFF	; 255
 7d0:	af 4f       	sbci	r26, 0xFF	; 255
 7d2:	b1 e0       	ldi	r27, 0x01	; 1
 7d4:	3e d0       	rcall	.+124    	; 0x852 <__ultoa_invert+0x9c>
 7d6:	b4 e0       	ldi	r27, 0x04	; 4
 7d8:	3c d0       	rcall	.+120    	; 0x852 <__ultoa_invert+0x9c>
 7da:	67 0f       	add	r22, r23
 7dc:	78 1f       	adc	r23, r24
 7de:	89 1f       	adc	r24, r25
 7e0:	9a 1f       	adc	r25, r26
 7e2:	a1 1d       	adc	r26, r1
 7e4:	68 0f       	add	r22, r24
 7e6:	79 1f       	adc	r23, r25
 7e8:	8a 1f       	adc	r24, r26
 7ea:	91 1d       	adc	r25, r1
 7ec:	a1 1d       	adc	r26, r1
 7ee:	6a 0f       	add	r22, r26
 7f0:	71 1d       	adc	r23, r1
 7f2:	81 1d       	adc	r24, r1
 7f4:	91 1d       	adc	r25, r1
 7f6:	a1 1d       	adc	r26, r1
 7f8:	20 d0       	rcall	.+64     	; 0x83a <__ultoa_invert+0x84>
 7fa:	09 f4       	brne	.+2      	; 0x7fe <__ultoa_invert+0x48>
 7fc:	68 94       	set
 7fe:	3f 91       	pop	r19
 800:	2a e0       	ldi	r18, 0x0A	; 10
 802:	26 9f       	mul	r18, r22
 804:	11 24       	eor	r1, r1
 806:	30 19       	sub	r19, r0
 808:	30 5d       	subi	r19, 0xD0	; 208
 80a:	31 93       	st	Z+, r19
 80c:	de f6       	brtc	.-74     	; 0x7c4 <__ultoa_invert+0xe>
 80e:	cf 01       	movw	r24, r30
 810:	08 95       	ret
 812:	46 2f       	mov	r20, r22
 814:	47 70       	andi	r20, 0x07	; 7
 816:	40 5d       	subi	r20, 0xD0	; 208
 818:	41 93       	st	Z+, r20
 81a:	b3 e0       	ldi	r27, 0x03	; 3
 81c:	0f d0       	rcall	.+30     	; 0x83c <__ultoa_invert+0x86>
 81e:	c9 f7       	brne	.-14     	; 0x812 <__ultoa_invert+0x5c>
 820:	f6 cf       	rjmp	.-20     	; 0x80e <__ultoa_invert+0x58>
 822:	46 2f       	mov	r20, r22
 824:	4f 70       	andi	r20, 0x0F	; 15
 826:	40 5d       	subi	r20, 0xD0	; 208
 828:	4a 33       	cpi	r20, 0x3A	; 58
 82a:	18 f0       	brcs	.+6      	; 0x832 <__ultoa_invert+0x7c>
 82c:	49 5d       	subi	r20, 0xD9	; 217
 82e:	31 fd       	sbrc	r19, 1
 830:	40 52       	subi	r20, 0x20	; 32
 832:	41 93       	st	Z+, r20
 834:	02 d0       	rcall	.+4      	; 0x83a <__ultoa_invert+0x84>
 836:	a9 f7       	brne	.-22     	; 0x822 <__ultoa_invert+0x6c>
 838:	ea cf       	rjmp	.-44     	; 0x80e <__ultoa_invert+0x58>
 83a:	b4 e0       	ldi	r27, 0x04	; 4
 83c:	a6 95       	lsr	r26
 83e:	97 95       	ror	r25
 840:	87 95       	ror	r24
 842:	77 95       	ror	r23
 844:	67 95       	ror	r22
 846:	ba 95       	dec	r27
 848:	c9 f7       	brne	.-14     	; 0x83c <__ultoa_invert+0x86>
 84a:	00 97       	sbiw	r24, 0x00	; 0
 84c:	61 05       	cpc	r22, r1
 84e:	71 05       	cpc	r23, r1
 850:	08 95       	ret
 852:	9b 01       	movw	r18, r22
 854:	ac 01       	movw	r20, r24
 856:	0a 2e       	mov	r0, r26
 858:	06 94       	lsr	r0
 85a:	57 95       	ror	r21
 85c:	47 95       	ror	r20
 85e:	37 95       	ror	r19
 860:	27 95       	ror	r18
 862:	ba 95       	dec	r27
 864:	c9 f7       	brne	.-14     	; 0x858 <__ultoa_invert+0xa2>
 866:	62 0f       	add	r22, r18
 868:	73 1f       	adc	r23, r19
 86a:	84 1f       	adc	r24, r20
 86c:	95 1f       	adc	r25, r21
 86e:	a0 1d       	adc	r26, r0
 870:	08 95       	ret

00000872 <__prologue_saves__>:
 872:	2f 92       	push	r2
 874:	3f 92       	push	r3
 876:	4f 92       	push	r4
 878:	5f 92       	push	r5
 87a:	6f 92       	push	r6
 87c:	7f 92       	push	r7
 87e:	8f 92       	push	r8
 880:	9f 92       	push	r9
 882:	af 92       	push	r10
 884:	bf 92       	push	r11
 886:	cf 92       	push	r12
 888:	df 92       	push	r13
 88a:	ef 92       	push	r14
 88c:	ff 92       	push	r15
 88e:	0f 93       	push	r16
 890:	1f 93       	push	r17
 892:	cf 93       	push	r28
 894:	df 93       	push	r29
 896:	cd b7       	in	r28, 0x3d	; 61
 898:	de b7       	in	r29, 0x3e	; 62
 89a:	ca 1b       	sub	r28, r26
 89c:	db 0b       	sbc	r29, r27
 89e:	0f b6       	in	r0, 0x3f	; 63
 8a0:	f8 94       	cli
 8a2:	de bf       	out	0x3e, r29	; 62
 8a4:	0f be       	out	0x3f, r0	; 63
 8a6:	cd bf       	out	0x3d, r28	; 61
 8a8:	09 94       	ijmp

000008aa <__epilogue_restores__>:
 8aa:	2a 88       	ldd	r2, Y+18	; 0x12
 8ac:	39 88       	ldd	r3, Y+17	; 0x11
 8ae:	48 88       	ldd	r4, Y+16	; 0x10
 8b0:	5f 84       	ldd	r5, Y+15	; 0x0f
 8b2:	6e 84       	ldd	r6, Y+14	; 0x0e
 8b4:	7d 84       	ldd	r7, Y+13	; 0x0d
 8b6:	8c 84       	ldd	r8, Y+12	; 0x0c
 8b8:	9b 84       	ldd	r9, Y+11	; 0x0b
 8ba:	aa 84       	ldd	r10, Y+10	; 0x0a
 8bc:	b9 84       	ldd	r11, Y+9	; 0x09
 8be:	c8 84       	ldd	r12, Y+8	; 0x08
 8c0:	df 80       	ldd	r13, Y+7	; 0x07
 8c2:	ee 80       	ldd	r14, Y+6	; 0x06
 8c4:	fd 80       	ldd	r15, Y+5	; 0x05
 8c6:	0c 81       	ldd	r16, Y+4	; 0x04
 8c8:	1b 81       	ldd	r17, Y+3	; 0x03
 8ca:	aa 81       	ldd	r26, Y+2	; 0x02
 8cc:	b9 81       	ldd	r27, Y+1	; 0x01
 8ce:	ce 0f       	add	r28, r30
 8d0:	d1 1d       	adc	r29, r1
 8d2:	0f b6       	in	r0, 0x3f	; 63
 8d4:	f8 94       	cli
 8d6:	de bf       	out	0x3e, r29	; 62
 8d8:	0f be       	out	0x3f, r0	; 63
 8da:	cd bf       	out	0x3d, r28	; 61
 8dc:	ed 01       	movw	r28, r26
 8de:	08 95       	ret

000008e0 <_exit>:
 8e0:	f8 94       	cli

000008e2 <__stop_program>:
 8e2:	ff cf       	rjmp	.-2      	; 0x8e2 <__stop_program>
