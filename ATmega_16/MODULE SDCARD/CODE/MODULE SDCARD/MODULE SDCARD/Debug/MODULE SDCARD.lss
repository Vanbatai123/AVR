
MODULE SDCARD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000078  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000672  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000240  00000000  00000000  00000862  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000027e  00000000  00000000  00000aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000118  00000000  00000000  00000d20  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000208  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000310  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000068  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#define daobit(thanhghi,bit) (thanhghi=thanhghi^(1<<bit))
int n=0;

int main(void)
{
	DDRB=0x00;
  92:	17 ba       	out	0x17, r1	; 23
	PORTB=0xff;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	88 bb       	out	0x18, r24	; 24
	DDRD=0xff;
  98:	81 bb       	out	0x11, r24	; 17
	PORTD=0x00;
  9a:	12 ba       	out	0x12, r1	; 18
	TCCR1A=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);
  9c:	82 ea       	ldi	r24, 0xA2	; 162
  9e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=(1<<WGM12)|(1<<WGM13)|(1<<CS10);
  a0:	89 e1       	ldi	r24, 0x19	; 25
  a2:	8e bd       	out	0x2e, r24	; 46
	ICR1=200;
  a4:	88 ec       	ldi	r24, 0xC8	; 200
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	97 bd       	out	0x27, r25	; 39
  aa:	86 bd       	out	0x26, r24	; 38
	TIMSK=(1<<TOIE1);
  ac:	84 e0       	ldi	r24, 0x04	; 4
  ae:	89 bf       	out	0x39, r24	; 57
	sei();
  b0:	78 94       	sei
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <main+0x20>

000000b4 <__vector_1>:
	{

	}
}
ISR (INT0_vect )
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	8f 93       	push	r24
  c2:	9f 93       	push	r25
	if (OCR1A==1000) OCR1A=1500;  //thay doi goc xoay servo1 den 90 do
  c4:	8a b5       	in	r24, 0x2a	; 42
  c6:	9b b5       	in	r25, 0x2b	; 43
  c8:	88 3e       	cpi	r24, 0xE8	; 232
  ca:	93 40       	sbci	r25, 0x03	; 3
  cc:	29 f4       	brne	.+10     	; 0xd8 <__vector_1+0x24>
  ce:	8c ed       	ldi	r24, 0xDC	; 220
  d0:	95 e0       	ldi	r25, 0x05	; 5
  d2:	9b bd       	out	0x2b, r25	; 43
  d4:	8a bd       	out	0x2a, r24	; 42
  d6:	04 c0       	rjmp	.+8      	; 0xe0 <__vector_1+0x2c>
	else OCR1A = 1000;  // thay doi goc xoay servo1 den 0 do
  d8:	88 ee       	ldi	r24, 0xE8	; 232
  da:	93 e0       	ldi	r25, 0x03	; 3
  dc:	9b bd       	out	0x2b, r25	; 43
  de:	8a bd       	out	0x2a, r24	; 42
}
  e0:	9f 91       	pop	r25
  e2:	8f 91       	pop	r24
  e4:	2f 91       	pop	r18
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
