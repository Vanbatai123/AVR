
cube 2x2x2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000156  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e2  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000168  00000000  00000000  00000392  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  000004fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000163  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000024  00000000  00000000  00000683  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  000006a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
# define F_CPU 8000000UL
#include <util/delay.h>

int main(void)
{
	DDRC=DDRD=0XFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	81 bb       	out	0x11, r24	; 17
  70:	84 bb       	out	0x14, r24	; 20
	PORTC=PORTD=0XFF;
  72:	82 bb       	out	0x12, r24	; 18
  74:	85 bb       	out	0x15, r24	; 21
    while(1)
    {
		for (int g=0;g<10;g++)
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTD=0x01;
  7a:	61 e0       	ldi	r22, 0x01	; 1
			PORTC=~0x03;
  7c:	5c ef       	ldi	r21, 0xFC	; 252
			_delay_us(1);
			PORTC=0XFF;
  7e:	2f ef       	ldi	r18, 0xFF	; 255
			PORTD=0x02;
  80:	42 e0       	ldi	r20, 0x02	; 2
			PORTC=~0x04;
  82:	3b ef       	ldi	r19, 0xFB	; 251
{
	DDRC=DDRD=0XFF;
	PORTC=PORTD=0XFF;
    while(1)
    {
		for (int g=0;g<10;g++)
  84:	e0 e0       	ldi	r30, 0x00	; 0
  86:	70 e0       	ldi	r23, 0x00	; 0
		{
			PORTD=0x01;
  88:	62 bb       	out	0x12, r22	; 18
			PORTC=~0x03;
  8a:	55 bb       	out	0x15, r21	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	f2 e0       	ldi	r31, 0x02	; 2
  8e:	fa 95       	dec	r31
  90:	f1 f7       	brne	.-4      	; 0x8e <main+0x22>
  92:	00 c0       	rjmp	.+0      	; 0x94 <main+0x28>
			_delay_us(1);
			PORTC=0XFF;
  94:	25 bb       	out	0x15, r18	; 21
			PORTD=0x02;
  96:	42 bb       	out	0x12, r20	; 18
			PORTC=~0x04;
  98:	35 bb       	out	0x15, r19	; 21
  9a:	f2 e0       	ldi	r31, 0x02	; 2
  9c:	fa 95       	dec	r31
  9e:	f1 f7       	brne	.-4      	; 0x9c <main+0x30>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x36>
			_delay_us(1);
			PORTC=0XFF;
  a2:	25 bb       	out	0x15, r18	; 21
{
	DDRC=DDRD=0XFF;
	PORTC=PORTD=0XFF;
    while(1)
    {
		for (int g=0;g<10;g++)
  a4:	01 96       	adiw	r24, 0x01	; 1
  a6:	8a 30       	cpi	r24, 0x0A	; 10
  a8:	91 05       	cpc	r25, r1
  aa:	74 f3       	brlt	.-36     	; 0x88 <main+0x1c>
  ac:	8e 2f       	mov	r24, r30
  ae:	97 2f       	mov	r25, r23
  b0:	eb cf       	rjmp	.-42     	; 0x88 <main+0x1c>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
