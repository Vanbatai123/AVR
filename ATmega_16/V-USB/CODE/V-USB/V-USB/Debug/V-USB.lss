
V-USB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000002fc  00000390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  00800062  00800062  00000392  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000392  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000003c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000879  00000000  00000000  00000402  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000308  00000000  00000000  00000c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023f  00000000  00000000  00000f83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000011c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043e  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ced  00000000  00000000  00001666  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00002353  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
   8:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
   c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  10:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  14:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  18:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  1c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  20:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  24:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  28:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  2c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  30:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  34:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  38:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  3c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  40:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  44:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  48:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  4c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  50:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	09 02       	muls	r16, r25
  56:	12 00       	.word	0x0012	; ????
  58:	01 01       	movw	r0, r2
  5a:	00 80       	ld	r0, Z
  5c:	32 09       	sbc	r19, r2
  5e:	04 00       	.word	0x0004	; ????
  60:	00 00       	nop
  62:	00 00       	nop
	...

00000066 <usbDescriptorDevice>:
  66:	12 01 10 01 ff 00 00 08 c0 16 dc 05 00 01 01 02     ................
  76:	00 01                                               ..

00000078 <usbDescriptorStringDevice>:
  78:	12 03 54 00 65 00 6d 00 70 00 6c 00 61 00 74 00     ..T.e.m.p.l.a.t.
  88:	65 00                                               e.

0000008a <usbDescriptorStringVendor>:
  8a:	12 03 6f 00 62 00 64 00 65 00 76 00 2e 00 61 00     ..o.b.d.e.v...a.
  9a:	74 00                                               t.

0000009c <usbDescriptorString0>:
  9c:	04 03 09 04                                         ....

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf e5       	ldi	r28, 0x5F	; 95
  a6:	d4 e0       	ldi	r29, 0x04	; 4
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	cd bf       	out	0x3d, r28	; 61

000000ac <__do_copy_data>:
  ac:	10 e0       	ldi	r17, 0x00	; 0
  ae:	a0 e6       	ldi	r26, 0x60	; 96
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	ec ef       	ldi	r30, 0xFC	; 252
  b4:	f2 e0       	ldi	r31, 0x02	; 2
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x10>
  b8:	05 90       	lpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	a2 36       	cpi	r26, 0x62	; 98
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0xc>

000000c2 <__do_clear_bss>:
  c2:	20 e0       	ldi	r18, 0x00	; 0
  c4:	a2 e6       	ldi	r26, 0x62	; 98
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	ad 38       	cpi	r26, 0x8D	; 141
  ce:	b2 07       	cpc	r27, r18
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <main>
  d6:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <_exit>

000000da <__bad_interrupt>:
  da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000de <usbPoll>:
USB_PUBLIC void usbPoll(void)
{
schar   len;
uchar   i;

    len = usbRxLen - 3;
  de:	80 91 73 00 	lds	r24, 0x0073
  e2:	83 50       	subi	r24, 0x03	; 3
    if(len >= 0){
  e4:	0a f4       	brpl	.+2      	; 0xe8 <usbPoll+0xa>
  e6:	96 c0       	rjmp	.+300    	; 0x214 <usbPoll+0x136>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
  e8:	20 91 70 00 	lds	r18, 0x0070
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
  ec:	90 91 6f 00 	lds	r25, 0x006F
  f0:	9d 32       	cpi	r25, 0x2D	; 45
  f2:	09 f0       	breq	.+2      	; 0xf6 <usbPoll+0x18>
  f4:	8d c0       	rjmp	.+282    	; 0x210 <usbPoll+0x132>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
  f6:	88 30       	cpi	r24, 0x08	; 8
  f8:	09 f0       	breq	.+2      	; 0xfc <usbPoll+0x1e>
  fa:	8a c0       	rjmp	.+276    	; 0x210 <usbPoll+0x132>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
  fc:	ec e0       	ldi	r30, 0x0C	; 12
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	e2 1b       	sub	r30, r18
 102:	f1 09       	sbc	r31, r1
 104:	e9 58       	subi	r30, 0x89	; 137
 106:	ff 4f       	sbci	r31, 0xFF	; 255
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 108:	83 ec       	ldi	r24, 0xC3	; 195
 10a:	80 93 63 00 	sts	0x0063, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 10e:	8a e5       	ldi	r24, 0x5A	; 90
 110:	80 93 61 00 	sts	0x0061, r24
        usbMsgFlags = 0;
 114:	10 92 62 00 	sts	0x0062, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
 118:	80 81       	ld	r24, Z
 11a:	80 76       	andi	r24, 0x60	; 96
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 11c:	31 f0       	breq	.+12     	; 0x12a <usbPoll+0x4c>

USB_PUBLIC usbMsgLen_t  usbFunctionSetup(uchar data[8])
{
usbRequest_t    *rq = (void *)data;

    if(rq->bRequest == 0)   /* request using usbFunctionRead()/usbFunctionWrite() */
 11e:	21 e0       	ldi	r18, 0x01	; 1
 120:	81 81       	ldd	r24, Z+1	; 0x01
 122:	81 11       	cpse	r24, r1
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	21 95       	neg	r18
 128:	6a c0       	rjmp	.+212    	; 0x1fe <usbPoll+0x120>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 12a:	92 81       	ldd	r25, Z+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 12c:	10 92 6c 00 	sts	0x006C, r1
    SWITCH_START(rq->bRequest)
 130:	81 81       	ldd	r24, Z+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 132:	81 11       	cpse	r24, r1
 134:	06 c0       	rjmp	.+12     	; 0x142 <usbPoll+0x64>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 136:	10 92 6d 00 	sts	0x006D, r1
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 13a:	8c e6       	ldi	r24, 0x6C	; 108
 13c:	90 e0       	ldi	r25, 0x00	; 0
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
 13e:	22 e0       	ldi	r18, 0x02	; 2
 140:	5a c0       	rjmp	.+180    	; 0x1f6 <usbPoll+0x118>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 142:	85 30       	cpi	r24, 0x05	; 5
 144:	31 f4       	brne	.+12     	; 0x152 <usbPoll+0x74>
        usbNewDeviceAddr = value;
 146:	90 93 74 00 	sts	0x0074, r25
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 14a:	8c e6       	ldi	r24, 0x6C	; 108
 14c:	90 e0       	ldi	r25, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	52 c0       	rjmp	.+164    	; 0x1f6 <usbPoll+0x118>
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 152:	86 30       	cpi	r24, 0x06	; 6
 154:	e1 f5       	brne	.+120    	; 0x1ce <usbPoll+0xf0>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 156:	83 81       	ldd	r24, Z+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	41 f4       	brne	.+16     	; 0x16c <usbPoll+0x8e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 15c:	86 e6       	ldi	r24, 0x66	; 102
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	90 93 72 00 	sts	0x0072, r25
 164:	80 93 71 00 	sts	0x0071, r24
 168:	22 e1       	ldi	r18, 0x12	; 18
 16a:	2d c0       	rjmp	.+90     	; 0x1c6 <usbPoll+0xe8>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	41 f4       	brne	.+16     	; 0x180 <usbPoll+0xa2>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 170:	84 e5       	ldi	r24, 0x54	; 84
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 72 00 	sts	0x0072, r25
 178:	80 93 71 00 	sts	0x0071, r24
 17c:	22 e1       	ldi	r18, 0x12	; 18
 17e:	23 c0       	rjmp	.+70     	; 0x1c6 <usbPoll+0xe8>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 180:	83 30       	cpi	r24, 0x03	; 3
 182:	f1 f4       	brne	.+60     	; 0x1c0 <usbPoll+0xe2>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
 184:	91 11       	cpse	r25, r1
 186:	08 c0       	rjmp	.+16     	; 0x198 <usbPoll+0xba>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 188:	8c e9       	ldi	r24, 0x9C	; 156
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	90 93 72 00 	sts	0x0072, r25
 190:	80 93 71 00 	sts	0x0071, r24
 194:	24 e0       	ldi	r18, 0x04	; 4
 196:	17 c0       	rjmp	.+46     	; 0x1c6 <usbPoll+0xe8>
        SWITCH_CASE(1)
 198:	91 30       	cpi	r25, 0x01	; 1
 19a:	41 f4       	brne	.+16     	; 0x1ac <usbPoll+0xce>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 19c:	8a e8       	ldi	r24, 0x8A	; 138
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	90 93 72 00 	sts	0x0072, r25
 1a4:	80 93 71 00 	sts	0x0071, r24
 1a8:	22 e1       	ldi	r18, 0x12	; 18
 1aa:	0d c0       	rjmp	.+26     	; 0x1c6 <usbPoll+0xe8>
        SWITCH_CASE(2)
 1ac:	92 30       	cpi	r25, 0x02	; 2
 1ae:	51 f4       	brne	.+20     	; 0x1c4 <usbPoll+0xe6>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 1b0:	88 e7       	ldi	r24, 0x78	; 120
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	90 93 72 00 	sts	0x0072, r25
 1b8:	80 93 71 00 	sts	0x0071, r24
 1bc:	22 e1       	ldi	r18, 0x12	; 18
 1be:	03 c0       	rjmp	.+6      	; 0x1c6 <usbPoll+0xe8>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	01 c0       	rjmp	.+2      	; 0x1c6 <usbPoll+0xe8>
 1c4:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 1c6:	80 e4       	ldi	r24, 0x40	; 64
 1c8:	80 93 62 00 	sts	0x0062, r24
 1cc:	18 c0       	rjmp	.+48     	; 0x1fe <usbPoll+0x120>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 1ce:	88 30       	cpi	r24, 0x08	; 8
 1d0:	79 f0       	breq	.+30     	; 0x1f0 <usbPoll+0x112>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 1d2:	89 30       	cpi	r24, 0x09	; 9
 1d4:	31 f4       	brne	.+12     	; 0x1e2 <usbPoll+0x104>
        usbConfiguration = value;
 1d6:	90 93 76 00 	sts	0x0076, r25
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 1da:	8c e6       	ldi	r24, 0x6C	; 108
 1dc:	90 e0       	ldi	r25, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	0a c0       	rjmp	.+20     	; 0x1f6 <usbPoll+0x118>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	8a 30       	cpi	r24, 0x0A	; 10
 1e6:	09 f0       	breq	.+2      	; 0x1ea <usbPoll+0x10c>
 1e8:	20 e0       	ldi	r18, 0x00	; 0
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 1ea:	8c e6       	ldi	r24, 0x6C	; 108
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <usbPoll+0x118>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
 1f0:	86 e7       	ldi	r24, 0x76	; 118
 1f2:	90 e0       	ldi	r25, 0x00	; 0
        len = 1;
 1f4:	21 e0       	ldi	r18, 0x01	; 1
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
 1f6:	90 93 72 00 	sts	0x0072, r25
 1fa:	80 93 71 00 	sts	0x0071, r24
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 1fe:	87 81       	ldd	r24, Z+7	; 0x07
 200:	81 11       	cpse	r24, r1
 202:	04 c0       	rjmp	.+8      	; 0x20c <usbPoll+0x12e>
 204:	86 81       	ldd	r24, Z+6	; 0x06
 206:	82 17       	cp	r24, r18
 208:	08 f4       	brcc	.+2      	; 0x20c <usbPoll+0x12e>
 20a:	28 2f       	mov	r18, r24
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 20c:	20 93 60 00 	sts	0x0060, r18
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 210:	10 92 73 00 	sts	0x0073, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 214:	80 91 61 00 	lds	r24, 0x0061
 218:	84 ff       	sbrs	r24, 4
 21a:	45 c0       	rjmp	.+138    	; 0x2a6 <usbPoll+0x1c8>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 21c:	80 91 60 00 	lds	r24, 0x0060
 220:	8f 3f       	cpi	r24, 0xFF	; 255
 222:	09 f4       	brne	.+2      	; 0x226 <usbPoll+0x148>
 224:	40 c0       	rjmp	.+128    	; 0x2a6 <usbPoll+0x1c8>
 226:	48 2f       	mov	r20, r24
 228:	89 30       	cpi	r24, 0x09	; 9
 22a:	08 f0       	brcs	.+2      	; 0x22e <usbPoll+0x150>
 22c:	48 e0       	ldi	r20, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 22e:	84 1b       	sub	r24, r20
 230:	80 93 60 00 	sts	0x0060, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 234:	e3 e6       	ldi	r30, 0x63	; 99
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	90 81       	ld	r25, Z
 23a:	88 e8       	ldi	r24, 0x88	; 136
 23c:	89 27       	eor	r24, r25
 23e:	80 83       	st	Z, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 240:	44 23       	and	r20, r20
 242:	09 f4       	brne	.+2      	; 0x246 <usbPoll+0x168>
 244:	3e c0       	rjmp	.+124    	; 0x2c2 <usbPoll+0x1e4>
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
 246:	80 91 71 00 	lds	r24, 0x0071
 24a:	90 91 72 00 	lds	r25, 0x0072
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 24e:	20 91 62 00 	lds	r18, 0x0062
 252:	26 ff       	sbrs	r18, 6
 254:	0f c0       	rjmp	.+30     	; 0x274 <usbPoll+0x196>
 256:	a4 e6       	ldi	r26, 0x64	; 100
 258:	b0 e0       	ldi	r27, 0x00	; 0
 25a:	fc 01       	movw	r30, r24
 25c:	24 2f       	mov	r18, r20
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 25e:	34 91       	lpm	r19, Z
                    *data++ = c;
 260:	3d 93       	st	X+, r19
                    r++;
 262:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
 264:	21 50       	subi	r18, 0x01	; 1
 266:	d9 f7       	brne	.-10     	; 0x25e <usbPoll+0x180>
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	2f ef       	ldi	r18, 0xFF	; 255
 26c:	24 0f       	add	r18, r20
 26e:	82 0f       	add	r24, r18
 270:	91 1d       	adc	r25, r1
 272:	0d c0       	rjmp	.+26     	; 0x28e <usbPoll+0x1b0>
 274:	a4 e6       	ldi	r26, 0x64	; 100
 276:	b0 e0       	ldi	r27, 0x00	; 0
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 278:	fc 01       	movw	r30, r24
 27a:	24 2f       	mov	r18, r20
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
 27c:	31 91       	ld	r19, Z+
 27e:	3d 93       	st	X+, r19
                    r++;
                }while(--i);
 280:	21 50       	subi	r18, 0x01	; 1
 282:	e1 f7       	brne	.-8      	; 0x27c <usbPoll+0x19e>
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	2f ef       	ldi	r18, 0xFF	; 255
 288:	24 0f       	add	r18, r20
 28a:	82 0f       	add	r24, r18
 28c:	91 1d       	adc	r25, r1
            }
            usbMsgPtr = r;
 28e:	90 93 72 00 	sts	0x0072, r25
 292:	80 93 71 00 	sts	0x0071, r24
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
        len += 4;           /* length including sync byte */
 296:	4c 5f       	subi	r20, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 298:	4c 30       	cpi	r20, 0x0C	; 12
 29a:	18 f4       	brcc	.+6      	; 0x2a2 <usbPoll+0x1c4>
            usbMsgLen = USB_NO_MSG;
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	80 93 60 00 	sts	0x0060, r24
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 2a2:	40 93 61 00 	sts	0x0061, r20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 2a6:	80 b3       	in	r24, 0x10	; 16
 2a8:	84 71       	andi	r24, 0x14	; 20
        if(usbLineStatus != 0)  /* SE0 has ended */
 2aa:	69 f4       	brne	.+26     	; 0x2c6 <usbPoll+0x1e8>
 2ac:	83 e1       	ldi	r24, 0x13	; 19
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 2ae:	90 b3       	in	r25, 0x10	; 16
 2b0:	94 71       	andi	r25, 0x14	; 20
        if(usbLineStatus != 0)  /* SE0 has ended */
 2b2:	49 f4       	brne	.+18     	; 0x2c6 <usbPoll+0x1e8>
 2b4:	81 50       	subi	r24, 0x01	; 1
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 2b6:	d9 f7       	brne	.-10     	; 0x2ae <usbPoll+0x1d0>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 2b8:	10 92 74 00 	sts	0x0074, r1
    usbDeviceAddr = 0;
 2bc:	10 92 6e 00 	sts	0x006E, r1
 2c0:	08 95       	ret
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
        len += 4;           /* length including sync byte */
 2c2:	4c 5f       	subi	r20, 0xFC	; 252
 2c4:	eb cf       	rjmp	.-42     	; 0x29c <usbPoll+0x1be>
 2c6:	08 95       	ret

000002c8 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 2c8:	85 b7       	in	r24, 0x35	; 53
 2ca:	82 60       	ori	r24, 0x02	; 2
 2cc:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 2ce:	8b b7       	in	r24, 0x3b	; 59
 2d0:	80 64       	ori	r24, 0x40	; 64
 2d2:	8b bf       	out	0x3b, r24	; 59
 2d4:	08 95       	ret

000002d6 <main>:

int	main(void)
{
uchar   i;

	usbInit();
 2d6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <usbInit>
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
 2da:	8c 9a       	sbi	0x11, 4	; 17
 2dc:	8f ef       	ldi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2de:	ef e9       	ldi	r30, 0x9F	; 159
 2e0:	ff e0       	ldi	r31, 0x0F	; 15
 2e2:	31 97       	sbiw	r30, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <main+0xc>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <main+0x12>
 2e8:	00 00       	nop
 2ea:	81 50       	subi	r24, 0x01	; 1
    i = 0;
    while(--i)             /* fake USB disconnect for > 250 ms */
 2ec:	c1 f7       	brne	.-16     	; 0x2de <main+0x8>
        _delay_ms(1);
 
    usbDeviceConnect();
 2ee:	8c 98       	cbi	0x11, 4	; 17
	sei();
 2f0:	78 94       	sei
	while (1)
	{                /* main event loop */
		usbPoll();
 2f2:	0e 94 6f 00 	call	0xde	; 0xde <usbPoll>
 2f6:	fd cf       	rjmp	.-6      	; 0x2f2 <main+0x1c>

000002f8 <_exit>:
 2f8:	f8 94       	cli

000002fa <__stop_program>:
 2fa:	ff cf       	rjmp	.-2      	; 0x2fa <__stop_program>
