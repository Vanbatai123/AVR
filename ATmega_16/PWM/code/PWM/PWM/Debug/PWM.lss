
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000162  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f8  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000136  00000000  00000000  000003ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000150  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000048  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#define daobit(thanhghi,bit) (thanhghi=thanhghi^(1<<bit))
int n=0;

int main(void)
{
	DDRB=0x00;
  7c:	17 ba       	out	0x17, r1	; 23
	PORTB=0xff;
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	88 bb       	out	0x18, r24	; 24
	DDRD=0xff;
  82:	81 bb       	out	0x11, r24	; 17
	PORTD=0x00;
  84:	12 ba       	out	0x12, r1	; 18
	//setb(TCCR1A,COM1B1);
	//CHON CHE DO
	//setb(TCCR1A,WGM11);
	//setb(TCCR1B,WGM12);
	//setb(TCCR1B,WGM13);
	TCCR1A=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);
  86:	82 ea       	ldi	r24, 0xA2	; 162
  88:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=(1<<WGM12)|(1<<WGM13)|(1<<CS10);
  8a:	89 e1       	ldi	r24, 0x19	; 25
  8c:	8e bd       	out	0x2e, r24	; 46
	
	
	//setb(TCCR1B,CS10);//CHON HE SO CHIA
	//setb(TCCR1B,CS11);
	//OCR1B=10000;
	ICR1=7100; //20micro second
  8e:	8c eb       	ldi	r24, 0xBC	; 188
  90:	9b e1       	ldi	r25, 0x1B	; 27
  92:	97 bd       	out	0x27, r25	; 39
  94:	86 bd       	out	0x26, r24	; 38
	//TCNT1=65530;
	setb(TIMSK,TOIE1);
  96:	89 b7       	in	r24, 0x39	; 57
  98:	84 60       	ori	r24, 0x04	; 4
  9a:	89 bf       	out	0x39, r24	; 57
	sei();//clrb(PORTD,0);
  9c:	78 94       	sei
	{
		
		OCR1B=ICR1/2;
		if (inbit(PINB,0)==0)
		{			
			OCR1B=15000;_delay_ms(3000);
  9e:	28 e9       	ldi	r18, 0x98	; 152
  a0:	3a e3       	ldi	r19, 0x3A	; 58
		}
		if (inbit(PINB,1)==0)
		{
			OCR1B=10000;_delay_ms(3000);
  a2:	40 e1       	ldi	r20, 0x10	; 16
  a4:	57 e2       	ldi	r21, 0x27	; 39
	setb(TIMSK,TOIE1);
	sei();//clrb(PORTD,0);
	while(1)
	{
		
		OCR1B=ICR1/2;
  a6:	86 b5       	in	r24, 0x26	; 38
  a8:	97 b5       	in	r25, 0x27	; 39
  aa:	96 95       	lsr	r25
  ac:	87 95       	ror	r24
  ae:	99 bd       	out	0x29, r25	; 41
  b0:	88 bd       	out	0x28, r24	; 40
		if (inbit(PINB,0)==0)
  b2:	b0 99       	sbic	0x16, 0	; 22
  b4:	0b c0       	rjmp	.+22     	; 0xcc <main+0x50>
		{			
			OCR1B=15000;_delay_ms(3000);
  b6:	39 bd       	out	0x29, r19	; 41
  b8:	28 bd       	out	0x28, r18	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	6f ef       	ldi	r22, 0xFF	; 255
  bc:	8d e3       	ldi	r24, 0x3D	; 61
  be:	99 e4       	ldi	r25, 0x49	; 73
  c0:	61 50       	subi	r22, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x44>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x4e>
  ca:	00 00       	nop
		}
		if (inbit(PINB,1)==0)
  cc:	b1 99       	sbic	0x16, 1	; 22
  ce:	eb cf       	rjmp	.-42     	; 0xa6 <main+0x2a>
		{
			OCR1B=10000;_delay_ms(3000);
  d0:	59 bd       	out	0x29, r21	; 41
  d2:	48 bd       	out	0x28, r20	; 40
  d4:	6f ef       	ldi	r22, 0xFF	; 255
  d6:	8d e3       	ldi	r24, 0x3D	; 61
  d8:	99 e4       	ldi	r25, 0x49	; 73
  da:	61 50       	subi	r22, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x5e>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x68>
  e4:	00 00       	nop
  e6:	df cf       	rjmp	.-66     	; 0xa6 <main+0x2a>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
