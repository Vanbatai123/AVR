
TIMER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000055e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000055e  000005f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006c  0080006c  000005fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005fe  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  0000062e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000712  00000000  00000000  0000069e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001eb  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028b  00000000  00000000  00000f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00001228  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d4  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006b9  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001bb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e5       	ldi	r30, 0x5E	; 94
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 50 01 	call	0x2a0	; 0x2a0 <main>
  8a:	0c 94 ad 02 	jmp	0x55a	; 0x55a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lenh>:
#define EN 1
#define RS 0
int *a;int c=LCD8BIT;
void lenh(char malenh)
{
	if(*a==0x38)
  92:	e0 91 6c 00 	lds	r30, 0x006C
  96:	f0 91 6d 00 	lds	r31, 0x006D
  9a:	20 81       	ld	r18, Z
  9c:	31 81       	ldd	r19, Z+1	; 0x01
  9e:	28 33       	cpi	r18, 0x38	; 56
  a0:	31 05       	cpc	r19, r1
  a2:	61 f4       	brne	.+24     	; 0xbc <lenh+0x2a>
	{
		setb(PORTC,EN);
  a4:	a9 9a       	sbi	0x15, 1	; 21
		clrb(PORTC,RS);
  a6:	a8 98       	cbi	0x15, 0	; 21
		data=malenh;
  a8:	82 bb       	out	0x12, r24	; 18
		clrb(PORTC,EN);
  aa:	a9 98       	cbi	0x15, 1	; 21
		setb(PORTC,EN);
  ac:	a9 9a       	sbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	8f e8       	ldi	r24, 0x8F	; 143
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <lenh+0x20>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <lenh+0x26>
  b8:	00 00       	nop
  ba:	08 95       	ret
		_delay_us(200);
	}
	else
	{
		int xxx;
		xxx=data&0x0f;
  bc:	22 b3       	in	r18, 0x12	; 18
		setb(PORTC,EN);
  be:	a9 9a       	sbi	0x15, 1	; 21
		clrb(PORTC,RS);
  c0:	a8 98       	cbi	0x15, 0	; 21
		_delay_us(200);
	}
	else
	{
		int xxx;
		xxx=data&0x0f;
  c2:	2f 70       	andi	r18, 0x0F	; 15
		setb(PORTC,EN);
		clrb(PORTC,RS);
		data=((malenh&0xf0)|xxx);
  c4:	98 2f       	mov	r25, r24
  c6:	90 7f       	andi	r25, 0xF0	; 240
  c8:	92 2b       	or	r25, r18
  ca:	92 bb       	out	0x12, r25	; 18
		clrb(PORTC,EN);
  cc:	a9 98       	cbi	0x15, 1	; 21
		setb(PORTC,EN);
  ce:	a9 9a       	sbi	0x15, 1	; 21
		data=(((malenh<<4)&0xf0)|xxx);
  d0:	30 e1       	ldi	r19, 0x10	; 16
  d2:	83 9f       	mul	r24, r19
  d4:	c0 01       	movw	r24, r0
  d6:	11 24       	eor	r1, r1
  d8:	82 2b       	or	r24, r18
  da:	82 bb       	out	0x12, r24	; 18
		clrb(PORTC,EN);
  dc:	a9 98       	cbi	0x15, 1	; 21
		setb(PORTC,EN);
  de:	a9 9a       	sbi	0x15, 1	; 21
  e0:	8f e8       	ldi	r24, 0x8F	; 143
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <lenh+0x52>
  e8:	00 c0       	rjmp	.+0      	; 0xea <lenh+0x58>
  ea:	00 00       	nop
  ec:	08 95       	ret

000000ee <dulieu>:
		_delay_us(200);
	}
}
void dulieu(char  dulieu)//******************************__GHI 8 BIT LCD__*************************
{
	if (*a==0x38)//8bit
  ee:	e0 91 6c 00 	lds	r30, 0x006C
  f2:	f0 91 6d 00 	lds	r31, 0x006D
  f6:	20 81       	ld	r18, Z
  f8:	31 81       	ldd	r19, Z+1	; 0x01
  fa:	28 33       	cpi	r18, 0x38	; 56
  fc:	31 05       	cpc	r19, r1
  fe:	61 f4       	brne	.+24     	; 0x118 <dulieu+0x2a>
	{
		setb(PORTC,EN);
 100:	a9 9a       	sbi	0x15, 1	; 21
		setb(PORTC,RS);
 102:	a8 9a       	sbi	0x15, 0	; 21
		data=dulieu;
 104:	82 bb       	out	0x12, r24	; 18
		clrb(PORTC,EN);
 106:	a9 98       	cbi	0x15, 1	; 21
		setb(PORTC,EN);
 108:	a9 9a       	sbi	0x15, 1	; 21
 10a:	8f e8       	ldi	r24, 0x8F	; 143
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <dulieu+0x20>
 112:	00 c0       	rjmp	.+0      	; 0x114 <dulieu+0x26>
 114:	00 00       	nop
 116:	08 95       	ret
		_delay_us(200);
	}
	else					//4bit
	{
		int xxx;
		xxx=data&0x0f;
 118:	22 b3       	in	r18, 0x12	; 18
		setb(PORTC,EN);
 11a:	a9 9a       	sbi	0x15, 1	; 21
		setb(PORTC,RS);
 11c:	a8 9a       	sbi	0x15, 0	; 21
		_delay_us(200);
	}
	else					//4bit
	{
		int xxx;
		xxx=data&0x0f;
 11e:	2f 70       	andi	r18, 0x0F	; 15
		setb(PORTC,EN);
		setb(PORTC,RS);
		data=((dulieu&0xf0)|xxx);
 120:	98 2f       	mov	r25, r24
 122:	90 7f       	andi	r25, 0xF0	; 240
 124:	92 2b       	or	r25, r18
 126:	92 bb       	out	0x12, r25	; 18
		clrb(PORTC,EN);
 128:	a9 98       	cbi	0x15, 1	; 21
		setb(PORTC,EN);
 12a:	a9 9a       	sbi	0x15, 1	; 21
		data=(((dulieu<<4)&0xf0)|xxx);
 12c:	30 e1       	ldi	r19, 0x10	; 16
 12e:	83 9f       	mul	r24, r19
 130:	c0 01       	movw	r24, r0
 132:	11 24       	eor	r1, r1
 134:	82 2b       	or	r24, r18
 136:	82 bb       	out	0x12, r24	; 18
		clrb(PORTC,EN);
 138:	a9 98       	cbi	0x15, 1	; 21
		setb(PORTC,EN);
 13a:	a9 9a       	sbi	0x15, 1	; 21
 13c:	8f e8       	ldi	r24, 0x8F	; 143
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <dulieu+0x52>
 144:	00 c0       	rjmp	.+0      	; 0x146 <dulieu+0x58>
 146:	00 00       	nop
 148:	08 95       	ret

0000014a <init_LCD>:
{
	_delay_ms(1000);
}
void init_LCD()//*****************************************__KHOI DONG LCD__************************
{	
	setb(PORTC,EN);
 14a:	a9 9a       	sbi	0x15, 1	; 21
	clrb(PORTC,RS);
 14c:	a8 98       	cbi	0x15, 0	; 21
	data=c;
 14e:	80 91 60 00 	lds	r24, 0x0060
 152:	82 bb       	out	0x12, r24	; 18
	clrb(PORTC,EN);
 154:	a9 98       	cbi	0x15, 1	; 21
	setb(PORTC,EN);
 156:	a9 9a       	sbi	0x15, 1	; 21
 158:	8f e8       	ldi	r24, 0x8F	; 143
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <init_LCD+0x12>
 160:	00 c0       	rjmp	.+0      	; 0x162 <init_LCD+0x18>
 162:	00 00       	nop
	_delay_us(200);//FONT, SO LUONG LINE, PHUONG THUC GIAO TIEP		---FUNCTION SET
	a=&c;
 164:	80 e6       	ldi	r24, 0x60	; 96
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	90 93 6d 00 	sts	0x006D, r25
 16c:	80 93 6c 00 	sts	0x006C, r24
	lenh(0x0e);//HIEN THI VA CON TRO							---DISPLAY ON/OFF
 170:	8e e0       	ldi	r24, 0x0E	; 14
 172:	0e 94 49 00 	call	0x92	; 0x92 <lenh>
	lenh(0x06);// CACH THEM KI TU								---ENTRY MODE SET
 176:	86 e0       	ldi	r24, 0x06	; 6
 178:	0e 94 49 00 	call	0x92	; 0x92 <lenh>
 17c:	08 95       	ret

0000017e <clr_LCD>:
	
	
}
void clr_LCD() //********************************************__xoa LCD__***************************
{
	lenh(0x01);
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	0e 94 49 00 	call	0x92	; 0x92 <lenh>
 184:	08 95       	ret

00000186 <move_LCD>:
{
	lenh(0x02);
}
void move_LCD(int dong, int cot)//********__DI CHUYEN CON TRO DEN VI TRI MONG MUON (DONG, COT)__***
{
	if (*a==0x38)
 186:	e0 91 6c 00 	lds	r30, 0x006C
 18a:	f0 91 6d 00 	lds	r31, 0x006D
 18e:	20 81       	ld	r18, Z
 190:	31 81       	ldd	r19, Z+1	; 0x01
 192:	28 33       	cpi	r18, 0x38	; 56
 194:	31 05       	cpc	r19, r1
 196:	a9 f4       	brne	.+42     	; 0x1c2 <move_LCD+0x3c>
	{
		if (cot>0&&cot<=30)
 198:	9b 01       	movw	r18, r22
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	31 09       	sbc	r19, r1
 19e:	2e 31       	cpi	r18, 0x1E	; 30
 1a0:	31 05       	cpc	r19, r1
 1a2:	18 f5       	brcc	.+70     	; 0x1ea <move_LCD+0x64>
		{
			if (dong==1)
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	91 05       	cpc	r25, r1
 1a8:	29 f4       	brne	.+10     	; 0x1b4 <move_LCD+0x2e>
			lenh(0x80-1+cot);
 1aa:	8f e7       	ldi	r24, 0x7F	; 127
 1ac:	86 0f       	add	r24, r22
 1ae:	0e 94 49 00 	call	0x92	; 0x92 <lenh>
 1b2:	08 95       	ret
			else if (dong==2)
 1b4:	02 97       	sbiw	r24, 0x02	; 2
 1b6:	c9 f4       	brne	.+50     	; 0x1ea <move_LCD+0x64>
			lenh(0xC0-1+cot);
 1b8:	8f eb       	ldi	r24, 0xBF	; 191
 1ba:	86 0f       	add	r24, r22
 1bc:	0e 94 49 00 	call	0x92	; 0x92 <lenh>
 1c0:	08 95       	ret
		}
	}
	else
	{
		if (cot>0&&cot<=30)
 1c2:	9b 01       	movw	r18, r22
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	31 09       	sbc	r19, r1
 1c8:	2e 31       	cpi	r18, 0x1E	; 30
 1ca:	31 05       	cpc	r19, r1
 1cc:	70 f4       	brcc	.+28     	; 0x1ea <move_LCD+0x64>
		{
			if (dong==1)
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	91 05       	cpc	r25, r1
 1d2:	29 f4       	brne	.+10     	; 0x1de <move_LCD+0x58>
			lenh(0x80-1+cot);
 1d4:	8f e7       	ldi	r24, 0x7F	; 127
 1d6:	86 0f       	add	r24, r22
 1d8:	0e 94 49 00 	call	0x92	; 0x92 <lenh>
 1dc:	08 95       	ret
			else if (dong==2)
 1de:	02 97       	sbiw	r24, 0x02	; 2
 1e0:	21 f4       	brne	.+8      	; 0x1ea <move_LCD+0x64>
			lenh(0xC0-1+cot);
 1e2:	8f eb       	ldi	r24, 0xBF	; 191
 1e4:	86 0f       	add	r24, r22
 1e6:	0e 94 49 00 	call	0x92	; 0x92 <lenh>
 1ea:	08 95       	ret

000001ec <print_LCD>:
void putChar_LCD(int kitu)//**************************__GHI 1 KI TU LEN LCD__**********************
{
	dulieu(kitu);
}
void print_LCD(char* str, unsigned char dodai)//******__HIEN THI CHUOI KI TU__*********************
{
 1ec:	ef 92       	push	r14
 1ee:	ff 92       	push	r15
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
	int i;
	for (i=0; i<dodai; i++)
 1f8:	e6 2e       	mov	r14, r22
 1fa:	f1 2c       	mov	r15, r1
 1fc:	1e 14       	cp	r1, r14
 1fe:	1f 04       	cpc	r1, r15
 200:	9c f4       	brge	.+38     	; 0x228 <print_LCD+0x3c>
 202:	08 2f       	mov	r16, r24
 204:	19 2f       	mov	r17, r25
 206:	c0 e0       	ldi	r28, 0x00	; 0
 208:	d0 e0       	ldi	r29, 0x00	; 0
	if(str[i] > 0) putChar_LCD(str[i]);
 20a:	f8 01       	movw	r30, r16
 20c:	81 91       	ld	r24, Z+
 20e:	8f 01       	movw	r16, r30
 210:	88 23       	and	r24, r24
 212:	19 f0       	breq	.+6      	; 0x21a <print_LCD+0x2e>
		}
	}
}
void putChar_LCD(int kitu)//**************************__GHI 1 KI TU LEN LCD__**********************
{
	dulieu(kitu);
 214:	0e 94 77 00 	call	0xee	; 0xee <dulieu>
 218:	03 c0       	rjmp	.+6      	; 0x220 <print_LCD+0x34>
 21a:	80 e2       	ldi	r24, 0x20	; 32
 21c:	0e 94 77 00 	call	0xee	; 0xee <dulieu>
}
void print_LCD(char* str, unsigned char dodai)//******__HIEN THI CHUOI KI TU__*********************
{
	int i;
	for (i=0; i<dodai; i++)
 220:	21 96       	adiw	r28, 0x01	; 1
 222:	ce 15       	cp	r28, r14
 224:	df 05       	cpc	r29, r15
 226:	8c f3       	brlt	.-30     	; 0x20a <print_LCD+0x1e>
	if(str[i] > 0) putChar_LCD(str[i]);
	else putChar_LCD(' ');

}
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	ff 90       	pop	r15
 232:	ef 90       	pop	r14
 234:	08 95       	ret

00000236 <vietso>:
void vietso(int xxx)
{
 236:	ef 92       	push	r14
 238:	ff 92       	push	r15
 23a:	0f 93       	push	r16
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	ec 01       	movw	r28, r24
	int n,t,c,dv;
	n=xxx/1000;
 244:	68 ee       	ldi	r22, 0xE8	; 232
 246:	73 e0       	ldi	r23, 0x03	; 3
 248:	0e 94 35 02 	call	0x46a	; 0x46a <__divmodhi4>
 24c:	7c 01       	movw	r14, r24
		}
	}
}
void putChar_LCD(int kitu)//**************************__GHI 1 KI TU LEN LCD__**********************
{
	dulieu(kitu);
 24e:	80 e3       	ldi	r24, 0x30	; 48
 250:	86 0f       	add	r24, r22
 252:	0e 94 77 00 	call	0xee	; 0xee <dulieu>
}
void vietso(int xxx)
{
	int n,t,c,dv;
	n=xxx/1000;
	t=(xxx%1000)/100;
 256:	04 e6       	ldi	r16, 0x64	; 100
 258:	10 e0       	ldi	r17, 0x00	; 0
 25a:	c7 01       	movw	r24, r14
 25c:	b8 01       	movw	r22, r16
 25e:	0e 94 35 02 	call	0x46a	; 0x46a <__divmodhi4>
		}
	}
}
void putChar_LCD(int kitu)//**************************__GHI 1 KI TU LEN LCD__**********************
{
	dulieu(kitu);
 262:	80 e3       	ldi	r24, 0x30	; 48
 264:	86 0f       	add	r24, r22
 266:	0e 94 77 00 	call	0xee	; 0xee <dulieu>
void vietso(int xxx)
{
	int n,t,c,dv;
	n=xxx/1000;
	t=(xxx%1000)/100;
	c=(xxx%100)/10;
 26a:	ce 01       	movw	r24, r28
 26c:	b8 01       	movw	r22, r16
 26e:	0e 94 35 02 	call	0x46a	; 0x46a <__divmodhi4>
 272:	0a e0       	ldi	r16, 0x0A	; 10
 274:	10 e0       	ldi	r17, 0x00	; 0
 276:	b8 01       	movw	r22, r16
 278:	0e 94 35 02 	call	0x46a	; 0x46a <__divmodhi4>
		}
	}
}
void putChar_LCD(int kitu)//**************************__GHI 1 KI TU LEN LCD__**********************
{
	dulieu(kitu);
 27c:	80 e3       	ldi	r24, 0x30	; 48
 27e:	86 0f       	add	r24, r22
 280:	0e 94 77 00 	call	0xee	; 0xee <dulieu>
{
	int n,t,c,dv;
	n=xxx/1000;
	t=(xxx%1000)/100;
	c=(xxx%100)/10;
	dv=xxx%10;
 284:	ce 01       	movw	r24, r28
 286:	b8 01       	movw	r22, r16
 288:	0e 94 35 02 	call	0x46a	; 0x46a <__divmodhi4>
		}
	}
}
void putChar_LCD(int kitu)//**************************__GHI 1 KI TU LEN LCD__**********************
{
	dulieu(kitu);
 28c:	80 5d       	subi	r24, 0xD0	; 208
 28e:	0e 94 77 00 	call	0xee	; 0xee <dulieu>
	dv=xxx%10;
	putChar_LCD(n+48);
	putChar_LCD(t+48);
	putChar_LCD(c+48);
	putChar_LCD(dv+48);
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	1f 91       	pop	r17
 298:	0f 91       	pop	r16
 29a:	ff 90       	pop	r15
 29c:	ef 90       	pop	r14
 29e:	08 95       	ret

000002a0 <main>:
#define inbit(thanhghi,bit) (thanhghi&(1<<bit))>>bit
#define trig 0
#define echo 1
int main(void)
{
	DDRC=0xff;
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	84 bb       	out	0x14, r24	; 20
	DDRD=0xff;
 2a4:	81 bb       	out	0x11, r24	; 17
	DDRA=0x01;
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	8a bb       	out	0x1a, r24	; 26
	init_LCD();
 2aa:	0e 94 a5 00 	call	0x14a	; 0x14a <init_LCD>
	clr_LCD();
 2ae:	0e 94 bf 00 	call	0x17e	; 0x17e <clr_LCD>
		setb(TCCR1B,CS11);
		//setb(TCCR1B,CS12);
		TCNT1=0;
		while(inbit(PINA,echo)==1);
		n=TCNT1;
		d=(float)(343*n/2000);
 2b2:	0f 2e       	mov	r0, r31
 2b4:	f0 ed       	ldi	r31, 0xD0	; 208
 2b6:	cf 2e       	mov	r12, r31
 2b8:	f7 e0       	ldi	r31, 0x07	; 7
 2ba:	df 2e       	mov	r13, r31
 2bc:	e1 2c       	mov	r14, r1
 2be:	f1 2c       	mov	r15, r1
 2c0:	f0 2d       	mov	r31, r0
		n=TCNT0;
		d=(float)343*1/16000*n;
		vietso(d);
		_delay_ms(200);
		//move_LCD(2,1);*/
		move_LCD(1,1);
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	70 e0       	ldi	r23, 0x00	; 0
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 c3 00 	call	0x186	; 0x186 <move_LCD>
		print_LCD("DISTANCE=",9);
 2ce:	69 e0       	ldi	r22, 0x09	; 9
 2d0:	82 e6       	ldi	r24, 0x62	; 98
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <print_LCD>
		move_LCD(1,10);
 2d8:	6a e0       	ldi	r22, 0x0A	; 10
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 c3 00 	call	0x186	; 0x186 <move_LCD>
		setb(PORTA,trig);
 2e4:	d8 9a       	sbi	0x1b, 0	; 27
 2e6:	25 e3       	ldi	r18, 0x35	; 53
 2e8:	2a 95       	dec	r18
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <main+0x48>
 2ec:	00 00       	nop
		_delay_us(20);
		clrb(PORTA,trig);
 2ee:	d8 98       	cbi	0x1b, 0	; 27
		while(inbit(PINA,echo)==0);
 2f0:	c9 9b       	sbis	0x19, 1	; 25
 2f2:	fe cf       	rjmp	.-4      	; 0x2f0 <main+0x50>
		//setb(TCCR1B,CS10);
		setb(TCCR1B,CS11);
 2f4:	8e b5       	in	r24, 0x2e	; 46
 2f6:	82 60       	ori	r24, 0x02	; 2
 2f8:	8e bd       	out	0x2e, r24	; 46
		//setb(TCCR1B,CS12);
		TCNT1=0;
 2fa:	1d bc       	out	0x2d, r1	; 45
 2fc:	1c bc       	out	0x2c, r1	; 44
		while(inbit(PINA,echo)==1);
 2fe:	c9 99       	sbic	0x19, 1	; 25
 300:	fe cf       	rjmp	.-4      	; 0x2fe <main+0x5e>
		n=TCNT1;
 302:	2c b5       	in	r18, 0x2c	; 44
 304:	3d b5       	in	r19, 0x2d	; 45
		d=(float)(343*n/2000);
 306:	a7 e5       	ldi	r26, 0x57	; 87
 308:	b1 e0       	ldi	r27, 0x01	; 1
 30a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__umulhisi3>
 30e:	a7 01       	movw	r20, r14
 310:	96 01       	movw	r18, r12
 312:	0e 94 49 02 	call	0x492	; 0x492 <__divmodsi4>
 316:	ca 01       	movw	r24, r20
 318:	b9 01       	movw	r22, r18
 31a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__floatsisf>
		vietso(d);
 31e:	0e 94 9e 01 	call	0x33c	; 0x33c <__fixsfsi>
 322:	cb 01       	movw	r24, r22
 324:	0e 94 1b 01 	call	0x236	; 0x236 <vietso>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 328:	8f ef       	ldi	r24, 0xFF	; 255
 32a:	96 e1       	ldi	r25, 0x16	; 22
 32c:	21 e1       	ldi	r18, 0x11	; 17
 32e:	81 50       	subi	r24, 0x01	; 1
 330:	90 40       	sbci	r25, 0x00	; 0
 332:	20 40       	sbci	r18, 0x00	; 0
 334:	e1 f7       	brne	.-8      	; 0x32e <main+0x8e>
 336:	00 c0       	rjmp	.+0      	; 0x338 <main+0x98>
 338:	00 00       	nop
 33a:	c3 cf       	rjmp	.-122    	; 0x2c2 <main+0x22>

0000033c <__fixsfsi>:
 33c:	04 d0       	rcall	.+8      	; 0x346 <__fixunssfsi>
 33e:	68 94       	set
 340:	b1 11       	cpse	r27, r1
 342:	8d c0       	rjmp	.+282    	; 0x45e <__fp_szero>
 344:	08 95       	ret

00000346 <__fixunssfsi>:
 346:	70 d0       	rcall	.+224    	; 0x428 <__fp_splitA>
 348:	88 f0       	brcs	.+34     	; 0x36c <__fixunssfsi+0x26>
 34a:	9f 57       	subi	r25, 0x7F	; 127
 34c:	90 f0       	brcs	.+36     	; 0x372 <__fixunssfsi+0x2c>
 34e:	b9 2f       	mov	r27, r25
 350:	99 27       	eor	r25, r25
 352:	b7 51       	subi	r27, 0x17	; 23
 354:	a0 f0       	brcs	.+40     	; 0x37e <__fixunssfsi+0x38>
 356:	d1 f0       	breq	.+52     	; 0x38c <__fixunssfsi+0x46>
 358:	66 0f       	add	r22, r22
 35a:	77 1f       	adc	r23, r23
 35c:	88 1f       	adc	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	1a f0       	brmi	.+6      	; 0x368 <__fixunssfsi+0x22>
 362:	ba 95       	dec	r27
 364:	c9 f7       	brne	.-14     	; 0x358 <__fixunssfsi+0x12>
 366:	12 c0       	rjmp	.+36     	; 0x38c <__fixunssfsi+0x46>
 368:	b1 30       	cpi	r27, 0x01	; 1
 36a:	81 f0       	breq	.+32     	; 0x38c <__fixunssfsi+0x46>
 36c:	77 d0       	rcall	.+238    	; 0x45c <__fp_zero>
 36e:	b1 e0       	ldi	r27, 0x01	; 1
 370:	08 95       	ret
 372:	74 c0       	rjmp	.+232    	; 0x45c <__fp_zero>
 374:	67 2f       	mov	r22, r23
 376:	78 2f       	mov	r23, r24
 378:	88 27       	eor	r24, r24
 37a:	b8 5f       	subi	r27, 0xF8	; 248
 37c:	39 f0       	breq	.+14     	; 0x38c <__fixunssfsi+0x46>
 37e:	b9 3f       	cpi	r27, 0xF9	; 249
 380:	cc f3       	brlt	.-14     	; 0x374 <__fixunssfsi+0x2e>
 382:	86 95       	lsr	r24
 384:	77 95       	ror	r23
 386:	67 95       	ror	r22
 388:	b3 95       	inc	r27
 38a:	d9 f7       	brne	.-10     	; 0x382 <__fixunssfsi+0x3c>
 38c:	3e f4       	brtc	.+14     	; 0x39c <__fixunssfsi+0x56>
 38e:	90 95       	com	r25
 390:	80 95       	com	r24
 392:	70 95       	com	r23
 394:	61 95       	neg	r22
 396:	7f 4f       	sbci	r23, 0xFF	; 255
 398:	8f 4f       	sbci	r24, 0xFF	; 255
 39a:	9f 4f       	sbci	r25, 0xFF	; 255
 39c:	08 95       	ret

0000039e <__floatunsisf>:
 39e:	e8 94       	clt
 3a0:	09 c0       	rjmp	.+18     	; 0x3b4 <__floatsisf+0x12>

000003a2 <__floatsisf>:
 3a2:	97 fb       	bst	r25, 7
 3a4:	3e f4       	brtc	.+14     	; 0x3b4 <__floatsisf+0x12>
 3a6:	90 95       	com	r25
 3a8:	80 95       	com	r24
 3aa:	70 95       	com	r23
 3ac:	61 95       	neg	r22
 3ae:	7f 4f       	sbci	r23, 0xFF	; 255
 3b0:	8f 4f       	sbci	r24, 0xFF	; 255
 3b2:	9f 4f       	sbci	r25, 0xFF	; 255
 3b4:	99 23       	and	r25, r25
 3b6:	a9 f0       	breq	.+42     	; 0x3e2 <__floatsisf+0x40>
 3b8:	f9 2f       	mov	r31, r25
 3ba:	96 e9       	ldi	r25, 0x96	; 150
 3bc:	bb 27       	eor	r27, r27
 3be:	93 95       	inc	r25
 3c0:	f6 95       	lsr	r31
 3c2:	87 95       	ror	r24
 3c4:	77 95       	ror	r23
 3c6:	67 95       	ror	r22
 3c8:	b7 95       	ror	r27
 3ca:	f1 11       	cpse	r31, r1
 3cc:	f8 cf       	rjmp	.-16     	; 0x3be <__floatsisf+0x1c>
 3ce:	fa f4       	brpl	.+62     	; 0x40e <__floatsisf+0x6c>
 3d0:	bb 0f       	add	r27, r27
 3d2:	11 f4       	brne	.+4      	; 0x3d8 <__floatsisf+0x36>
 3d4:	60 ff       	sbrs	r22, 0
 3d6:	1b c0       	rjmp	.+54     	; 0x40e <__floatsisf+0x6c>
 3d8:	6f 5f       	subi	r22, 0xFF	; 255
 3da:	7f 4f       	sbci	r23, 0xFF	; 255
 3dc:	8f 4f       	sbci	r24, 0xFF	; 255
 3de:	9f 4f       	sbci	r25, 0xFF	; 255
 3e0:	16 c0       	rjmp	.+44     	; 0x40e <__floatsisf+0x6c>
 3e2:	88 23       	and	r24, r24
 3e4:	11 f0       	breq	.+4      	; 0x3ea <__floatsisf+0x48>
 3e6:	96 e9       	ldi	r25, 0x96	; 150
 3e8:	11 c0       	rjmp	.+34     	; 0x40c <__floatsisf+0x6a>
 3ea:	77 23       	and	r23, r23
 3ec:	21 f0       	breq	.+8      	; 0x3f6 <__floatsisf+0x54>
 3ee:	9e e8       	ldi	r25, 0x8E	; 142
 3f0:	87 2f       	mov	r24, r23
 3f2:	76 2f       	mov	r23, r22
 3f4:	05 c0       	rjmp	.+10     	; 0x400 <__floatsisf+0x5e>
 3f6:	66 23       	and	r22, r22
 3f8:	71 f0       	breq	.+28     	; 0x416 <__floatsisf+0x74>
 3fa:	96 e8       	ldi	r25, 0x86	; 134
 3fc:	86 2f       	mov	r24, r22
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	60 e0       	ldi	r22, 0x00	; 0
 402:	2a f0       	brmi	.+10     	; 0x40e <__floatsisf+0x6c>
 404:	9a 95       	dec	r25
 406:	66 0f       	add	r22, r22
 408:	77 1f       	adc	r23, r23
 40a:	88 1f       	adc	r24, r24
 40c:	da f7       	brpl	.-10     	; 0x404 <__floatsisf+0x62>
 40e:	88 0f       	add	r24, r24
 410:	96 95       	lsr	r25
 412:	87 95       	ror	r24
 414:	97 f9       	bld	r25, 7
 416:	08 95       	ret

00000418 <__fp_split3>:
 418:	57 fd       	sbrc	r21, 7
 41a:	90 58       	subi	r25, 0x80	; 128
 41c:	44 0f       	add	r20, r20
 41e:	55 1f       	adc	r21, r21
 420:	59 f0       	breq	.+22     	; 0x438 <__fp_splitA+0x10>
 422:	5f 3f       	cpi	r21, 0xFF	; 255
 424:	71 f0       	breq	.+28     	; 0x442 <__fp_splitA+0x1a>
 426:	47 95       	ror	r20

00000428 <__fp_splitA>:
 428:	88 0f       	add	r24, r24
 42a:	97 fb       	bst	r25, 7
 42c:	99 1f       	adc	r25, r25
 42e:	61 f0       	breq	.+24     	; 0x448 <__fp_splitA+0x20>
 430:	9f 3f       	cpi	r25, 0xFF	; 255
 432:	79 f0       	breq	.+30     	; 0x452 <__fp_splitA+0x2a>
 434:	87 95       	ror	r24
 436:	08 95       	ret
 438:	12 16       	cp	r1, r18
 43a:	13 06       	cpc	r1, r19
 43c:	14 06       	cpc	r1, r20
 43e:	55 1f       	adc	r21, r21
 440:	f2 cf       	rjmp	.-28     	; 0x426 <__fp_split3+0xe>
 442:	46 95       	lsr	r20
 444:	f1 df       	rcall	.-30     	; 0x428 <__fp_splitA>
 446:	08 c0       	rjmp	.+16     	; 0x458 <__fp_splitA+0x30>
 448:	16 16       	cp	r1, r22
 44a:	17 06       	cpc	r1, r23
 44c:	18 06       	cpc	r1, r24
 44e:	99 1f       	adc	r25, r25
 450:	f1 cf       	rjmp	.-30     	; 0x434 <__fp_splitA+0xc>
 452:	86 95       	lsr	r24
 454:	71 05       	cpc	r23, r1
 456:	61 05       	cpc	r22, r1
 458:	08 94       	sec
 45a:	08 95       	ret

0000045c <__fp_zero>:
 45c:	e8 94       	clt

0000045e <__fp_szero>:
 45e:	bb 27       	eor	r27, r27
 460:	66 27       	eor	r22, r22
 462:	77 27       	eor	r23, r23
 464:	cb 01       	movw	r24, r22
 466:	97 f9       	bld	r25, 7
 468:	08 95       	ret

0000046a <__divmodhi4>:
 46a:	97 fb       	bst	r25, 7
 46c:	07 2e       	mov	r0, r23
 46e:	16 f4       	brtc	.+4      	; 0x474 <__divmodhi4+0xa>
 470:	00 94       	com	r0
 472:	07 d0       	rcall	.+14     	; 0x482 <__divmodhi4_neg1>
 474:	77 fd       	sbrc	r23, 7
 476:	09 d0       	rcall	.+18     	; 0x48a <__divmodhi4_neg2>
 478:	0e 94 77 02 	call	0x4ee	; 0x4ee <__udivmodhi4>
 47c:	07 fc       	sbrc	r0, 7
 47e:	05 d0       	rcall	.+10     	; 0x48a <__divmodhi4_neg2>
 480:	3e f4       	brtc	.+14     	; 0x490 <__divmodhi4_exit>

00000482 <__divmodhi4_neg1>:
 482:	90 95       	com	r25
 484:	81 95       	neg	r24
 486:	9f 4f       	sbci	r25, 0xFF	; 255
 488:	08 95       	ret

0000048a <__divmodhi4_neg2>:
 48a:	70 95       	com	r23
 48c:	61 95       	neg	r22
 48e:	7f 4f       	sbci	r23, 0xFF	; 255

00000490 <__divmodhi4_exit>:
 490:	08 95       	ret

00000492 <__divmodsi4>:
 492:	05 2e       	mov	r0, r21
 494:	97 fb       	bst	r25, 7
 496:	1e f4       	brtc	.+6      	; 0x49e <__divmodsi4+0xc>
 498:	00 94       	com	r0
 49a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <__negsi2>
 49e:	57 fd       	sbrc	r21, 7
 4a0:	07 d0       	rcall	.+14     	; 0x4b0 <__divmodsi4_neg2>
 4a2:	0e 94 8b 02 	call	0x516	; 0x516 <__udivmodsi4>
 4a6:	07 fc       	sbrc	r0, 7
 4a8:	03 d0       	rcall	.+6      	; 0x4b0 <__divmodsi4_neg2>
 4aa:	4e f4       	brtc	.+18     	; 0x4be <__divmodsi4_exit>
 4ac:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__negsi2>

000004b0 <__divmodsi4_neg2>:
 4b0:	50 95       	com	r21
 4b2:	40 95       	com	r20
 4b4:	30 95       	com	r19
 4b6:	21 95       	neg	r18
 4b8:	3f 4f       	sbci	r19, 0xFF	; 255
 4ba:	4f 4f       	sbci	r20, 0xFF	; 255
 4bc:	5f 4f       	sbci	r21, 0xFF	; 255

000004be <__divmodsi4_exit>:
 4be:	08 95       	ret

000004c0 <__negsi2>:
 4c0:	90 95       	com	r25
 4c2:	80 95       	com	r24
 4c4:	70 95       	com	r23
 4c6:	61 95       	neg	r22
 4c8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ca:	8f 4f       	sbci	r24, 0xFF	; 255
 4cc:	9f 4f       	sbci	r25, 0xFF	; 255
 4ce:	08 95       	ret

000004d0 <__umulhisi3>:
 4d0:	a2 9f       	mul	r26, r18
 4d2:	b0 01       	movw	r22, r0
 4d4:	b3 9f       	mul	r27, r19
 4d6:	c0 01       	movw	r24, r0
 4d8:	a3 9f       	mul	r26, r19
 4da:	70 0d       	add	r23, r0
 4dc:	81 1d       	adc	r24, r1
 4de:	11 24       	eor	r1, r1
 4e0:	91 1d       	adc	r25, r1
 4e2:	b2 9f       	mul	r27, r18
 4e4:	70 0d       	add	r23, r0
 4e6:	81 1d       	adc	r24, r1
 4e8:	11 24       	eor	r1, r1
 4ea:	91 1d       	adc	r25, r1
 4ec:	08 95       	ret

000004ee <__udivmodhi4>:
 4ee:	aa 1b       	sub	r26, r26
 4f0:	bb 1b       	sub	r27, r27
 4f2:	51 e1       	ldi	r21, 0x11	; 17
 4f4:	07 c0       	rjmp	.+14     	; 0x504 <__udivmodhi4_ep>

000004f6 <__udivmodhi4_loop>:
 4f6:	aa 1f       	adc	r26, r26
 4f8:	bb 1f       	adc	r27, r27
 4fa:	a6 17       	cp	r26, r22
 4fc:	b7 07       	cpc	r27, r23
 4fe:	10 f0       	brcs	.+4      	; 0x504 <__udivmodhi4_ep>
 500:	a6 1b       	sub	r26, r22
 502:	b7 0b       	sbc	r27, r23

00000504 <__udivmodhi4_ep>:
 504:	88 1f       	adc	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	5a 95       	dec	r21
 50a:	a9 f7       	brne	.-22     	; 0x4f6 <__udivmodhi4_loop>
 50c:	80 95       	com	r24
 50e:	90 95       	com	r25
 510:	bc 01       	movw	r22, r24
 512:	cd 01       	movw	r24, r26
 514:	08 95       	ret

00000516 <__udivmodsi4>:
 516:	a1 e2       	ldi	r26, 0x21	; 33
 518:	1a 2e       	mov	r1, r26
 51a:	aa 1b       	sub	r26, r26
 51c:	bb 1b       	sub	r27, r27
 51e:	fd 01       	movw	r30, r26
 520:	0d c0       	rjmp	.+26     	; 0x53c <__udivmodsi4_ep>

00000522 <__udivmodsi4_loop>:
 522:	aa 1f       	adc	r26, r26
 524:	bb 1f       	adc	r27, r27
 526:	ee 1f       	adc	r30, r30
 528:	ff 1f       	adc	r31, r31
 52a:	a2 17       	cp	r26, r18
 52c:	b3 07       	cpc	r27, r19
 52e:	e4 07       	cpc	r30, r20
 530:	f5 07       	cpc	r31, r21
 532:	20 f0       	brcs	.+8      	; 0x53c <__udivmodsi4_ep>
 534:	a2 1b       	sub	r26, r18
 536:	b3 0b       	sbc	r27, r19
 538:	e4 0b       	sbc	r30, r20
 53a:	f5 0b       	sbc	r31, r21

0000053c <__udivmodsi4_ep>:
 53c:	66 1f       	adc	r22, r22
 53e:	77 1f       	adc	r23, r23
 540:	88 1f       	adc	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	1a 94       	dec	r1
 546:	69 f7       	brne	.-38     	; 0x522 <__udivmodsi4_loop>
 548:	60 95       	com	r22
 54a:	70 95       	com	r23
 54c:	80 95       	com	r24
 54e:	90 95       	com	r25
 550:	9b 01       	movw	r18, r22
 552:	ac 01       	movw	r20, r24
 554:	bd 01       	movw	r22, r26
 556:	cf 01       	movw	r24, r30
 558:	08 95       	ret

0000055a <_exit>:
 55a:	f8 94       	cli

0000055c <__stop_program>:
 55c:	ff cf       	rjmp	.-2      	; 0x55c <__stop_program>
