
AMCHUNG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000017c  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006a  0080006a  0000021a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000021a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000024a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000182  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000119  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000137  00000000  00000000  00000505  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000063c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000160  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008f  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000085f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#define setb(thanhghi,bit)	thanhghi=thanhghi|(1<<bit)
#define clrb(thanhghi,bit)  thanhghi=thanhghi&(~(1<<bit))
#define inbit(thanhghi,bit) (thanhghi&(1<<bit))>>bit//DDUNG TOI DBIT
int i=0;
int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2a 97       	sbiw	r28, 0x0a	; 10
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	DDRA=0xFF;//cho phep xuat
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a bb       	out	0x1a, r24	; 26
	PORTB=0xFF;
  aa:	88 bb       	out	0x18, r24	; 24
	char ma[]={0X3F,0x06,0X5B,0X4F,0X66,0X6D,0X7D,0X07,0X7F,0X6F};
  ac:	8a e0       	ldi	r24, 0x0A	; 10
  ae:	e0 e6       	ldi	r30, 0x60	; 96
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	de 01       	movw	r26, r28
  b4:	11 96       	adiw	r26, 0x01	; 1
  b6:	01 90       	ld	r0, Z+
  b8:	0d 92       	st	X+, r0
  ba:	8a 95       	dec	r24
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x24>
		}
		if (inbit(PINB,1)==0)
		{
			i--;
			if (i==-1)
			i=9;
  be:	29 e0       	ldi	r18, 0x09	; 9
  c0:	30 e0       	ldi	r19, 0x00	; 0
	DDRA=0xFF;//cho phep xuat
	PORTB=0xFF;
	char ma[]={0X3F,0x06,0X5B,0X4F,0X66,0X6D,0X7D,0X07,0X7F,0X6F};
	while(1)
	{
		PORTA=ma[i];
  c2:	e0 91 6a 00 	lds	r30, 0x006A
  c6:	f0 91 6b 00 	lds	r31, 0x006B
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	8c 0f       	add	r24, r28
  d0:	9d 1f       	adc	r25, r29
  d2:	e8 0f       	add	r30, r24
  d4:	f9 1f       	adc	r31, r25
  d6:	80 81       	ld	r24, Z
  d8:	8b bb       	out	0x1b, r24	; 27
		if (inbit(PINB,2)==0)
  da:	b2 99       	sbic	0x16, 2	; 22
  dc:	26 c0       	rjmp	.+76     	; 0x12a <main+0x98>
		{
			i++;
  de:	80 91 6a 00 	lds	r24, 0x006A
  e2:	90 91 6b 00 	lds	r25, 0x006B
  e6:	01 96       	adiw	r24, 0x01	; 1
			if (i==10)
  e8:	8a 30       	cpi	r24, 0x0A	; 10
  ea:	91 05       	cpc	r25, r1
  ec:	29 f0       	breq	.+10     	; 0xf8 <main+0x66>
	while(1)
	{
		PORTA=ma[i];
		if (inbit(PINB,2)==0)
		{
			i++;
  ee:	90 93 6b 00 	sts	0x006B, r25
  f2:	80 93 6a 00 	sts	0x006A, r24
  f6:	04 c0       	rjmp	.+8      	; 0x100 <main+0x6e>
			if (i==10)
			i=0;
  f8:	10 92 6b 00 	sts	0x006B, r1
  fc:	10 92 6a 00 	sts	0x006A, r1
			PORTA=ma[i];
 100:	e0 91 6a 00 	lds	r30, 0x006A
 104:	f0 91 6b 00 	lds	r31, 0x006B
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	8c 0f       	add	r24, r28
 10e:	9d 1f       	adc	r25, r29
 110:	e8 0f       	add	r30, r24
 112:	f9 1f       	adc	r31, r25
 114:	80 81       	ld	r24, Z
 116:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	9f e5       	ldi	r25, 0x5F	; 95
 11a:	4a ee       	ldi	r20, 0xEA	; 234
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	91 50       	subi	r25, 0x01	; 1
 120:	40 40       	sbci	r20, 0x00	; 0
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x8c>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x96>
 128:	00 00       	nop
			_delay_ms(300);
		}
		if (inbit(PINB,1)==0)
 12a:	b1 99       	sbic	0x16, 1	; 22
 12c:	ca cf       	rjmp	.-108    	; 0xc2 <main+0x30>
		{
			i--;
 12e:	80 91 6a 00 	lds	r24, 0x006A
 132:	90 91 6b 00 	lds	r25, 0x006B
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	28 f0       	brcs	.+10     	; 0x144 <main+0xb2>
 13a:	90 93 6b 00 	sts	0x006B, r25
 13e:	80 93 6a 00 	sts	0x006A, r24
 142:	04 c0       	rjmp	.+8      	; 0x14c <main+0xba>
			if (i==-1)
			i=9;
 144:	30 93 6b 00 	sts	0x006B, r19
 148:	20 93 6a 00 	sts	0x006A, r18
			PORTA=ma[i];
 14c:	e0 91 6a 00 	lds	r30, 0x006A
 150:	f0 91 6b 00 	lds	r31, 0x006B
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	8c 0f       	add	r24, r28
 15a:	9d 1f       	adc	r25, r29
 15c:	e8 0f       	add	r30, r24
 15e:	f9 1f       	adc	r31, r25
 160:	80 81       	ld	r24, Z
 162:	8b bb       	out	0x1b, r24	; 27
 164:	9f e5       	ldi	r25, 0x5F	; 95
 166:	4a ee       	ldi	r20, 0xEA	; 234
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	91 50       	subi	r25, 0x01	; 1
 16c:	40 40       	sbci	r20, 0x00	; 0
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <main+0xd8>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0xe2>
 174:	00 00       	nop
 176:	a5 cf       	rjmp	.-182    	; 0xc2 <main+0x30>

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
