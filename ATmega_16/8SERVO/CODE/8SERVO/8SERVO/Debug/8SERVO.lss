
8SERVO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c74  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00001c74  00001ce8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00001cec  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  00001d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001d35  00000000  00000000  00001d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001de  00000000  00000000  00003a91  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000008c0  00000000  00000000  00003c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001e0  00000000  00000000  00004530  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001e8  00000000  00000000  00004710  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00002a55  00000000  00000000  000048f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000002a0  00000000  00000000  0000734d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e7       	ldi	r30, 0x74	; 116
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 36       	cpi	r26, 0x64	; 100
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
      76:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <main>
      7a:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <servo_control>:
}
void servo_4(int servo1,float goc1,int servo2,float goc2,int servo3,float goc3,int servo4,float goc4)
{
	goc1=11*goc1+500;
	goc2=11*goc2+500;
	goc3=11*goc1+500;
      82:	2f 92       	push	r2
      84:	3f 92       	push	r3
      86:	4f 92       	push	r4
      88:	5f 92       	push	r5
      8a:	6f 92       	push	r6
      8c:	7f 92       	push	r7
      8e:	8f 92       	push	r8
      90:	9f 92       	push	r9
      92:	af 92       	push	r10
      94:	bf 92       	push	r11
      96:	cf 92       	push	r12
      98:	df 92       	push	r13
      9a:	ef 92       	push	r14
      9c:	ff 92       	push	r15
      9e:	0f 93       	push	r16
      a0:	1f 93       	push	r17
      a2:	cf 93       	push	r28
      a4:	df 93       	push	r29
	goc4=11*goc2+500;
      a6:	cd b7       	in	r28, 0x3d	; 61
      a8:	de b7       	in	r29, 0x3e	; 62
      aa:	2c 97       	sbiw	r28, 0x0c	; 12
      ac:	0f b6       	in	r0, 0x3f	; 63
      ae:	f8 94       	cli
      b0:	de bf       	out	0x3e, r29	; 62
      b2:	0f be       	out	0x3f, r0	; 63
      b4:	cd bf       	out	0x3d, r28	; 61
      b6:	38 2e       	mov	r3, r24
      b8:	2a 01       	movw	r4, r20
      ba:	3b 01       	movw	r6, r22
      bc:	48 01       	movw	r8, r16
      be:	59 01       	movw	r10, r18
      c0:	fa 82       	std	Y+2, r15	; 0x02
      c2:	e9 82       	std	Y+1, r14	; 0x01
      c4:	8f ef       	ldi	r24, 0xFF	; 255
      c6:	8a bb       	out	0x1a, r24	; 26
      c8:	20 e0       	ldi	r18, 0x00	; 0
      ca:	30 e0       	ldi	r19, 0x00	; 0
      cc:	45 e3       	ldi	r20, 0x35	; 53
	setb(SERVO_PORT,servo1);
      ce:	53 e4       	ldi	r21, 0x43	; 67
      d0:	c3 01       	movw	r24, r6
      d2:	b2 01       	movw	r22, r4
      d4:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
      d8:	88 23       	and	r24, r24
      da:	0c f0       	brlt	.+2      	; 0xde <servo_control+0x5c>
      dc:	2e c3       	rjmp	.+1628   	; 0x73a <__stack+0x2db>
      de:	20 e0       	ldi	r18, 0x00	; 0
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	45 e3       	ldi	r20, 0x35	; 53
	setb(SERVO_PORT,servo2);
      e4:	53 e4       	ldi	r21, 0x43	; 67
      e6:	c5 01       	movw	r24, r10
      e8:	b4 01       	movw	r22, r8
      ea:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
      ee:	88 23       	and	r24, r24
      f0:	0c f0       	brlt	.+2      	; 0xf4 <servo_control+0x72>
      f2:	23 c3       	rjmp	.+1606   	; 0x73a <__stack+0x2db>
      f4:	20 e0       	ldi	r18, 0x00	; 0
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	40 e3       	ldi	r20, 0x30	; 48
      fa:	51 e4       	ldi	r21, 0x41	; 65
	setb(SERVO_PORT,servo3);
      fc:	c3 01       	movw	r24, r6
      fe:	b2 01       	movw	r22, r4
     100:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     104:	20 e0       	ldi	r18, 0x00	; 0
     106:	30 e0       	ldi	r19, 0x00	; 0
     108:	4a ef       	ldi	r20, 0xFA	; 250
     10a:	53 e4       	ldi	r21, 0x43	; 67
     10c:	0e 94 1e 0c 	call	0x183c	; 0x183c <__addsf3>
     110:	6b 01       	movw	r12, r22
	setb(SERVO_PORT,servo4);
     112:	7c 01       	movw	r14, r24
     114:	20 e0       	ldi	r18, 0x00	; 0
     116:	30 e0       	ldi	r19, 0x00	; 0
     118:	40 e3       	ldi	r20, 0x30	; 48
     11a:	51 e4       	ldi	r21, 0x41	; 65
     11c:	c5 01       	movw	r24, r10
     11e:	b4 01       	movw	r22, r8
     120:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     124:	20 e0       	ldi	r18, 0x00	; 0
     126:	30 e0       	ldi	r19, 0x00	; 0
     128:	4a ef       	ldi	r20, 0xFA	; 250
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     12a:	53 e4       	ldi	r21, 0x43	; 67
     12c:	0e 94 1e 0c 	call	0x183c	; 0x183c <__addsf3>
     130:	6b 83       	std	Y+3, r22	; 0x03
     132:	7c 83       	std	Y+4, r23	; 0x04
     134:	8d 83       	std	Y+5, r24	; 0x05
     136:	9e 83       	std	Y+6, r25	; 0x06
     138:	9b 01       	movw	r18, r22
     13a:	ac 01       	movw	r20, r24
     13c:	c7 01       	movw	r24, r14
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
     13e:	b6 01       	movw	r22, r12
     140:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     144:	18 16       	cp	r1, r24
     146:	0c f0       	brlt	.+2      	; 0x14a <servo_control+0xc8>
     148:	7b c1       	rjmp	.+758    	; 0x440 <servo_control+0x3be>
     14a:	c7 01       	movw	r24, r14
     14c:	b6 01       	movw	r22, r12
     14e:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__fixsfsi>

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
     152:	2b 01       	movw	r4, r22
     154:	3c 01       	movw	r6, r24
     156:	88 27       	eor	r24, r24
     158:	77 fd       	sbrc	r23, 7
     15a:	80 95       	com	r24
     15c:	98 2f       	mov	r25, r24
     15e:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__floatsisf>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
     162:	6b 01       	movw	r12, r22
     164:	7c 01       	movw	r14, r24
     166:	9b 01       	movw	r18, r22
     168:	ac 01       	movw	r20, r24
     16a:	6b 81       	ldd	r22, Y+3	; 0x03
     16c:	7c 81       	ldd	r23, Y+4	; 0x04
     16e:	8d 81       	ldd	r24, Y+5	; 0x05
     170:	9e 81       	ldd	r25, Y+6	; 0x06
	{
		_delay_ms(__us / 1000.0);
     172:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
     176:	88 23       	and	r24, r24
     178:	0c f0       	brlt	.+2      	; 0x17c <servo_control+0xfa>
     17a:	df c2       	rjmp	.+1470   	; 0x73a <__stack+0x2db>
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	02 c0       	rjmp	.+4      	; 0x186 <servo_control+0x104>
     182:	88 0f       	add	r24, r24
     184:	99 1f       	adc	r25, r25

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     186:	3a 94       	dec	r3
     188:	e2 f7       	brpl	.-8      	; 0x182 <servo_control+0x100>
     18a:	8f 83       	std	Y+7, r24	; 0x07
     18c:	28 2f       	mov	r18, r24
     18e:	20 95       	com	r18
     190:	28 87       	std	Y+8, r18	; 0x08
     192:	89 81       	ldd	r24, Y+1	; 0x01
     194:	9a 81       	ldd	r25, Y+2	; 0x02
	if (__tmp < 1.0)
     196:	9a 87       	std	Y+10, r25	; 0x0a
     198:	89 87       	std	Y+9, r24	; 0x09
     19a:	00 e2       	ldi	r16, 0x20	; 32
     19c:	1e e4       	ldi	r17, 0x4E	; 78
     19e:	04 19       	sub	r16, r4
     1a0:	15 09       	sbc	r17, r5
     1a2:	0f 2e       	mov	r0, r31
     1a4:	f8 ec       	ldi	r31, 0xC8	; 200
		__ticks = 1;
	else if (__tmp > 65535)
     1a6:	2f 2e       	mov	r2, r31
     1a8:	31 2c       	mov	r3, r1
     1aa:	f0 2d       	mov	r31, r0
     1ac:	5c 86       	std	Y+12, r5	; 0x0c
     1ae:	4b 86       	std	Y+11, r4	; 0x0b
     1b0:	8b b3       	in	r24, 0x1b	; 27
     1b2:	9f 81       	ldd	r25, Y+7	; 0x07
     1b4:	89 2b       	or	r24, r25
     1b6:	8b bb       	out	0x1b, r24	; 27
     1b8:	2b ea       	ldi	r18, 0xAB	; 171
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1ba:	3a ea       	ldi	r19, 0xAA	; 170
     1bc:	4a e2       	ldi	r20, 0x2A	; 42
     1be:	50 e4       	ldi	r21, 0x40	; 64
     1c0:	c7 01       	movw	r24, r14
     1c2:	b6 01       	movw	r22, r12
     1c4:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     1c8:	4b 01       	movw	r8, r22
     1ca:	5c 01       	movw	r10, r24
     1cc:	20 e0       	ldi	r18, 0x00	; 0
		while(__ticks)
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	40 e8       	ldi	r20, 0x80	; 128
     1d2:	5f e3       	ldi	r21, 0x3F	; 63
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1d4:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
     1d8:	88 23       	and	r24, r24
     1da:	0c f4       	brge	.+2      	; 0x1de <servo_control+0x15c>
     1dc:	70 c0       	rjmp	.+224    	; 0x2be <servo_control+0x23c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1de:	a7 01       	movw	r20, r14
     1e0:	96 01       	movw	r18, r12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1e2:	c7 01       	movw	r24, r14
     1e4:	b6 01       	movw	r22, r12
     1e6:	0e 94 1e 0c 	call	0x183c	; 0x183c <__addsf3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1ea:	2b 01       	movw	r4, r22
     1ec:	3c 01       	movw	r6, r24
     1ee:	20 e0       	ldi	r18, 0x00	; 0
     1f0:	3f ef       	ldi	r19, 0xFF	; 255
     1f2:	4f e7       	ldi	r20, 0x7F	; 127

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     1f4:	57 e4       	ldi	r21, 0x47	; 71
     1f6:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     1fa:	18 16       	cp	r1, r24
     1fc:	0c f0       	brlt	.+2      	; 0x200 <servo_control+0x17e>
     1fe:	48 c0       	rjmp	.+144    	; 0x290 <servo_control+0x20e>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     200:	20 e0       	ldi	r18, 0x00	; 0
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	4a e7       	ldi	r20, 0x7A	; 122
     206:	54 e4       	ldi	r21, 0x44	; 68
     208:	c7 01       	movw	r24, r14
     20a:	b6 01       	movw	r22, r12
     20c:	0e 94 86 0c 	call	0x190c	; 0x190c <__divsf3>
     210:	4b 01       	movw	r8, r22
     212:	5c 01       	movw	r10, r24
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     214:	20 e0       	ldi	r18, 0x00	; 0
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	4a ef       	ldi	r20, 0xFA	; 250
     21a:	54 e4       	ldi	r21, 0x44	; 68
     21c:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     220:	6b 01       	movw	r12, r22
     222:	7c 01       	movw	r14, r24
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     224:	20 e0       	ldi	r18, 0x00	; 0
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	40 e8       	ldi	r20, 0x80	; 128
     22a:	5f e3       	ldi	r21, 0x3F	; 63
     22c:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     230:	88 23       	and	r24, r24
     232:	3c f1       	brlt	.+78     	; 0x282 <servo_control+0x200>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     234:	20 e0       	ldi	r18, 0x00	; 0
     236:	3f ef       	ldi	r19, 0xFF	; 255
	_delay_us(goc1);
	clrb(SERVO_PORT,servo1);
     238:	4f e7       	ldi	r20, 0x7F	; 127
     23a:	57 e4       	ldi	r21, 0x47	; 71
     23c:	c7 01       	movw	r24, r14
     23e:	b6 01       	movw	r22, r12
	_delay_us(goc2-goc1);
     240:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     244:	18 16       	cp	r1, r24
     246:	c4 f4       	brge	.+48     	; 0x278 <servo_control+0x1f6>
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	40 e2       	ldi	r20, 0x20	; 32
     24e:	51 e4       	ldi	r21, 0x41	; 65
     250:	c5 01       	movw	r24, r10
     252:	b4 01       	movw	r22, r8
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     254:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     258:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
     25c:	61 15       	cp	r22, r1
     25e:	71 05       	cpc	r23, r1
     260:	81 f1       	breq	.+96     	; 0x2c2 <servo_control+0x240>
     262:	2b 85       	ldd	r18, Y+11	; 0x0b
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
     264:	3c 85       	ldd	r19, Y+12	; 0x0c
     266:	c1 01       	movw	r24, r2
     268:	01 97       	sbiw	r24, 0x01	; 1
     26a:	f1 f7       	brne	.-4      	; 0x268 <servo_control+0x1e6>
     26c:	61 50       	subi	r22, 0x01	; 1
     26e:	71 09       	sbc	r23, r1
     270:	61 15       	cp	r22, r1
     272:	71 05       	cpc	r23, r1
     274:	c1 f7       	brne	.-16     	; 0x266 <servo_control+0x1e4>

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
     276:	27 c0       	rjmp	.+78     	; 0x2c6 <servo_control+0x244>
     278:	c7 01       	movw	r24, r14
     27a:	b6 01       	movw	r22, r12
     27c:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
     280:	02 c0       	rjmp	.+4      	; 0x286 <servo_control+0x204>
     282:	61 e0       	ldi	r22, 0x01	; 1
     284:	70 e0       	ldi	r23, 0x00	; 0
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
     286:	cb 01       	movw	r24, r22
     288:	01 97       	sbiw	r24, 0x01	; 1
     28a:	f1 f7       	brne	.-4      	; 0x288 <servo_control+0x206>
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	1e c0       	rjmp	.+60     	; 0x2cc <servo_control+0x24a>
     290:	20 e0       	ldi	r18, 0x00	; 0
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	4f e7       	ldi	r20, 0x7F	; 127
     296:	53 e4       	ldi	r21, 0x43	; 67
	{
		_delay_ms(__us / 1000.0);
     298:	c5 01       	movw	r24, r10
     29a:	b4 01       	movw	r22, r8
     29c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     2a0:	18 16       	cp	r1, r24
     2a2:	44 f4       	brge	.+16     	; 0x2b4 <servo_control+0x232>
     2a4:	c3 01       	movw	r24, r6
     2a6:	b2 01       	movw	r22, r4
     2a8:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     2ac:	cb 01       	movw	r24, r22
     2ae:	01 97       	sbiw	r24, 0x01	; 1
     2b0:	f1 f7       	brne	.-4      	; 0x2ae <servo_control+0x22c>
     2b2:	0e c0       	rjmp	.+28     	; 0x2d0 <servo_control+0x24e>
     2b4:	c5 01       	movw	r24, r10
     2b6:	b4 01       	movw	r22, r8
     2b8:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
	if (__tmp < 1.0)
     2bc:	07 c0       	rjmp	.+14     	; 0x2cc <servo_control+0x24a>
     2be:	61 e0       	ldi	r22, 0x01	; 1
     2c0:	05 c0       	rjmp	.+10     	; 0x2cc <servo_control+0x24a>
     2c2:	60 e0       	ldi	r22, 0x00	; 0
     2c4:	03 c0       	rjmp	.+6      	; 0x2cc <servo_control+0x24a>
     2c6:	3c 87       	std	Y+12, r19	; 0x0c
     2c8:	2b 87       	std	Y+11, r18	; 0x0b
     2ca:	60 e0       	ldi	r22, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
     2cc:	6a 95       	dec	r22
     2ce:	f1 f7       	brne	.-4      	; 0x2cc <servo_control+0x24a>
     2d0:	8b b3       	in	r24, 0x1b	; 27
     2d2:	e8 85       	ldd	r30, Y+8	; 0x08
     2d4:	8e 23       	and	r24, r30
     2d6:	8b bb       	out	0x1b, r24	; 27
     2d8:	b8 01       	movw	r22, r16
     2da:	88 27       	eor	r24, r24
     2dc:	77 fd       	sbrc	r23, 7
     2de:	80 95       	com	r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2e0:	98 2f       	mov	r25, r24
     2e2:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__floatsisf>
     2e6:	6b 01       	movw	r12, r22
     2e8:	7c 01       	movw	r14, r24
     2ea:	2b ea       	ldi	r18, 0xAB	; 171
     2ec:	3a ea       	ldi	r19, 0xAA	; 170
     2ee:	4a e2       	ldi	r20, 0x2A	; 42
     2f0:	50 e4       	ldi	r21, 0x40	; 64
     2f2:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
		while(__ticks)
     2f6:	4b 01       	movw	r8, r22
     2f8:	5c 01       	movw	r10, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2fa:	20 e0       	ldi	r18, 0x00	; 0
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	40 e8       	ldi	r20, 0x80	; 128
     300:	5f e3       	ldi	r21, 0x3F	; 63
     302:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     306:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     308:	0c f4       	brge	.+2      	; 0x30c <servo_control+0x28a>
     30a:	70 c0       	rjmp	.+224    	; 0x3ec <servo_control+0x36a>
     30c:	a7 01       	movw	r20, r14
     30e:	96 01       	movw	r18, r12
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     310:	c7 01       	movw	r24, r14
     312:	b6 01       	movw	r22, r12
     314:	0e 94 1e 0c 	call	0x183c	; 0x183c <__addsf3>
     318:	2b 01       	movw	r4, r22

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     31a:	3c 01       	movw	r6, r24
     31c:	20 e0       	ldi	r18, 0x00	; 0
     31e:	3f ef       	ldi	r19, 0xFF	; 255
     320:	4f e7       	ldi	r20, 0x7F	; 127
     322:	57 e4       	ldi	r21, 0x47	; 71
     324:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     328:	18 16       	cp	r1, r24
     32a:	0c f0       	brlt	.+2      	; 0x32e <servo_control+0x2ac>
     32c:	48 c0       	rjmp	.+144    	; 0x3be <servo_control+0x33c>
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	4a e7       	ldi	r20, 0x7A	; 122
     334:	54 e4       	ldi	r21, 0x44	; 68
     336:	c7 01       	movw	r24, r14
     338:	b6 01       	movw	r22, r12
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     33a:	0e 94 86 0c 	call	0x190c	; 0x190c <__divsf3>
     33e:	4b 01       	movw	r8, r22
     340:	5c 01       	movw	r10, r24
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	4a ef       	ldi	r20, 0xFA	; 250
     348:	54 e4       	ldi	r21, 0x44	; 68
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     34a:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     34e:	6b 01       	movw	r12, r22
     350:	7c 01       	movw	r14, r24
     352:	20 e0       	ldi	r18, 0x00	; 0
     354:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     356:	40 e8       	ldi	r20, 0x80	; 128
     358:	5f e3       	ldi	r21, 0x3F	; 63
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     35a:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
     35e:	88 23       	and	r24, r24
	clrb(SERVO_PORT,servo2);
     360:	3c f1       	brlt	.+78     	; 0x3b0 <servo_control+0x32e>
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	3f ef       	ldi	r19, 0xFF	; 255
     366:	4f e7       	ldi	r20, 0x7F	; 127
     368:	57 e4       	ldi	r21, 0x47	; 71
	_delay_us(goc3-goc2);
     36a:	c7 01       	movw	r24, r14
     36c:	b6 01       	movw	r22, r12
     36e:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     372:	18 16       	cp	r1, r24
     374:	c4 f4       	brge	.+48     	; 0x3a6 <servo_control+0x324>
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	40 e2       	ldi	r20, 0x20	; 32
     37c:	51 e4       	ldi	r21, 0x41	; 65
     37e:	c5 01       	movw	r24, r10
     380:	b4 01       	movw	r22, r8
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     382:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     386:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
     38a:	61 15       	cp	r22, r1
     38c:	71 05       	cpc	r23, r1
     38e:	81 f1       	breq	.+96     	; 0x3f0 <servo_control+0x36e>
     390:	2b 85       	ldd	r18, Y+11	; 0x0b
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
     392:	3c 85       	ldd	r19, Y+12	; 0x0c
     394:	c1 01       	movw	r24, r2
     396:	01 97       	sbiw	r24, 0x01	; 1
     398:	f1 f7       	brne	.-4      	; 0x396 <servo_control+0x314>
     39a:	61 50       	subi	r22, 0x01	; 1
     39c:	71 09       	sbc	r23, r1
     39e:	61 15       	cp	r22, r1
     3a0:	71 05       	cpc	r23, r1
     3a2:	c1 f7       	brne	.-16     	; 0x394 <servo_control+0x312>

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
     3a4:	27 c0       	rjmp	.+78     	; 0x3f4 <servo_control+0x372>
     3a6:	c7 01       	movw	r24, r14
     3a8:	b6 01       	movw	r22, r12
     3aa:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <servo_control+0x332>
     3b0:	61 e0       	ldi	r22, 0x01	; 1
     3b2:	70 e0       	ldi	r23, 0x00	; 0
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
     3b4:	cb 01       	movw	r24, r22
     3b6:	01 97       	sbiw	r24, 0x01	; 1
     3b8:	f1 f7       	brne	.-4      	; 0x3b6 <servo_control+0x334>
     3ba:	60 e0       	ldi	r22, 0x00	; 0
     3bc:	1e c0       	rjmp	.+60     	; 0x3fa <servo_control+0x378>
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	4f e7       	ldi	r20, 0x7F	; 127
     3c4:	53 e4       	ldi	r21, 0x43	; 67
	{
		_delay_ms(__us / 1000.0);
     3c6:	c5 01       	movw	r24, r10
     3c8:	b4 01       	movw	r22, r8
     3ca:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     3ce:	18 16       	cp	r1, r24
     3d0:	44 f4       	brge	.+16     	; 0x3e2 <servo_control+0x360>
     3d2:	c3 01       	movw	r24, r6
     3d4:	b2 01       	movw	r22, r4
     3d6:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     3da:	cb 01       	movw	r24, r22
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	f1 f7       	brne	.-4      	; 0x3dc <servo_control+0x35a>
     3e0:	0e c0       	rjmp	.+28     	; 0x3fe <servo_control+0x37c>
     3e2:	c5 01       	movw	r24, r10
     3e4:	b4 01       	movw	r22, r8
     3e6:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
	if (__tmp < 1.0)
     3ea:	07 c0       	rjmp	.+14     	; 0x3fa <servo_control+0x378>
     3ec:	61 e0       	ldi	r22, 0x01	; 1
     3ee:	05 c0       	rjmp	.+10     	; 0x3fa <servo_control+0x378>
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	03 c0       	rjmp	.+6      	; 0x3fa <servo_control+0x378>
     3f4:	3c 87       	std	Y+12, r19	; 0x0c
     3f6:	2b 87       	std	Y+11, r18	; 0x0b
     3f8:	60 e0       	ldi	r22, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
     3fa:	6a 95       	dec	r22
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <servo_control+0x378>
     3fe:	2b 85       	ldd	r18, Y+11	; 0x0b
     400:	3c 85       	ldd	r19, Y+12	; 0x0c
     402:	89 81       	ldd	r24, Y+1	; 0x01
     404:	9a 81       	ldd	r25, Y+2	; 0x02
     406:	28 1b       	sub	r18, r24
     408:	39 0b       	sbc	r19, r25
     40a:	3c 87       	std	Y+12, r19	; 0x0c
     40c:	2b 87       	std	Y+11, r18	; 0x0b
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     40e:	b9 01       	movw	r22, r18
     410:	88 27       	eor	r24, r24
     412:	77 fd       	sbrc	r23, 7
     414:	80 95       	com	r24
     416:	98 2f       	mov	r25, r24
     418:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__floatsisf>
     41c:	6b 01       	movw	r12, r22
     41e:	7c 01       	movw	r14, r24
     420:	e9 85       	ldd	r30, Y+9	; 0x09
		while(__ticks)
     422:	fa 85       	ldd	r31, Y+10	; 0x0a
     424:	0e 0f       	add	r16, r30
     426:	1f 1f       	adc	r17, r31
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     428:	9b 01       	movw	r18, r22
     42a:	ac 01       	movw	r20, r24
     42c:	6b 81       	ldd	r22, Y+3	; 0x03
     42e:	7c 81       	ldd	r23, Y+4	; 0x04
     430:	8d 81       	ldd	r24, Y+5	; 0x05
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     432:	9e 81       	ldd	r25, Y+6	; 0x06
     434:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     438:	88 23       	and	r24, r24
     43a:	0c f4       	brge	.+2      	; 0x43e <servo_control+0x3bc>
     43c:	b9 ce       	rjmp	.-654    	; 0x1b0 <servo_control+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     43e:	7d c1       	rjmp	.+762    	; 0x73a <__stack+0x2db>
     440:	c7 01       	movw	r24, r14
     442:	b6 01       	movw	r22, r12
     444:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__fixsfsi>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     448:	2b 01       	movw	r4, r22
     44a:	3c 01       	movw	r6, r24
     44c:	88 27       	eor	r24, r24
     44e:	77 fd       	sbrc	r23, 7
     450:	80 95       	com	r24
     452:	98 2f       	mov	r25, r24
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     454:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__floatsisf>
     458:	6b 01       	movw	r12, r22
     45a:	7c 01       	movw	r14, r24
     45c:	9b 01       	movw	r18, r22
     45e:	ac 01       	movw	r20, r24
     460:	6b 81       	ldd	r22, Y+3	; 0x03
     462:	7c 81       	ldd	r23, Y+4	; 0x04
     464:	8d 81       	ldd	r24, Y+5	; 0x05
     466:	9e 81       	ldd	r25, Y+6	; 0x06
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     468:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     46c:	18 16       	cp	r1, r24
     46e:	0c f0       	brlt	.+2      	; 0x472 <__stack+0x13>
     470:	64 c1       	rjmp	.+712    	; 0x73a <__stack+0x2db>
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	02 c0       	rjmp	.+4      	; 0x47c <__stack+0x1d>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     478:	88 0f       	add	r24, r24
     47a:	99 1f       	adc	r25, r25
     47c:	3a 94       	dec	r3
     47e:	e2 f7       	brpl	.-8      	; 0x478 <__stack+0x19>
     480:	8f 83       	std	Y+7, r24	; 0x07
     482:	f8 2f       	mov	r31, r24
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     484:	f0 95       	com	r31
     486:	f8 87       	std	Y+8, r31	; 0x08
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     488:	29 81       	ldd	r18, Y+1	; 0x01
     48a:	3a 81       	ldd	r19, Y+2	; 0x02
     48c:	31 95       	neg	r19
	clrb(SERVO_PORT,servo3);
     48e:	21 95       	neg	r18
     490:	31 09       	sbc	r19, r1
     492:	3a 87       	std	Y+10, r19	; 0x0a
     494:	29 87       	std	Y+9, r18	; 0x09
     496:	00 e2       	ldi	r16, 0x20	; 32
	_delay_us(goc4-goc3);
     498:	1e e4       	ldi	r17, 0x4E	; 78
     49a:	04 19       	sub	r16, r4
     49c:	15 09       	sbc	r17, r5
     49e:	0f 2e       	mov	r0, r31
     4a0:	f8 ec       	ldi	r31, 0xC8	; 200
     4a2:	2f 2e       	mov	r2, r31
     4a4:	31 2c       	mov	r3, r1
     4a6:	f0 2d       	mov	r31, r0
     4a8:	5c 86       	std	Y+12, r5	; 0x0c
     4aa:	4b 86       	std	Y+11, r4	; 0x0b
     4ac:	8b b3       	in	r24, 0x1b	; 27
     4ae:	3f 81       	ldd	r19, Y+7	; 0x07
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     4b0:	83 2b       	or	r24, r19
     4b2:	8b bb       	out	0x1b, r24	; 27
     4b4:	2b ea       	ldi	r18, 0xAB	; 171
     4b6:	3a ea       	ldi	r19, 0xAA	; 170
     4b8:	4a e2       	ldi	r20, 0x2A	; 42
     4ba:	50 e4       	ldi	r21, 0x40	; 64
     4bc:	c7 01       	movw	r24, r14
     4be:	b6 01       	movw	r22, r12
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
     4c0:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     4c4:	4b 01       	movw	r8, r22
     4c6:	5c 01       	movw	r10, r24
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	40 e8       	ldi	r20, 0x80	; 128
     4ce:	5f e3       	ldi	r21, 0x3F	; 63
     4d0:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
     4d4:	88 23       	and	r24, r24
     4d6:	0c f4       	brge	.+2      	; 0x4da <__stack+0x7b>
     4d8:	70 c0       	rjmp	.+224    	; 0x5ba <__stack+0x15b>
     4da:	a7 01       	movw	r20, r14
     4dc:	96 01       	movw	r18, r12
     4de:	c7 01       	movw	r24, r14
     4e0:	b6 01       	movw	r22, r12
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
     4e2:	0e 94 1e 0c 	call	0x183c	; 0x183c <__addsf3>
     4e6:	2b 01       	movw	r4, r22
     4e8:	3c 01       	movw	r6, r24
     4ea:	20 e0       	ldi	r18, 0x00	; 0
     4ec:	3f ef       	ldi	r19, 0xFF	; 255
     4ee:	4f e7       	ldi	r20, 0x7F	; 127
     4f0:	57 e4       	ldi	r21, 0x47	; 71
     4f2:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
	{
		_delay_ms(__us / 1000.0);
     4f6:	18 16       	cp	r1, r24
     4f8:	0c f0       	brlt	.+2      	; 0x4fc <__stack+0x9d>
     4fa:	48 c0       	rjmp	.+144    	; 0x58c <__stack+0x12d>
     4fc:	20 e0       	ldi	r18, 0x00	; 0
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	4a e7       	ldi	r20, 0x7A	; 122
     502:	54 e4       	ldi	r21, 0x44	; 68
     504:	c7 01       	movw	r24, r14
     506:	b6 01       	movw	r22, r12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     508:	0e 94 86 0c 	call	0x190c	; 0x190c <__divsf3>
     50c:	4b 01       	movw	r8, r22
     50e:	5c 01       	movw	r10, r24
     510:	20 e0       	ldi	r18, 0x00	; 0
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	4a ef       	ldi	r20, 0xFA	; 250
     516:	54 e4       	ldi	r21, 0x44	; 68
	if (__tmp < 1.0)
     518:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     51c:	6b 01       	movw	r12, r22
     51e:	7c 01       	movw	r14, r24
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	40 e8       	ldi	r20, 0x80	; 128
     526:	5f e3       	ldi	r21, 0x3F	; 63
		__ticks = 1;
	else if (__tmp > 65535)
     528:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
     52c:	88 23       	and	r24, r24
     52e:	3c f1       	brlt	.+78     	; 0x57e <__stack+0x11f>
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	3f ef       	ldi	r19, 0xFF	; 255
     534:	4f e7       	ldi	r20, 0x7F	; 127
     536:	57 e4       	ldi	r21, 0x47	; 71
     538:	c7 01       	movw	r24, r14
     53a:	b6 01       	movw	r22, r12
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     53c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     540:	18 16       	cp	r1, r24
     542:	c4 f4       	brge	.+48     	; 0x574 <__stack+0x115>
     544:	20 e0       	ldi	r18, 0x00	; 0
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	40 e2       	ldi	r20, 0x20	; 32
     54a:	51 e4       	ldi	r21, 0x41	; 65
     54c:	c5 01       	movw	r24, r10
     54e:	b4 01       	movw	r22, r8
		while(__ticks)
     550:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     554:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     558:	61 15       	cp	r22, r1
     55a:	71 05       	cpc	r23, r1
     55c:	81 f1       	breq	.+96     	; 0x5be <__stack+0x15f>
     55e:	2b 85       	ldd	r18, Y+11	; 0x0b
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     560:	3c 85       	ldd	r19, Y+12	; 0x0c
     562:	c1 01       	movw	r24, r2
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     564:	01 97       	sbiw	r24, 0x01	; 1
     566:	f1 f7       	brne	.-4      	; 0x564 <__stack+0x105>
     568:	61 50       	subi	r22, 0x01	; 1
     56a:	71 09       	sbc	r23, r1
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     56c:	61 15       	cp	r22, r1
     56e:	71 05       	cpc	r23, r1
     570:	c1 f7       	brne	.-16     	; 0x562 <__stack+0x103>
     572:	27 c0       	rjmp	.+78     	; 0x5c2 <__stack+0x163>
     574:	c7 01       	movw	r24, r14

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     576:	b6 01       	movw	r22, r12
     578:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
     57c:	02 c0       	rjmp	.+4      	; 0x582 <__stack+0x123>
     57e:	61 e0       	ldi	r22, 0x01	; 1
     580:	70 e0       	ldi	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     582:	cb 01       	movw	r24, r22
     584:	01 97       	sbiw	r24, 0x01	; 1
     586:	f1 f7       	brne	.-4      	; 0x584 <__stack+0x125>
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	1e c0       	rjmp	.+60     	; 0x5c8 <__stack+0x169>
     58c:	20 e0       	ldi	r18, 0x00	; 0
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	4f e7       	ldi	r20, 0x7F	; 127
     592:	53 e4       	ldi	r21, 0x43	; 67
     594:	c5 01       	movw	r24, r10
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     596:	b4 01       	movw	r22, r8
     598:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     59c:	18 16       	cp	r1, r24
     59e:	44 f4       	brge	.+16     	; 0x5b0 <__stack+0x151>
     5a0:	c3 01       	movw	r24, r6
     5a2:	b2 01       	movw	r22, r4
     5a4:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     5a8:	cb 01       	movw	r24, r22
     5aa:	01 97       	sbiw	r24, 0x01	; 1
     5ac:	f1 f7       	brne	.-4      	; 0x5aa <__stack+0x14b>
     5ae:	0e c0       	rjmp	.+28     	; 0x5cc <__stack+0x16d>
     5b0:	c5 01       	movw	r24, r10
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     5b2:	b4 01       	movw	r22, r8
     5b4:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     5b8:	07 c0       	rjmp	.+14     	; 0x5c8 <__stack+0x169>
     5ba:	61 e0       	ldi	r22, 0x01	; 1
	clrb(SERVO_PORT,servo4);
     5bc:	05 c0       	rjmp	.+10     	; 0x5c8 <__stack+0x169>
     5be:	60 e0       	ldi	r22, 0x00	; 0
     5c0:	03 c0       	rjmp	.+6      	; 0x5c8 <__stack+0x169>
     5c2:	3c 87       	std	Y+12, r19	; 0x0c
     5c4:	2b 87       	std	Y+11, r18	; 0x0b
	_delay_us(20000-goc4);
     5c6:	60 e0       	ldi	r22, 0x00	; 0
     5c8:	6a 95       	dec	r22
     5ca:	f1 f7       	brne	.-4      	; 0x5c8 <__stack+0x169>
     5cc:	8b b3       	in	r24, 0x1b	; 27
     5ce:	98 85       	ldd	r25, Y+8	; 0x08
     5d0:	89 23       	and	r24, r25
     5d2:	8b bb       	out	0x1b, r24	; 27
     5d4:	b8 01       	movw	r22, r16
     5d6:	88 27       	eor	r24, r24
     5d8:	77 fd       	sbrc	r23, 7
     5da:	80 95       	com	r24
     5dc:	98 2f       	mov	r25, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     5de:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__floatsisf>
     5e2:	6b 01       	movw	r12, r22
     5e4:	7c 01       	movw	r14, r24
     5e6:	2b ea       	ldi	r18, 0xAB	; 171
     5e8:	3a ea       	ldi	r19, 0xAA	; 170
     5ea:	4a e2       	ldi	r20, 0x2A	; 42
     5ec:	50 e4       	ldi	r21, 0x40	; 64
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
     5ee:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     5f2:	4b 01       	movw	r8, r22
     5f4:	5c 01       	movw	r10, r24
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	40 e8       	ldi	r20, 0x80	; 128
     5fc:	5f e3       	ldi	r21, 0x3F	; 63
     5fe:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
     602:	88 23       	and	r24, r24
     604:	0c f4       	brge	.+2      	; 0x608 <__stack+0x1a9>
     606:	70 c0       	rjmp	.+224    	; 0x6e8 <__stack+0x289>
     608:	a7 01       	movw	r20, r14
     60a:	96 01       	movw	r18, r12
     60c:	c7 01       	movw	r24, r14
     60e:	b6 01       	movw	r22, r12
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
     610:	0e 94 1e 0c 	call	0x183c	; 0x183c <__addsf3>
     614:	2b 01       	movw	r4, r22
     616:	3c 01       	movw	r6, r24
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	3f ef       	ldi	r19, 0xFF	; 255
     61c:	4f e7       	ldi	r20, 0x7F	; 127
     61e:	57 e4       	ldi	r21, 0x47	; 71
     620:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
	{
		_delay_ms(__us / 1000.0);
     624:	18 16       	cp	r1, r24
     626:	0c f0       	brlt	.+2      	; 0x62a <__stack+0x1cb>
     628:	48 c0       	rjmp	.+144    	; 0x6ba <__stack+0x25b>
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	4a e7       	ldi	r20, 0x7A	; 122
     630:	54 e4       	ldi	r21, 0x44	; 68
     632:	c7 01       	movw	r24, r14
     634:	b6 01       	movw	r22, r12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     636:	0e 94 86 0c 	call	0x190c	; 0x190c <__divsf3>
     63a:	4b 01       	movw	r8, r22
     63c:	5c 01       	movw	r10, r24
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	4a ef       	ldi	r20, 0xFA	; 250
     644:	54 e4       	ldi	r21, 0x44	; 68
	if (__tmp < 1.0)
     646:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     64a:	6b 01       	movw	r12, r22
     64c:	7c 01       	movw	r14, r24
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	40 e8       	ldi	r20, 0x80	; 128
     654:	5f e3       	ldi	r21, 0x3F	; 63
		__ticks = 1;
	else if (__tmp > 65535)
     656:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
     65a:	88 23       	and	r24, r24
     65c:	3c f1       	brlt	.+78     	; 0x6ac <__stack+0x24d>
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	3f ef       	ldi	r19, 0xFF	; 255
     662:	4f e7       	ldi	r20, 0x7F	; 127
     664:	57 e4       	ldi	r21, 0x47	; 71
     666:	c7 01       	movw	r24, r14
     668:	b6 01       	movw	r22, r12
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     66a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     66e:	18 16       	cp	r1, r24
     670:	c4 f4       	brge	.+48     	; 0x6a2 <__stack+0x243>
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	40 e2       	ldi	r20, 0x20	; 32
     678:	51 e4       	ldi	r21, 0x41	; 65
     67a:	c5 01       	movw	r24, r10
     67c:	b4 01       	movw	r22, r8
		while(__ticks)
     67e:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     682:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     686:	61 15       	cp	r22, r1
     688:	71 05       	cpc	r23, r1
     68a:	81 f1       	breq	.+96     	; 0x6ec <__stack+0x28d>
     68c:	2b 85       	ldd	r18, Y+11	; 0x0b
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     68e:	3c 85       	ldd	r19, Y+12	; 0x0c
     690:	c1 01       	movw	r24, r2
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     692:	01 97       	sbiw	r24, 0x01	; 1
     694:	f1 f7       	brne	.-4      	; 0x692 <__stack+0x233>
     696:	61 50       	subi	r22, 0x01	; 1
     698:	71 09       	sbc	r23, r1
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     69a:	61 15       	cp	r22, r1
     69c:	71 05       	cpc	r23, r1
     69e:	c1 f7       	brne	.-16     	; 0x690 <__stack+0x231>
     6a0:	27 c0       	rjmp	.+78     	; 0x6f0 <__stack+0x291>
     6a2:	c7 01       	movw	r24, r14

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     6a4:	b6 01       	movw	r22, r12
     6a6:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
     6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <__stack+0x251>
     6ac:	61 e0       	ldi	r22, 0x01	; 1
     6ae:	70 e0       	ldi	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     6b0:	cb 01       	movw	r24, r22
     6b2:	01 97       	sbiw	r24, 0x01	; 1
     6b4:	f1 f7       	brne	.-4      	; 0x6b2 <__stack+0x253>
     6b6:	60 e0       	ldi	r22, 0x00	; 0
     6b8:	1e c0       	rjmp	.+60     	; 0x6f6 <__stack+0x297>
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	4f e7       	ldi	r20, 0x7F	; 127
     6c0:	53 e4       	ldi	r21, 0x43	; 67
     6c2:	c5 01       	movw	r24, r10
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     6c4:	b4 01       	movw	r22, r8
     6c6:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     6ca:	18 16       	cp	r1, r24
     6cc:	44 f4       	brge	.+16     	; 0x6de <__stack+0x27f>
     6ce:	c3 01       	movw	r24, r6
     6d0:	b2 01       	movw	r22, r4
     6d2:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     6d6:	cb 01       	movw	r24, r22
     6d8:	01 97       	sbiw	r24, 0x01	; 1
     6da:	f1 f7       	brne	.-4      	; 0x6d8 <__stack+0x279>
     6dc:	0e c0       	rjmp	.+28     	; 0x6fa <__stack+0x29b>
     6de:	c5 01       	movw	r24, r10
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     6e0:	b4 01       	movw	r22, r8
     6e2:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6e6:	07 c0       	rjmp	.+14     	; 0x6f6 <__stack+0x297>
}
     6e8:	61 e0       	ldi	r22, 0x01	; 1
     6ea:	05 c0       	rjmp	.+10     	; 0x6f6 <__stack+0x297>
     6ec:	60 e0       	ldi	r22, 0x00	; 0
     6ee:	03 c0       	rjmp	.+6      	; 0x6f6 <__stack+0x297>
     6f0:	3c 87       	std	Y+12, r19	; 0x0c
     6f2:	2b 87       	std	Y+11, r18	; 0x0b
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	6a 95       	dec	r22
     6f8:	f1 f7       	brne	.-4      	; 0x6f6 <__stack+0x297>
     6fa:	eb 85       	ldd	r30, Y+11	; 0x0b
     6fc:	fc 85       	ldd	r31, Y+12	; 0x0c
     6fe:	29 81       	ldd	r18, Y+1	; 0x01
     700:	3a 81       	ldd	r19, Y+2	; 0x02
     702:	e2 0f       	add	r30, r18
     704:	f3 1f       	adc	r31, r19
     706:	fc 87       	std	Y+12, r31	; 0x0c
     708:	eb 87       	std	Y+11, r30	; 0x0b
     70a:	bf 01       	movw	r22, r30
     70c:	88 27       	eor	r24, r24
     70e:	77 fd       	sbrc	r23, 7
     710:	80 95       	com	r24
     712:	98 2f       	mov	r25, r24
     714:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__floatsisf>
     718:	6b 01       	movw	r12, r22
				x=x-domin;
			}
		}
		else
		{
			for (int x=gocbatdau;x<gocketthuc;)
     71a:	7c 01       	movw	r14, r24
     71c:	89 85       	ldd	r24, Y+9	; 0x09
     71e:	9a 85       	ldd	r25, Y+10	; 0x0a
     720:	08 0f       	add	r16, r24
     722:	19 1f       	adc	r17, r25
     724:	a7 01       	movw	r20, r14
     726:	96 01       	movw	r18, r12
     728:	6b 81       	ldd	r22, Y+3	; 0x03
     72a:	7c 81       	ldd	r23, Y+4	; 0x04
     72c:	8d 81       	ldd	r24, Y+5	; 0x05
     72e:	9e 81       	ldd	r25, Y+6	; 0x06
     730:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     734:	18 16       	cp	r1, r24
     736:	0c f4       	brge	.+2      	; 0x73a <__stack+0x2db>
     738:	b9 ce       	rjmp	.-654    	; 0x4ac <__stack+0x4d>
				_delay_us(20000-x);
				x=x+domin;
			}
		}
	}
}
     73a:	2c 96       	adiw	r28, 0x0c	; 12
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	de bf       	out	0x3e, r29	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	cd bf       	out	0x3d, r28	; 61
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	ff 90       	pop	r15
     750:	ef 90       	pop	r14
     752:	df 90       	pop	r13
     754:	cf 90       	pop	r12
     756:	bf 90       	pop	r11
     758:	af 90       	pop	r10
     75a:	9f 90       	pop	r9
     75c:	8f 90       	pop	r8
     75e:	7f 90       	pop	r7
     760:	6f 90       	pop	r6
     762:	5f 90       	pop	r5
     764:	4f 90       	pop	r4
     766:	3f 90       	pop	r3
     768:	2f 90       	pop	r2
     76a:	08 95       	ret

0000076c <dung4chan>:
void dung4chan()
{
     76c:	2f 92       	push	r2
     76e:	3f 92       	push	r3
     770:	4f 92       	push	r4
     772:	5f 92       	push	r5
     774:	6f 92       	push	r6
     776:	7f 92       	push	r7
     778:	8f 92       	push	r8
     77a:	9f 92       	push	r9
     77c:	af 92       	push	r10
     77e:	bf 92       	push	r11
     780:	cf 92       	push	r12
     782:	df 92       	push	r13
     784:	ef 92       	push	r14
     786:	ff 92       	push	r15
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	0f 2e       	mov	r0, r31
     792:	f4 e1       	ldi	r31, 0x14	; 20
     794:	2f 2e       	mov	r2, r31
     796:	31 2c       	mov	r3, r1
     798:	f0 2d       	mov	r31, r0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     79a:	c8 ec       	ldi	r28, 0xC8	; 200
     79c:	d0 e0       	ldi	r29, 0x00	; 0
		ZZZ=500+11*ZZZ;
		YYY=500+11*YYY;
		PORTA=0x0a;
		_delay_us(ZZZ);
		PORTA=0;
		_delay_us(20000-ZZZ);
     79e:	00 e2       	ldi	r16, 0x20	; 32
     7a0:	1e e4       	ldi	r17, 0x4E	; 78
void dung4chan()
{
	for (int x=0;x<20;x++)//4 servo cap 1
	{
		ZZZ=45;YYY=180-ZZZ;
		ZZZ=500+11*ZZZ;
     7a2:	83 ee       	ldi	r24, 0xE3	; 227
     7a4:	93 e0       	ldi	r25, 0x03	; 3
     7a6:	90 93 63 00 	sts	0x0063, r25
     7aa:	80 93 62 00 	sts	0x0062, r24
		YYY=500+11*YYY;
     7ae:	81 ec       	ldi	r24, 0xC1	; 193
     7b0:	97 e0       	ldi	r25, 0x07	; 7
     7b2:	90 93 61 00 	sts	0x0061, r25
     7b6:	80 93 60 00 	sts	0x0060, r24
		PORTA=0x0a;
     7ba:	9a e0       	ldi	r25, 0x0A	; 10
     7bc:	9b bb       	out	0x1b, r25	; 27
		_delay_us(ZZZ);
     7be:	60 91 62 00 	lds	r22, 0x0062
     7c2:	70 91 63 00 	lds	r23, 0x0063
     7c6:	88 27       	eor	r24, r24
     7c8:	77 fd       	sbrc	r23, 7
     7ca:	80 95       	com	r24
     7cc:	98 2f       	mov	r25, r24
     7ce:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__floatsisf>
     7d2:	6b 01       	movw	r12, r22
     7d4:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     7d6:	2b ea       	ldi	r18, 0xAB	; 171
     7d8:	3a ea       	ldi	r19, 0xAA	; 170
     7da:	4a e2       	ldi	r20, 0x2A	; 42
     7dc:	50 e4       	ldi	r21, 0x40	; 64
     7de:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     7e2:	4b 01       	movw	r8, r22
     7e4:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e8       	ldi	r20, 0x80	; 128
     7ec:	5f e3       	ldi	r21, 0x3F	; 63
     7ee:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
     7f2:	88 23       	and	r24, r24
     7f4:	0c f4       	brge	.+2      	; 0x7f8 <dung4chan+0x8c>
     7f6:	6e c0       	rjmp	.+220    	; 0x8d4 <dung4chan+0x168>

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
     7f8:	a7 01       	movw	r20, r14
     7fa:	96 01       	movw	r18, r12
     7fc:	c7 01       	movw	r24, r14
     7fe:	b6 01       	movw	r22, r12
     800:	0e 94 1e 0c 	call	0x183c	; 0x183c <__addsf3>
     804:	2b 01       	movw	r4, r22
     806:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	3f ef       	ldi	r19, 0xFF	; 255
     80c:	4f e7       	ldi	r20, 0x7F	; 127
     80e:	57 e4       	ldi	r21, 0x47	; 71
     810:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     814:	18 16       	cp	r1, r24
     816:	0c f0       	brlt	.+2      	; 0x81a <dung4chan+0xae>
     818:	46 c0       	rjmp	.+140    	; 0x8a6 <dung4chan+0x13a>
	{
		_delay_ms(__us / 1000.0);
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	4a e7       	ldi	r20, 0x7A	; 122
     820:	54 e4       	ldi	r21, 0x44	; 68
     822:	c7 01       	movw	r24, r14
     824:	b6 01       	movw	r22, r12
     826:	0e 94 86 0c 	call	0x190c	; 0x190c <__divsf3>
     82a:	4b 01       	movw	r8, r22
     82c:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	4a ef       	ldi	r20, 0xFA	; 250
     834:	54 e4       	ldi	r21, 0x44	; 68
     836:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     83a:	6b 01       	movw	r12, r22
     83c:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	40 e8       	ldi	r20, 0x80	; 128
     844:	5f e3       	ldi	r21, 0x3F	; 63
     846:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
     84a:	88 23       	and	r24, r24
     84c:	2c f1       	brlt	.+74     	; 0x898 <dung4chan+0x12c>
		__ticks = 1;
	else if (__tmp > 65535)
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	3f ef       	ldi	r19, 0xFF	; 255
     852:	4f e7       	ldi	r20, 0x7F	; 127
     854:	57 e4       	ldi	r21, 0x47	; 71
     856:	c7 01       	movw	r24, r14
     858:	b6 01       	movw	r22, r12
     85a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     85e:	18 16       	cp	r1, r24
     860:	b4 f4       	brge	.+44     	; 0x88e <dung4chan+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     862:	20 e0       	ldi	r18, 0x00	; 0
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	40 e2       	ldi	r20, 0x20	; 32
     868:	51 e4       	ldi	r21, 0x41	; 65
     86a:	c5 01       	movw	r24, r10
     86c:	b4 01       	movw	r22, r8
     86e:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     872:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
		while(__ticks)
     876:	61 15       	cp	r22, r1
     878:	71 05       	cpc	r23, r1
     87a:	71 f1       	breq	.+92     	; 0x8d8 <dung4chan+0x16c>
     87c:	ce 01       	movw	r24, r28
     87e:	01 97       	sbiw	r24, 0x01	; 1
     880:	f1 f7       	brne	.-4      	; 0x87e <dung4chan+0x112>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     882:	61 50       	subi	r22, 0x01	; 1
     884:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     886:	61 15       	cp	r22, r1
     888:	71 05       	cpc	r23, r1
     88a:	c1 f7       	brne	.-16     	; 0x87c <dung4chan+0x110>
     88c:	27 c0       	rjmp	.+78     	; 0x8dc <dung4chan+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     88e:	c7 01       	movw	r24, r14
     890:	b6 01       	movw	r22, r12
     892:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
     896:	02 c0       	rjmp	.+4      	; 0x89c <dung4chan+0x130>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     898:	61 e0       	ldi	r22, 0x01	; 1
     89a:	70 e0       	ldi	r23, 0x00	; 0
     89c:	cb 01       	movw	r24, r22
     89e:	01 97       	sbiw	r24, 0x01	; 1
     8a0:	f1 f7       	brne	.-4      	; 0x89e <dung4chan+0x132>
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	1c c0       	rjmp	.+56     	; 0x8de <dung4chan+0x172>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	4f e7       	ldi	r20, 0x7F	; 127
     8ac:	53 e4       	ldi	r21, 0x43	; 67
     8ae:	c5 01       	movw	r24, r10
     8b0:	b4 01       	movw	r22, r8
     8b2:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     8b6:	18 16       	cp	r1, r24
     8b8:	44 f4       	brge	.+16     	; 0x8ca <dung4chan+0x15e>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     8ba:	c3 01       	movw	r24, r6
     8bc:	b2 01       	movw	r22, r4
     8be:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
     8c2:	cb 01       	movw	r24, r22
     8c4:	01 97       	sbiw	r24, 0x01	; 1
     8c6:	f1 f7       	brne	.-4      	; 0x8c4 <dung4chan+0x158>
     8c8:	0c c0       	rjmp	.+24     	; 0x8e2 <dung4chan+0x176>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     8ca:	c5 01       	movw	r24, r10
     8cc:	b4 01       	movw	r22, r8
     8ce:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
     8d2:	05 c0       	rjmp	.+10     	; 0x8de <dung4chan+0x172>
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     8d4:	61 e0       	ldi	r22, 0x01	; 1
     8d6:	03 c0       	rjmp	.+6      	; 0x8de <dung4chan+0x172>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	01 c0       	rjmp	.+2      	; 0x8de <dung4chan+0x172>
     8dc:	60 e0       	ldi	r22, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     8de:	6a 95       	dec	r22
     8e0:	f1 f7       	brne	.-4      	; 0x8de <dung4chan+0x172>
		PORTA=0;
     8e2:	1b ba       	out	0x1b, r1	; 27
		_delay_us(20000-ZZZ);
     8e4:	80 91 62 00 	lds	r24, 0x0062
     8e8:	90 91 63 00 	lds	r25, 0x0063
     8ec:	b8 01       	movw	r22, r16
     8ee:	68 1b       	sub	r22, r24
     8f0:	79 0b       	sbc	r23, r25
     8f2:	88 27       	eor	r24, r24
     8f4:	77 fd       	sbrc	r23, 7
     8f6:	80 95       	com	r24
     8f8:	98 2f       	mov	r25, r24
     8fa:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__floatsisf>
     8fe:	6b 01       	movw	r12, r22
     900:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     902:	2b ea       	ldi	r18, 0xAB	; 171
     904:	3a ea       	ldi	r19, 0xAA	; 170
     906:	4a e2       	ldi	r20, 0x2A	; 42
     908:	50 e4       	ldi	r21, 0x40	; 64
     90a:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     90e:	4b 01       	movw	r8, r22
     910:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	40 e8       	ldi	r20, 0x80	; 128
     918:	5f e3       	ldi	r21, 0x3F	; 63
     91a:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
     91e:	88 23       	and	r24, r24
     920:	0c f4       	brge	.+2      	; 0x924 <dung4chan+0x1b8>
     922:	6e c0       	rjmp	.+220    	; 0xa00 <dung4chan+0x294>

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
     924:	a7 01       	movw	r20, r14
     926:	96 01       	movw	r18, r12
     928:	c7 01       	movw	r24, r14
     92a:	b6 01       	movw	r22, r12
     92c:	0e 94 1e 0c 	call	0x183c	; 0x183c <__addsf3>
     930:	2b 01       	movw	r4, r22
     932:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
     934:	20 e0       	ldi	r18, 0x00	; 0
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f e7       	ldi	r20, 0x7F	; 127
     93a:	57 e4       	ldi	r21, 0x47	; 71
     93c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     940:	18 16       	cp	r1, r24
     942:	0c f0       	brlt	.+2      	; 0x946 <dung4chan+0x1da>
     944:	46 c0       	rjmp	.+140    	; 0x9d2 <dung4chan+0x266>
	{
		_delay_ms(__us / 1000.0);
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	4a e7       	ldi	r20, 0x7A	; 122
     94c:	54 e4       	ldi	r21, 0x44	; 68
     94e:	c7 01       	movw	r24, r14
     950:	b6 01       	movw	r22, r12
     952:	0e 94 86 0c 	call	0x190c	; 0x190c <__divsf3>
     956:	4b 01       	movw	r8, r22
     958:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	4a ef       	ldi	r20, 0xFA	; 250
     960:	54 e4       	ldi	r21, 0x44	; 68
     962:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     966:	6b 01       	movw	r12, r22
     968:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	40 e8       	ldi	r20, 0x80	; 128
     970:	5f e3       	ldi	r21, 0x3F	; 63
     972:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
     976:	88 23       	and	r24, r24
     978:	2c f1       	brlt	.+74     	; 0x9c4 <dung4chan+0x258>
		__ticks = 1;
	else if (__tmp > 65535)
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	3f ef       	ldi	r19, 0xFF	; 255
     97e:	4f e7       	ldi	r20, 0x7F	; 127
     980:	57 e4       	ldi	r21, 0x47	; 71
     982:	c7 01       	movw	r24, r14
     984:	b6 01       	movw	r22, r12
     986:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     98a:	18 16       	cp	r1, r24
     98c:	b4 f4       	brge	.+44     	; 0x9ba <dung4chan+0x24e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     98e:	20 e0       	ldi	r18, 0x00	; 0
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	40 e2       	ldi	r20, 0x20	; 32
     994:	51 e4       	ldi	r21, 0x41	; 65
     996:	c5 01       	movw	r24, r10
     998:	b4 01       	movw	r22, r8
     99a:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     99e:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
		while(__ticks)
     9a2:	61 15       	cp	r22, r1
     9a4:	71 05       	cpc	r23, r1
     9a6:	71 f1       	breq	.+92     	; 0xa04 <dung4chan+0x298>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9a8:	ce 01       	movw	r24, r28
     9aa:	01 97       	sbiw	r24, 0x01	; 1
     9ac:	f1 f7       	brne	.-4      	; 0x9aa <dung4chan+0x23e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9ae:	61 50       	subi	r22, 0x01	; 1
     9b0:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9b2:	61 15       	cp	r22, r1
     9b4:	71 05       	cpc	r23, r1
     9b6:	c1 f7       	brne	.-16     	; 0x9a8 <dung4chan+0x23c>
     9b8:	27 c0       	rjmp	.+78     	; 0xa08 <dung4chan+0x29c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9ba:	c7 01       	movw	r24, r14
     9bc:	b6 01       	movw	r22, r12
     9be:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
     9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <dung4chan+0x25c>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     9c4:	61 e0       	ldi	r22, 0x01	; 1
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	cb 01       	movw	r24, r22
     9ca:	01 97       	sbiw	r24, 0x01	; 1
     9cc:	f1 f7       	brne	.-4      	; 0x9ca <dung4chan+0x25e>
     9ce:	60 e0       	ldi	r22, 0x00	; 0
     9d0:	1c c0       	rjmp	.+56     	; 0xa0a <dung4chan+0x29e>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	4f e7       	ldi	r20, 0x7F	; 127
     9d8:	53 e4       	ldi	r21, 0x43	; 67
     9da:	c5 01       	movw	r24, r10
     9dc:	b4 01       	movw	r22, r8
     9de:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     9e2:	18 16       	cp	r1, r24
     9e4:	44 f4       	brge	.+16     	; 0x9f6 <dung4chan+0x28a>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     9e6:	c3 01       	movw	r24, r6
     9e8:	b2 01       	movw	r22, r4
     9ea:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
     9ee:	cb 01       	movw	r24, r22
     9f0:	01 97       	sbiw	r24, 0x01	; 1
     9f2:	f1 f7       	brne	.-4      	; 0x9f0 <dung4chan+0x284>
     9f4:	0c c0       	rjmp	.+24     	; 0xa0e <dung4chan+0x2a2>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     9f6:	c5 01       	movw	r24, r10
     9f8:	b4 01       	movw	r22, r8
     9fa:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
     9fe:	05 c0       	rjmp	.+10     	; 0xa0a <dung4chan+0x29e>
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     a00:	61 e0       	ldi	r22, 0x01	; 1
     a02:	03 c0       	rjmp	.+6      	; 0xa0a <dung4chan+0x29e>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a04:	60 e0       	ldi	r22, 0x00	; 0
     a06:	01 c0       	rjmp	.+2      	; 0xa0a <dung4chan+0x29e>
     a08:	60 e0       	ldi	r22, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     a0a:	6a 95       	dec	r22
     a0c:	f1 f7       	brne	.-4      	; 0xa0a <dung4chan+0x29e>
		PORTA=0xa0;
     a0e:	80 ea       	ldi	r24, 0xA0	; 160
     a10:	8b bb       	out	0x1b, r24	; 27
		_delay_us(YYY);
     a12:	60 91 60 00 	lds	r22, 0x0060
     a16:	70 91 61 00 	lds	r23, 0x0061
     a1a:	88 27       	eor	r24, r24
     a1c:	77 fd       	sbrc	r23, 7
     a1e:	80 95       	com	r24
     a20:	98 2f       	mov	r25, r24
     a22:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__floatsisf>
     a26:	6b 01       	movw	r12, r22
     a28:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     a2a:	2b ea       	ldi	r18, 0xAB	; 171
     a2c:	3a ea       	ldi	r19, 0xAA	; 170
     a2e:	4a e2       	ldi	r20, 0x2A	; 42
     a30:	50 e4       	ldi	r21, 0x40	; 64
     a32:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     a36:	4b 01       	movw	r8, r22
     a38:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	40 e8       	ldi	r20, 0x80	; 128
     a40:	5f e3       	ldi	r21, 0x3F	; 63
     a42:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
     a46:	88 23       	and	r24, r24
     a48:	0c f4       	brge	.+2      	; 0xa4c <dung4chan+0x2e0>
     a4a:	6e c0       	rjmp	.+220    	; 0xb28 <dung4chan+0x3bc>

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
     a4c:	a7 01       	movw	r20, r14
     a4e:	96 01       	movw	r18, r12
     a50:	c7 01       	movw	r24, r14
     a52:	b6 01       	movw	r22, r12
     a54:	0e 94 1e 0c 	call	0x183c	; 0x183c <__addsf3>
     a58:	2b 01       	movw	r4, r22
     a5a:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	3f ef       	ldi	r19, 0xFF	; 255
     a60:	4f e7       	ldi	r20, 0x7F	; 127
     a62:	57 e4       	ldi	r21, 0x47	; 71
     a64:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     a68:	18 16       	cp	r1, r24
     a6a:	0c f0       	brlt	.+2      	; 0xa6e <dung4chan+0x302>
     a6c:	46 c0       	rjmp	.+140    	; 0xafa <dung4chan+0x38e>
	{
		_delay_ms(__us / 1000.0);
     a6e:	20 e0       	ldi	r18, 0x00	; 0
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	4a e7       	ldi	r20, 0x7A	; 122
     a74:	54 e4       	ldi	r21, 0x44	; 68
     a76:	c7 01       	movw	r24, r14
     a78:	b6 01       	movw	r22, r12
     a7a:	0e 94 86 0c 	call	0x190c	; 0x190c <__divsf3>
     a7e:	4b 01       	movw	r8, r22
     a80:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a82:	20 e0       	ldi	r18, 0x00	; 0
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	4a ef       	ldi	r20, 0xFA	; 250
     a88:	54 e4       	ldi	r21, 0x44	; 68
     a8a:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     a8e:	6b 01       	movw	r12, r22
     a90:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     a92:	20 e0       	ldi	r18, 0x00	; 0
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	40 e8       	ldi	r20, 0x80	; 128
     a98:	5f e3       	ldi	r21, 0x3F	; 63
     a9a:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
     a9e:	88 23       	and	r24, r24
     aa0:	2c f1       	brlt	.+74     	; 0xaec <dung4chan+0x380>
		__ticks = 1;
	else if (__tmp > 65535)
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	3f ef       	ldi	r19, 0xFF	; 255
     aa6:	4f e7       	ldi	r20, 0x7F	; 127
     aa8:	57 e4       	ldi	r21, 0x47	; 71
     aaa:	c7 01       	movw	r24, r14
     aac:	b6 01       	movw	r22, r12
     aae:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     ab2:	18 16       	cp	r1, r24
     ab4:	b4 f4       	brge	.+44     	; 0xae2 <dung4chan+0x376>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ab6:	20 e0       	ldi	r18, 0x00	; 0
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	40 e2       	ldi	r20, 0x20	; 32
     abc:	51 e4       	ldi	r21, 0x41	; 65
     abe:	c5 01       	movw	r24, r10
     ac0:	b4 01       	movw	r22, r8
     ac2:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     ac6:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
		while(__ticks)
     aca:	61 15       	cp	r22, r1
     acc:	71 05       	cpc	r23, r1
     ace:	71 f1       	breq	.+92     	; 0xb2c <dung4chan+0x3c0>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ad0:	ce 01       	movw	r24, r28
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	f1 f7       	brne	.-4      	; 0xad2 <dung4chan+0x366>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ad6:	61 50       	subi	r22, 0x01	; 1
     ad8:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ada:	61 15       	cp	r22, r1
     adc:	71 05       	cpc	r23, r1
     ade:	c1 f7       	brne	.-16     	; 0xad0 <dung4chan+0x364>
     ae0:	27 c0       	rjmp	.+78     	; 0xb30 <dung4chan+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ae2:	c7 01       	movw	r24, r14
     ae4:	b6 01       	movw	r22, r12
     ae6:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <dung4chan+0x384>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     aec:	61 e0       	ldi	r22, 0x01	; 1
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	cb 01       	movw	r24, r22
     af2:	01 97       	sbiw	r24, 0x01	; 1
     af4:	f1 f7       	brne	.-4      	; 0xaf2 <dung4chan+0x386>
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	1c c0       	rjmp	.+56     	; 0xb32 <dung4chan+0x3c6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	4f e7       	ldi	r20, 0x7F	; 127
     b00:	53 e4       	ldi	r21, 0x43	; 67
     b02:	c5 01       	movw	r24, r10
     b04:	b4 01       	movw	r22, r8
     b06:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     b0a:	18 16       	cp	r1, r24
     b0c:	44 f4       	brge	.+16     	; 0xb1e <dung4chan+0x3b2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     b0e:	c3 01       	movw	r24, r6
     b10:	b2 01       	movw	r22, r4
     b12:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
     b16:	cb 01       	movw	r24, r22
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	f1 f7       	brne	.-4      	; 0xb18 <dung4chan+0x3ac>
     b1c:	0c c0       	rjmp	.+24     	; 0xb36 <dung4chan+0x3ca>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     b1e:	c5 01       	movw	r24, r10
     b20:	b4 01       	movw	r22, r8
     b22:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
     b26:	05 c0       	rjmp	.+10     	; 0xb32 <dung4chan+0x3c6>
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     b28:	61 e0       	ldi	r22, 0x01	; 1
     b2a:	03 c0       	rjmp	.+6      	; 0xb32 <dung4chan+0x3c6>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	01 c0       	rjmp	.+2      	; 0xb32 <dung4chan+0x3c6>
     b30:	60 e0       	ldi	r22, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b32:	6a 95       	dec	r22
     b34:	f1 f7       	brne	.-4      	; 0xb32 <dung4chan+0x3c6>
		PORTA=0;
     b36:	1b ba       	out	0x1b, r1	; 27
		_delay_us(20000-YYY);
     b38:	80 91 60 00 	lds	r24, 0x0060
     b3c:	90 91 61 00 	lds	r25, 0x0061
     b40:	b8 01       	movw	r22, r16
     b42:	68 1b       	sub	r22, r24
     b44:	79 0b       	sbc	r23, r25
     b46:	88 27       	eor	r24, r24
     b48:	77 fd       	sbrc	r23, 7
     b4a:	80 95       	com	r24
     b4c:	98 2f       	mov	r25, r24
     b4e:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__floatsisf>
     b52:	6b 01       	movw	r12, r22
     b54:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     b56:	2b ea       	ldi	r18, 0xAB	; 171
     b58:	3a ea       	ldi	r19, 0xAA	; 170
     b5a:	4a e2       	ldi	r20, 0x2A	; 42
     b5c:	50 e4       	ldi	r21, 0x40	; 64
     b5e:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     b62:	4b 01       	movw	r8, r22
     b64:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
     b66:	20 e0       	ldi	r18, 0x00	; 0
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	40 e8       	ldi	r20, 0x80	; 128
     b6c:	5f e3       	ldi	r21, 0x3F	; 63
     b6e:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
     b72:	88 23       	and	r24, r24
     b74:	0c f4       	brge	.+2      	; 0xb78 <dung4chan+0x40c>
     b76:	6e c0       	rjmp	.+220    	; 0xc54 <dung4chan+0x4e8>

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
     b78:	a7 01       	movw	r20, r14
     b7a:	96 01       	movw	r18, r12
     b7c:	c7 01       	movw	r24, r14
     b7e:	b6 01       	movw	r22, r12
     b80:	0e 94 1e 0c 	call	0x183c	; 0x183c <__addsf3>
     b84:	2b 01       	movw	r4, r22
     b86:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	3f ef       	ldi	r19, 0xFF	; 255
     b8c:	4f e7       	ldi	r20, 0x7F	; 127
     b8e:	57 e4       	ldi	r21, 0x47	; 71
     b90:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     b94:	18 16       	cp	r1, r24
     b96:	0c f0       	brlt	.+2      	; 0xb9a <dung4chan+0x42e>
     b98:	46 c0       	rjmp	.+140    	; 0xc26 <dung4chan+0x4ba>
	{
		_delay_ms(__us / 1000.0);
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a e7       	ldi	r20, 0x7A	; 122
     ba0:	54 e4       	ldi	r21, 0x44	; 68
     ba2:	c7 01       	movw	r24, r14
     ba4:	b6 01       	movw	r22, r12
     ba6:	0e 94 86 0c 	call	0x190c	; 0x190c <__divsf3>
     baa:	4b 01       	movw	r8, r22
     bac:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	4a ef       	ldi	r20, 0xFA	; 250
     bb4:	54 e4       	ldi	r21, 0x44	; 68
     bb6:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     bba:	6b 01       	movw	r12, r22
     bbc:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	40 e8       	ldi	r20, 0x80	; 128
     bc4:	5f e3       	ldi	r21, 0x3F	; 63
     bc6:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
     bca:	88 23       	and	r24, r24
     bcc:	2c f1       	brlt	.+74     	; 0xc18 <dung4chan+0x4ac>
		__ticks = 1;
	else if (__tmp > 65535)
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	3f ef       	ldi	r19, 0xFF	; 255
     bd2:	4f e7       	ldi	r20, 0x7F	; 127
     bd4:	57 e4       	ldi	r21, 0x47	; 71
     bd6:	c7 01       	movw	r24, r14
     bd8:	b6 01       	movw	r22, r12
     bda:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     bde:	18 16       	cp	r1, r24
     be0:	b4 f4       	brge	.+44     	; 0xc0e <dung4chan+0x4a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	40 e2       	ldi	r20, 0x20	; 32
     be8:	51 e4       	ldi	r21, 0x41	; 65
     bea:	c5 01       	movw	r24, r10
     bec:	b4 01       	movw	r22, r8
     bee:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     bf2:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
		while(__ticks)
     bf6:	61 15       	cp	r22, r1
     bf8:	71 05       	cpc	r23, r1
     bfa:	71 f1       	breq	.+92     	; 0xc58 <dung4chan+0x4ec>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bfc:	ce 01       	movw	r24, r28
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	f1 f7       	brne	.-4      	; 0xbfe <dung4chan+0x492>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c02:	61 50       	subi	r22, 0x01	; 1
     c04:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c06:	61 15       	cp	r22, r1
     c08:	71 05       	cpc	r23, r1
     c0a:	c1 f7       	brne	.-16     	; 0xbfc <dung4chan+0x490>
     c0c:	27 c0       	rjmp	.+78     	; 0xc5c <dung4chan+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c0e:	c7 01       	movw	r24, r14
     c10:	b6 01       	movw	r22, r12
     c12:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <dung4chan+0x4b0>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     c18:	61 e0       	ldi	r22, 0x01	; 1
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	cb 01       	movw	r24, r22
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	f1 f7       	brne	.-4      	; 0xc1e <dung4chan+0x4b2>
     c22:	60 e0       	ldi	r22, 0x00	; 0
     c24:	1c c0       	rjmp	.+56     	; 0xc5e <dung4chan+0x4f2>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	4f e7       	ldi	r20, 0x7F	; 127
     c2c:	53 e4       	ldi	r21, 0x43	; 67
     c2e:	c5 01       	movw	r24, r10
     c30:	b4 01       	movw	r22, r8
     c32:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     c36:	18 16       	cp	r1, r24
     c38:	44 f4       	brge	.+16     	; 0xc4a <dung4chan+0x4de>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     c3a:	c3 01       	movw	r24, r6
     c3c:	b2 01       	movw	r22, r4
     c3e:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
     c42:	cb 01       	movw	r24, r22
     c44:	01 97       	sbiw	r24, 0x01	; 1
     c46:	f1 f7       	brne	.-4      	; 0xc44 <dung4chan+0x4d8>
     c48:	0c c0       	rjmp	.+24     	; 0xc62 <dung4chan+0x4f6>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     c4a:	c5 01       	movw	r24, r10
     c4c:	b4 01       	movw	r22, r8
     c4e:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <dung4chan+0x4f2>
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     c54:	61 e0       	ldi	r22, 0x01	; 1
     c56:	03 c0       	rjmp	.+6      	; 0xc5e <dung4chan+0x4f2>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	01 c0       	rjmp	.+2      	; 0xc5e <dung4chan+0x4f2>
     c5c:	60 e0       	ldi	r22, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     c5e:	6a 95       	dec	r22
     c60:	f1 f7       	brne	.-4      	; 0xc5e <dung4chan+0x4f2>
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	29 1a       	sub	r2, r25
     c66:	31 08       	sbc	r3, r1
		}
	}
}
void dung4chan()
{
	for (int x=0;x<20;x++)//4 servo cap 1
     c68:	21 14       	cp	r2, r1
     c6a:	31 04       	cpc	r3, r1
     c6c:	09 f0       	breq	.+2      	; 0xc70 <dung4chan+0x504>
     c6e:	99 cd       	rjmp	.-1230   	; 0x7a2 <dung4chan+0x36>
     c70:	0f 2e       	mov	r0, r31
     c72:	f4 e6       	ldi	r31, 0x64	; 100
     c74:	2f 2e       	mov	r2, r31
     c76:	31 2c       	mov	r3, r1
     c78:	f0 2d       	mov	r31, r0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c7a:	c8 ec       	ldi	r28, 0xC8	; 200
     c7c:	d0 e0       	ldi	r29, 0x00	; 0
		ZZZ=500+11*ZZZ;
		YYY=500+11*YYY;
		PORTA=0x05;
		_delay_us(ZZZ);
		PORTA=0;
		_delay_us(20000-ZZZ);
     c7e:	00 e2       	ldi	r16, 0x20	; 32
     c80:	1e e4       	ldi	r17, 0x4E	; 78
		_delay_us(20000-YYY);
	}
	for (int x=0;x<100;x++)//4 servo cap 2
	{
		ZZZ=35;YYY=180-ZZZ;
		ZZZ=500+11*ZZZ;
     c82:	85 e7       	ldi	r24, 0x75	; 117
     c84:	93 e0       	ldi	r25, 0x03	; 3
     c86:	90 93 63 00 	sts	0x0063, r25
     c8a:	80 93 62 00 	sts	0x0062, r24
		YYY=500+11*YYY;
     c8e:	8f e2       	ldi	r24, 0x2F	; 47
     c90:	98 e0       	ldi	r25, 0x08	; 8
     c92:	90 93 61 00 	sts	0x0061, r25
     c96:	80 93 60 00 	sts	0x0060, r24
		PORTA=0x05;
     c9a:	95 e0       	ldi	r25, 0x05	; 5
     c9c:	9b bb       	out	0x1b, r25	; 27
		_delay_us(ZZZ);
     c9e:	60 91 62 00 	lds	r22, 0x0062
     ca2:	70 91 63 00 	lds	r23, 0x0063
     ca6:	88 27       	eor	r24, r24
     ca8:	77 fd       	sbrc	r23, 7
     caa:	80 95       	com	r24
     cac:	98 2f       	mov	r25, r24
     cae:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__floatsisf>
     cb2:	6b 01       	movw	r12, r22
     cb4:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     cb6:	2b ea       	ldi	r18, 0xAB	; 171
     cb8:	3a ea       	ldi	r19, 0xAA	; 170
     cba:	4a e2       	ldi	r20, 0x2A	; 42
     cbc:	50 e4       	ldi	r21, 0x40	; 64
     cbe:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     cc2:	4b 01       	movw	r8, r22
     cc4:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	40 e8       	ldi	r20, 0x80	; 128
     ccc:	5f e3       	ldi	r21, 0x3F	; 63
     cce:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
     cd2:	88 23       	and	r24, r24
     cd4:	0c f4       	brge	.+2      	; 0xcd8 <dung4chan+0x56c>
     cd6:	6e c0       	rjmp	.+220    	; 0xdb4 <dung4chan+0x648>

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
     cd8:	a7 01       	movw	r20, r14
     cda:	96 01       	movw	r18, r12
     cdc:	c7 01       	movw	r24, r14
     cde:	b6 01       	movw	r22, r12
     ce0:	0e 94 1e 0c 	call	0x183c	; 0x183c <__addsf3>
     ce4:	2b 01       	movw	r4, r22
     ce6:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	3f ef       	ldi	r19, 0xFF	; 255
     cec:	4f e7       	ldi	r20, 0x7F	; 127
     cee:	57 e4       	ldi	r21, 0x47	; 71
     cf0:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     cf4:	18 16       	cp	r1, r24
     cf6:	0c f0       	brlt	.+2      	; 0xcfa <dung4chan+0x58e>
     cf8:	46 c0       	rjmp	.+140    	; 0xd86 <dung4chan+0x61a>
	{
		_delay_ms(__us / 1000.0);
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	4a e7       	ldi	r20, 0x7A	; 122
     d00:	54 e4       	ldi	r21, 0x44	; 68
     d02:	c7 01       	movw	r24, r14
     d04:	b6 01       	movw	r22, r12
     d06:	0e 94 86 0c 	call	0x190c	; 0x190c <__divsf3>
     d0a:	4b 01       	movw	r8, r22
     d0c:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	4a ef       	ldi	r20, 0xFA	; 250
     d14:	54 e4       	ldi	r21, 0x44	; 68
     d16:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     d1a:	6b 01       	movw	r12, r22
     d1c:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	40 e8       	ldi	r20, 0x80	; 128
     d24:	5f e3       	ldi	r21, 0x3F	; 63
     d26:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
     d2a:	88 23       	and	r24, r24
     d2c:	2c f1       	brlt	.+74     	; 0xd78 <dung4chan+0x60c>
		__ticks = 1;
	else if (__tmp > 65535)
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	3f ef       	ldi	r19, 0xFF	; 255
     d32:	4f e7       	ldi	r20, 0x7F	; 127
     d34:	57 e4       	ldi	r21, 0x47	; 71
     d36:	c7 01       	movw	r24, r14
     d38:	b6 01       	movw	r22, r12
     d3a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     d3e:	18 16       	cp	r1, r24
     d40:	b4 f4       	brge	.+44     	; 0xd6e <dung4chan+0x602>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	40 e2       	ldi	r20, 0x20	; 32
     d48:	51 e4       	ldi	r21, 0x41	; 65
     d4a:	c5 01       	movw	r24, r10
     d4c:	b4 01       	movw	r22, r8
     d4e:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     d52:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
		while(__ticks)
     d56:	61 15       	cp	r22, r1
     d58:	71 05       	cpc	r23, r1
     d5a:	71 f1       	breq	.+92     	; 0xdb8 <dung4chan+0x64c>
     d5c:	ce 01       	movw	r24, r28
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <dung4chan+0x5f2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d62:	61 50       	subi	r22, 0x01	; 1
     d64:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d66:	61 15       	cp	r22, r1
     d68:	71 05       	cpc	r23, r1
     d6a:	c1 f7       	brne	.-16     	; 0xd5c <dung4chan+0x5f0>
     d6c:	27 c0       	rjmp	.+78     	; 0xdbc <dung4chan+0x650>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d6e:	c7 01       	movw	r24, r14
     d70:	b6 01       	movw	r22, r12
     d72:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <dung4chan+0x610>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     d78:	61 e0       	ldi	r22, 0x01	; 1
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	cb 01       	movw	r24, r22
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	f1 f7       	brne	.-4      	; 0xd7e <dung4chan+0x612>
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	1c c0       	rjmp	.+56     	; 0xdbe <dung4chan+0x652>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	4f e7       	ldi	r20, 0x7F	; 127
     d8c:	53 e4       	ldi	r21, 0x43	; 67
     d8e:	c5 01       	movw	r24, r10
     d90:	b4 01       	movw	r22, r8
     d92:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     d96:	18 16       	cp	r1, r24
     d98:	44 f4       	brge	.+16     	; 0xdaa <dung4chan+0x63e>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     d9a:	c3 01       	movw	r24, r6
     d9c:	b2 01       	movw	r22, r4
     d9e:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
     da2:	cb 01       	movw	r24, r22
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	f1 f7       	brne	.-4      	; 0xda4 <dung4chan+0x638>
     da8:	0c c0       	rjmp	.+24     	; 0xdc2 <dung4chan+0x656>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     daa:	c5 01       	movw	r24, r10
     dac:	b4 01       	movw	r22, r8
     dae:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
     db2:	05 c0       	rjmp	.+10     	; 0xdbe <dung4chan+0x652>
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     db4:	61 e0       	ldi	r22, 0x01	; 1
     db6:	03 c0       	rjmp	.+6      	; 0xdbe <dung4chan+0x652>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	01 c0       	rjmp	.+2      	; 0xdbe <dung4chan+0x652>
     dbc:	60 e0       	ldi	r22, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     dbe:	6a 95       	dec	r22
     dc0:	f1 f7       	brne	.-4      	; 0xdbe <dung4chan+0x652>
		PORTA=0;
     dc2:	1b ba       	out	0x1b, r1	; 27
		_delay_us(20000-ZZZ);
     dc4:	80 91 62 00 	lds	r24, 0x0062
     dc8:	90 91 63 00 	lds	r25, 0x0063
     dcc:	b8 01       	movw	r22, r16
     dce:	68 1b       	sub	r22, r24
     dd0:	79 0b       	sbc	r23, r25
     dd2:	88 27       	eor	r24, r24
     dd4:	77 fd       	sbrc	r23, 7
     dd6:	80 95       	com	r24
     dd8:	98 2f       	mov	r25, r24
     dda:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__floatsisf>
     dde:	6b 01       	movw	r12, r22
     de0:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     de2:	2b ea       	ldi	r18, 0xAB	; 171
     de4:	3a ea       	ldi	r19, 0xAA	; 170
     de6:	4a e2       	ldi	r20, 0x2A	; 42
     de8:	50 e4       	ldi	r21, 0x40	; 64
     dea:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     dee:	4b 01       	movw	r8, r22
     df0:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	40 e8       	ldi	r20, 0x80	; 128
     df8:	5f e3       	ldi	r21, 0x3F	; 63
     dfa:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
     dfe:	88 23       	and	r24, r24
     e00:	0c f4       	brge	.+2      	; 0xe04 <dung4chan+0x698>
     e02:	6e c0       	rjmp	.+220    	; 0xee0 <dung4chan+0x774>

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
     e04:	a7 01       	movw	r20, r14
     e06:	96 01       	movw	r18, r12
     e08:	c7 01       	movw	r24, r14
     e0a:	b6 01       	movw	r22, r12
     e0c:	0e 94 1e 0c 	call	0x183c	; 0x183c <__addsf3>
     e10:	2b 01       	movw	r4, r22
     e12:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	3f ef       	ldi	r19, 0xFF	; 255
     e18:	4f e7       	ldi	r20, 0x7F	; 127
     e1a:	57 e4       	ldi	r21, 0x47	; 71
     e1c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     e20:	18 16       	cp	r1, r24
     e22:	0c f0       	brlt	.+2      	; 0xe26 <dung4chan+0x6ba>
     e24:	46 c0       	rjmp	.+140    	; 0xeb2 <dung4chan+0x746>
	{
		_delay_ms(__us / 1000.0);
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	4a e7       	ldi	r20, 0x7A	; 122
     e2c:	54 e4       	ldi	r21, 0x44	; 68
     e2e:	c7 01       	movw	r24, r14
     e30:	b6 01       	movw	r22, r12
     e32:	0e 94 86 0c 	call	0x190c	; 0x190c <__divsf3>
     e36:	4b 01       	movw	r8, r22
     e38:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	4a ef       	ldi	r20, 0xFA	; 250
     e40:	54 e4       	ldi	r21, 0x44	; 68
     e42:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     e46:	6b 01       	movw	r12, r22
     e48:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	40 e8       	ldi	r20, 0x80	; 128
     e50:	5f e3       	ldi	r21, 0x3F	; 63
     e52:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
     e56:	88 23       	and	r24, r24
     e58:	2c f1       	brlt	.+74     	; 0xea4 <dung4chan+0x738>
		__ticks = 1;
	else if (__tmp > 65535)
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	3f ef       	ldi	r19, 0xFF	; 255
     e5e:	4f e7       	ldi	r20, 0x7F	; 127
     e60:	57 e4       	ldi	r21, 0x47	; 71
     e62:	c7 01       	movw	r24, r14
     e64:	b6 01       	movw	r22, r12
     e66:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     e6a:	18 16       	cp	r1, r24
     e6c:	b4 f4       	brge	.+44     	; 0xe9a <dung4chan+0x72e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	40 e2       	ldi	r20, 0x20	; 32
     e74:	51 e4       	ldi	r21, 0x41	; 65
     e76:	c5 01       	movw	r24, r10
     e78:	b4 01       	movw	r22, r8
     e7a:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     e7e:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
		while(__ticks)
     e82:	61 15       	cp	r22, r1
     e84:	71 05       	cpc	r23, r1
     e86:	71 f1       	breq	.+92     	; 0xee4 <dung4chan+0x778>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e88:	ce 01       	movw	r24, r28
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	f1 f7       	brne	.-4      	; 0xe8a <dung4chan+0x71e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e8e:	61 50       	subi	r22, 0x01	; 1
     e90:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e92:	61 15       	cp	r22, r1
     e94:	71 05       	cpc	r23, r1
     e96:	c1 f7       	brne	.-16     	; 0xe88 <dung4chan+0x71c>
     e98:	27 c0       	rjmp	.+78     	; 0xee8 <dung4chan+0x77c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e9a:	c7 01       	movw	r24, r14
     e9c:	b6 01       	movw	r22, r12
     e9e:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <dung4chan+0x73c>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     ea4:	61 e0       	ldi	r22, 0x01	; 1
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	cb 01       	movw	r24, r22
     eaa:	01 97       	sbiw	r24, 0x01	; 1
     eac:	f1 f7       	brne	.-4      	; 0xeaa <dung4chan+0x73e>
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	1c c0       	rjmp	.+56     	; 0xeea <dung4chan+0x77e>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	4f e7       	ldi	r20, 0x7F	; 127
     eb8:	53 e4       	ldi	r21, 0x43	; 67
     eba:	c5 01       	movw	r24, r10
     ebc:	b4 01       	movw	r22, r8
     ebe:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     ec2:	18 16       	cp	r1, r24
     ec4:	44 f4       	brge	.+16     	; 0xed6 <dung4chan+0x76a>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     ec6:	c3 01       	movw	r24, r6
     ec8:	b2 01       	movw	r22, r4
     eca:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
     ece:	cb 01       	movw	r24, r22
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	f1 f7       	brne	.-4      	; 0xed0 <dung4chan+0x764>
     ed4:	0c c0       	rjmp	.+24     	; 0xeee <dung4chan+0x782>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     ed6:	c5 01       	movw	r24, r10
     ed8:	b4 01       	movw	r22, r8
     eda:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
     ede:	05 c0       	rjmp	.+10     	; 0xeea <dung4chan+0x77e>
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     ee0:	61 e0       	ldi	r22, 0x01	; 1
     ee2:	03 c0       	rjmp	.+6      	; 0xeea <dung4chan+0x77e>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	01 c0       	rjmp	.+2      	; 0xeea <dung4chan+0x77e>
     ee8:	60 e0       	ldi	r22, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     eea:	6a 95       	dec	r22
     eec:	f1 f7       	brne	.-4      	; 0xeea <dung4chan+0x77e>
		PORTA=0x50;
     eee:	80 e5       	ldi	r24, 0x50	; 80
     ef0:	8b bb       	out	0x1b, r24	; 27
		_delay_us(YYY);
     ef2:	60 91 60 00 	lds	r22, 0x0060
     ef6:	70 91 61 00 	lds	r23, 0x0061
     efa:	88 27       	eor	r24, r24
     efc:	77 fd       	sbrc	r23, 7
     efe:	80 95       	com	r24
     f00:	98 2f       	mov	r25, r24
     f02:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__floatsisf>
     f06:	6b 01       	movw	r12, r22
     f08:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     f0a:	2b ea       	ldi	r18, 0xAB	; 171
     f0c:	3a ea       	ldi	r19, 0xAA	; 170
     f0e:	4a e2       	ldi	r20, 0x2A	; 42
     f10:	50 e4       	ldi	r21, 0x40	; 64
     f12:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     f16:	4b 01       	movw	r8, r22
     f18:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	40 e8       	ldi	r20, 0x80	; 128
     f20:	5f e3       	ldi	r21, 0x3F	; 63
     f22:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
     f26:	88 23       	and	r24, r24
     f28:	0c f4       	brge	.+2      	; 0xf2c <dung4chan+0x7c0>
     f2a:	6e c0       	rjmp	.+220    	; 0x1008 <dung4chan+0x89c>

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
     f2c:	a7 01       	movw	r20, r14
     f2e:	96 01       	movw	r18, r12
     f30:	c7 01       	movw	r24, r14
     f32:	b6 01       	movw	r22, r12
     f34:	0e 94 1e 0c 	call	0x183c	; 0x183c <__addsf3>
     f38:	2b 01       	movw	r4, r22
     f3a:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	3f ef       	ldi	r19, 0xFF	; 255
     f40:	4f e7       	ldi	r20, 0x7F	; 127
     f42:	57 e4       	ldi	r21, 0x47	; 71
     f44:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     f48:	18 16       	cp	r1, r24
     f4a:	0c f0       	brlt	.+2      	; 0xf4e <dung4chan+0x7e2>
     f4c:	46 c0       	rjmp	.+140    	; 0xfda <dung4chan+0x86e>
	{
		_delay_ms(__us / 1000.0);
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	4a e7       	ldi	r20, 0x7A	; 122
     f54:	54 e4       	ldi	r21, 0x44	; 68
     f56:	c7 01       	movw	r24, r14
     f58:	b6 01       	movw	r22, r12
     f5a:	0e 94 86 0c 	call	0x190c	; 0x190c <__divsf3>
     f5e:	4b 01       	movw	r8, r22
     f60:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	4a ef       	ldi	r20, 0xFA	; 250
     f68:	54 e4       	ldi	r21, 0x44	; 68
     f6a:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     f6e:	6b 01       	movw	r12, r22
     f70:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	40 e8       	ldi	r20, 0x80	; 128
     f78:	5f e3       	ldi	r21, 0x3F	; 63
     f7a:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
     f7e:	88 23       	and	r24, r24
     f80:	2c f1       	brlt	.+74     	; 0xfcc <dung4chan+0x860>
		__ticks = 1;
	else if (__tmp > 65535)
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	3f ef       	ldi	r19, 0xFF	; 255
     f86:	4f e7       	ldi	r20, 0x7F	; 127
     f88:	57 e4       	ldi	r21, 0x47	; 71
     f8a:	c7 01       	movw	r24, r14
     f8c:	b6 01       	movw	r22, r12
     f8e:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     f92:	18 16       	cp	r1, r24
     f94:	b4 f4       	brge	.+44     	; 0xfc2 <dung4chan+0x856>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	40 e2       	ldi	r20, 0x20	; 32
     f9c:	51 e4       	ldi	r21, 0x41	; 65
     f9e:	c5 01       	movw	r24, r10
     fa0:	b4 01       	movw	r22, r8
     fa2:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
     fa6:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
		while(__ticks)
     faa:	61 15       	cp	r22, r1
     fac:	71 05       	cpc	r23, r1
     fae:	71 f1       	breq	.+92     	; 0x100c <dung4chan+0x8a0>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fb0:	ce 01       	movw	r24, r28
     fb2:	01 97       	sbiw	r24, 0x01	; 1
     fb4:	f1 f7       	brne	.-4      	; 0xfb2 <dung4chan+0x846>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fb6:	61 50       	subi	r22, 0x01	; 1
     fb8:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fba:	61 15       	cp	r22, r1
     fbc:	71 05       	cpc	r23, r1
     fbe:	c1 f7       	brne	.-16     	; 0xfb0 <dung4chan+0x844>
     fc0:	27 c0       	rjmp	.+78     	; 0x1010 <dung4chan+0x8a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fc2:	c7 01       	movw	r24, r14
     fc4:	b6 01       	movw	r22, r12
     fc6:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <dung4chan+0x864>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     fcc:	61 e0       	ldi	r22, 0x01	; 1
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	cb 01       	movw	r24, r22
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	f1 f7       	brne	.-4      	; 0xfd2 <dung4chan+0x866>
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	1c c0       	rjmp	.+56     	; 0x1012 <dung4chan+0x8a6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	4f e7       	ldi	r20, 0x7F	; 127
     fe0:	53 e4       	ldi	r21, 0x43	; 67
     fe2:	c5 01       	movw	r24, r10
     fe4:	b4 01       	movw	r22, r8
     fe6:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
     fea:	18 16       	cp	r1, r24
     fec:	44 f4       	brge	.+16     	; 0xffe <dung4chan+0x892>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     fee:	c3 01       	movw	r24, r6
     ff0:	b2 01       	movw	r22, r4
     ff2:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
     ff6:	cb 01       	movw	r24, r22
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <dung4chan+0x88c>
     ffc:	0c c0       	rjmp	.+24     	; 0x1016 <dung4chan+0x8aa>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     ffe:	c5 01       	movw	r24, r10
    1000:	b4 01       	movw	r22, r8
    1002:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
    1006:	05 c0       	rjmp	.+10     	; 0x1012 <dung4chan+0x8a6>
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
    1008:	61 e0       	ldi	r22, 0x01	; 1
    100a:	03 c0       	rjmp	.+6      	; 0x1012 <dung4chan+0x8a6>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	01 c0       	rjmp	.+2      	; 0x1012 <dung4chan+0x8a6>
    1010:	60 e0       	ldi	r22, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1012:	6a 95       	dec	r22
    1014:	f1 f7       	brne	.-4      	; 0x1012 <dung4chan+0x8a6>
		PORTA=0;
    1016:	1b ba       	out	0x1b, r1	; 27
		_delay_us(20000-YYY);
    1018:	80 91 60 00 	lds	r24, 0x0060
    101c:	90 91 61 00 	lds	r25, 0x0061
    1020:	b8 01       	movw	r22, r16
    1022:	68 1b       	sub	r22, r24
    1024:	79 0b       	sbc	r23, r25
    1026:	88 27       	eor	r24, r24
    1028:	77 fd       	sbrc	r23, 7
    102a:	80 95       	com	r24
    102c:	98 2f       	mov	r25, r24
    102e:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__floatsisf>
    1032:	6b 01       	movw	r12, r22
    1034:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    1036:	2b ea       	ldi	r18, 0xAB	; 171
    1038:	3a ea       	ldi	r19, 0xAA	; 170
    103a:	4a e2       	ldi	r20, 0x2A	; 42
    103c:	50 e4       	ldi	r21, 0x40	; 64
    103e:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
    1042:	4b 01       	movw	r8, r22
    1044:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e8       	ldi	r20, 0x80	; 128
    104c:	5f e3       	ldi	r21, 0x3F	; 63
    104e:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
    1052:	88 23       	and	r24, r24
    1054:	0c f4       	brge	.+2      	; 0x1058 <dung4chan+0x8ec>
    1056:	6e c0       	rjmp	.+220    	; 0x1134 <dung4chan+0x9c8>

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1058:	a7 01       	movw	r20, r14
    105a:	96 01       	movw	r18, r12
    105c:	c7 01       	movw	r24, r14
    105e:	b6 01       	movw	r22, r12
    1060:	0e 94 1e 0c 	call	0x183c	; 0x183c <__addsf3>
    1064:	2b 01       	movw	r4, r22
    1066:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	3f ef       	ldi	r19, 0xFF	; 255
    106c:	4f e7       	ldi	r20, 0x7F	; 127
    106e:	57 e4       	ldi	r21, 0x47	; 71
    1070:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
    1074:	18 16       	cp	r1, r24
    1076:	0c f0       	brlt	.+2      	; 0x107a <dung4chan+0x90e>
    1078:	46 c0       	rjmp	.+140    	; 0x1106 <dung4chan+0x99a>
	{
		_delay_ms(__us / 1000.0);
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	4a e7       	ldi	r20, 0x7A	; 122
    1080:	54 e4       	ldi	r21, 0x44	; 68
    1082:	c7 01       	movw	r24, r14
    1084:	b6 01       	movw	r22, r12
    1086:	0e 94 86 0c 	call	0x190c	; 0x190c <__divsf3>
    108a:	4b 01       	movw	r8, r22
    108c:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	4a ef       	ldi	r20, 0xFA	; 250
    1094:	54 e4       	ldi	r21, 0x44	; 68
    1096:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
    109a:	6b 01       	movw	r12, r22
    109c:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	40 e8       	ldi	r20, 0x80	; 128
    10a4:	5f e3       	ldi	r21, 0x3F	; 63
    10a6:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
    10aa:	88 23       	and	r24, r24
    10ac:	2c f1       	brlt	.+74     	; 0x10f8 <dung4chan+0x98c>
		__ticks = 1;
	else if (__tmp > 65535)
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	3f ef       	ldi	r19, 0xFF	; 255
    10b2:	4f e7       	ldi	r20, 0x7F	; 127
    10b4:	57 e4       	ldi	r21, 0x47	; 71
    10b6:	c7 01       	movw	r24, r14
    10b8:	b6 01       	movw	r22, r12
    10ba:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
    10be:	18 16       	cp	r1, r24
    10c0:	b4 f4       	brge	.+44     	; 0x10ee <dung4chan+0x982>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	40 e2       	ldi	r20, 0x20	; 32
    10c8:	51 e4       	ldi	r21, 0x41	; 65
    10ca:	c5 01       	movw	r24, r10
    10cc:	b4 01       	movw	r22, r8
    10ce:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
    10d2:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
		while(__ticks)
    10d6:	61 15       	cp	r22, r1
    10d8:	71 05       	cpc	r23, r1
    10da:	71 f1       	breq	.+92     	; 0x1138 <dung4chan+0x9cc>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10dc:	ce 01       	movw	r24, r28
    10de:	01 97       	sbiw	r24, 0x01	; 1
    10e0:	f1 f7       	brne	.-4      	; 0x10de <dung4chan+0x972>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e2:	61 50       	subi	r22, 0x01	; 1
    10e4:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e6:	61 15       	cp	r22, r1
    10e8:	71 05       	cpc	r23, r1
    10ea:	c1 f7       	brne	.-16     	; 0x10dc <dung4chan+0x970>
    10ec:	27 c0       	rjmp	.+78     	; 0x113c <dung4chan+0x9d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ee:	c7 01       	movw	r24, r14
    10f0:	b6 01       	movw	r22, r12
    10f2:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <dung4chan+0x990>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    10f8:	61 e0       	ldi	r22, 0x01	; 1
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	cb 01       	movw	r24, r22
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	f1 f7       	brne	.-4      	; 0x10fe <dung4chan+0x992>
    1102:	60 e0       	ldi	r22, 0x00	; 0
    1104:	1c c0       	rjmp	.+56     	; 0x113e <dung4chan+0x9d2>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	4f e7       	ldi	r20, 0x7F	; 127
    110c:	53 e4       	ldi	r21, 0x43	; 67
    110e:	c5 01       	movw	r24, r10
    1110:	b4 01       	movw	r22, r8
    1112:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
    1116:	18 16       	cp	r1, r24
    1118:	44 f4       	brge	.+16     	; 0x112a <dung4chan+0x9be>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    111a:	c3 01       	movw	r24, r6
    111c:	b2 01       	movw	r22, r4
    111e:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
    1122:	cb 01       	movw	r24, r22
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	f1 f7       	brne	.-4      	; 0x1124 <dung4chan+0x9b8>
    1128:	0c c0       	rjmp	.+24     	; 0x1142 <dung4chan+0x9d6>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    112a:	c5 01       	movw	r24, r10
    112c:	b4 01       	movw	r22, r8
    112e:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
    1132:	05 c0       	rjmp	.+10     	; 0x113e <dung4chan+0x9d2>
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
    1134:	61 e0       	ldi	r22, 0x01	; 1
    1136:	03 c0       	rjmp	.+6      	; 0x113e <dung4chan+0x9d2>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	01 c0       	rjmp	.+2      	; 0x113e <dung4chan+0x9d2>
    113c:	60 e0       	ldi	r22, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    113e:	6a 95       	dec	r22
    1140:	f1 f7       	brne	.-4      	; 0x113e <dung4chan+0x9d2>
    1142:	91 e0       	ldi	r25, 0x01	; 1
    1144:	29 1a       	sub	r2, r25
    1146:	31 08       	sbc	r3, r1
		PORTA=0xa0;
		_delay_us(YYY);
		PORTA=0;
		_delay_us(20000-YYY);
	}
	for (int x=0;x<100;x++)//4 servo cap 2
    1148:	21 14       	cp	r2, r1
    114a:	31 04       	cpc	r3, r1
    114c:	09 f0       	breq	.+2      	; 0x1150 <dung4chan+0x9e4>
    114e:	99 cd       	rjmp	.-1230   	; 0xc82 <dung4chan+0x516>
		PORTA=0x50;
		_delay_us(YYY);
		PORTA=0;
		_delay_us(20000-YYY);
	}
}
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	1f 91       	pop	r17
    1156:	0f 91       	pop	r16
    1158:	ff 90       	pop	r15
    115a:	ef 90       	pop	r14
    115c:	df 90       	pop	r13
    115e:	cf 90       	pop	r12
    1160:	bf 90       	pop	r11
    1162:	af 90       	pop	r10
    1164:	9f 90       	pop	r9
    1166:	8f 90       	pop	r8
    1168:	7f 90       	pop	r7
    116a:	6f 90       	pop	r6
    116c:	5f 90       	pop	r5
    116e:	4f 90       	pop	r4
    1170:	3f 90       	pop	r3
    1172:	2f 90       	pop	r2
    1174:	08 95       	ret

00001176 <servo_2>:
void servo_2(int servo1,float goc1,int servo2,float goc2)
{
    1176:	2f 92       	push	r2
    1178:	3f 92       	push	r3
    117a:	4f 92       	push	r4
    117c:	5f 92       	push	r5
    117e:	6f 92       	push	r6
    1180:	7f 92       	push	r7
    1182:	8f 92       	push	r8
    1184:	9f 92       	push	r9
    1186:	af 92       	push	r10
    1188:	bf 92       	push	r11
    118a:	cf 92       	push	r12
    118c:	df 92       	push	r13
    118e:	ef 92       	push	r14
    1190:	ff 92       	push	r15
    1192:	0f 93       	push	r16
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	27 97       	sbiw	r28, 0x07	; 7
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	a8 2e       	mov	r10, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	ba 01       	movw	r22, r20
    11b0:	b2 2e       	mov	r11, r18
    11b2:	27 01       	movw	r4, r14
    11b4:	38 01       	movw	r6, r16
		goc1=11*goc1+500;
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	40 e3       	ldi	r20, 0x30	; 48
    11bc:	51 e4       	ldi	r21, 0x41	; 65
    11be:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	4a ef       	ldi	r20, 0xFA	; 250
    11c8:	53 e4       	ldi	r21, 0x43	; 67
    11ca:	0e 94 1e 0c 	call	0x183c	; 0x183c <__addsf3>
    11ce:	6b 01       	movw	r12, r22
    11d0:	7c 01       	movw	r14, r24
		goc2=11*goc2+500;
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	40 e3       	ldi	r20, 0x30	; 48
    11d8:	51 e4       	ldi	r21, 0x41	; 65
    11da:	c3 01       	movw	r24, r6
    11dc:	b2 01       	movw	r22, r4
    11de:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	4a ef       	ldi	r20, 0xFA	; 250
    11e8:	53 e4       	ldi	r21, 0x43	; 67
    11ea:	0e 94 1e 0c 	call	0x183c	; 0x183c <__addsf3>
    11ee:	69 83       	std	Y+1, r22	; 0x01
    11f0:	7a 83       	std	Y+2, r23	; 0x02
    11f2:	8b 83       	std	Y+3, r24	; 0x03
    11f4:	9c 83       	std	Y+4, r25	; 0x04
		setb(SERVO_PORT,servo1);
    11f6:	2b b3       	in	r18, 0x1b	; 27
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	8c 01       	movw	r16, r24
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <servo_2+0x8e>
    1200:	00 0f       	add	r16, r16
    1202:	11 1f       	adc	r17, r17
    1204:	aa 94       	dec	r10
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <servo_2+0x8a>
    1208:	20 2b       	or	r18, r16
    120a:	2b bb       	out	0x1b, r18	; 27
		setb(SERVO_PORT,servo2);
    120c:	2b b3       	in	r18, 0x1b	; 27
    120e:	1c 01       	movw	r2, r24
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <servo_2+0xa0>
    1212:	22 0c       	add	r2, r2
    1214:	33 1c       	adc	r3, r3
    1216:	ba 94       	dec	r11
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <servo_2+0x9c>
    121a:	82 2f       	mov	r24, r18
    121c:	82 29       	or	r24, r2
    121e:	8b bb       	out	0x1b, r24	; 27
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    1220:	2b ea       	ldi	r18, 0xAB	; 171
    1222:	3a ea       	ldi	r19, 0xAA	; 170
    1224:	4a e2       	ldi	r20, 0x2A	; 42
    1226:	50 e4       	ldi	r21, 0x40	; 64
    1228:	c7 01       	movw	r24, r14
    122a:	b6 01       	movw	r22, r12
    122c:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
    1230:	4b 01       	movw	r8, r22
    1232:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	40 e8       	ldi	r20, 0x80	; 128
    123a:	5f e3       	ldi	r21, 0x3F	; 63
    123c:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
    1240:	88 23       	and	r24, r24
    1242:	0c f4       	brge	.+2      	; 0x1246 <servo_2+0xd0>
    1244:	74 c0       	rjmp	.+232    	; 0x132e <servo_2+0x1b8>

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1246:	a7 01       	movw	r20, r14
    1248:	96 01       	movw	r18, r12
    124a:	c7 01       	movw	r24, r14
    124c:	b6 01       	movw	r22, r12
    124e:	0e 94 1e 0c 	call	0x183c	; 0x183c <__addsf3>
    1252:	2b 01       	movw	r4, r22
    1254:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	3f ef       	ldi	r19, 0xFF	; 255
    125a:	4f e7       	ldi	r20, 0x7F	; 127
    125c:	57 e4       	ldi	r21, 0x47	; 71
    125e:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
    1262:	18 16       	cp	r1, r24
    1264:	0c f0       	brlt	.+2      	; 0x1268 <servo_2+0xf2>
    1266:	4b c0       	rjmp	.+150    	; 0x12fe <servo_2+0x188>
	{
		_delay_ms(__us / 1000.0);
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	4a e7       	ldi	r20, 0x7A	; 122
    126e:	54 e4       	ldi	r21, 0x44	; 68
    1270:	c7 01       	movw	r24, r14
    1272:	b6 01       	movw	r22, r12
    1274:	0e 94 86 0c 	call	0x190c	; 0x190c <__divsf3>
    1278:	2b 01       	movw	r4, r22
    127a:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	4a ef       	ldi	r20, 0xFA	; 250
    1282:	54 e4       	ldi	r21, 0x44	; 68
    1284:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
    1288:	4b 01       	movw	r8, r22
    128a:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e8       	ldi	r20, 0x80	; 128
    1292:	5f e3       	ldi	r21, 0x3F	; 63
    1294:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
    1298:	88 23       	and	r24, r24
    129a:	5c f1       	brlt	.+86     	; 0x12f2 <servo_2+0x17c>
		__ticks = 1;
	else if (__tmp > 65535)
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	3f ef       	ldi	r19, 0xFF	; 255
    12a0:	4f e7       	ldi	r20, 0x7F	; 127
    12a2:	57 e4       	ldi	r21, 0x47	; 71
    12a4:	c5 01       	movw	r24, r10
    12a6:	b4 01       	movw	r22, r8
    12a8:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
    12ac:	18 16       	cp	r1, r24
    12ae:	e4 f4       	brge	.+56     	; 0x12e8 <servo_2+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	40 e2       	ldi	r20, 0x20	; 32
    12b6:	51 e4       	ldi	r21, 0x41	; 65
    12b8:	c3 01       	movw	r24, r6
    12ba:	b2 01       	movw	r22, r4
    12bc:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
    12c0:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
		while(__ticks)
    12c4:	61 15       	cp	r22, r1
    12c6:	71 05       	cpc	r23, r1
    12c8:	a1 f1       	breq	.+104    	; 0x1332 <servo_2+0x1bc>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12ca:	28 ec       	ldi	r18, 0xC8	; 200
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	5f 81       	ldd	r21, Y+7	; 0x07
    12d0:	4e 81       	ldd	r20, Y+6	; 0x06
    12d2:	c9 01       	movw	r24, r18
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	f1 f7       	brne	.-4      	; 0x12d4 <servo_2+0x15e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d8:	61 50       	subi	r22, 0x01	; 1
    12da:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12dc:	61 15       	cp	r22, r1
    12de:	71 05       	cpc	r23, r1
    12e0:	c1 f7       	brne	.-16     	; 0x12d2 <servo_2+0x15c>
    12e2:	5f 83       	std	Y+7, r21	; 0x07
    12e4:	4e 83       	std	Y+6, r20	; 0x06
    12e6:	25 c0       	rjmp	.+74     	; 0x1332 <servo_2+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e8:	c5 01       	movw	r24, r10
    12ea:	b4 01       	movw	r22, r8
    12ec:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <servo_2+0x180>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    12f2:	61 e0       	ldi	r22, 0x01	; 1
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	cb 01       	movw	r24, r22
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	f1 f7       	brne	.-4      	; 0x12f8 <servo_2+0x182>
    12fc:	1a c0       	rjmp	.+52     	; 0x1332 <servo_2+0x1bc>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	4f e7       	ldi	r20, 0x7F	; 127
    1304:	53 e4       	ldi	r21, 0x43	; 67
    1306:	c5 01       	movw	r24, r10
    1308:	b4 01       	movw	r22, r8
    130a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
    130e:	18 16       	cp	r1, r24
    1310:	44 f4       	brge	.+16     	; 0x1322 <servo_2+0x1ac>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1312:	c3 01       	movw	r24, r6
    1314:	b2 01       	movw	r22, r4
    1316:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
    131a:	cb 01       	movw	r24, r22
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	f1 f7       	brne	.-4      	; 0x131c <servo_2+0x1a6>
    1320:	0b c0       	rjmp	.+22     	; 0x1338 <servo_2+0x1c2>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1322:	c5 01       	movw	r24, r10
    1324:	b4 01       	movw	r22, r8
    1326:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
    132a:	6f 83       	std	Y+7, r22	; 0x07
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <servo_2+0x1bc>
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	8f 83       	std	Y+7, r24	; 0x07
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1332:	8f 81       	ldd	r24, Y+7	; 0x07
    1334:	8a 95       	dec	r24
    1336:	f1 f7       	brne	.-4      	; 0x1334 <servo_2+0x1be>
		_delay_us(goc1);
		clrb(SERVO_PORT,servo1);
    1338:	8b b3       	in	r24, 0x1b	; 27
    133a:	00 95       	com	r16
    133c:	08 23       	and	r16, r24
    133e:	0b bb       	out	0x1b, r16	; 27
		_delay_us(goc2-goc1);
    1340:	a7 01       	movw	r20, r14
    1342:	96 01       	movw	r18, r12
    1344:	69 81       	ldd	r22, Y+1	; 0x01
    1346:	7a 81       	ldd	r23, Y+2	; 0x02
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	9c 81       	ldd	r25, Y+4	; 0x04
    134c:	0e 94 1d 0c 	call	0x183a	; 0x183a <__subsf3>
    1350:	6b 01       	movw	r12, r22
    1352:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    1354:	2b ea       	ldi	r18, 0xAB	; 171
    1356:	3a ea       	ldi	r19, 0xAA	; 170
    1358:	4a e2       	ldi	r20, 0x2A	; 42
    135a:	50 e4       	ldi	r21, 0x40	; 64
    135c:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
    1360:	4b 01       	movw	r8, r22
    1362:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	40 e8       	ldi	r20, 0x80	; 128
    136a:	5f e3       	ldi	r21, 0x3F	; 63
    136c:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
    1370:	88 23       	and	r24, r24
    1372:	0c f4       	brge	.+2      	; 0x1376 <servo_2+0x200>
    1374:	72 c0       	rjmp	.+228    	; 0x145a <servo_2+0x2e4>

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1376:	a7 01       	movw	r20, r14
    1378:	96 01       	movw	r18, r12
    137a:	c7 01       	movw	r24, r14
    137c:	b6 01       	movw	r22, r12
    137e:	0e 94 1e 0c 	call	0x183c	; 0x183c <__addsf3>
    1382:	2b 01       	movw	r4, r22
    1384:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	3f ef       	ldi	r19, 0xFF	; 255
    138a:	4f e7       	ldi	r20, 0x7F	; 127
    138c:	57 e4       	ldi	r21, 0x47	; 71
    138e:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
    1392:	18 16       	cp	r1, r24
    1394:	0c f0       	brlt	.+2      	; 0x1398 <servo_2+0x222>
    1396:	49 c0       	rjmp	.+146    	; 0x142a <servo_2+0x2b4>
	{
		_delay_ms(__us / 1000.0);
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	4a e7       	ldi	r20, 0x7A	; 122
    139e:	54 e4       	ldi	r21, 0x44	; 68
    13a0:	c7 01       	movw	r24, r14
    13a2:	b6 01       	movw	r22, r12
    13a4:	0e 94 86 0c 	call	0x190c	; 0x190c <__divsf3>
    13a8:	4b 01       	movw	r8, r22
    13aa:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	4a ef       	ldi	r20, 0xFA	; 250
    13b2:	54 e4       	ldi	r21, 0x44	; 68
    13b4:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
    13b8:	6b 01       	movw	r12, r22
    13ba:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	40 e8       	ldi	r20, 0x80	; 128
    13c2:	5f e3       	ldi	r21, 0x3F	; 63
    13c4:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
    13c8:	88 23       	and	r24, r24
    13ca:	4c f1       	brlt	.+82     	; 0x141e <servo_2+0x2a8>
		__ticks = 1;
	else if (__tmp > 65535)
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	3f ef       	ldi	r19, 0xFF	; 255
    13d0:	4f e7       	ldi	r20, 0x7F	; 127
    13d2:	57 e4       	ldi	r21, 0x47	; 71
    13d4:	c7 01       	movw	r24, r14
    13d6:	b6 01       	movw	r22, r12
    13d8:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
    13dc:	18 16       	cp	r1, r24
    13de:	d4 f4       	brge	.+52     	; 0x1414 <servo_2+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	40 e2       	ldi	r20, 0x20	; 32
    13e6:	51 e4       	ldi	r21, 0x41	; 65
    13e8:	c5 01       	movw	r24, r10
    13ea:	b4 01       	movw	r22, r8
    13ec:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
    13f0:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
		while(__ticks)
    13f4:	61 15       	cp	r22, r1
    13f6:	71 05       	cpc	r23, r1
    13f8:	91 f1       	breq	.+100    	; 0x145e <servo_2+0x2e8>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13fa:	28 ec       	ldi	r18, 0xC8	; 200
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	4e 81       	ldd	r20, Y+6	; 0x06
    1400:	c9 01       	movw	r24, r18
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	f1 f7       	brne	.-4      	; 0x1402 <servo_2+0x28c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1406:	61 50       	subi	r22, 0x01	; 1
    1408:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    140a:	61 15       	cp	r22, r1
    140c:	71 05       	cpc	r23, r1
    140e:	c1 f7       	brne	.-16     	; 0x1400 <servo_2+0x28a>
    1410:	4e 83       	std	Y+6, r20	; 0x06
    1412:	25 c0       	rjmp	.+74     	; 0x145e <servo_2+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1414:	c7 01       	movw	r24, r14
    1416:	b6 01       	movw	r22, r12
    1418:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <servo_2+0x2ac>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    141e:	61 e0       	ldi	r22, 0x01	; 1
    1420:	70 e0       	ldi	r23, 0x00	; 0
    1422:	cb 01       	movw	r24, r22
    1424:	01 97       	sbiw	r24, 0x01	; 1
    1426:	f1 f7       	brne	.-4      	; 0x1424 <servo_2+0x2ae>
    1428:	1a c0       	rjmp	.+52     	; 0x145e <servo_2+0x2e8>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	4f e7       	ldi	r20, 0x7F	; 127
    1430:	53 e4       	ldi	r21, 0x43	; 67
    1432:	c5 01       	movw	r24, r10
    1434:	b4 01       	movw	r22, r8
    1436:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
    143a:	18 16       	cp	r1, r24
    143c:	44 f4       	brge	.+16     	; 0x144e <servo_2+0x2d8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    143e:	c3 01       	movw	r24, r6
    1440:	b2 01       	movw	r22, r4
    1442:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
    1446:	cb 01       	movw	r24, r22
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	f1 f7       	brne	.-4      	; 0x1448 <servo_2+0x2d2>
    144c:	0b c0       	rjmp	.+22     	; 0x1464 <servo_2+0x2ee>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    144e:	c5 01       	movw	r24, r10
    1450:	b4 01       	movw	r22, r8
    1452:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
    1456:	6d 83       	std	Y+5, r22	; 0x05
    1458:	02 c0       	rjmp	.+4      	; 0x145e <servo_2+0x2e8>
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
    145a:	e1 e0       	ldi	r30, 0x01	; 1
    145c:	ed 83       	std	Y+5, r30	; 0x05
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    145e:	8d 81       	ldd	r24, Y+5	; 0x05
    1460:	8a 95       	dec	r24
    1462:	f1 f7       	brne	.-4      	; 0x1460 <servo_2+0x2ea>
		clrb(SERVO_PORT,servo2);
    1464:	8b b3       	in	r24, 0x1b	; 27
    1466:	92 2d       	mov	r25, r2
    1468:	90 95       	com	r25
    146a:	89 23       	and	r24, r25
    146c:	8b bb       	out	0x1b, r24	; 27
		_delay_us(20000-goc2);
    146e:	29 81       	ldd	r18, Y+1	; 0x01
    1470:	3a 81       	ldd	r19, Y+2	; 0x02
    1472:	4b 81       	ldd	r20, Y+3	; 0x03
    1474:	5c 81       	ldd	r21, Y+4	; 0x04
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	70 e4       	ldi	r23, 0x40	; 64
    147a:	8c e9       	ldi	r24, 0x9C	; 156
    147c:	96 e4       	ldi	r25, 0x46	; 70
    147e:	0e 94 1d 0c 	call	0x183a	; 0x183a <__subsf3>
    1482:	6b 01       	movw	r12, r22
    1484:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    1486:	2b ea       	ldi	r18, 0xAB	; 171
    1488:	3a ea       	ldi	r19, 0xAA	; 170
    148a:	4a e2       	ldi	r20, 0x2A	; 42
    148c:	50 e4       	ldi	r21, 0x40	; 64
    148e:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
    1492:	4b 01       	movw	r8, r22
    1494:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e8       	ldi	r20, 0x80	; 128
    149c:	5f e3       	ldi	r21, 0x3F	; 63
    149e:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
    14a2:	88 23       	and	r24, r24
    14a4:	0c f4       	brge	.+2      	; 0x14a8 <servo_2+0x332>
    14a6:	72 c0       	rjmp	.+228    	; 0x158c <servo_2+0x416>

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
    14a8:	a7 01       	movw	r20, r14
    14aa:	96 01       	movw	r18, r12
    14ac:	c7 01       	movw	r24, r14
    14ae:	b6 01       	movw	r22, r12
    14b0:	0e 94 1e 0c 	call	0x183c	; 0x183c <__addsf3>
    14b4:	2b 01       	movw	r4, r22
    14b6:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	3f ef       	ldi	r19, 0xFF	; 255
    14bc:	4f e7       	ldi	r20, 0x7F	; 127
    14be:	57 e4       	ldi	r21, 0x47	; 71
    14c0:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
    14c4:	18 16       	cp	r1, r24
    14c6:	0c f0       	brlt	.+2      	; 0x14ca <servo_2+0x354>
    14c8:	49 c0       	rjmp	.+146    	; 0x155c <servo_2+0x3e6>
	{
		_delay_ms(__us / 1000.0);
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	4a e7       	ldi	r20, 0x7A	; 122
    14d0:	54 e4       	ldi	r21, 0x44	; 68
    14d2:	c7 01       	movw	r24, r14
    14d4:	b6 01       	movw	r22, r12
    14d6:	0e 94 86 0c 	call	0x190c	; 0x190c <__divsf3>
    14da:	4b 01       	movw	r8, r22
    14dc:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	4a ef       	ldi	r20, 0xFA	; 250
    14e4:	54 e4       	ldi	r21, 0x44	; 68
    14e6:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
    14ea:	6b 01       	movw	r12, r22
    14ec:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	40 e8       	ldi	r20, 0x80	; 128
    14f4:	5f e3       	ldi	r21, 0x3F	; 63
    14f6:	0e 94 82 0c 	call	0x1904	; 0x1904 <__cmpsf2>
    14fa:	88 23       	and	r24, r24
    14fc:	4c f1       	brlt	.+82     	; 0x1550 <servo_2+0x3da>
		__ticks = 1;
	else if (__tmp > 65535)
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	3f ef       	ldi	r19, 0xFF	; 255
    1502:	4f e7       	ldi	r20, 0x7F	; 127
    1504:	57 e4       	ldi	r21, 0x47	; 71
    1506:	c7 01       	movw	r24, r14
    1508:	b6 01       	movw	r22, r12
    150a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
    150e:	18 16       	cp	r1, r24
    1510:	d4 f4       	brge	.+52     	; 0x1546 <servo_2+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	40 e2       	ldi	r20, 0x20	; 32
    1518:	51 e4       	ldi	r21, 0x41	; 65
    151a:	c5 01       	movw	r24, r10
    151c:	b4 01       	movw	r22, r8
    151e:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3>
    1522:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
		while(__ticks)
    1526:	61 15       	cp	r22, r1
    1528:	71 05       	cpc	r23, r1
    152a:	91 f1       	breq	.+100    	; 0x1590 <servo_2+0x41a>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    152c:	28 ec       	ldi	r18, 0xC8	; 200
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	4e 81       	ldd	r20, Y+6	; 0x06
    1532:	c9 01       	movw	r24, r18
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	f1 f7       	brne	.-4      	; 0x1534 <servo_2+0x3be>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1538:	61 50       	subi	r22, 0x01	; 1
    153a:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    153c:	61 15       	cp	r22, r1
    153e:	71 05       	cpc	r23, r1
    1540:	c1 f7       	brne	.-16     	; 0x1532 <servo_2+0x3bc>
    1542:	4e 83       	std	Y+6, r20	; 0x06
    1544:	25 c0       	rjmp	.+74     	; 0x1590 <servo_2+0x41a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1546:	c7 01       	movw	r24, r14
    1548:	b6 01       	movw	r22, r12
    154a:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <servo_2+0x3de>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1550:	61 e0       	ldi	r22, 0x01	; 1
    1552:	70 e0       	ldi	r23, 0x00	; 0
    1554:	cb 01       	movw	r24, r22
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	f1 f7       	brne	.-4      	; 0x1556 <servo_2+0x3e0>
    155a:	1a c0       	rjmp	.+52     	; 0x1590 <servo_2+0x41a>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	4f e7       	ldi	r20, 0x7F	; 127
    1562:	53 e4       	ldi	r21, 0x43	; 67
    1564:	c5 01       	movw	r24, r10
    1566:	b4 01       	movw	r22, r8
    1568:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__gesf2>
    156c:	18 16       	cp	r1, r24
    156e:	44 f4       	brge	.+16     	; 0x1580 <servo_2+0x40a>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1570:	c3 01       	movw	r24, r6
    1572:	b2 01       	movw	r22, r4
    1574:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
    1578:	cb 01       	movw	r24, r22
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	f1 f7       	brne	.-4      	; 0x157a <servo_2+0x404>
    157e:	0b c0       	rjmp	.+22     	; 0x1596 <servo_2+0x420>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1580:	c5 01       	movw	r24, r10
    1582:	b4 01       	movw	r22, r8
    1584:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__fixunssfsi>
    1588:	6e 83       	std	Y+6, r22	; 0x06
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <servo_2+0x41a>
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
    158c:	f1 e0       	ldi	r31, 0x01	; 1
    158e:	fe 83       	std	Y+6, r31	; 0x06
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1590:	8e 81       	ldd	r24, Y+6	; 0x06
    1592:	8a 95       	dec	r24
    1594:	f1 f7       	brne	.-4      	; 0x1592 <servo_2+0x41c>
}
    1596:	27 96       	adiw	r28, 0x07	; 7
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	f8 94       	cli
    159c:	de bf       	out	0x3e, r29	; 62
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	cd bf       	out	0x3d, r28	; 61
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	1f 91       	pop	r17
    15a8:	0f 91       	pop	r16
    15aa:	ff 90       	pop	r15
    15ac:	ef 90       	pop	r14
    15ae:	df 90       	pop	r13
    15b0:	cf 90       	pop	r12
    15b2:	bf 90       	pop	r11
    15b4:	af 90       	pop	r10
    15b6:	9f 90       	pop	r9
    15b8:	8f 90       	pop	r8
    15ba:	7f 90       	pop	r7
    15bc:	6f 90       	pop	r6
    15be:	5f 90       	pop	r5
    15c0:	4f 90       	pop	r4
    15c2:	3f 90       	pop	r3
    15c4:	2f 90       	pop	r2
    15c6:	08 95       	ret

000015c8 <main>:
	_delay_us(20000-goc4);
}
int main(void)
{
	//le cap 1 chan cap 2
	SERVO_DDR=0xFF;
    15c8:	8f ef       	ldi	r24, 0xFF	; 255
    15ca:	8a bb       	out	0x1a, r24	; 26
	DDRB=0X00;
    15cc:	17 ba       	out	0x17, r1	; 23
	PORTB=0XFF;
    15ce:	88 bb       	out	0x18, r24	; 24
			//step 2 chan 3
			servo_control(2,37,90,50);//nhat chan len
			
			servo_control(3,135,45,50);//quay lui
			
			servo_control(2,90,37,50);//ha chan
    15d0:	0f 2e       	mov	r0, r31
    15d2:	ff e0       	ldi	r31, 0x0F	; 15
    15d4:	af 2e       	mov	r10, r31
    15d6:	f0 2d       	mov	r31, r0
    15d8:	b1 2c       	mov	r11, r1
    15da:	ca 2c       	mov	r12, r10
    15dc:	db 2c       	mov	r13, r11
	SERVO_DDR=0xFF;
	DDRB=0X00;
	PORTB=0XFF;
	while(1)
    {
		if(inbit(PINB,0)==0)
    15de:	b0 9b       	sbis	0x16, 0	; 22
			dung4chan();
    15e0:	0e 94 b6 03 	call	0x76c	; 0x76c <dung4chan>
			servo_control(1,45,90,50);
			_delay_ms(1000);
			servo_control(1,90,0,50);
		}	*/
		
		if(inbit(PINB,1)==0)
    15e4:	b1 99       	sbic	0x16, 1	; 22
    15e6:	29 c0       	rjmp	.+82     	; 0x163a <main+0x72>
		{
			//chan 3
			servo_control(4,143,90,50);//nhat chan len
    15e8:	0f 2e       	mov	r0, r31
    15ea:	f2 e3       	ldi	r31, 0x32	; 50
    15ec:	ef 2e       	mov	r14, r31
    15ee:	f1 2c       	mov	r15, r1
    15f0:	f0 2d       	mov	r31, r0
    15f2:	00 e0       	ldi	r16, 0x00	; 0
    15f4:	10 e0       	ldi	r17, 0x00	; 0
    15f6:	24 eb       	ldi	r18, 0xB4	; 180
    15f8:	32 e4       	ldi	r19, 0x42	; 66
    15fa:	40 e0       	ldi	r20, 0x00	; 0
    15fc:	50 e0       	ldi	r21, 0x00	; 0
    15fe:	6f e0       	ldi	r22, 0x0F	; 15
    1600:	73 e4       	ldi	r23, 0x43	; 67
    1602:	84 e0       	ldi	r24, 0x04	; 4
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 94 41 00 	call	0x82	; 0x82 <servo_control>
			
			servo_control(5,135,45,50);//quay lui
    160a:	00 e0       	ldi	r16, 0x00	; 0
    160c:	10 e0       	ldi	r17, 0x00	; 0
    160e:	24 e3       	ldi	r18, 0x34	; 52
    1610:	32 e4       	ldi	r19, 0x42	; 66
    1612:	40 e0       	ldi	r20, 0x00	; 0
    1614:	50 e0       	ldi	r21, 0x00	; 0
    1616:	67 e0       	ldi	r22, 0x07	; 7
    1618:	73 e4       	ldi	r23, 0x43	; 67
    161a:	85 e0       	ldi	r24, 0x05	; 5
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	0e 94 41 00 	call	0x82	; 0x82 <servo_control>
			
			servo_control(4,90,143,50);//ha chan
    1622:	00 e0       	ldi	r16, 0x00	; 0
    1624:	10 e0       	ldi	r17, 0x00	; 0
    1626:	2f e0       	ldi	r18, 0x0F	; 15
    1628:	33 e4       	ldi	r19, 0x43	; 67
    162a:	40 e0       	ldi	r20, 0x00	; 0
    162c:	50 e0       	ldi	r21, 0x00	; 0
    162e:	64 eb       	ldi	r22, 0xB4	; 180
    1630:	72 e4       	ldi	r23, 0x42	; 66
    1632:	84 e0       	ldi	r24, 0x04	; 4
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	0e 94 41 00 	call	0x82	; 0x82 <servo_control>
			
		}
		
		
		if(inbit(PINB,3)==0)
    163a:	b3 99       	sbic	0x16, 3	; 22
    163c:	69 c0       	rjmp	.+210    	; 0x1710 <main+0x148>
		{
			
			//chan 1
			servo_control(0,37,90,50);//nhat chan len
    163e:	0f 2e       	mov	r0, r31
    1640:	f2 e3       	ldi	r31, 0x32	; 50
    1642:	ef 2e       	mov	r14, r31
    1644:	f1 2c       	mov	r15, r1
    1646:	f0 2d       	mov	r31, r0
    1648:	00 e0       	ldi	r16, 0x00	; 0
    164a:	10 e0       	ldi	r17, 0x00	; 0
    164c:	24 eb       	ldi	r18, 0xB4	; 180
    164e:	32 e4       	ldi	r19, 0x42	; 66
    1650:	40 e0       	ldi	r20, 0x00	; 0
    1652:	50 e0       	ldi	r21, 0x00	; 0
    1654:	64 e1       	ldi	r22, 0x14	; 20
    1656:	72 e4       	ldi	r23, 0x42	; 66
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	0e 94 41 00 	call	0x82	; 0x82 <servo_control>
			
			servo_control(1,90,0,50);//quay lui
    1660:	00 e0       	ldi	r16, 0x00	; 0
    1662:	10 e0       	ldi	r17, 0x00	; 0
    1664:	98 01       	movw	r18, r16
    1666:	40 e0       	ldi	r20, 0x00	; 0
    1668:	50 e0       	ldi	r21, 0x00	; 0
    166a:	64 eb       	ldi	r22, 0xB4	; 180
    166c:	72 e4       	ldi	r23, 0x42	; 66
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	0e 94 41 00 	call	0x82	; 0x82 <servo_control>
			
			servo_control(0,90,37,50);//ha chan
    1676:	00 e0       	ldi	r16, 0x00	; 0
    1678:	10 e0       	ldi	r17, 0x00	; 0
    167a:	24 e1       	ldi	r18, 0x14	; 20
    167c:	32 e4       	ldi	r19, 0x42	; 66
    167e:	40 e0       	ldi	r20, 0x00	; 0
    1680:	50 e0       	ldi	r21, 0x00	; 0
    1682:	64 eb       	ldi	r22, 0xB4	; 180
    1684:	72 e4       	ldi	r23, 0x42	; 66
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	0e 94 41 00 	call	0x82	; 0x82 <servo_control>
			//step 2 chan 3
			servo_control(2,37,90,50);//nhat chan len
    168e:	00 e0       	ldi	r16, 0x00	; 0
    1690:	10 e0       	ldi	r17, 0x00	; 0
    1692:	24 eb       	ldi	r18, 0xB4	; 180
    1694:	32 e4       	ldi	r19, 0x42	; 66
    1696:	40 e0       	ldi	r20, 0x00	; 0
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	64 e1       	ldi	r22, 0x14	; 20
    169c:	72 e4       	ldi	r23, 0x42	; 66
    169e:	82 e0       	ldi	r24, 0x02	; 2
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	0e 94 41 00 	call	0x82	; 0x82 <servo_control>
			
			servo_control(3,135,45,50);//quay lui
    16a6:	00 e0       	ldi	r16, 0x00	; 0
    16a8:	10 e0       	ldi	r17, 0x00	; 0
    16aa:	24 e3       	ldi	r18, 0x34	; 52
    16ac:	32 e4       	ldi	r19, 0x42	; 66
    16ae:	40 e0       	ldi	r20, 0x00	; 0
    16b0:	50 e0       	ldi	r21, 0x00	; 0
    16b2:	67 e0       	ldi	r22, 0x07	; 7
    16b4:	73 e4       	ldi	r23, 0x43	; 67
    16b6:	83 e0       	ldi	r24, 0x03	; 3
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	0e 94 41 00 	call	0x82	; 0x82 <servo_control>
			
			servo_control(2,90,37,50);//ha chan
    16be:	00 e0       	ldi	r16, 0x00	; 0
    16c0:	10 e0       	ldi	r17, 0x00	; 0
    16c2:	24 e1       	ldi	r18, 0x14	; 20
    16c4:	32 e4       	ldi	r19, 0x42	; 66
    16c6:	40 e0       	ldi	r20, 0x00	; 0
    16c8:	50 e0       	ldi	r21, 0x00	; 0
    16ca:	64 eb       	ldi	r22, 0xB4	; 180
    16cc:	72 e4       	ldi	r23, 0x42	; 66
    16ce:	82 e0       	ldi	r24, 0x02	; 2
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	0e 94 41 00 	call	0x82	; 0x82 <servo_control>
    16d6:	cc 2d       	mov	r28, r12
    16d8:	dd 2d       	mov	r29, r13
			servo_control(5,90,135,40);
			servo_control(7,135,90,40);
			*/
			for(int x=0;x<15;x++)
			{
				servo_2(1,45,3,90);
    16da:	e1 2c       	mov	r14, r1
    16dc:	f1 2c       	mov	r15, r1
    16de:	04 eb       	ldi	r16, 0xB4	; 180
    16e0:	12 e4       	ldi	r17, 0x42	; 66
    16e2:	23 e0       	ldi	r18, 0x03	; 3
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	40 e0       	ldi	r20, 0x00	; 0
    16e8:	50 e0       	ldi	r21, 0x00	; 0
    16ea:	64 e3       	ldi	r22, 0x34	; 52
    16ec:	72 e4       	ldi	r23, 0x42	; 66
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	0e 94 bb 08 	call	0x1176	; 0x1176 <servo_2>
				servo_2(5,45,7,90);
    16f6:	27 e0       	ldi	r18, 0x07	; 7
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	40 e0       	ldi	r20, 0x00	; 0
    16fc:	50 e0       	ldi	r21, 0x00	; 0
    16fe:	64 e3       	ldi	r22, 0x34	; 52
    1700:	72 e4       	ldi	r23, 0x42	; 66
    1702:	85 e0       	ldi	r24, 0x05	; 5
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	0e 94 bb 08 	call	0x1176	; 0x1176 <servo_2>
    170a:	21 97       	sbiw	r28, 0x01	; 1
			servo_control(1,0,45,40);
			servo_control(3,45,90,40);
			servo_control(5,90,135,40);
			servo_control(7,135,90,40);
			*/
			for(int x=0;x<15;x++)
    170c:	20 97       	sbiw	r28, 0x00	; 0
    170e:	29 f7       	brne	.-54     	; 0x16da <main+0x112>
				servo_2(1,45,3,90);
				servo_2(5,45,7,90);
			}
		}	
		
		if(inbit(PINB,2)==0)
    1710:	b2 99       	sbic	0x16, 2	; 22
    1712:	65 cf       	rjmp	.-310    	; 0x15de <main+0x16>
		{
			//step 2 chan 4
			servo_control(6,143,90,50);//nhat chan len
    1714:	0f 2e       	mov	r0, r31
    1716:	f2 e3       	ldi	r31, 0x32	; 50
    1718:	ef 2e       	mov	r14, r31
    171a:	f1 2c       	mov	r15, r1
    171c:	f0 2d       	mov	r31, r0
    171e:	00 e0       	ldi	r16, 0x00	; 0
    1720:	10 e0       	ldi	r17, 0x00	; 0
    1722:	24 eb       	ldi	r18, 0xB4	; 180
    1724:	32 e4       	ldi	r19, 0x42	; 66
    1726:	40 e0       	ldi	r20, 0x00	; 0
    1728:	50 e0       	ldi	r21, 0x00	; 0
    172a:	6f e0       	ldi	r22, 0x0F	; 15
    172c:	73 e4       	ldi	r23, 0x43	; 67
    172e:	86 e0       	ldi	r24, 0x06	; 6
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	0e 94 41 00 	call	0x82	; 0x82 <servo_control>
			
			servo_control(7,135,180,50);//quay lui
    1736:	00 e0       	ldi	r16, 0x00	; 0
    1738:	10 e0       	ldi	r17, 0x00	; 0
    173a:	24 e3       	ldi	r18, 0x34	; 52
    173c:	33 e4       	ldi	r19, 0x43	; 67
    173e:	40 e0       	ldi	r20, 0x00	; 0
    1740:	50 e0       	ldi	r21, 0x00	; 0
    1742:	67 e0       	ldi	r22, 0x07	; 7
    1744:	73 e4       	ldi	r23, 0x43	; 67
    1746:	87 e0       	ldi	r24, 0x07	; 7
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	0e 94 41 00 	call	0x82	; 0x82 <servo_control>
			
			servo_control(6,90,143,50);//ha chan
    174e:	00 e0       	ldi	r16, 0x00	; 0
    1750:	10 e0       	ldi	r17, 0x00	; 0
    1752:	2f e0       	ldi	r18, 0x0F	; 15
    1754:	33 e4       	ldi	r19, 0x43	; 67
    1756:	40 e0       	ldi	r20, 0x00	; 0
    1758:	50 e0       	ldi	r21, 0x00	; 0
    175a:	64 eb       	ldi	r22, 0xB4	; 180
    175c:	72 e4       	ldi	r23, 0x42	; 66
    175e:	86 e0       	ldi	r24, 0x06	; 6
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	0e 94 41 00 	call	0x82	; 0x82 <servo_control>
			//step 3 chan 3
			servo_control(4,143,90,50);//nhat chan len
    1766:	00 e0       	ldi	r16, 0x00	; 0
    1768:	10 e0       	ldi	r17, 0x00	; 0
    176a:	24 eb       	ldi	r18, 0xB4	; 180
    176c:	32 e4       	ldi	r19, 0x42	; 66
    176e:	40 e0       	ldi	r20, 0x00	; 0
    1770:	50 e0       	ldi	r21, 0x00	; 0
    1772:	6f e0       	ldi	r22, 0x0F	; 15
    1774:	73 e4       	ldi	r23, 0x43	; 67
    1776:	84 e0       	ldi	r24, 0x04	; 4
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	0e 94 41 00 	call	0x82	; 0x82 <servo_control>
			
			servo_control(5,45,135,50);//quay lui
    177e:	00 e0       	ldi	r16, 0x00	; 0
    1780:	10 e0       	ldi	r17, 0x00	; 0
    1782:	27 e0       	ldi	r18, 0x07	; 7
    1784:	33 e4       	ldi	r19, 0x43	; 67
    1786:	40 e0       	ldi	r20, 0x00	; 0
    1788:	50 e0       	ldi	r21, 0x00	; 0
    178a:	64 e3       	ldi	r22, 0x34	; 52
    178c:	72 e4       	ldi	r23, 0x42	; 66
    178e:	85 e0       	ldi	r24, 0x05	; 5
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	0e 94 41 00 	call	0x82	; 0x82 <servo_control>
			
			servo_control(4,90,143,50);//ha chan
    1796:	00 e0       	ldi	r16, 0x00	; 0
    1798:	10 e0       	ldi	r17, 0x00	; 0
    179a:	2f e0       	ldi	r18, 0x0F	; 15
    179c:	33 e4       	ldi	r19, 0x43	; 67
    179e:	40 e0       	ldi	r20, 0x00	; 0
    17a0:	50 e0       	ldi	r21, 0x00	; 0
    17a2:	64 eb       	ldi	r22, 0xB4	; 180
    17a4:	72 e4       	ldi	r23, 0x42	; 66
    17a6:	84 e0       	ldi	r24, 0x04	; 4
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	0e 94 41 00 	call	0x82	; 0x82 <servo_control>
			//step 4 chan 2
			servo_control(2,37,90,50);//nhat chan len
    17ae:	00 e0       	ldi	r16, 0x00	; 0
    17b0:	10 e0       	ldi	r17, 0x00	; 0
    17b2:	24 eb       	ldi	r18, 0xB4	; 180
    17b4:	32 e4       	ldi	r19, 0x42	; 66
    17b6:	40 e0       	ldi	r20, 0x00	; 0
    17b8:	50 e0       	ldi	r21, 0x00	; 0
    17ba:	64 e1       	ldi	r22, 0x14	; 20
    17bc:	72 e4       	ldi	r23, 0x42	; 66
    17be:	82 e0       	ldi	r24, 0x02	; 2
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	0e 94 41 00 	call	0x82	; 0x82 <servo_control>
			
			servo_control(3,45,90,50);//quay lui
    17c6:	00 e0       	ldi	r16, 0x00	; 0
    17c8:	10 e0       	ldi	r17, 0x00	; 0
    17ca:	24 eb       	ldi	r18, 0xB4	; 180
    17cc:	32 e4       	ldi	r19, 0x42	; 66
    17ce:	40 e0       	ldi	r20, 0x00	; 0
    17d0:	50 e0       	ldi	r21, 0x00	; 0
    17d2:	64 e3       	ldi	r22, 0x34	; 52
    17d4:	72 e4       	ldi	r23, 0x42	; 66
    17d6:	83 e0       	ldi	r24, 0x03	; 3
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	0e 94 41 00 	call	0x82	; 0x82 <servo_control>
			
			servo_control(2,90,37,50);//ha chan
    17de:	00 e0       	ldi	r16, 0x00	; 0
    17e0:	10 e0       	ldi	r17, 0x00	; 0
    17e2:	24 e1       	ldi	r18, 0x14	; 20
    17e4:	32 e4       	ldi	r19, 0x42	; 66
    17e6:	40 e0       	ldi	r20, 0x00	; 0
    17e8:	50 e0       	ldi	r21, 0x00	; 0
    17ea:	64 eb       	ldi	r22, 0xB4	; 180
    17ec:	72 e4       	ldi	r23, 0x42	; 66
    17ee:	82 e0       	ldi	r24, 0x02	; 2
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	0e 94 41 00 	call	0x82	; 0x82 <servo_control>
    17f6:	ca 2d       	mov	r28, r10
    17f8:	db 2d       	mov	r29, r11
			servo_control(3,90,135,40);
			servo_control(5,135,90,40);
			servo_control(7,180,135,40);*/
			for(int x=0;x<15;x++)
			{
				servo_2(1,90,3,125);
    17fa:	e1 2c       	mov	r14, r1
    17fc:	f1 2c       	mov	r15, r1
    17fe:	0a ef       	ldi	r16, 0xFA	; 250
    1800:	12 e4       	ldi	r17, 0x42	; 66
    1802:	23 e0       	ldi	r18, 0x03	; 3
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e0       	ldi	r20, 0x00	; 0
    1808:	50 e0       	ldi	r21, 0x00	; 0
    180a:	64 eb       	ldi	r22, 0xB4	; 180
    180c:	72 e4       	ldi	r23, 0x42	; 66
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	0e 94 bb 08 	call	0x1176	; 0x1176 <servo_2>
				servo_2(5,90,7,135);
    1816:	e1 2c       	mov	r14, r1
    1818:	f1 2c       	mov	r15, r1
    181a:	07 e0       	ldi	r16, 0x07	; 7
    181c:	13 e4       	ldi	r17, 0x43	; 67
    181e:	27 e0       	ldi	r18, 0x07	; 7
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	40 e0       	ldi	r20, 0x00	; 0
    1824:	50 e0       	ldi	r21, 0x00	; 0
    1826:	64 eb       	ldi	r22, 0xB4	; 180
    1828:	72 e4       	ldi	r23, 0x42	; 66
    182a:	85 e0       	ldi	r24, 0x05	; 5
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	0e 94 bb 08 	call	0x1176	; 0x1176 <servo_2>
    1832:	21 97       	sbiw	r28, 0x01	; 1
			/*
			servo_control(1,45,90,40);
			servo_control(3,90,135,40);
			servo_control(5,135,90,40);
			servo_control(7,180,135,40);*/
			for(int x=0;x<15;x++)
    1834:	20 97       	sbiw	r28, 0x00	; 0
    1836:	09 f7       	brne	.-62     	; 0x17fa <main+0x232>
    1838:	d2 ce       	rjmp	.-604    	; 0x15de <main+0x16>

0000183a <__subsf3>:
    183a:	50 58       	subi	r21, 0x80	; 128

0000183c <__addsf3>:
    183c:	bb 27       	eor	r27, r27
    183e:	aa 27       	eor	r26, r26
    1840:	0e d0       	rcall	.+28     	; 0x185e <__addsf3x>
    1842:	75 c1       	rjmp	.+746    	; 0x1b2e <__fp_round>
    1844:	66 d1       	rcall	.+716    	; 0x1b12 <__fp_pscA>
    1846:	30 f0       	brcs	.+12     	; 0x1854 <__addsf3+0x18>
    1848:	6b d1       	rcall	.+726    	; 0x1b20 <__fp_pscB>
    184a:	20 f0       	brcs	.+8      	; 0x1854 <__addsf3+0x18>
    184c:	31 f4       	brne	.+12     	; 0x185a <__addsf3+0x1e>
    184e:	9f 3f       	cpi	r25, 0xFF	; 255
    1850:	11 f4       	brne	.+4      	; 0x1856 <__addsf3+0x1a>
    1852:	1e f4       	brtc	.+6      	; 0x185a <__addsf3+0x1e>
    1854:	5b c1       	rjmp	.+694    	; 0x1b0c <__fp_nan>
    1856:	0e f4       	brtc	.+2      	; 0x185a <__addsf3+0x1e>
    1858:	e0 95       	com	r30
    185a:	e7 fb       	bst	r30, 7
    185c:	51 c1       	rjmp	.+674    	; 0x1b00 <__fp_inf>

0000185e <__addsf3x>:
    185e:	e9 2f       	mov	r30, r25
    1860:	77 d1       	rcall	.+750    	; 0x1b50 <__fp_split3>
    1862:	80 f3       	brcs	.-32     	; 0x1844 <__addsf3+0x8>
    1864:	ba 17       	cp	r27, r26
    1866:	62 07       	cpc	r22, r18
    1868:	73 07       	cpc	r23, r19
    186a:	84 07       	cpc	r24, r20
    186c:	95 07       	cpc	r25, r21
    186e:	18 f0       	brcs	.+6      	; 0x1876 <__addsf3x+0x18>
    1870:	71 f4       	brne	.+28     	; 0x188e <__addsf3x+0x30>
    1872:	9e f5       	brtc	.+102    	; 0x18da <__addsf3x+0x7c>
    1874:	8f c1       	rjmp	.+798    	; 0x1b94 <__fp_zero>
    1876:	0e f4       	brtc	.+2      	; 0x187a <__addsf3x+0x1c>
    1878:	e0 95       	com	r30
    187a:	0b 2e       	mov	r0, r27
    187c:	ba 2f       	mov	r27, r26
    187e:	a0 2d       	mov	r26, r0
    1880:	0b 01       	movw	r0, r22
    1882:	b9 01       	movw	r22, r18
    1884:	90 01       	movw	r18, r0
    1886:	0c 01       	movw	r0, r24
    1888:	ca 01       	movw	r24, r20
    188a:	a0 01       	movw	r20, r0
    188c:	11 24       	eor	r1, r1
    188e:	ff 27       	eor	r31, r31
    1890:	59 1b       	sub	r21, r25
    1892:	99 f0       	breq	.+38     	; 0x18ba <__addsf3x+0x5c>
    1894:	59 3f       	cpi	r21, 0xF9	; 249
    1896:	50 f4       	brcc	.+20     	; 0x18ac <__addsf3x+0x4e>
    1898:	50 3e       	cpi	r21, 0xE0	; 224
    189a:	68 f1       	brcs	.+90     	; 0x18f6 <__addsf3x+0x98>
    189c:	1a 16       	cp	r1, r26
    189e:	f0 40       	sbci	r31, 0x00	; 0
    18a0:	a2 2f       	mov	r26, r18
    18a2:	23 2f       	mov	r18, r19
    18a4:	34 2f       	mov	r19, r20
    18a6:	44 27       	eor	r20, r20
    18a8:	58 5f       	subi	r21, 0xF8	; 248
    18aa:	f3 cf       	rjmp	.-26     	; 0x1892 <__addsf3x+0x34>
    18ac:	46 95       	lsr	r20
    18ae:	37 95       	ror	r19
    18b0:	27 95       	ror	r18
    18b2:	a7 95       	ror	r26
    18b4:	f0 40       	sbci	r31, 0x00	; 0
    18b6:	53 95       	inc	r21
    18b8:	c9 f7       	brne	.-14     	; 0x18ac <__addsf3x+0x4e>
    18ba:	7e f4       	brtc	.+30     	; 0x18da <__addsf3x+0x7c>
    18bc:	1f 16       	cp	r1, r31
    18be:	ba 0b       	sbc	r27, r26
    18c0:	62 0b       	sbc	r22, r18
    18c2:	73 0b       	sbc	r23, r19
    18c4:	84 0b       	sbc	r24, r20
    18c6:	ba f0       	brmi	.+46     	; 0x18f6 <__addsf3x+0x98>
    18c8:	91 50       	subi	r25, 0x01	; 1
    18ca:	a1 f0       	breq	.+40     	; 0x18f4 <__addsf3x+0x96>
    18cc:	ff 0f       	add	r31, r31
    18ce:	bb 1f       	adc	r27, r27
    18d0:	66 1f       	adc	r22, r22
    18d2:	77 1f       	adc	r23, r23
    18d4:	88 1f       	adc	r24, r24
    18d6:	c2 f7       	brpl	.-16     	; 0x18c8 <__addsf3x+0x6a>
    18d8:	0e c0       	rjmp	.+28     	; 0x18f6 <__addsf3x+0x98>
    18da:	ba 0f       	add	r27, r26
    18dc:	62 1f       	adc	r22, r18
    18de:	73 1f       	adc	r23, r19
    18e0:	84 1f       	adc	r24, r20
    18e2:	48 f4       	brcc	.+18     	; 0x18f6 <__addsf3x+0x98>
    18e4:	87 95       	ror	r24
    18e6:	77 95       	ror	r23
    18e8:	67 95       	ror	r22
    18ea:	b7 95       	ror	r27
    18ec:	f7 95       	ror	r31
    18ee:	9e 3f       	cpi	r25, 0xFE	; 254
    18f0:	08 f0       	brcs	.+2      	; 0x18f4 <__addsf3x+0x96>
    18f2:	b3 cf       	rjmp	.-154    	; 0x185a <__addsf3+0x1e>
    18f4:	93 95       	inc	r25
    18f6:	88 0f       	add	r24, r24
    18f8:	08 f0       	brcs	.+2      	; 0x18fc <__addsf3x+0x9e>
    18fa:	99 27       	eor	r25, r25
    18fc:	ee 0f       	add	r30, r30
    18fe:	97 95       	ror	r25
    1900:	87 95       	ror	r24
    1902:	08 95       	ret

00001904 <__cmpsf2>:
    1904:	d9 d0       	rcall	.+434    	; 0x1ab8 <__fp_cmp>
    1906:	08 f4       	brcc	.+2      	; 0x190a <__cmpsf2+0x6>
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	08 95       	ret

0000190c <__divsf3>:
    190c:	0c d0       	rcall	.+24     	; 0x1926 <__divsf3x>
    190e:	0f c1       	rjmp	.+542    	; 0x1b2e <__fp_round>
    1910:	07 d1       	rcall	.+526    	; 0x1b20 <__fp_pscB>
    1912:	40 f0       	brcs	.+16     	; 0x1924 <__divsf3+0x18>
    1914:	fe d0       	rcall	.+508    	; 0x1b12 <__fp_pscA>
    1916:	30 f0       	brcs	.+12     	; 0x1924 <__divsf3+0x18>
    1918:	21 f4       	brne	.+8      	; 0x1922 <__divsf3+0x16>
    191a:	5f 3f       	cpi	r21, 0xFF	; 255
    191c:	19 f0       	breq	.+6      	; 0x1924 <__divsf3+0x18>
    191e:	f0 c0       	rjmp	.+480    	; 0x1b00 <__fp_inf>
    1920:	51 11       	cpse	r21, r1
    1922:	39 c1       	rjmp	.+626    	; 0x1b96 <__fp_szero>
    1924:	f3 c0       	rjmp	.+486    	; 0x1b0c <__fp_nan>

00001926 <__divsf3x>:
    1926:	14 d1       	rcall	.+552    	; 0x1b50 <__fp_split3>
    1928:	98 f3       	brcs	.-26     	; 0x1910 <__divsf3+0x4>

0000192a <__divsf3_pse>:
    192a:	99 23       	and	r25, r25
    192c:	c9 f3       	breq	.-14     	; 0x1920 <__divsf3+0x14>
    192e:	55 23       	and	r21, r21
    1930:	b1 f3       	breq	.-20     	; 0x191e <__divsf3+0x12>
    1932:	95 1b       	sub	r25, r21
    1934:	55 0b       	sbc	r21, r21
    1936:	bb 27       	eor	r27, r27
    1938:	aa 27       	eor	r26, r26
    193a:	62 17       	cp	r22, r18
    193c:	73 07       	cpc	r23, r19
    193e:	84 07       	cpc	r24, r20
    1940:	38 f0       	brcs	.+14     	; 0x1950 <__divsf3_pse+0x26>
    1942:	9f 5f       	subi	r25, 0xFF	; 255
    1944:	5f 4f       	sbci	r21, 0xFF	; 255
    1946:	22 0f       	add	r18, r18
    1948:	33 1f       	adc	r19, r19
    194a:	44 1f       	adc	r20, r20
    194c:	aa 1f       	adc	r26, r26
    194e:	a9 f3       	breq	.-22     	; 0x193a <__divsf3_pse+0x10>
    1950:	33 d0       	rcall	.+102    	; 0x19b8 <__divsf3_pse+0x8e>
    1952:	0e 2e       	mov	r0, r30
    1954:	3a f0       	brmi	.+14     	; 0x1964 <__divsf3_pse+0x3a>
    1956:	e0 e8       	ldi	r30, 0x80	; 128
    1958:	30 d0       	rcall	.+96     	; 0x19ba <__divsf3_pse+0x90>
    195a:	91 50       	subi	r25, 0x01	; 1
    195c:	50 40       	sbci	r21, 0x00	; 0
    195e:	e6 95       	lsr	r30
    1960:	00 1c       	adc	r0, r0
    1962:	ca f7       	brpl	.-14     	; 0x1956 <__divsf3_pse+0x2c>
    1964:	29 d0       	rcall	.+82     	; 0x19b8 <__divsf3_pse+0x8e>
    1966:	fe 2f       	mov	r31, r30
    1968:	27 d0       	rcall	.+78     	; 0x19b8 <__divsf3_pse+0x8e>
    196a:	66 0f       	add	r22, r22
    196c:	77 1f       	adc	r23, r23
    196e:	88 1f       	adc	r24, r24
    1970:	bb 1f       	adc	r27, r27
    1972:	26 17       	cp	r18, r22
    1974:	37 07       	cpc	r19, r23
    1976:	48 07       	cpc	r20, r24
    1978:	ab 07       	cpc	r26, r27
    197a:	b0 e8       	ldi	r27, 0x80	; 128
    197c:	09 f0       	breq	.+2      	; 0x1980 <__divsf3_pse+0x56>
    197e:	bb 0b       	sbc	r27, r27
    1980:	80 2d       	mov	r24, r0
    1982:	bf 01       	movw	r22, r30
    1984:	ff 27       	eor	r31, r31
    1986:	93 58       	subi	r25, 0x83	; 131
    1988:	5f 4f       	sbci	r21, 0xFF	; 255
    198a:	2a f0       	brmi	.+10     	; 0x1996 <__divsf3_pse+0x6c>
    198c:	9e 3f       	cpi	r25, 0xFE	; 254
    198e:	51 05       	cpc	r21, r1
    1990:	68 f0       	brcs	.+26     	; 0x19ac <__divsf3_pse+0x82>
    1992:	b6 c0       	rjmp	.+364    	; 0x1b00 <__fp_inf>
    1994:	00 c1       	rjmp	.+512    	; 0x1b96 <__fp_szero>
    1996:	5f 3f       	cpi	r21, 0xFF	; 255
    1998:	ec f3       	brlt	.-6      	; 0x1994 <__divsf3_pse+0x6a>
    199a:	98 3e       	cpi	r25, 0xE8	; 232
    199c:	dc f3       	brlt	.-10     	; 0x1994 <__divsf3_pse+0x6a>
    199e:	86 95       	lsr	r24
    19a0:	77 95       	ror	r23
    19a2:	67 95       	ror	r22
    19a4:	b7 95       	ror	r27
    19a6:	f7 95       	ror	r31
    19a8:	9f 5f       	subi	r25, 0xFF	; 255
    19aa:	c9 f7       	brne	.-14     	; 0x199e <__divsf3_pse+0x74>
    19ac:	88 0f       	add	r24, r24
    19ae:	91 1d       	adc	r25, r1
    19b0:	96 95       	lsr	r25
    19b2:	87 95       	ror	r24
    19b4:	97 f9       	bld	r25, 7
    19b6:	08 95       	ret
    19b8:	e1 e0       	ldi	r30, 0x01	; 1
    19ba:	66 0f       	add	r22, r22
    19bc:	77 1f       	adc	r23, r23
    19be:	88 1f       	adc	r24, r24
    19c0:	bb 1f       	adc	r27, r27
    19c2:	62 17       	cp	r22, r18
    19c4:	73 07       	cpc	r23, r19
    19c6:	84 07       	cpc	r24, r20
    19c8:	ba 07       	cpc	r27, r26
    19ca:	20 f0       	brcs	.+8      	; 0x19d4 <__divsf3_pse+0xaa>
    19cc:	62 1b       	sub	r22, r18
    19ce:	73 0b       	sbc	r23, r19
    19d0:	84 0b       	sbc	r24, r20
    19d2:	ba 0b       	sbc	r27, r26
    19d4:	ee 1f       	adc	r30, r30
    19d6:	88 f7       	brcc	.-30     	; 0x19ba <__divsf3_pse+0x90>
    19d8:	e0 95       	com	r30
    19da:	08 95       	ret

000019dc <__fixsfsi>:
    19dc:	04 d0       	rcall	.+8      	; 0x19e6 <__fixunssfsi>
    19de:	68 94       	set
    19e0:	b1 11       	cpse	r27, r1
    19e2:	d9 c0       	rjmp	.+434    	; 0x1b96 <__fp_szero>
    19e4:	08 95       	ret

000019e6 <__fixunssfsi>:
    19e6:	bc d0       	rcall	.+376    	; 0x1b60 <__fp_splitA>
    19e8:	88 f0       	brcs	.+34     	; 0x1a0c <__fixunssfsi+0x26>
    19ea:	9f 57       	subi	r25, 0x7F	; 127
    19ec:	90 f0       	brcs	.+36     	; 0x1a12 <__fixunssfsi+0x2c>
    19ee:	b9 2f       	mov	r27, r25
    19f0:	99 27       	eor	r25, r25
    19f2:	b7 51       	subi	r27, 0x17	; 23
    19f4:	a0 f0       	brcs	.+40     	; 0x1a1e <__fixunssfsi+0x38>
    19f6:	d1 f0       	breq	.+52     	; 0x1a2c <__fixunssfsi+0x46>
    19f8:	66 0f       	add	r22, r22
    19fa:	77 1f       	adc	r23, r23
    19fc:	88 1f       	adc	r24, r24
    19fe:	99 1f       	adc	r25, r25
    1a00:	1a f0       	brmi	.+6      	; 0x1a08 <__fixunssfsi+0x22>
    1a02:	ba 95       	dec	r27
    1a04:	c9 f7       	brne	.-14     	; 0x19f8 <__fixunssfsi+0x12>
    1a06:	12 c0       	rjmp	.+36     	; 0x1a2c <__fixunssfsi+0x46>
    1a08:	b1 30       	cpi	r27, 0x01	; 1
    1a0a:	81 f0       	breq	.+32     	; 0x1a2c <__fixunssfsi+0x46>
    1a0c:	c3 d0       	rcall	.+390    	; 0x1b94 <__fp_zero>
    1a0e:	b1 e0       	ldi	r27, 0x01	; 1
    1a10:	08 95       	ret
    1a12:	c0 c0       	rjmp	.+384    	; 0x1b94 <__fp_zero>
    1a14:	67 2f       	mov	r22, r23
    1a16:	78 2f       	mov	r23, r24
    1a18:	88 27       	eor	r24, r24
    1a1a:	b8 5f       	subi	r27, 0xF8	; 248
    1a1c:	39 f0       	breq	.+14     	; 0x1a2c <__fixunssfsi+0x46>
    1a1e:	b9 3f       	cpi	r27, 0xF9	; 249
    1a20:	cc f3       	brlt	.-14     	; 0x1a14 <__fixunssfsi+0x2e>
    1a22:	86 95       	lsr	r24
    1a24:	77 95       	ror	r23
    1a26:	67 95       	ror	r22
    1a28:	b3 95       	inc	r27
    1a2a:	d9 f7       	brne	.-10     	; 0x1a22 <__fixunssfsi+0x3c>
    1a2c:	3e f4       	brtc	.+14     	; 0x1a3c <__fixunssfsi+0x56>
    1a2e:	90 95       	com	r25
    1a30:	80 95       	com	r24
    1a32:	70 95       	com	r23
    1a34:	61 95       	neg	r22
    1a36:	7f 4f       	sbci	r23, 0xFF	; 255
    1a38:	8f 4f       	sbci	r24, 0xFF	; 255
    1a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3c:	08 95       	ret

00001a3e <__floatunsisf>:
    1a3e:	e8 94       	clt
    1a40:	09 c0       	rjmp	.+18     	; 0x1a54 <__floatsisf+0x12>

00001a42 <__floatsisf>:
    1a42:	97 fb       	bst	r25, 7
    1a44:	3e f4       	brtc	.+14     	; 0x1a54 <__floatsisf+0x12>
    1a46:	90 95       	com	r25
    1a48:	80 95       	com	r24
    1a4a:	70 95       	com	r23
    1a4c:	61 95       	neg	r22
    1a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a50:	8f 4f       	sbci	r24, 0xFF	; 255
    1a52:	9f 4f       	sbci	r25, 0xFF	; 255
    1a54:	99 23       	and	r25, r25
    1a56:	a9 f0       	breq	.+42     	; 0x1a82 <__floatsisf+0x40>
    1a58:	f9 2f       	mov	r31, r25
    1a5a:	96 e9       	ldi	r25, 0x96	; 150
    1a5c:	bb 27       	eor	r27, r27
    1a5e:	93 95       	inc	r25
    1a60:	f6 95       	lsr	r31
    1a62:	87 95       	ror	r24
    1a64:	77 95       	ror	r23
    1a66:	67 95       	ror	r22
    1a68:	b7 95       	ror	r27
    1a6a:	f1 11       	cpse	r31, r1
    1a6c:	f8 cf       	rjmp	.-16     	; 0x1a5e <__floatsisf+0x1c>
    1a6e:	fa f4       	brpl	.+62     	; 0x1aae <__floatsisf+0x6c>
    1a70:	bb 0f       	add	r27, r27
    1a72:	11 f4       	brne	.+4      	; 0x1a78 <__floatsisf+0x36>
    1a74:	60 ff       	sbrs	r22, 0
    1a76:	1b c0       	rjmp	.+54     	; 0x1aae <__floatsisf+0x6c>
    1a78:	6f 5f       	subi	r22, 0xFF	; 255
    1a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a80:	16 c0       	rjmp	.+44     	; 0x1aae <__floatsisf+0x6c>
    1a82:	88 23       	and	r24, r24
    1a84:	11 f0       	breq	.+4      	; 0x1a8a <__floatsisf+0x48>
    1a86:	96 e9       	ldi	r25, 0x96	; 150
    1a88:	11 c0       	rjmp	.+34     	; 0x1aac <__floatsisf+0x6a>
    1a8a:	77 23       	and	r23, r23
    1a8c:	21 f0       	breq	.+8      	; 0x1a96 <__floatsisf+0x54>
    1a8e:	9e e8       	ldi	r25, 0x8E	; 142
    1a90:	87 2f       	mov	r24, r23
    1a92:	76 2f       	mov	r23, r22
    1a94:	05 c0       	rjmp	.+10     	; 0x1aa0 <__floatsisf+0x5e>
    1a96:	66 23       	and	r22, r22
    1a98:	71 f0       	breq	.+28     	; 0x1ab6 <__floatsisf+0x74>
    1a9a:	96 e8       	ldi	r25, 0x86	; 134
    1a9c:	86 2f       	mov	r24, r22
    1a9e:	70 e0       	ldi	r23, 0x00	; 0
    1aa0:	60 e0       	ldi	r22, 0x00	; 0
    1aa2:	2a f0       	brmi	.+10     	; 0x1aae <__floatsisf+0x6c>
    1aa4:	9a 95       	dec	r25
    1aa6:	66 0f       	add	r22, r22
    1aa8:	77 1f       	adc	r23, r23
    1aaa:	88 1f       	adc	r24, r24
    1aac:	da f7       	brpl	.-10     	; 0x1aa4 <__floatsisf+0x62>
    1aae:	88 0f       	add	r24, r24
    1ab0:	96 95       	lsr	r25
    1ab2:	87 95       	ror	r24
    1ab4:	97 f9       	bld	r25, 7
    1ab6:	08 95       	ret

00001ab8 <__fp_cmp>:
    1ab8:	99 0f       	add	r25, r25
    1aba:	00 08       	sbc	r0, r0
    1abc:	55 0f       	add	r21, r21
    1abe:	aa 0b       	sbc	r26, r26
    1ac0:	e0 e8       	ldi	r30, 0x80	; 128
    1ac2:	fe ef       	ldi	r31, 0xFE	; 254
    1ac4:	16 16       	cp	r1, r22
    1ac6:	17 06       	cpc	r1, r23
    1ac8:	e8 07       	cpc	r30, r24
    1aca:	f9 07       	cpc	r31, r25
    1acc:	c0 f0       	brcs	.+48     	; 0x1afe <__fp_cmp+0x46>
    1ace:	12 16       	cp	r1, r18
    1ad0:	13 06       	cpc	r1, r19
    1ad2:	e4 07       	cpc	r30, r20
    1ad4:	f5 07       	cpc	r31, r21
    1ad6:	98 f0       	brcs	.+38     	; 0x1afe <__fp_cmp+0x46>
    1ad8:	62 1b       	sub	r22, r18
    1ada:	73 0b       	sbc	r23, r19
    1adc:	84 0b       	sbc	r24, r20
    1ade:	95 0b       	sbc	r25, r21
    1ae0:	39 f4       	brne	.+14     	; 0x1af0 <__fp_cmp+0x38>
    1ae2:	0a 26       	eor	r0, r26
    1ae4:	61 f0       	breq	.+24     	; 0x1afe <__fp_cmp+0x46>
    1ae6:	23 2b       	or	r18, r19
    1ae8:	24 2b       	or	r18, r20
    1aea:	25 2b       	or	r18, r21
    1aec:	21 f4       	brne	.+8      	; 0x1af6 <__fp_cmp+0x3e>
    1aee:	08 95       	ret
    1af0:	0a 26       	eor	r0, r26
    1af2:	09 f4       	brne	.+2      	; 0x1af6 <__fp_cmp+0x3e>
    1af4:	a1 40       	sbci	r26, 0x01	; 1
    1af6:	a6 95       	lsr	r26
    1af8:	8f ef       	ldi	r24, 0xFF	; 255
    1afa:	81 1d       	adc	r24, r1
    1afc:	81 1d       	adc	r24, r1
    1afe:	08 95       	ret

00001b00 <__fp_inf>:
    1b00:	97 f9       	bld	r25, 7
    1b02:	9f 67       	ori	r25, 0x7F	; 127
    1b04:	80 e8       	ldi	r24, 0x80	; 128
    1b06:	70 e0       	ldi	r23, 0x00	; 0
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	08 95       	ret

00001b0c <__fp_nan>:
    1b0c:	9f ef       	ldi	r25, 0xFF	; 255
    1b0e:	80 ec       	ldi	r24, 0xC0	; 192
    1b10:	08 95       	ret

00001b12 <__fp_pscA>:
    1b12:	00 24       	eor	r0, r0
    1b14:	0a 94       	dec	r0
    1b16:	16 16       	cp	r1, r22
    1b18:	17 06       	cpc	r1, r23
    1b1a:	18 06       	cpc	r1, r24
    1b1c:	09 06       	cpc	r0, r25
    1b1e:	08 95       	ret

00001b20 <__fp_pscB>:
    1b20:	00 24       	eor	r0, r0
    1b22:	0a 94       	dec	r0
    1b24:	12 16       	cp	r1, r18
    1b26:	13 06       	cpc	r1, r19
    1b28:	14 06       	cpc	r1, r20
    1b2a:	05 06       	cpc	r0, r21
    1b2c:	08 95       	ret

00001b2e <__fp_round>:
    1b2e:	09 2e       	mov	r0, r25
    1b30:	03 94       	inc	r0
    1b32:	00 0c       	add	r0, r0
    1b34:	11 f4       	brne	.+4      	; 0x1b3a <__fp_round+0xc>
    1b36:	88 23       	and	r24, r24
    1b38:	52 f0       	brmi	.+20     	; 0x1b4e <__fp_round+0x20>
    1b3a:	bb 0f       	add	r27, r27
    1b3c:	40 f4       	brcc	.+16     	; 0x1b4e <__fp_round+0x20>
    1b3e:	bf 2b       	or	r27, r31
    1b40:	11 f4       	brne	.+4      	; 0x1b46 <__fp_round+0x18>
    1b42:	60 ff       	sbrs	r22, 0
    1b44:	04 c0       	rjmp	.+8      	; 0x1b4e <__fp_round+0x20>
    1b46:	6f 5f       	subi	r22, 0xFF	; 255
    1b48:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b4e:	08 95       	ret

00001b50 <__fp_split3>:
    1b50:	57 fd       	sbrc	r21, 7
    1b52:	90 58       	subi	r25, 0x80	; 128
    1b54:	44 0f       	add	r20, r20
    1b56:	55 1f       	adc	r21, r21
    1b58:	59 f0       	breq	.+22     	; 0x1b70 <__fp_splitA+0x10>
    1b5a:	5f 3f       	cpi	r21, 0xFF	; 255
    1b5c:	71 f0       	breq	.+28     	; 0x1b7a <__fp_splitA+0x1a>
    1b5e:	47 95       	ror	r20

00001b60 <__fp_splitA>:
    1b60:	88 0f       	add	r24, r24
    1b62:	97 fb       	bst	r25, 7
    1b64:	99 1f       	adc	r25, r25
    1b66:	61 f0       	breq	.+24     	; 0x1b80 <__fp_splitA+0x20>
    1b68:	9f 3f       	cpi	r25, 0xFF	; 255
    1b6a:	79 f0       	breq	.+30     	; 0x1b8a <__fp_splitA+0x2a>
    1b6c:	87 95       	ror	r24
    1b6e:	08 95       	ret
    1b70:	12 16       	cp	r1, r18
    1b72:	13 06       	cpc	r1, r19
    1b74:	14 06       	cpc	r1, r20
    1b76:	55 1f       	adc	r21, r21
    1b78:	f2 cf       	rjmp	.-28     	; 0x1b5e <__fp_split3+0xe>
    1b7a:	46 95       	lsr	r20
    1b7c:	f1 df       	rcall	.-30     	; 0x1b60 <__fp_splitA>
    1b7e:	08 c0       	rjmp	.+16     	; 0x1b90 <__fp_splitA+0x30>
    1b80:	16 16       	cp	r1, r22
    1b82:	17 06       	cpc	r1, r23
    1b84:	18 06       	cpc	r1, r24
    1b86:	99 1f       	adc	r25, r25
    1b88:	f1 cf       	rjmp	.-30     	; 0x1b6c <__fp_splitA+0xc>
    1b8a:	86 95       	lsr	r24
    1b8c:	71 05       	cpc	r23, r1
    1b8e:	61 05       	cpc	r22, r1
    1b90:	08 94       	sec
    1b92:	08 95       	ret

00001b94 <__fp_zero>:
    1b94:	e8 94       	clt

00001b96 <__fp_szero>:
    1b96:	bb 27       	eor	r27, r27
    1b98:	66 27       	eor	r22, r22
    1b9a:	77 27       	eor	r23, r23
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	97 f9       	bld	r25, 7
    1ba0:	08 95       	ret

00001ba2 <__gesf2>:
    1ba2:	8a df       	rcall	.-236    	; 0x1ab8 <__fp_cmp>
    1ba4:	08 f4       	brcc	.+2      	; 0x1ba8 <__gesf2+0x6>
    1ba6:	8f ef       	ldi	r24, 0xFF	; 255
    1ba8:	08 95       	ret

00001baa <__mulsf3>:
    1baa:	0b d0       	rcall	.+22     	; 0x1bc2 <__mulsf3x>
    1bac:	c0 cf       	rjmp	.-128    	; 0x1b2e <__fp_round>
    1bae:	b1 df       	rcall	.-158    	; 0x1b12 <__fp_pscA>
    1bb0:	28 f0       	brcs	.+10     	; 0x1bbc <__mulsf3+0x12>
    1bb2:	b6 df       	rcall	.-148    	; 0x1b20 <__fp_pscB>
    1bb4:	18 f0       	brcs	.+6      	; 0x1bbc <__mulsf3+0x12>
    1bb6:	95 23       	and	r25, r21
    1bb8:	09 f0       	breq	.+2      	; 0x1bbc <__mulsf3+0x12>
    1bba:	a2 cf       	rjmp	.-188    	; 0x1b00 <__fp_inf>
    1bbc:	a7 cf       	rjmp	.-178    	; 0x1b0c <__fp_nan>
    1bbe:	11 24       	eor	r1, r1
    1bc0:	ea cf       	rjmp	.-44     	; 0x1b96 <__fp_szero>

00001bc2 <__mulsf3x>:
    1bc2:	c6 df       	rcall	.-116    	; 0x1b50 <__fp_split3>
    1bc4:	a0 f3       	brcs	.-24     	; 0x1bae <__mulsf3+0x4>

00001bc6 <__mulsf3_pse>:
    1bc6:	95 9f       	mul	r25, r21
    1bc8:	d1 f3       	breq	.-12     	; 0x1bbe <__mulsf3+0x14>
    1bca:	95 0f       	add	r25, r21
    1bcc:	50 e0       	ldi	r21, 0x00	; 0
    1bce:	55 1f       	adc	r21, r21
    1bd0:	62 9f       	mul	r22, r18
    1bd2:	f0 01       	movw	r30, r0
    1bd4:	72 9f       	mul	r23, r18
    1bd6:	bb 27       	eor	r27, r27
    1bd8:	f0 0d       	add	r31, r0
    1bda:	b1 1d       	adc	r27, r1
    1bdc:	63 9f       	mul	r22, r19
    1bde:	aa 27       	eor	r26, r26
    1be0:	f0 0d       	add	r31, r0
    1be2:	b1 1d       	adc	r27, r1
    1be4:	aa 1f       	adc	r26, r26
    1be6:	64 9f       	mul	r22, r20
    1be8:	66 27       	eor	r22, r22
    1bea:	b0 0d       	add	r27, r0
    1bec:	a1 1d       	adc	r26, r1
    1bee:	66 1f       	adc	r22, r22
    1bf0:	82 9f       	mul	r24, r18
    1bf2:	22 27       	eor	r18, r18
    1bf4:	b0 0d       	add	r27, r0
    1bf6:	a1 1d       	adc	r26, r1
    1bf8:	62 1f       	adc	r22, r18
    1bfa:	73 9f       	mul	r23, r19
    1bfc:	b0 0d       	add	r27, r0
    1bfe:	a1 1d       	adc	r26, r1
    1c00:	62 1f       	adc	r22, r18
    1c02:	83 9f       	mul	r24, r19
    1c04:	a0 0d       	add	r26, r0
    1c06:	61 1d       	adc	r22, r1
    1c08:	22 1f       	adc	r18, r18
    1c0a:	74 9f       	mul	r23, r20
    1c0c:	33 27       	eor	r19, r19
    1c0e:	a0 0d       	add	r26, r0
    1c10:	61 1d       	adc	r22, r1
    1c12:	23 1f       	adc	r18, r19
    1c14:	84 9f       	mul	r24, r20
    1c16:	60 0d       	add	r22, r0
    1c18:	21 1d       	adc	r18, r1
    1c1a:	82 2f       	mov	r24, r18
    1c1c:	76 2f       	mov	r23, r22
    1c1e:	6a 2f       	mov	r22, r26
    1c20:	11 24       	eor	r1, r1
    1c22:	9f 57       	subi	r25, 0x7F	; 127
    1c24:	50 40       	sbci	r21, 0x00	; 0
    1c26:	8a f0       	brmi	.+34     	; 0x1c4a <__mulsf3_pse+0x84>
    1c28:	e1 f0       	breq	.+56     	; 0x1c62 <__mulsf3_pse+0x9c>
    1c2a:	88 23       	and	r24, r24
    1c2c:	4a f0       	brmi	.+18     	; 0x1c40 <__mulsf3_pse+0x7a>
    1c2e:	ee 0f       	add	r30, r30
    1c30:	ff 1f       	adc	r31, r31
    1c32:	bb 1f       	adc	r27, r27
    1c34:	66 1f       	adc	r22, r22
    1c36:	77 1f       	adc	r23, r23
    1c38:	88 1f       	adc	r24, r24
    1c3a:	91 50       	subi	r25, 0x01	; 1
    1c3c:	50 40       	sbci	r21, 0x00	; 0
    1c3e:	a9 f7       	brne	.-22     	; 0x1c2a <__mulsf3_pse+0x64>
    1c40:	9e 3f       	cpi	r25, 0xFE	; 254
    1c42:	51 05       	cpc	r21, r1
    1c44:	70 f0       	brcs	.+28     	; 0x1c62 <__mulsf3_pse+0x9c>
    1c46:	5c cf       	rjmp	.-328    	; 0x1b00 <__fp_inf>
    1c48:	a6 cf       	rjmp	.-180    	; 0x1b96 <__fp_szero>
    1c4a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c4c:	ec f3       	brlt	.-6      	; 0x1c48 <__mulsf3_pse+0x82>
    1c4e:	98 3e       	cpi	r25, 0xE8	; 232
    1c50:	dc f3       	brlt	.-10     	; 0x1c48 <__mulsf3_pse+0x82>
    1c52:	86 95       	lsr	r24
    1c54:	77 95       	ror	r23
    1c56:	67 95       	ror	r22
    1c58:	b7 95       	ror	r27
    1c5a:	f7 95       	ror	r31
    1c5c:	e7 95       	ror	r30
    1c5e:	9f 5f       	subi	r25, 0xFF	; 255
    1c60:	c1 f7       	brne	.-16     	; 0x1c52 <__mulsf3_pse+0x8c>
    1c62:	fe 2b       	or	r31, r30
    1c64:	88 0f       	add	r24, r24
    1c66:	91 1d       	adc	r25, r1
    1c68:	96 95       	lsr	r25
    1c6a:	87 95       	ror	r24
    1c6c:	97 f9       	bld	r25, 7
    1c6e:	08 95       	ret

00001c70 <_exit>:
    1c70:	f8 94       	cli

00001c72 <__stop_program>:
    1c72:	ff cf       	rjmp	.-2      	; 0x1c72 <__stop_program>
