
DOTOCDO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002aa  00800060  000009c0  00000a54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080030a  0080030a  00000cfe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cfe  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000077b  00000000  00000000  00000dca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000226  00000000  00000000  00001545  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c4  00000000  00000000  0000176b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000015c  00000000  00000000  00001a30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001e3  00000000  00000000  00001b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000051d  00000000  00000000  00001d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000228c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	13 e0       	ldi	r17, 0x03	; 3
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 30       	cpi	r26, 0x0A	; 10
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	aa e0       	ldi	r26, 0x0A	; 10
  7a:	b3 e0       	ldi	r27, 0x03	; 3
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 30       	cpi	r26, 0x0E	; 14
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 47 01 	call	0x28e	; 0x28e <main>
  8a:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_write>:
	,{255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 249, 240, 245, 255, 248, 250, 248, 248, 249, 254, 224, 199, 205, 204, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 204, 205, 198, 240, 254, 249, 249, 248, 249, 252, 255, 244, 240, 249, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}
	,{}							
*/};
void lcd_write(int cd, char byte)//SPI 4Line
{
	clrb(LCD_PORT,CS);
  92:	dc 98       	cbi	0x1b, 4	; 27
	if(cd)
  94:	89 2b       	or	r24, r25
  96:	11 f0       	breq	.+4      	; 0x9c <lcd_write+0xa>
	setb(LCD_PORT,AO);
  98:	de 9a       	sbi	0x1b, 6	; 27
  9a:	13 c0       	rjmp	.+38     	; 0xc2 <lcd_write+0x30>
	else
	clrb(LCD_PORT,AO);
  9c:	de 98       	cbi	0x1b, 6	; 27
  9e:	11 c0       	rjmp	.+34     	; 0xc2 <lcd_write+0x30>
	for(int h=0;h<8;h++)
	{
		if(!(byte&0x80))
  a0:	66 23       	and	r22, r22
  a2:	14 f0       	brlt	.+4      	; 0xa8 <lcd_write+0x16>
		clrb(LCD_PORT,SDA);
  a4:	dd 98       	cbi	0x1b, 5	; 27
  a6:	01 c0       	rjmp	.+2      	; 0xaa <lcd_write+0x18>
		else
		setb(LCD_PORT,SDA);
  a8:	dd 9a       	sbi	0x1b, 5	; 27
		clrb(LCD_PORT,SCK);
  aa:	df 98       	cbi	0x1b, 7	; 27
		setb(LCD_PORT,SCK);
  ac:	df 9a       	sbi	0x1b, 7	; 27
		byte<<=1;
  ae:	66 0f       	add	r22, r22
  b0:	01 97       	sbiw	r24, 0x01	; 1
	clrb(LCD_PORT,CS);
	if(cd)
	setb(LCD_PORT,AO);
	else
	clrb(LCD_PORT,AO);
	for(int h=0;h<8;h++)
  b2:	00 97       	sbiw	r24, 0x00	; 0
  b4:	a9 f7       	brne	.-22     	; 0xa0 <lcd_write+0xe>
		setb(LCD_PORT,SDA);
		clrb(LCD_PORT,SCK);
		setb(LCD_PORT,SCK);
		byte<<=1;
	}
	daobit(LCD_PORT,AO);
  b6:	9b b3       	in	r25, 0x1b	; 27
  b8:	80 e4       	ldi	r24, 0x40	; 64
  ba:	89 27       	eor	r24, r25
  bc:	8b bb       	out	0x1b, r24	; 27
	clrb(LCD_PORT,CS);
  be:	dc 98       	cbi	0x1b, 4	; 27
  c0:	08 95       	ret
	,{255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 159, 159, 159, 30, 60, 253, 250, 114, 245, 165, 171, 171, 87, 87, 47, 175, 175, 87, 87, 87, 171, 171, 165, 117, 114, 248, 253, 60, 158, 159, 159, 159, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}
	,{255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 249, 240, 245, 255, 248, 250, 248, 248, 249, 254, 224, 199, 205, 204, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 204, 205, 198, 240, 254, 249, 249, 248, 249, 252, 255, 244, 240, 249, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}
	,{}							
*/};
void lcd_write(int cd, char byte)//SPI 4Line
{
  c2:	88 e0       	ldi	r24, 0x08	; 8
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	ec cf       	rjmp	.-40     	; 0xa0 <lcd_write+0xe>

000000c8 <move_LCD>:
	}
	daobit(LCD_PORT,AO);
	clrb(LCD_PORT,CS);
}
void move_LCD(unsigned char x, unsigned char y)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	d8 2f       	mov	r29, r24
	y--;
  ce:	61 50       	subi	r22, 0x01	; 1
	x--;
	y=y*6;//Graphic Mode thi xoa dong nay di, Text thi de lai
  d0:	c6 2f       	mov	r28, r22
  d2:	cc 0f       	add	r28, r28
  d4:	c6 0f       	add	r28, r22
  d6:	cc 0f       	add	r28, r28
	lcd_write(0,(y&0x0f));
  d8:	6c 2f       	mov	r22, r28
  da:	6f 70       	andi	r22, 0x0F	; 15
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
	lcd_write(0,((y>>4)&0x07)|0x10);
  e4:	6c 2f       	mov	r22, r28
  e6:	62 95       	swap	r22
  e8:	6f 70       	andi	r22, 0x0F	; 15
  ea:	67 70       	andi	r22, 0x07	; 7
  ec:	60 61       	ori	r22, 0x10	; 16
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
	clrb(LCD_PORT,CS);
}
void move_LCD(unsigned char x, unsigned char y)
{
	y--;
	x--;
  f6:	6f ef       	ldi	r22, 0xFF	; 255
  f8:	6d 0f       	add	r22, r29
	y=y*6;//Graphic Mode thi xoa dong nay di, Text thi de lai
	lcd_write(0,(y&0x0f));
	lcd_write(0,((y>>4)&0x07)|0x10);
	lcd_write(0,(x&0x0f)|0xb0);
  fa:	6f 70       	andi	r22, 0x0F	; 15
  fc:	60 6b       	ori	r22, 0xB0	; 176
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <clr_LCD>:
void clr_LCD()
{
 10c:	ff 92       	push	r15
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	11 e0       	ldi	r17, 0x01	; 1
	for(int u=0;u<8;u++)
	{
		move_LCD(u+1,1);
 118:	0f 2e       	mov	r0, r31
 11a:	f2 e8       	ldi	r31, 0x82	; 130
 11c:	ff 2e       	mov	r15, r31
 11e:	f0 2d       	mov	r31, r0
 120:	00 e0       	ldi	r16, 0x00	; 0
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	81 2f       	mov	r24, r17
 126:	0e 94 64 00 	call	0xc8	; 0xc8 <move_LCD>
 12a:	cf 2d       	mov	r28, r15
 12c:	d0 2f       	mov	r29, r16
		for(int w=0;w<130;w++)
		{
			lcd_write(1,0);
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
 138:	21 97       	sbiw	r28, 0x01	; 1
void clr_LCD()
{
	for(int u=0;u<8;u++)
	{
		move_LCD(u+1,1);
		for(int w=0;w<130;w++)
 13a:	20 97       	sbiw	r28, 0x00	; 0
 13c:	c1 f7       	brne	.-16     	; 0x12e <clr_LCD+0x22>
 13e:	1f 5f       	subi	r17, 0xFF	; 255
	lcd_write(0,((y>>4)&0x07)|0x10);
	lcd_write(0,(x&0x0f)|0xb0);
}
void clr_LCD()
{
	for(int u=0;u<8;u++)
 140:	19 30       	cpi	r17, 0x09	; 9
 142:	79 f7       	brne	.-34     	; 0x122 <clr_LCD+0x16>
		for(int w=0;w<130;w++)
		{
			lcd_write(1,0);
		}
	}
	move_LCD(1,1);
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	0e 94 64 00 	call	0xc8	; 0xc8 <move_LCD>
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	1f 91       	pop	r17
 152:	0f 91       	pop	r16
 154:	ff 90       	pop	r15
 156:	08 95       	ret

00000158 <lcd_putchar>:
void lcd_putchar(int dat)
{
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
	if((dat >= 0x20) && (dat <= 0x7f))
 160:	9c 01       	movw	r18, r24
 162:	20 52       	subi	r18, 0x20	; 32
 164:	31 09       	sbc	r19, r1
 166:	20 36       	cpi	r18, 0x60	; 96
 168:	31 05       	cpc	r19, r1
 16a:	c0 f4       	brcc	.+48     	; 0x19c <lcd_putchar+0x44>
	{
		dat=dat-32;
 16c:	c9 01       	movw	r24, r18
 16e:	89 01       	movw	r16, r18
 170:	00 0f       	add	r16, r16
 172:	11 1f       	adc	r17, r17
 174:	80 0f       	add	r24, r16
 176:	91 1f       	adc	r25, r17
 178:	8c 01       	movw	r16, r24
 17a:	00 0f       	add	r16, r16
 17c:	11 1f       	adc	r17, r17
 17e:	0e 59       	subi	r16, 0x9E	; 158
 180:	1f 4f       	sbci	r17, 0xFF	; 255
		for(int v=0;v<6;v++)
 182:	c0 e0       	ldi	r28, 0x00	; 0
 184:	d0 e0       	ldi	r29, 0x00	; 0
		lcd_write(1, font[dat][v]);
 186:	f8 01       	movw	r30, r16
 188:	61 91       	ld	r22, Z+
 18a:	8f 01       	movw	r16, r30
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
void lcd_putchar(int dat)
{
	if((dat >= 0x20) && (dat <= 0x7f))
	{
		dat=dat-32;
		for(int v=0;v<6;v++)
 194:	21 96       	adiw	r28, 0x01	; 1
 196:	c6 30       	cpi	r28, 0x06	; 6
 198:	d1 05       	cpc	r29, r1
 19a:	a9 f7       	brne	.-22     	; 0x186 <lcd_putchar+0x2e>
		lcd_write(1, font[dat][v]);
	}
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	08 95       	ret

000001a6 <print_LCD>:
void print_LCD(char *s)
{
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	ec 01       	movw	r28, r24
	while(*s)
 1ac:	88 81       	ld	r24, Y
 1ae:	88 23       	and	r24, r24
 1b0:	39 f0       	breq	.+14     	; 0x1c0 <print_LCD+0x1a>
 1b2:	21 96       	adiw	r28, 0x01	; 1
	lcd_putchar(*s++);
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_putchar>
		lcd_write(1, font[dat][v]);
	}
}
void print_LCD(char *s)
{
	while(*s)
 1ba:	89 91       	ld	r24, Y+
 1bc:	81 11       	cpse	r24, r1
 1be:	fa cf       	rjmp	.-12     	; 0x1b4 <print_LCD+0xe>
	lcd_putchar(*s++);
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <init_LCD>:
void init_LCD()//Khoi tao GLCD
{
	LCD_DDR=0xFF;
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	8a bb       	out	0x1a, r24	; 26
	lcd_write(0,0xE2); //Reset
 1ca:	62 ee       	ldi	r22, 0xE2	; 226
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d4:	2f ef       	ldi	r18, 0xFF	; 255
 1d6:	81 ee       	ldi	r24, 0xE1	; 225
 1d8:	94 e0       	ldi	r25, 0x04	; 4
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <init_LCD+0x14>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <init_LCD+0x1e>
 1e4:	00 00       	nop
	_delay_ms(100);	   //Delay 100ms
	lcd_write(0,0xAF); //Display ON, 0xAE - OFF
 1e6:	6f ea       	ldi	r22, 0xAF	; 175
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
	lcd_write(0,0x2F); //Power control
 1f0:	6f e2       	ldi	r22, 0x2F	; 47
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
	clr_LCD(); //Xoa man hinh
 1fa:	0e 94 86 00 	call	0x10c	; 0x10c <clr_LCD>
 1fe:	08 95       	ret

00000200 <vietso_LCD>:
}
void vietso_LCD(int num)
{
 200:	0f 93       	push	r16
 202:	1f 93       	push	r17
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	00 d0       	rcall	.+0      	; 0x20a <vietso_LCD+0xa>
 20a:	00 d0       	rcall	.+0      	; 0x20c <vietso_LCD+0xc>
 20c:	1f 92       	push	r1
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
	char dis[5];
	sprintf(dis, "%i", num);
 212:	9f 93       	push	r25
 214:	8f 93       	push	r24
 216:	82 ea       	ldi	r24, 0xA2	; 162
 218:	92 e0       	ldi	r25, 0x02	; 2
 21a:	9f 93       	push	r25
 21c:	8f 93       	push	r24
 21e:	8e 01       	movw	r16, r28
 220:	0f 5f       	subi	r16, 0xFF	; 255
 222:	1f 4f       	sbci	r17, 0xFF	; 255
 224:	1f 93       	push	r17
 226:	0f 93       	push	r16
 228:	0e 94 0d 02 	call	0x41a	; 0x41a <sprintf>
	print_LCD(dis);
 22c:	c8 01       	movw	r24, r16
 22e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <print_LCD>
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	0f 90       	pop	r0
}
 23e:	0f 90       	pop	r0
 240:	0f 90       	pop	r0
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	0f 90       	pop	r0
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	1f 91       	pop	r17
 24e:	0f 91       	pop	r16
 250:	08 95       	ret

00000252 <hesochia>:
void hesochia(int div)
{
	TCNT1=0;
 252:	1d bc       	out	0x2d, r1	; 45
 254:	1c bc       	out	0x2c, r1	; 44
	if (div==1024)
 256:	81 15       	cp	r24, r1
 258:	24 e0       	ldi	r18, 0x04	; 4
 25a:	92 07       	cpc	r25, r18
 25c:	19 f4       	brne	.+6      	; 0x264 <hesochia+0x12>
		TCCR1B=(1<<CS10)|(1<<CS12);
 25e:	85 e0       	ldi	r24, 0x05	; 5
 260:	8e bd       	out	0x2e, r24	; 46
 262:	08 95       	ret
	else if (div==256)
 264:	81 15       	cp	r24, r1
 266:	21 e0       	ldi	r18, 0x01	; 1
 268:	92 07       	cpc	r25, r18
 26a:	19 f4       	brne	.+6      	; 0x272 <hesochia+0x20>
		TCCR1B=(1<<CS12);
 26c:	84 e0       	ldi	r24, 0x04	; 4
 26e:	8e bd       	out	0x2e, r24	; 46
 270:	08 95       	ret
	else if (div==64)
 272:	80 34       	cpi	r24, 0x40	; 64
 274:	91 05       	cpc	r25, r1
 276:	19 f4       	brne	.+6      	; 0x27e <hesochia+0x2c>
		TCCR1B=(1<<CS10)|(1<<CS11);
 278:	83 e0       	ldi	r24, 0x03	; 3
 27a:	8e bd       	out	0x2e, r24	; 46
 27c:	08 95       	ret
	else if (div==8)
 27e:	08 97       	sbiw	r24, 0x08	; 8
 280:	19 f4       	brne	.+6      	; 0x288 <hesochia+0x36>
		TCCR1B=(1<<CS11);
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	8e bd       	out	0x2e, r24	; 46
 286:	08 95       	ret
	else
		TCCR1B=(1<<CS10);
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	8e bd       	out	0x2e, r24	; 46
 28c:	08 95       	ret

0000028e <main>:
 28e:	2f ef       	ldi	r18, 0xFF	; 255
 290:	83 ed       	ldi	r24, 0xD3	; 211
 292:	90 e3       	ldi	r25, 0x30	; 48
 294:	21 50       	subi	r18, 0x01	; 1
 296:	80 40       	sbci	r24, 0x00	; 0
 298:	90 40       	sbci	r25, 0x00	; 0
 29a:	e1 f7       	brne	.-8      	; 0x294 <main+0x6>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <main+0x10>
 29e:	00 00       	nop
int div=1024;

int main(void)
{
	_delay_ms(1000);
    DDRA=0xFF;    
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	8a bb       	out	0x1a, r24	; 26
    init_LCD();
 2a4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <init_LCD>
	hesochia(div);
 2a8:	80 91 60 00 	lds	r24, 0x0060
 2ac:	90 91 61 00 	lds	r25, 0x0061
 2b0:	0e 94 29 01 	call	0x252	; 0x252 <hesochia>
	
    //NGAT NGOAI
    setb(PORTD,2);
 2b4:	92 9a       	sbi	0x12, 2	; 18
    MCUCR=(1<<ISC01)|(1<<ISC11);
 2b6:	8a e0       	ldi	r24, 0x0A	; 10
 2b8:	85 bf       	out	0x35, r24	; 53
    GICR=(1<<INT0)|(1<<INT1);
 2ba:	80 ec       	ldi	r24, 0xC0	; 192
 2bc:	8b bf       	out	0x3b, r24	; 59
    sei();
 2be:	78 94       	sei
 2c0:	2f ef       	ldi	r18, 0xFF	; 255
 2c2:	81 ee       	ldi	r24, 0xE1	; 225
 2c4:	94 e0       	ldi	r25, 0x04	; 4
 2c6:	21 50       	subi	r18, 0x01	; 1
 2c8:	80 40       	sbci	r24, 0x00	; 0
 2ca:	90 40       	sbci	r25, 0x00	; 0
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <main+0x38>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <main+0x42>
 2d0:	00 00       	nop
		print_LCD(" DA DIEN TU UNG DUNG");
		move_LCD(6,1);
		print_LCD("   BIEN TAN DK DC");
		move_LCD(8,1);
		print_LCD("TOC DO : ");
		vietso_LCD(F_CPU*60/div/speed);
 2d2:	0f 2e       	mov	r0, r31
 2d4:	c1 2c       	mov	r12, r1
 2d6:	f0 e7       	ldi	r31, 0x70	; 112
 2d8:	df 2e       	mov	r13, r31
 2da:	f8 e3       	ldi	r31, 0x38	; 56
 2dc:	ef 2e       	mov	r14, r31
 2de:	f9 e3       	ldi	r31, 0x39	; 57
 2e0:	ff 2e       	mov	r15, r31
 2e2:	f0 2d       	mov	r31, r0
    sei();
	_delay_ms(100);
	while(1)
    {
		//speed = F_CPU*60/div/speed;
		move_LCD(1,1);
 2e4:	61 e0       	ldi	r22, 0x01	; 1
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	0e 94 64 00 	call	0xc8	; 0xc8 <move_LCD>
		print_LCD("  |*----*****----*|");
 2ec:	85 ea       	ldi	r24, 0xA5	; 165
 2ee:	92 e0       	ldi	r25, 0x02	; 2
 2f0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <print_LCD>
		move_LCD(2,1);
 2f4:	61 e0       	ldi	r22, 0x01	; 1
 2f6:	82 e0       	ldi	r24, 0x02	; 2
 2f8:	0e 94 64 00 	call	0xc8	; 0xc8 <move_LCD>
		print_LCD("DH BACH KHOA DA NANG");
 2fc:	89 eb       	ldi	r24, 0xB9	; 185
 2fe:	92 e0       	ldi	r25, 0x02	; 2
 300:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <print_LCD>
		move_LCD(4,1);
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	84 e0       	ldi	r24, 0x04	; 4
 308:	0e 94 64 00 	call	0xc8	; 0xc8 <move_LCD>
		print_LCD(" DA DIEN TU UNG DUNG");
 30c:	8e ec       	ldi	r24, 0xCE	; 206
 30e:	92 e0       	ldi	r25, 0x02	; 2
 310:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <print_LCD>
		move_LCD(6,1);
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	86 e0       	ldi	r24, 0x06	; 6
 318:	0e 94 64 00 	call	0xc8	; 0xc8 <move_LCD>
		print_LCD("   BIEN TAN DK DC");
 31c:	83 ee       	ldi	r24, 0xE3	; 227
 31e:	92 e0       	ldi	r25, 0x02	; 2
 320:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <print_LCD>
		move_LCD(8,1);
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	88 e0       	ldi	r24, 0x08	; 8
 328:	0e 94 64 00 	call	0xc8	; 0xc8 <move_LCD>
		print_LCD("TOC DO : ");
 32c:	85 ef       	ldi	r24, 0xF5	; 245
 32e:	92 e0       	ldi	r25, 0x02	; 2
 330:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <print_LCD>
		vietso_LCD(F_CPU*60/div/speed);
 334:	20 91 60 00 	lds	r18, 0x0060
 338:	30 91 61 00 	lds	r19, 0x0061
 33c:	44 27       	eor	r20, r20
 33e:	37 fd       	sbrc	r19, 7
 340:	40 95       	com	r20
 342:	54 2f       	mov	r21, r20
 344:	c7 01       	movw	r24, r14
 346:	b6 01       	movw	r22, r12
 348:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <__udivmodsi4>
 34c:	ca 01       	movw	r24, r20
 34e:	b9 01       	movw	r22, r18
 350:	20 91 0a 03 	lds	r18, 0x030A
 354:	30 91 0b 03 	lds	r19, 0x030B
 358:	40 91 0c 03 	lds	r20, 0x030C
 35c:	50 91 0d 03 	lds	r21, 0x030D
 360:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <__udivmodsi4>
 364:	c9 01       	movw	r24, r18
 366:	0e 94 00 01 	call	0x200	; 0x200 <vietso_LCD>
		print_LCD("   ");
 36a:	8f ef       	ldi	r24, 0xFF	; 255
 36c:	92 e0       	ldi	r25, 0x02	; 2
 36e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <print_LCD>
		move_LCD(8,17);
 372:	61 e1       	ldi	r22, 0x11	; 17
 374:	88 e0       	ldi	r24, 0x08	; 8
 376:	0e 94 64 00 	call	0xc8	; 0xc8 <move_LCD>
		print_LCD("(RPM)");
 37a:	83 e0       	ldi	r24, 0x03	; 3
 37c:	93 e0       	ldi	r25, 0x03	; 3
 37e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <print_LCD>
 382:	2f ef       	ldi	r18, 0xFF	; 255
 384:	89 e6       	ldi	r24, 0x69	; 105
 386:	98 e1       	ldi	r25, 0x18	; 24
 388:	21 50       	subi	r18, 0x01	; 1
 38a:	80 40       	sbci	r24, 0x00	; 0
 38c:	90 40       	sbci	r25, 0x00	; 0
 38e:	e1 f7       	brne	.-8      	; 0x388 <main+0xfa>
 390:	00 c0       	rjmp	.+0      	; 0x392 <main+0x104>
 392:	00 00       	nop
 394:	a7 cf       	rjmp	.-178    	; 0x2e4 <main+0x56>

00000396 <__vector_2>:
		_delay_ms(500);		    
    }

}
ISR(INT1_vect)
{
 396:	1f 92       	push	r1
 398:	0f 92       	push	r0
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	0f 92       	push	r0
 39e:	11 24       	eor	r1, r1
 3a0:	8f 93       	push	r24
 3a2:	9f 93       	push	r25
 3a4:	af 93       	push	r26
 3a6:	bf 93       	push	r27
	speed=TCNT1;
 3a8:	8c b5       	in	r24, 0x2c	; 44
 3aa:	9d b5       	in	r25, 0x2d	; 45
 3ac:	a0 e0       	ldi	r26, 0x00	; 0
 3ae:	b0 e0       	ldi	r27, 0x00	; 0
 3b0:	80 93 0a 03 	sts	0x030A, r24
 3b4:	90 93 0b 03 	sts	0x030B, r25
 3b8:	a0 93 0c 03 	sts	0x030C, r26
 3bc:	b0 93 0d 03 	sts	0x030D, r27
	TCNT1=0;
 3c0:	1d bc       	out	0x2d, r1	; 45
 3c2:	1c bc       	out	0x2c, r1	; 44
 3c4:	bf 91       	pop	r27
 3c6:	af 91       	pop	r26
 3c8:	9f 91       	pop	r25
 3ca:	8f 91       	pop	r24
 3cc:	0f 90       	pop	r0
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	0f 90       	pop	r0
 3d2:	1f 90       	pop	r1
 3d4:	18 95       	reti

000003d6 <__udivmodsi4>:
 3d6:	a1 e2       	ldi	r26, 0x21	; 33
 3d8:	1a 2e       	mov	r1, r26
 3da:	aa 1b       	sub	r26, r26
 3dc:	bb 1b       	sub	r27, r27
 3de:	fd 01       	movw	r30, r26
 3e0:	0d c0       	rjmp	.+26     	; 0x3fc <__udivmodsi4_ep>

000003e2 <__udivmodsi4_loop>:
 3e2:	aa 1f       	adc	r26, r26
 3e4:	bb 1f       	adc	r27, r27
 3e6:	ee 1f       	adc	r30, r30
 3e8:	ff 1f       	adc	r31, r31
 3ea:	a2 17       	cp	r26, r18
 3ec:	b3 07       	cpc	r27, r19
 3ee:	e4 07       	cpc	r30, r20
 3f0:	f5 07       	cpc	r31, r21
 3f2:	20 f0       	brcs	.+8      	; 0x3fc <__udivmodsi4_ep>
 3f4:	a2 1b       	sub	r26, r18
 3f6:	b3 0b       	sbc	r27, r19
 3f8:	e4 0b       	sbc	r30, r20
 3fa:	f5 0b       	sbc	r31, r21

000003fc <__udivmodsi4_ep>:
 3fc:	66 1f       	adc	r22, r22
 3fe:	77 1f       	adc	r23, r23
 400:	88 1f       	adc	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	1a 94       	dec	r1
 406:	69 f7       	brne	.-38     	; 0x3e2 <__udivmodsi4_loop>
 408:	60 95       	com	r22
 40a:	70 95       	com	r23
 40c:	80 95       	com	r24
 40e:	90 95       	com	r25
 410:	9b 01       	movw	r18, r22
 412:	ac 01       	movw	r20, r24
 414:	bd 01       	movw	r22, r26
 416:	cf 01       	movw	r24, r30
 418:	08 95       	ret

0000041a <sprintf>:
 41a:	ae e0       	ldi	r26, 0x0E	; 14
 41c:	b0 e0       	ldi	r27, 0x00	; 0
 41e:	e3 e1       	ldi	r30, 0x13	; 19
 420:	f2 e0       	ldi	r31, 0x02	; 2
 422:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__prologue_saves__+0x1c>
 426:	0d 89       	ldd	r16, Y+21	; 0x15
 428:	1e 89       	ldd	r17, Y+22	; 0x16
 42a:	86 e0       	ldi	r24, 0x06	; 6
 42c:	8c 83       	std	Y+4, r24	; 0x04
 42e:	1a 83       	std	Y+2, r17	; 0x02
 430:	09 83       	std	Y+1, r16	; 0x01
 432:	8f ef       	ldi	r24, 0xFF	; 255
 434:	9f e7       	ldi	r25, 0x7F	; 127
 436:	9e 83       	std	Y+6, r25	; 0x06
 438:	8d 83       	std	Y+5, r24	; 0x05
 43a:	ae 01       	movw	r20, r28
 43c:	47 5e       	subi	r20, 0xE7	; 231
 43e:	5f 4f       	sbci	r21, 0xFF	; 255
 440:	6f 89       	ldd	r22, Y+23	; 0x17
 442:	78 8d       	ldd	r23, Y+24	; 0x18
 444:	ce 01       	movw	r24, r28
 446:	01 96       	adiw	r24, 0x01	; 1
 448:	0e 94 2f 02 	call	0x45e	; 0x45e <vfprintf>
 44c:	ef 81       	ldd	r30, Y+7	; 0x07
 44e:	f8 85       	ldd	r31, Y+8	; 0x08
 450:	e0 0f       	add	r30, r16
 452:	f1 1f       	adc	r31, r17
 454:	10 82       	st	Z, r1
 456:	2e 96       	adiw	r28, 0x0e	; 14
 458:	e4 e0       	ldi	r30, 0x04	; 4
 45a:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__epilogue_restores__+0x1c>

0000045e <vfprintf>:
 45e:	ac e0       	ldi	r26, 0x0C	; 12
 460:	b0 e0       	ldi	r27, 0x00	; 0
 462:	e5 e3       	ldi	r30, 0x35	; 53
 464:	f2 e0       	ldi	r31, 0x02	; 2
 466:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__prologue_saves__>
 46a:	7c 01       	movw	r14, r24
 46c:	6b 01       	movw	r12, r22
 46e:	8a 01       	movw	r16, r20
 470:	fc 01       	movw	r30, r24
 472:	17 82       	std	Z+7, r1	; 0x07
 474:	16 82       	std	Z+6, r1	; 0x06
 476:	83 81       	ldd	r24, Z+3	; 0x03
 478:	81 ff       	sbrs	r24, 1
 47a:	bd c1       	rjmp	.+890    	; 0x7f6 <__stack+0x397>
 47c:	ce 01       	movw	r24, r28
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	4c 01       	movw	r8, r24
 482:	f7 01       	movw	r30, r14
 484:	93 81       	ldd	r25, Z+3	; 0x03
 486:	f6 01       	movw	r30, r12
 488:	93 fd       	sbrc	r25, 3
 48a:	85 91       	lpm	r24, Z+
 48c:	93 ff       	sbrs	r25, 3
 48e:	81 91       	ld	r24, Z+
 490:	6f 01       	movw	r12, r30
 492:	88 23       	and	r24, r24
 494:	09 f4       	brne	.+2      	; 0x498 <__stack+0x39>
 496:	ab c1       	rjmp	.+854    	; 0x7ee <__stack+0x38f>
 498:	85 32       	cpi	r24, 0x25	; 37
 49a:	39 f4       	brne	.+14     	; 0x4aa <__stack+0x4b>
 49c:	93 fd       	sbrc	r25, 3
 49e:	85 91       	lpm	r24, Z+
 4a0:	93 ff       	sbrs	r25, 3
 4a2:	81 91       	ld	r24, Z+
 4a4:	6f 01       	movw	r12, r30
 4a6:	85 32       	cpi	r24, 0x25	; 37
 4a8:	29 f4       	brne	.+10     	; 0x4b4 <__stack+0x55>
 4aa:	b7 01       	movw	r22, r14
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 17 04 	call	0x82e	; 0x82e <fputc>
 4b2:	e7 cf       	rjmp	.-50     	; 0x482 <__stack+0x23>
 4b4:	51 2c       	mov	r5, r1
 4b6:	31 2c       	mov	r3, r1
 4b8:	20 e0       	ldi	r18, 0x00	; 0
 4ba:	20 32       	cpi	r18, 0x20	; 32
 4bc:	a0 f4       	brcc	.+40     	; 0x4e6 <__stack+0x87>
 4be:	8b 32       	cpi	r24, 0x2B	; 43
 4c0:	69 f0       	breq	.+26     	; 0x4dc <__stack+0x7d>
 4c2:	30 f4       	brcc	.+12     	; 0x4d0 <__stack+0x71>
 4c4:	80 32       	cpi	r24, 0x20	; 32
 4c6:	59 f0       	breq	.+22     	; 0x4de <__stack+0x7f>
 4c8:	83 32       	cpi	r24, 0x23	; 35
 4ca:	69 f4       	brne	.+26     	; 0x4e6 <__stack+0x87>
 4cc:	20 61       	ori	r18, 0x10	; 16
 4ce:	2c c0       	rjmp	.+88     	; 0x528 <__stack+0xc9>
 4d0:	8d 32       	cpi	r24, 0x2D	; 45
 4d2:	39 f0       	breq	.+14     	; 0x4e2 <__stack+0x83>
 4d4:	80 33       	cpi	r24, 0x30	; 48
 4d6:	39 f4       	brne	.+14     	; 0x4e6 <__stack+0x87>
 4d8:	21 60       	ori	r18, 0x01	; 1
 4da:	26 c0       	rjmp	.+76     	; 0x528 <__stack+0xc9>
 4dc:	22 60       	ori	r18, 0x02	; 2
 4de:	24 60       	ori	r18, 0x04	; 4
 4e0:	23 c0       	rjmp	.+70     	; 0x528 <__stack+0xc9>
 4e2:	28 60       	ori	r18, 0x08	; 8
 4e4:	21 c0       	rjmp	.+66     	; 0x528 <__stack+0xc9>
 4e6:	27 fd       	sbrc	r18, 7
 4e8:	27 c0       	rjmp	.+78     	; 0x538 <__stack+0xd9>
 4ea:	30 ed       	ldi	r19, 0xD0	; 208
 4ec:	38 0f       	add	r19, r24
 4ee:	3a 30       	cpi	r19, 0x0A	; 10
 4f0:	78 f4       	brcc	.+30     	; 0x510 <__stack+0xb1>
 4f2:	26 ff       	sbrs	r18, 6
 4f4:	06 c0       	rjmp	.+12     	; 0x502 <__stack+0xa3>
 4f6:	fa e0       	ldi	r31, 0x0A	; 10
 4f8:	5f 9e       	mul	r5, r31
 4fa:	30 0d       	add	r19, r0
 4fc:	11 24       	eor	r1, r1
 4fe:	53 2e       	mov	r5, r19
 500:	13 c0       	rjmp	.+38     	; 0x528 <__stack+0xc9>
 502:	8a e0       	ldi	r24, 0x0A	; 10
 504:	38 9e       	mul	r3, r24
 506:	30 0d       	add	r19, r0
 508:	11 24       	eor	r1, r1
 50a:	33 2e       	mov	r3, r19
 50c:	20 62       	ori	r18, 0x20	; 32
 50e:	0c c0       	rjmp	.+24     	; 0x528 <__stack+0xc9>
 510:	8e 32       	cpi	r24, 0x2E	; 46
 512:	21 f4       	brne	.+8      	; 0x51c <__stack+0xbd>
 514:	26 fd       	sbrc	r18, 6
 516:	6b c1       	rjmp	.+726    	; 0x7ee <__stack+0x38f>
 518:	20 64       	ori	r18, 0x40	; 64
 51a:	06 c0       	rjmp	.+12     	; 0x528 <__stack+0xc9>
 51c:	8c 36       	cpi	r24, 0x6C	; 108
 51e:	11 f4       	brne	.+4      	; 0x524 <__stack+0xc5>
 520:	20 68       	ori	r18, 0x80	; 128
 522:	02 c0       	rjmp	.+4      	; 0x528 <__stack+0xc9>
 524:	88 36       	cpi	r24, 0x68	; 104
 526:	41 f4       	brne	.+16     	; 0x538 <__stack+0xd9>
 528:	f6 01       	movw	r30, r12
 52a:	93 fd       	sbrc	r25, 3
 52c:	85 91       	lpm	r24, Z+
 52e:	93 ff       	sbrs	r25, 3
 530:	81 91       	ld	r24, Z+
 532:	6f 01       	movw	r12, r30
 534:	81 11       	cpse	r24, r1
 536:	c1 cf       	rjmp	.-126    	; 0x4ba <__stack+0x5b>
 538:	98 2f       	mov	r25, r24
 53a:	9f 7d       	andi	r25, 0xDF	; 223
 53c:	95 54       	subi	r25, 0x45	; 69
 53e:	93 30       	cpi	r25, 0x03	; 3
 540:	28 f4       	brcc	.+10     	; 0x54c <__stack+0xed>
 542:	0c 5f       	subi	r16, 0xFC	; 252
 544:	1f 4f       	sbci	r17, 0xFF	; 255
 546:	ff e3       	ldi	r31, 0x3F	; 63
 548:	f9 83       	std	Y+1, r31	; 0x01
 54a:	0d c0       	rjmp	.+26     	; 0x566 <__stack+0x107>
 54c:	83 36       	cpi	r24, 0x63	; 99
 54e:	31 f0       	breq	.+12     	; 0x55c <__stack+0xfd>
 550:	83 37       	cpi	r24, 0x73	; 115
 552:	71 f0       	breq	.+28     	; 0x570 <__stack+0x111>
 554:	83 35       	cpi	r24, 0x53	; 83
 556:	09 f0       	breq	.+2      	; 0x55a <__stack+0xfb>
 558:	5b c0       	rjmp	.+182    	; 0x610 <__stack+0x1b1>
 55a:	22 c0       	rjmp	.+68     	; 0x5a0 <__stack+0x141>
 55c:	f8 01       	movw	r30, r16
 55e:	80 81       	ld	r24, Z
 560:	89 83       	std	Y+1, r24	; 0x01
 562:	0e 5f       	subi	r16, 0xFE	; 254
 564:	1f 4f       	sbci	r17, 0xFF	; 255
 566:	44 24       	eor	r4, r4
 568:	43 94       	inc	r4
 56a:	51 2c       	mov	r5, r1
 56c:	54 01       	movw	r10, r8
 56e:	15 c0       	rjmp	.+42     	; 0x59a <__stack+0x13b>
 570:	38 01       	movw	r6, r16
 572:	f2 e0       	ldi	r31, 0x02	; 2
 574:	6f 0e       	add	r6, r31
 576:	71 1c       	adc	r7, r1
 578:	f8 01       	movw	r30, r16
 57a:	a0 80       	ld	r10, Z
 57c:	b1 80       	ldd	r11, Z+1	; 0x01
 57e:	26 ff       	sbrs	r18, 6
 580:	03 c0       	rjmp	.+6      	; 0x588 <__stack+0x129>
 582:	65 2d       	mov	r22, r5
 584:	70 e0       	ldi	r23, 0x00	; 0
 586:	02 c0       	rjmp	.+4      	; 0x58c <__stack+0x12d>
 588:	6f ef       	ldi	r22, 0xFF	; 255
 58a:	7f ef       	ldi	r23, 0xFF	; 255
 58c:	c5 01       	movw	r24, r10
 58e:	2c 87       	std	Y+12, r18	; 0x0c
 590:	0e 94 0c 04 	call	0x818	; 0x818 <strnlen>
 594:	2c 01       	movw	r4, r24
 596:	83 01       	movw	r16, r6
 598:	2c 85       	ldd	r18, Y+12	; 0x0c
 59a:	2f 77       	andi	r18, 0x7F	; 127
 59c:	22 2e       	mov	r2, r18
 59e:	17 c0       	rjmp	.+46     	; 0x5ce <__stack+0x16f>
 5a0:	38 01       	movw	r6, r16
 5a2:	f2 e0       	ldi	r31, 0x02	; 2
 5a4:	6f 0e       	add	r6, r31
 5a6:	71 1c       	adc	r7, r1
 5a8:	f8 01       	movw	r30, r16
 5aa:	a0 80       	ld	r10, Z
 5ac:	b1 80       	ldd	r11, Z+1	; 0x01
 5ae:	26 ff       	sbrs	r18, 6
 5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <__stack+0x159>
 5b2:	65 2d       	mov	r22, r5
 5b4:	70 e0       	ldi	r23, 0x00	; 0
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <__stack+0x15d>
 5b8:	6f ef       	ldi	r22, 0xFF	; 255
 5ba:	7f ef       	ldi	r23, 0xFF	; 255
 5bc:	c5 01       	movw	r24, r10
 5be:	2c 87       	std	Y+12, r18	; 0x0c
 5c0:	0e 94 01 04 	call	0x802	; 0x802 <strnlen_P>
 5c4:	2c 01       	movw	r4, r24
 5c6:	2c 85       	ldd	r18, Y+12	; 0x0c
 5c8:	20 68       	ori	r18, 0x80	; 128
 5ca:	22 2e       	mov	r2, r18
 5cc:	83 01       	movw	r16, r6
 5ce:	23 fc       	sbrc	r2, 3
 5d0:	1b c0       	rjmp	.+54     	; 0x608 <__stack+0x1a9>
 5d2:	83 2d       	mov	r24, r3
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	48 16       	cp	r4, r24
 5d8:	59 06       	cpc	r5, r25
 5da:	b0 f4       	brcc	.+44     	; 0x608 <__stack+0x1a9>
 5dc:	b7 01       	movw	r22, r14
 5de:	80 e2       	ldi	r24, 0x20	; 32
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0e 94 17 04 	call	0x82e	; 0x82e <fputc>
 5e6:	3a 94       	dec	r3
 5e8:	f4 cf       	rjmp	.-24     	; 0x5d2 <__stack+0x173>
 5ea:	f5 01       	movw	r30, r10
 5ec:	27 fc       	sbrc	r2, 7
 5ee:	85 91       	lpm	r24, Z+
 5f0:	27 fe       	sbrs	r2, 7
 5f2:	81 91       	ld	r24, Z+
 5f4:	5f 01       	movw	r10, r30
 5f6:	b7 01       	movw	r22, r14
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	0e 94 17 04 	call	0x82e	; 0x82e <fputc>
 5fe:	31 10       	cpse	r3, r1
 600:	3a 94       	dec	r3
 602:	f1 e0       	ldi	r31, 0x01	; 1
 604:	4f 1a       	sub	r4, r31
 606:	51 08       	sbc	r5, r1
 608:	41 14       	cp	r4, r1
 60a:	51 04       	cpc	r5, r1
 60c:	71 f7       	brne	.-36     	; 0x5ea <__stack+0x18b>
 60e:	e5 c0       	rjmp	.+458    	; 0x7da <__stack+0x37b>
 610:	84 36       	cpi	r24, 0x64	; 100
 612:	11 f0       	breq	.+4      	; 0x618 <__stack+0x1b9>
 614:	89 36       	cpi	r24, 0x69	; 105
 616:	39 f5       	brne	.+78     	; 0x666 <__stack+0x207>
 618:	f8 01       	movw	r30, r16
 61a:	27 ff       	sbrs	r18, 7
 61c:	07 c0       	rjmp	.+14     	; 0x62c <__stack+0x1cd>
 61e:	60 81       	ld	r22, Z
 620:	71 81       	ldd	r23, Z+1	; 0x01
 622:	82 81       	ldd	r24, Z+2	; 0x02
 624:	93 81       	ldd	r25, Z+3	; 0x03
 626:	0c 5f       	subi	r16, 0xFC	; 252
 628:	1f 4f       	sbci	r17, 0xFF	; 255
 62a:	08 c0       	rjmp	.+16     	; 0x63c <__stack+0x1dd>
 62c:	60 81       	ld	r22, Z
 62e:	71 81       	ldd	r23, Z+1	; 0x01
 630:	88 27       	eor	r24, r24
 632:	77 fd       	sbrc	r23, 7
 634:	80 95       	com	r24
 636:	98 2f       	mov	r25, r24
 638:	0e 5f       	subi	r16, 0xFE	; 254
 63a:	1f 4f       	sbci	r17, 0xFF	; 255
 63c:	2f 76       	andi	r18, 0x6F	; 111
 63e:	b2 2e       	mov	r11, r18
 640:	97 ff       	sbrs	r25, 7
 642:	09 c0       	rjmp	.+18     	; 0x656 <__stack+0x1f7>
 644:	90 95       	com	r25
 646:	80 95       	com	r24
 648:	70 95       	com	r23
 64a:	61 95       	neg	r22
 64c:	7f 4f       	sbci	r23, 0xFF	; 255
 64e:	8f 4f       	sbci	r24, 0xFF	; 255
 650:	9f 4f       	sbci	r25, 0xFF	; 255
 652:	20 68       	ori	r18, 0x80	; 128
 654:	b2 2e       	mov	r11, r18
 656:	2a e0       	ldi	r18, 0x0A	; 10
 658:	30 e0       	ldi	r19, 0x00	; 0
 65a:	a4 01       	movw	r20, r8
 65c:	0e 94 49 04 	call	0x892	; 0x892 <__ultoa_invert>
 660:	a8 2e       	mov	r10, r24
 662:	a8 18       	sub	r10, r8
 664:	44 c0       	rjmp	.+136    	; 0x6ee <__stack+0x28f>
 666:	85 37       	cpi	r24, 0x75	; 117
 668:	29 f4       	brne	.+10     	; 0x674 <__stack+0x215>
 66a:	2f 7e       	andi	r18, 0xEF	; 239
 66c:	b2 2e       	mov	r11, r18
 66e:	2a e0       	ldi	r18, 0x0A	; 10
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	25 c0       	rjmp	.+74     	; 0x6be <__stack+0x25f>
 674:	f2 2f       	mov	r31, r18
 676:	f9 7f       	andi	r31, 0xF9	; 249
 678:	bf 2e       	mov	r11, r31
 67a:	8f 36       	cpi	r24, 0x6F	; 111
 67c:	c1 f0       	breq	.+48     	; 0x6ae <__stack+0x24f>
 67e:	18 f4       	brcc	.+6      	; 0x686 <__stack+0x227>
 680:	88 35       	cpi	r24, 0x58	; 88
 682:	79 f0       	breq	.+30     	; 0x6a2 <__stack+0x243>
 684:	b4 c0       	rjmp	.+360    	; 0x7ee <__stack+0x38f>
 686:	80 37       	cpi	r24, 0x70	; 112
 688:	19 f0       	breq	.+6      	; 0x690 <__stack+0x231>
 68a:	88 37       	cpi	r24, 0x78	; 120
 68c:	21 f0       	breq	.+8      	; 0x696 <__stack+0x237>
 68e:	af c0       	rjmp	.+350    	; 0x7ee <__stack+0x38f>
 690:	2f 2f       	mov	r18, r31
 692:	20 61       	ori	r18, 0x10	; 16
 694:	b2 2e       	mov	r11, r18
 696:	b4 fe       	sbrs	r11, 4
 698:	0d c0       	rjmp	.+26     	; 0x6b4 <__stack+0x255>
 69a:	8b 2d       	mov	r24, r11
 69c:	84 60       	ori	r24, 0x04	; 4
 69e:	b8 2e       	mov	r11, r24
 6a0:	09 c0       	rjmp	.+18     	; 0x6b4 <__stack+0x255>
 6a2:	24 ff       	sbrs	r18, 4
 6a4:	0a c0       	rjmp	.+20     	; 0x6ba <__stack+0x25b>
 6a6:	9f 2f       	mov	r25, r31
 6a8:	96 60       	ori	r25, 0x06	; 6
 6aa:	b9 2e       	mov	r11, r25
 6ac:	06 c0       	rjmp	.+12     	; 0x6ba <__stack+0x25b>
 6ae:	28 e0       	ldi	r18, 0x08	; 8
 6b0:	30 e0       	ldi	r19, 0x00	; 0
 6b2:	05 c0       	rjmp	.+10     	; 0x6be <__stack+0x25f>
 6b4:	20 e1       	ldi	r18, 0x10	; 16
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <__stack+0x25f>
 6ba:	20 e1       	ldi	r18, 0x10	; 16
 6bc:	32 e0       	ldi	r19, 0x02	; 2
 6be:	f8 01       	movw	r30, r16
 6c0:	b7 fe       	sbrs	r11, 7
 6c2:	07 c0       	rjmp	.+14     	; 0x6d2 <__stack+0x273>
 6c4:	60 81       	ld	r22, Z
 6c6:	71 81       	ldd	r23, Z+1	; 0x01
 6c8:	82 81       	ldd	r24, Z+2	; 0x02
 6ca:	93 81       	ldd	r25, Z+3	; 0x03
 6cc:	0c 5f       	subi	r16, 0xFC	; 252
 6ce:	1f 4f       	sbci	r17, 0xFF	; 255
 6d0:	06 c0       	rjmp	.+12     	; 0x6de <__stack+0x27f>
 6d2:	60 81       	ld	r22, Z
 6d4:	71 81       	ldd	r23, Z+1	; 0x01
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	0e 5f       	subi	r16, 0xFE	; 254
 6dc:	1f 4f       	sbci	r17, 0xFF	; 255
 6de:	a4 01       	movw	r20, r8
 6e0:	0e 94 49 04 	call	0x892	; 0x892 <__ultoa_invert>
 6e4:	a8 2e       	mov	r10, r24
 6e6:	a8 18       	sub	r10, r8
 6e8:	fb 2d       	mov	r31, r11
 6ea:	ff 77       	andi	r31, 0x7F	; 127
 6ec:	bf 2e       	mov	r11, r31
 6ee:	b6 fe       	sbrs	r11, 6
 6f0:	0b c0       	rjmp	.+22     	; 0x708 <__stack+0x2a9>
 6f2:	2b 2d       	mov	r18, r11
 6f4:	2e 7f       	andi	r18, 0xFE	; 254
 6f6:	a5 14       	cp	r10, r5
 6f8:	50 f4       	brcc	.+20     	; 0x70e <__stack+0x2af>
 6fa:	b4 fe       	sbrs	r11, 4
 6fc:	0a c0       	rjmp	.+20     	; 0x712 <__stack+0x2b3>
 6fe:	b2 fc       	sbrc	r11, 2
 700:	08 c0       	rjmp	.+16     	; 0x712 <__stack+0x2b3>
 702:	2b 2d       	mov	r18, r11
 704:	2e 7e       	andi	r18, 0xEE	; 238
 706:	05 c0       	rjmp	.+10     	; 0x712 <__stack+0x2b3>
 708:	7a 2c       	mov	r7, r10
 70a:	2b 2d       	mov	r18, r11
 70c:	03 c0       	rjmp	.+6      	; 0x714 <__stack+0x2b5>
 70e:	7a 2c       	mov	r7, r10
 710:	01 c0       	rjmp	.+2      	; 0x714 <__stack+0x2b5>
 712:	75 2c       	mov	r7, r5
 714:	24 ff       	sbrs	r18, 4
 716:	0d c0       	rjmp	.+26     	; 0x732 <__stack+0x2d3>
 718:	fe 01       	movw	r30, r28
 71a:	ea 0d       	add	r30, r10
 71c:	f1 1d       	adc	r31, r1
 71e:	80 81       	ld	r24, Z
 720:	80 33       	cpi	r24, 0x30	; 48
 722:	11 f4       	brne	.+4      	; 0x728 <__stack+0x2c9>
 724:	29 7e       	andi	r18, 0xE9	; 233
 726:	09 c0       	rjmp	.+18     	; 0x73a <__stack+0x2db>
 728:	22 ff       	sbrs	r18, 2
 72a:	06 c0       	rjmp	.+12     	; 0x738 <__stack+0x2d9>
 72c:	73 94       	inc	r7
 72e:	73 94       	inc	r7
 730:	04 c0       	rjmp	.+8      	; 0x73a <__stack+0x2db>
 732:	82 2f       	mov	r24, r18
 734:	86 78       	andi	r24, 0x86	; 134
 736:	09 f0       	breq	.+2      	; 0x73a <__stack+0x2db>
 738:	73 94       	inc	r7
 73a:	23 fd       	sbrc	r18, 3
 73c:	13 c0       	rjmp	.+38     	; 0x764 <__stack+0x305>
 73e:	20 ff       	sbrs	r18, 0
 740:	06 c0       	rjmp	.+12     	; 0x74e <__stack+0x2ef>
 742:	5a 2c       	mov	r5, r10
 744:	73 14       	cp	r7, r3
 746:	18 f4       	brcc	.+6      	; 0x74e <__stack+0x2ef>
 748:	53 0c       	add	r5, r3
 74a:	57 18       	sub	r5, r7
 74c:	73 2c       	mov	r7, r3
 74e:	73 14       	cp	r7, r3
 750:	68 f4       	brcc	.+26     	; 0x76c <__stack+0x30d>
 752:	b7 01       	movw	r22, r14
 754:	80 e2       	ldi	r24, 0x20	; 32
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	2c 87       	std	Y+12, r18	; 0x0c
 75a:	0e 94 17 04 	call	0x82e	; 0x82e <fputc>
 75e:	73 94       	inc	r7
 760:	2c 85       	ldd	r18, Y+12	; 0x0c
 762:	f5 cf       	rjmp	.-22     	; 0x74e <__stack+0x2ef>
 764:	73 14       	cp	r7, r3
 766:	10 f4       	brcc	.+4      	; 0x76c <__stack+0x30d>
 768:	37 18       	sub	r3, r7
 76a:	01 c0       	rjmp	.+2      	; 0x76e <__stack+0x30f>
 76c:	31 2c       	mov	r3, r1
 76e:	24 ff       	sbrs	r18, 4
 770:	12 c0       	rjmp	.+36     	; 0x796 <__stack+0x337>
 772:	b7 01       	movw	r22, r14
 774:	80 e3       	ldi	r24, 0x30	; 48
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	2c 87       	std	Y+12, r18	; 0x0c
 77a:	0e 94 17 04 	call	0x82e	; 0x82e <fputc>
 77e:	2c 85       	ldd	r18, Y+12	; 0x0c
 780:	22 ff       	sbrs	r18, 2
 782:	17 c0       	rjmp	.+46     	; 0x7b2 <__stack+0x353>
 784:	21 ff       	sbrs	r18, 1
 786:	03 c0       	rjmp	.+6      	; 0x78e <__stack+0x32f>
 788:	88 e5       	ldi	r24, 0x58	; 88
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	02 c0       	rjmp	.+4      	; 0x792 <__stack+0x333>
 78e:	88 e7       	ldi	r24, 0x78	; 120
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	b7 01       	movw	r22, r14
 794:	0c c0       	rjmp	.+24     	; 0x7ae <__stack+0x34f>
 796:	82 2f       	mov	r24, r18
 798:	86 78       	andi	r24, 0x86	; 134
 79a:	59 f0       	breq	.+22     	; 0x7b2 <__stack+0x353>
 79c:	21 fd       	sbrc	r18, 1
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <__stack+0x345>
 7a0:	80 e2       	ldi	r24, 0x20	; 32
 7a2:	01 c0       	rjmp	.+2      	; 0x7a6 <__stack+0x347>
 7a4:	8b e2       	ldi	r24, 0x2B	; 43
 7a6:	27 fd       	sbrc	r18, 7
 7a8:	8d e2       	ldi	r24, 0x2D	; 45
 7aa:	b7 01       	movw	r22, r14
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	0e 94 17 04 	call	0x82e	; 0x82e <fputc>
 7b2:	a5 14       	cp	r10, r5
 7b4:	38 f4       	brcc	.+14     	; 0x7c4 <__stack+0x365>
 7b6:	b7 01       	movw	r22, r14
 7b8:	80 e3       	ldi	r24, 0x30	; 48
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	0e 94 17 04 	call	0x82e	; 0x82e <fputc>
 7c0:	5a 94       	dec	r5
 7c2:	f7 cf       	rjmp	.-18     	; 0x7b2 <__stack+0x353>
 7c4:	aa 94       	dec	r10
 7c6:	f4 01       	movw	r30, r8
 7c8:	ea 0d       	add	r30, r10
 7ca:	f1 1d       	adc	r31, r1
 7cc:	80 81       	ld	r24, Z
 7ce:	b7 01       	movw	r22, r14
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	0e 94 17 04 	call	0x82e	; 0x82e <fputc>
 7d6:	a1 10       	cpse	r10, r1
 7d8:	f5 cf       	rjmp	.-22     	; 0x7c4 <__stack+0x365>
 7da:	33 20       	and	r3, r3
 7dc:	09 f4       	brne	.+2      	; 0x7e0 <__stack+0x381>
 7de:	51 ce       	rjmp	.-862    	; 0x482 <__stack+0x23>
 7e0:	b7 01       	movw	r22, r14
 7e2:	80 e2       	ldi	r24, 0x20	; 32
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	0e 94 17 04 	call	0x82e	; 0x82e <fputc>
 7ea:	3a 94       	dec	r3
 7ec:	f6 cf       	rjmp	.-20     	; 0x7da <__stack+0x37b>
 7ee:	f7 01       	movw	r30, r14
 7f0:	86 81       	ldd	r24, Z+6	; 0x06
 7f2:	97 81       	ldd	r25, Z+7	; 0x07
 7f4:	02 c0       	rjmp	.+4      	; 0x7fa <__stack+0x39b>
 7f6:	8f ef       	ldi	r24, 0xFF	; 255
 7f8:	9f ef       	ldi	r25, 0xFF	; 255
 7fa:	2c 96       	adiw	r28, 0x0c	; 12
 7fc:	e2 e1       	ldi	r30, 0x12	; 18
 7fe:	0c 94 c3 04 	jmp	0x986	; 0x986 <__epilogue_restores__>

00000802 <strnlen_P>:
 802:	fc 01       	movw	r30, r24
 804:	05 90       	lpm	r0, Z+
 806:	61 50       	subi	r22, 0x01	; 1
 808:	70 40       	sbci	r23, 0x00	; 0
 80a:	01 10       	cpse	r0, r1
 80c:	d8 f7       	brcc	.-10     	; 0x804 <strnlen_P+0x2>
 80e:	80 95       	com	r24
 810:	90 95       	com	r25
 812:	8e 0f       	add	r24, r30
 814:	9f 1f       	adc	r25, r31
 816:	08 95       	ret

00000818 <strnlen>:
 818:	fc 01       	movw	r30, r24
 81a:	61 50       	subi	r22, 0x01	; 1
 81c:	70 40       	sbci	r23, 0x00	; 0
 81e:	01 90       	ld	r0, Z+
 820:	01 10       	cpse	r0, r1
 822:	d8 f7       	brcc	.-10     	; 0x81a <strnlen+0x2>
 824:	80 95       	com	r24
 826:	90 95       	com	r25
 828:	8e 0f       	add	r24, r30
 82a:	9f 1f       	adc	r25, r31
 82c:	08 95       	ret

0000082e <fputc>:
 82e:	0f 93       	push	r16
 830:	1f 93       	push	r17
 832:	cf 93       	push	r28
 834:	df 93       	push	r29
 836:	18 2f       	mov	r17, r24
 838:	09 2f       	mov	r16, r25
 83a:	eb 01       	movw	r28, r22
 83c:	8b 81       	ldd	r24, Y+3	; 0x03
 83e:	81 fd       	sbrc	r24, 1
 840:	03 c0       	rjmp	.+6      	; 0x848 <fputc+0x1a>
 842:	8f ef       	ldi	r24, 0xFF	; 255
 844:	9f ef       	ldi	r25, 0xFF	; 255
 846:	20 c0       	rjmp	.+64     	; 0x888 <fputc+0x5a>
 848:	82 ff       	sbrs	r24, 2
 84a:	10 c0       	rjmp	.+32     	; 0x86c <fputc+0x3e>
 84c:	4e 81       	ldd	r20, Y+6	; 0x06
 84e:	5f 81       	ldd	r21, Y+7	; 0x07
 850:	2c 81       	ldd	r18, Y+4	; 0x04
 852:	3d 81       	ldd	r19, Y+5	; 0x05
 854:	42 17       	cp	r20, r18
 856:	53 07       	cpc	r21, r19
 858:	7c f4       	brge	.+30     	; 0x878 <fputc+0x4a>
 85a:	e8 81       	ld	r30, Y
 85c:	f9 81       	ldd	r31, Y+1	; 0x01
 85e:	9f 01       	movw	r18, r30
 860:	2f 5f       	subi	r18, 0xFF	; 255
 862:	3f 4f       	sbci	r19, 0xFF	; 255
 864:	39 83       	std	Y+1, r19	; 0x01
 866:	28 83       	st	Y, r18
 868:	10 83       	st	Z, r17
 86a:	06 c0       	rjmp	.+12     	; 0x878 <fputc+0x4a>
 86c:	e8 85       	ldd	r30, Y+8	; 0x08
 86e:	f9 85       	ldd	r31, Y+9	; 0x09
 870:	81 2f       	mov	r24, r17
 872:	09 95       	icall
 874:	89 2b       	or	r24, r25
 876:	29 f7       	brne	.-54     	; 0x842 <fputc+0x14>
 878:	2e 81       	ldd	r18, Y+6	; 0x06
 87a:	3f 81       	ldd	r19, Y+7	; 0x07
 87c:	2f 5f       	subi	r18, 0xFF	; 255
 87e:	3f 4f       	sbci	r19, 0xFF	; 255
 880:	3f 83       	std	Y+7, r19	; 0x07
 882:	2e 83       	std	Y+6, r18	; 0x06
 884:	81 2f       	mov	r24, r17
 886:	90 2f       	mov	r25, r16
 888:	df 91       	pop	r29
 88a:	cf 91       	pop	r28
 88c:	1f 91       	pop	r17
 88e:	0f 91       	pop	r16
 890:	08 95       	ret

00000892 <__ultoa_invert>:
 892:	fa 01       	movw	r30, r20
 894:	aa 27       	eor	r26, r26
 896:	28 30       	cpi	r18, 0x08	; 8
 898:	51 f1       	breq	.+84     	; 0x8ee <__ultoa_invert+0x5c>
 89a:	20 31       	cpi	r18, 0x10	; 16
 89c:	81 f1       	breq	.+96     	; 0x8fe <__ultoa_invert+0x6c>
 89e:	e8 94       	clt
 8a0:	6f 93       	push	r22
 8a2:	6e 7f       	andi	r22, 0xFE	; 254
 8a4:	6e 5f       	subi	r22, 0xFE	; 254
 8a6:	7f 4f       	sbci	r23, 0xFF	; 255
 8a8:	8f 4f       	sbci	r24, 0xFF	; 255
 8aa:	9f 4f       	sbci	r25, 0xFF	; 255
 8ac:	af 4f       	sbci	r26, 0xFF	; 255
 8ae:	b1 e0       	ldi	r27, 0x01	; 1
 8b0:	3e d0       	rcall	.+124    	; 0x92e <__ultoa_invert+0x9c>
 8b2:	b4 e0       	ldi	r27, 0x04	; 4
 8b4:	3c d0       	rcall	.+120    	; 0x92e <__ultoa_invert+0x9c>
 8b6:	67 0f       	add	r22, r23
 8b8:	78 1f       	adc	r23, r24
 8ba:	89 1f       	adc	r24, r25
 8bc:	9a 1f       	adc	r25, r26
 8be:	a1 1d       	adc	r26, r1
 8c0:	68 0f       	add	r22, r24
 8c2:	79 1f       	adc	r23, r25
 8c4:	8a 1f       	adc	r24, r26
 8c6:	91 1d       	adc	r25, r1
 8c8:	a1 1d       	adc	r26, r1
 8ca:	6a 0f       	add	r22, r26
 8cc:	71 1d       	adc	r23, r1
 8ce:	81 1d       	adc	r24, r1
 8d0:	91 1d       	adc	r25, r1
 8d2:	a1 1d       	adc	r26, r1
 8d4:	20 d0       	rcall	.+64     	; 0x916 <__ultoa_invert+0x84>
 8d6:	09 f4       	brne	.+2      	; 0x8da <__ultoa_invert+0x48>
 8d8:	68 94       	set
 8da:	3f 91       	pop	r19
 8dc:	2a e0       	ldi	r18, 0x0A	; 10
 8de:	26 9f       	mul	r18, r22
 8e0:	11 24       	eor	r1, r1
 8e2:	30 19       	sub	r19, r0
 8e4:	30 5d       	subi	r19, 0xD0	; 208
 8e6:	31 93       	st	Z+, r19
 8e8:	de f6       	brtc	.-74     	; 0x8a0 <__ultoa_invert+0xe>
 8ea:	cf 01       	movw	r24, r30
 8ec:	08 95       	ret
 8ee:	46 2f       	mov	r20, r22
 8f0:	47 70       	andi	r20, 0x07	; 7
 8f2:	40 5d       	subi	r20, 0xD0	; 208
 8f4:	41 93       	st	Z+, r20
 8f6:	b3 e0       	ldi	r27, 0x03	; 3
 8f8:	0f d0       	rcall	.+30     	; 0x918 <__ultoa_invert+0x86>
 8fa:	c9 f7       	brne	.-14     	; 0x8ee <__ultoa_invert+0x5c>
 8fc:	f6 cf       	rjmp	.-20     	; 0x8ea <__ultoa_invert+0x58>
 8fe:	46 2f       	mov	r20, r22
 900:	4f 70       	andi	r20, 0x0F	; 15
 902:	40 5d       	subi	r20, 0xD0	; 208
 904:	4a 33       	cpi	r20, 0x3A	; 58
 906:	18 f0       	brcs	.+6      	; 0x90e <__ultoa_invert+0x7c>
 908:	49 5d       	subi	r20, 0xD9	; 217
 90a:	31 fd       	sbrc	r19, 1
 90c:	40 52       	subi	r20, 0x20	; 32
 90e:	41 93       	st	Z+, r20
 910:	02 d0       	rcall	.+4      	; 0x916 <__ultoa_invert+0x84>
 912:	a9 f7       	brne	.-22     	; 0x8fe <__ultoa_invert+0x6c>
 914:	ea cf       	rjmp	.-44     	; 0x8ea <__ultoa_invert+0x58>
 916:	b4 e0       	ldi	r27, 0x04	; 4
 918:	a6 95       	lsr	r26
 91a:	97 95       	ror	r25
 91c:	87 95       	ror	r24
 91e:	77 95       	ror	r23
 920:	67 95       	ror	r22
 922:	ba 95       	dec	r27
 924:	c9 f7       	brne	.-14     	; 0x918 <__ultoa_invert+0x86>
 926:	00 97       	sbiw	r24, 0x00	; 0
 928:	61 05       	cpc	r22, r1
 92a:	71 05       	cpc	r23, r1
 92c:	08 95       	ret
 92e:	9b 01       	movw	r18, r22
 930:	ac 01       	movw	r20, r24
 932:	0a 2e       	mov	r0, r26
 934:	06 94       	lsr	r0
 936:	57 95       	ror	r21
 938:	47 95       	ror	r20
 93a:	37 95       	ror	r19
 93c:	27 95       	ror	r18
 93e:	ba 95       	dec	r27
 940:	c9 f7       	brne	.-14     	; 0x934 <__ultoa_invert+0xa2>
 942:	62 0f       	add	r22, r18
 944:	73 1f       	adc	r23, r19
 946:	84 1f       	adc	r24, r20
 948:	95 1f       	adc	r25, r21
 94a:	a0 1d       	adc	r26, r0
 94c:	08 95       	ret

0000094e <__prologue_saves__>:
 94e:	2f 92       	push	r2
 950:	3f 92       	push	r3
 952:	4f 92       	push	r4
 954:	5f 92       	push	r5
 956:	6f 92       	push	r6
 958:	7f 92       	push	r7
 95a:	8f 92       	push	r8
 95c:	9f 92       	push	r9
 95e:	af 92       	push	r10
 960:	bf 92       	push	r11
 962:	cf 92       	push	r12
 964:	df 92       	push	r13
 966:	ef 92       	push	r14
 968:	ff 92       	push	r15
 96a:	0f 93       	push	r16
 96c:	1f 93       	push	r17
 96e:	cf 93       	push	r28
 970:	df 93       	push	r29
 972:	cd b7       	in	r28, 0x3d	; 61
 974:	de b7       	in	r29, 0x3e	; 62
 976:	ca 1b       	sub	r28, r26
 978:	db 0b       	sbc	r29, r27
 97a:	0f b6       	in	r0, 0x3f	; 63
 97c:	f8 94       	cli
 97e:	de bf       	out	0x3e, r29	; 62
 980:	0f be       	out	0x3f, r0	; 63
 982:	cd bf       	out	0x3d, r28	; 61
 984:	09 94       	ijmp

00000986 <__epilogue_restores__>:
 986:	2a 88       	ldd	r2, Y+18	; 0x12
 988:	39 88       	ldd	r3, Y+17	; 0x11
 98a:	48 88       	ldd	r4, Y+16	; 0x10
 98c:	5f 84       	ldd	r5, Y+15	; 0x0f
 98e:	6e 84       	ldd	r6, Y+14	; 0x0e
 990:	7d 84       	ldd	r7, Y+13	; 0x0d
 992:	8c 84       	ldd	r8, Y+12	; 0x0c
 994:	9b 84       	ldd	r9, Y+11	; 0x0b
 996:	aa 84       	ldd	r10, Y+10	; 0x0a
 998:	b9 84       	ldd	r11, Y+9	; 0x09
 99a:	c8 84       	ldd	r12, Y+8	; 0x08
 99c:	df 80       	ldd	r13, Y+7	; 0x07
 99e:	ee 80       	ldd	r14, Y+6	; 0x06
 9a0:	fd 80       	ldd	r15, Y+5	; 0x05
 9a2:	0c 81       	ldd	r16, Y+4	; 0x04
 9a4:	1b 81       	ldd	r17, Y+3	; 0x03
 9a6:	aa 81       	ldd	r26, Y+2	; 0x02
 9a8:	b9 81       	ldd	r27, Y+1	; 0x01
 9aa:	ce 0f       	add	r28, r30
 9ac:	d1 1d       	adc	r29, r1
 9ae:	0f b6       	in	r0, 0x3f	; 63
 9b0:	f8 94       	cli
 9b2:	de bf       	out	0x3e, r29	; 62
 9b4:	0f be       	out	0x3f, r0	; 63
 9b6:	cd bf       	out	0x3d, r28	; 61
 9b8:	ed 01       	movw	r28, r26
 9ba:	08 95       	ret

000009bc <_exit>:
 9bc:	f8 94       	cli

000009be <__stop_program>:
 9be:	ff cf       	rjmp	.-2      	; 0x9be <__stop_program>
