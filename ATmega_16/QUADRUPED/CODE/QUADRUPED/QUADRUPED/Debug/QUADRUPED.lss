
QUADRUPED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000142a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000147e  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 000000d0  00000000  00000000  000014ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00001b84  00000000  00000000  0000157e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000312  00000000  00000000  00003102  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000645  00000000  00000000  00003414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000003dc  00000000  00000000  00003a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000289  00000000  00000000  00003e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001972  00000000  00000000  000040c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000c0  00000000  00000000  00005a33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e2       	ldi	r30, 0x2A	; 42
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 36       	cpi	r26, 0x60	; 96
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a0 e6       	ldi	r26, 0x60	; 96
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 36       	cpi	r26, 0x60	; 96
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 67 07 	call	0xece	; 0xece <main>
      8a:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_write>:
	,{255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 249, 240, 245, 255, 248, 250, 248, 248, 249, 254, 224, 199, 205, 204, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 204, 205, 198, 240, 254, 249, 249, 248, 249, 252, 255, 244, 240, 249, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}
	,{}							
*/};
void lcd_write(int cd, char byte)//SPI 4Line
{
	clrb(LCD_PORT,CS);
      92:	ac 98       	cbi	0x15, 4	; 21
	if(cd)
      94:	89 2b       	or	r24, r25
      96:	11 f0       	breq	.+4      	; 0x9c <lcd_write+0xa>
	setb(LCD_PORT,AO);
      98:	ae 9a       	sbi	0x15, 6	; 21
      9a:	13 c0       	rjmp	.+38     	; 0xc2 <lcd_write+0x30>
	else
	clrb(LCD_PORT,AO);
      9c:	ae 98       	cbi	0x15, 6	; 21
      9e:	11 c0       	rjmp	.+34     	; 0xc2 <lcd_write+0x30>
	for(int h=0;h<8;h++)
	{
		if(!(byte&0x80))
      a0:	66 23       	and	r22, r22
      a2:	14 f0       	brlt	.+4      	; 0xa8 <lcd_write+0x16>
		clrb(LCD_PORT,SDA);
      a4:	ad 98       	cbi	0x15, 5	; 21
      a6:	01 c0       	rjmp	.+2      	; 0xaa <lcd_write+0x18>
		else
		setb(LCD_PORT,SDA);
      a8:	ad 9a       	sbi	0x15, 5	; 21
		clrb(LCD_PORT,SCK);
      aa:	af 98       	cbi	0x15, 7	; 21
		setb(LCD_PORT,SCK);
      ac:	af 9a       	sbi	0x15, 7	; 21
		byte<<=1;
      ae:	66 0f       	add	r22, r22
      b0:	01 97       	sbiw	r24, 0x01	; 1
	clrb(LCD_PORT,CS);
	if(cd)
	setb(LCD_PORT,AO);
	else
	clrb(LCD_PORT,AO);
	for(int h=0;h<8;h++)
      b2:	00 97       	sbiw	r24, 0x00	; 0
      b4:	a9 f7       	brne	.-22     	; 0xa0 <lcd_write+0xe>
		setb(LCD_PORT,SDA);
		clrb(LCD_PORT,SCK);
		setb(LCD_PORT,SCK);
		byte<<=1;
	}
	daobit(LCD_PORT,AO);
      b6:	95 b3       	in	r25, 0x15	; 21
      b8:	80 e4       	ldi	r24, 0x40	; 64
      ba:	89 27       	eor	r24, r25
      bc:	85 bb       	out	0x15, r24	; 21
	clrb(LCD_PORT,CS);
      be:	ac 98       	cbi	0x15, 4	; 21
      c0:	08 95       	ret
	,{255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 159, 159, 159, 30, 60, 253, 250, 114, 245, 165, 171, 171, 87, 87, 47, 175, 175, 87, 87, 87, 171, 171, 165, 117, 114, 248, 253, 60, 158, 159, 159, 159, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}
	,{255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 249, 240, 245, 255, 248, 250, 248, 248, 249, 254, 224, 199, 205, 204, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 204, 205, 198, 240, 254, 249, 249, 248, 249, 252, 255, 244, 240, 249, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}
	,{}							
*/};
void lcd_write(int cd, char byte)//SPI 4Line
{
      c2:	88 e0       	ldi	r24, 0x08	; 8
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	ec cf       	rjmp	.-40     	; 0xa0 <lcd_write+0xe>

000000c8 <move_LCD>:
	}
	daobit(LCD_PORT,AO);
	clrb(LCD_PORT,CS);
}
void move_LCD(unsigned char x, unsigned char y)
{
      c8:	cf 93       	push	r28
      ca:	df 93       	push	r29
      cc:	d8 2f       	mov	r29, r24
	y--;
      ce:	61 50       	subi	r22, 0x01	; 1
	x--;
	y=y*6;//Graphic Mode thi xoa dong nay di, Text thi de lai
      d0:	c6 2f       	mov	r28, r22
      d2:	cc 0f       	add	r28, r28
      d4:	c6 0f       	add	r28, r22
      d6:	cc 0f       	add	r28, r28
	lcd_write(0,(y&0x0f));
      d8:	6c 2f       	mov	r22, r28
      da:	6f 70       	andi	r22, 0x0F	; 15
      dc:	80 e0       	ldi	r24, 0x00	; 0
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
	lcd_write(0,((y>>4)&0x07)|0x10);
      e4:	6c 2f       	mov	r22, r28
      e6:	62 95       	swap	r22
      e8:	6f 70       	andi	r22, 0x0F	; 15
      ea:	67 70       	andi	r22, 0x07	; 7
      ec:	60 61       	ori	r22, 0x10	; 16
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
	clrb(LCD_PORT,CS);
}
void move_LCD(unsigned char x, unsigned char y)
{
	y--;
	x--;
      f6:	6f ef       	ldi	r22, 0xFF	; 255
      f8:	6d 0f       	add	r22, r29
	y=y*6;//Graphic Mode thi xoa dong nay di, Text thi de lai
	lcd_write(0,(y&0x0f));
	lcd_write(0,((y>>4)&0x07)|0x10);
	lcd_write(0,(x&0x0f)|0xb0);
      fa:	6f 70       	andi	r22, 0x0F	; 15
      fc:	60 6b       	ori	r22, 0xB0	; 176
      fe:	80 e0       	ldi	r24, 0x00	; 0
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
}
     106:	df 91       	pop	r29
     108:	cf 91       	pop	r28
     10a:	08 95       	ret

0000010c <clr_LCD>:
void clr_LCD()
{
     10c:	ff 92       	push	r15
     10e:	0f 93       	push	r16
     110:	1f 93       	push	r17
     112:	cf 93       	push	r28
     114:	df 93       	push	r29
     116:	11 e0       	ldi	r17, 0x01	; 1
	for(int u=0;u<8;u++)
	{
		move_LCD(u+1,1);
     118:	0f 2e       	mov	r0, r31
     11a:	f2 e8       	ldi	r31, 0x82	; 130
     11c:	ff 2e       	mov	r15, r31
     11e:	f0 2d       	mov	r31, r0
     120:	00 e0       	ldi	r16, 0x00	; 0
     122:	61 e0       	ldi	r22, 0x01	; 1
     124:	81 2f       	mov	r24, r17
     126:	0e 94 64 00 	call	0xc8	; 0xc8 <move_LCD>
     12a:	cf 2d       	mov	r28, r15
     12c:	d0 2f       	mov	r29, r16
		for(int w=0;w<130;w++)
		{
			lcd_write(1,0);
     12e:	60 e0       	ldi	r22, 0x00	; 0
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
     138:	21 97       	sbiw	r28, 0x01	; 1
void clr_LCD()
{
	for(int u=0;u<8;u++)
	{
		move_LCD(u+1,1);
		for(int w=0;w<130;w++)
     13a:	20 97       	sbiw	r28, 0x00	; 0
     13c:	c1 f7       	brne	.-16     	; 0x12e <clr_LCD+0x22>
     13e:	1f 5f       	subi	r17, 0xFF	; 255
	lcd_write(0,((y>>4)&0x07)|0x10);
	lcd_write(0,(x&0x0f)|0xb0);
}
void clr_LCD()
{
	for(int u=0;u<8;u++)
     140:	19 30       	cpi	r17, 0x09	; 9
     142:	79 f7       	brne	.-34     	; 0x122 <clr_LCD+0x16>
		for(int w=0;w<130;w++)
		{
			lcd_write(1,0);
		}
	}
	move_LCD(1,1);
     144:	61 e0       	ldi	r22, 0x01	; 1
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	0e 94 64 00 	call	0xc8	; 0xc8 <move_LCD>
}
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	1f 91       	pop	r17
     152:	0f 91       	pop	r16
     154:	ff 90       	pop	r15
     156:	08 95       	ret

00000158 <init_LCD>:
	while(*s)
	lcd_putchar(*s++);
}
void init_LCD()//Khoi tao GLCD
{
	LCD_DDR=0xFF;
     158:	8f ef       	ldi	r24, 0xFF	; 255
     15a:	84 bb       	out	0x14, r24	; 20
	lcd_write(0,0xE2); //Reset
     15c:	62 ee       	ldi	r22, 0xE2	; 226
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
     166:	88 ee       	ldi	r24, 0xE8	; 232
     168:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     16a:	20 e9       	ldi	r18, 0x90	; 144
     16c:	31 e0       	ldi	r19, 0x01	; 1
     16e:	f9 01       	movw	r30, r18
     170:	31 97       	sbiw	r30, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <init_LCD+0x18>
     174:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     176:	00 97       	sbiw	r24, 0x00	; 0
     178:	d1 f7       	brne	.-12     	; 0x16e <init_LCD+0x16>
	_delay_ms(100);	   //Delay 100ms
	lcd_write(0,0xAF); //Display ON, 0xAE - OFF
     17a:	6f ea       	ldi	r22, 0xAF	; 175
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
	lcd_write(0,0x2F); //Power control
     184:	6f e2       	ldi	r22, 0x2F	; 47
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
	clr_LCD(); //Xoa man hinh
     18e:	0e 94 86 00 	call	0x10c	; 0x10c <clr_LCD>
     192:	08 95       	ret

00000194 <servo_0>:
void init_QUADRUPED()
{
	SERVO_DDR=0xFF;
}
void servo_0(int leg,float goc)
{
     194:	4f 92       	push	r4
     196:	5f 92       	push	r5
     198:	6f 92       	push	r6
     19a:	7f 92       	push	r7
     19c:	8f 92       	push	r8
     19e:	9f 92       	push	r9
     1a0:	af 92       	push	r10
     1a2:	bf 92       	push	r11
     1a4:	cf 92       	push	r12
     1a6:	df 92       	push	r13
     1a8:	ef 92       	push	r14
     1aa:	ff 92       	push	r15
     1ac:	0f 93       	push	r16
     1ae:	1f 93       	push	r17
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
     1b4:	c8 2f       	mov	r28, r24
     1b6:	cb 01       	movw	r24, r22
     1b8:	ba 01       	movw	r22, r20
	goc=11*goc+500;
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	40 e3       	ldi	r20, 0x30	; 48
     1c0:	51 e4       	ldi	r21, 0x41	; 65
     1c2:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__mulsf3>
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	4a ef       	ldi	r20, 0xFA	; 250
     1cc:	53 e4       	ldi	r21, 0x43	; 67
     1ce:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__addsf3>
     1d2:	6b 01       	movw	r12, r22
     1d4:	7c 01       	movw	r14, r24
	setb(SERVO_PORT,leg);
     1d6:	8b b3       	in	r24, 0x1b	; 27
     1d8:	21 e0       	ldi	r18, 0x01	; 1
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	a9 01       	movw	r20, r18
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <servo_0+0x50>
     1e0:	44 0f       	add	r20, r20
     1e2:	55 1f       	adc	r21, r21
     1e4:	ca 95       	dec	r28
     1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <servo_0+0x4c>
     1e8:	ea 01       	movw	r28, r20
     1ea:	84 2b       	or	r24, r20
     1ec:	8b bb       	out	0x1b, r24	; 27
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     1ee:	2b ea       	ldi	r18, 0xAB	; 171
     1f0:	3a ea       	ldi	r19, 0xAA	; 170
     1f2:	4a ea       	ldi	r20, 0xAA	; 170
     1f4:	50 e4       	ldi	r21, 0x40	; 64
     1f6:	c7 01       	movw	r24, r14
     1f8:	b6 01       	movw	r22, r12
     1fa:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__mulsf3>
     1fe:	4b 01       	movw	r8, r22
     200:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
     202:	20 e0       	ldi	r18, 0x00	; 0
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	40 e8       	ldi	r20, 0x80	; 128
     208:	5f e3       	ldi	r21, 0x3F	; 63
     20a:	0e 94 12 08 	call	0x1024	; 0x1024 <__cmpsf2>
     20e:	88 23       	and	r24, r24
     210:	0c f4       	brge	.+2      	; 0x214 <servo_0+0x80>
     212:	72 c0       	rjmp	.+228    	; 0x2f8 <servo_0+0x164>

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
     214:	20 e0       	ldi	r18, 0x00	; 0
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	40 e8       	ldi	r20, 0x80	; 128
     21a:	50 e4       	ldi	r21, 0x40	; 64
     21c:	c7 01       	movw	r24, r14
     21e:	b6 01       	movw	r22, r12
     220:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__mulsf3>
     224:	2b 01       	movw	r4, r22
     226:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
     228:	20 e0       	ldi	r18, 0x00	; 0
     22a:	3f ef       	ldi	r19, 0xFF	; 255
     22c:	4f e7       	ldi	r20, 0x7F	; 127
     22e:	57 e4       	ldi	r21, 0x47	; 71
     230:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__gesf2>
     234:	18 16       	cp	r1, r24
     236:	0c f0       	brlt	.+2      	; 0x23a <servo_0+0xa6>
     238:	47 c0       	rjmp	.+142    	; 0x2c8 <servo_0+0x134>
	{
		_delay_ms(__us / 1000.0);
     23a:	20 e0       	ldi	r18, 0x00	; 0
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	4a e7       	ldi	r20, 0x7A	; 122
     240:	54 e4       	ldi	r21, 0x44	; 68
     242:	c7 01       	movw	r24, r14
     244:	b6 01       	movw	r22, r12
     246:	0e 94 16 08 	call	0x102c	; 0x102c <__divsf3>
     24a:	2b 01       	movw	r4, r22
     24c:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     24e:	20 e0       	ldi	r18, 0x00	; 0
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	4a e7       	ldi	r20, 0x7A	; 122
     254:	55 e4       	ldi	r21, 0x45	; 69
     256:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__mulsf3>
     25a:	4b 01       	movw	r8, r22
     25c:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
     25e:	20 e0       	ldi	r18, 0x00	; 0
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	40 e8       	ldi	r20, 0x80	; 128
     264:	5f e3       	ldi	r21, 0x3F	; 63
     266:	0e 94 12 08 	call	0x1024	; 0x1024 <__cmpsf2>
     26a:	88 23       	and	r24, r24
     26c:	3c f1       	brlt	.+78     	; 0x2bc <servo_0+0x128>
		__ticks = 1;
	else if (__tmp > 65535)
     26e:	20 e0       	ldi	r18, 0x00	; 0
     270:	3f ef       	ldi	r19, 0xFF	; 255
     272:	4f e7       	ldi	r20, 0x7F	; 127
     274:	57 e4       	ldi	r21, 0x47	; 71
     276:	c5 01       	movw	r24, r10
     278:	b4 01       	movw	r22, r8
     27a:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__gesf2>
     27e:	18 16       	cp	r1, r24
     280:	c4 f4       	brge	.+48     	; 0x2b2 <servo_0+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     282:	20 e0       	ldi	r18, 0x00	; 0
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	40 e2       	ldi	r20, 0x20	; 32
     288:	51 e4       	ldi	r21, 0x41	; 65
     28a:	c3 01       	movw	r24, r6
     28c:	b2 01       	movw	r22, r4
     28e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__mulsf3>
     292:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__fixunssfsi>
		while(__ticks)
     296:	61 15       	cp	r22, r1
     298:	71 05       	cpc	r23, r1
     29a:	79 f1       	breq	.+94     	; 0x2fa <servo_0+0x166>
     29c:	20 e9       	ldi	r18, 0x90	; 144
     29e:	31 e0       	ldi	r19, 0x01	; 1
     2a0:	c9 01       	movw	r24, r18
     2a2:	01 97       	sbiw	r24, 0x01	; 1
     2a4:	f1 f7       	brne	.-4      	; 0x2a2 <servo_0+0x10e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2a6:	61 50       	subi	r22, 0x01	; 1
     2a8:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2aa:	61 15       	cp	r22, r1
     2ac:	71 05       	cpc	r23, r1
     2ae:	c1 f7       	brne	.-16     	; 0x2a0 <servo_0+0x10c>
     2b0:	24 c0       	rjmp	.+72     	; 0x2fa <servo_0+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2b2:	c5 01       	movw	r24, r10
     2b4:	b4 01       	movw	r22, r8
     2b6:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__fixunssfsi>
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <servo_0+0x12c>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     2bc:	61 e0       	ldi	r22, 0x01	; 1
     2be:	70 e0       	ldi	r23, 0x00	; 0
     2c0:	cb 01       	movw	r24, r22
     2c2:	01 97       	sbiw	r24, 0x01	; 1
     2c4:	f1 f7       	brne	.-4      	; 0x2c2 <servo_0+0x12e>
     2c6:	19 c0       	rjmp	.+50     	; 0x2fa <servo_0+0x166>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     2c8:	20 e0       	ldi	r18, 0x00	; 0
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	4f e7       	ldi	r20, 0x7F	; 127
     2ce:	53 e4       	ldi	r21, 0x43	; 67
     2d0:	c5 01       	movw	r24, r10
     2d2:	b4 01       	movw	r22, r8
     2d4:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__gesf2>
     2d8:	18 16       	cp	r1, r24
     2da:	44 f4       	brge	.+16     	; 0x2ec <servo_0+0x158>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     2dc:	c3 01       	movw	r24, r6
     2de:	b2 01       	movw	r22, r4
     2e0:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__fixunssfsi>
     2e4:	cb 01       	movw	r24, r22
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <servo_0+0x152>
     2ea:	09 c0       	rjmp	.+18     	; 0x2fe <servo_0+0x16a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     2ec:	c5 01       	movw	r24, r10
     2ee:	b4 01       	movw	r22, r8
     2f0:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__fixunssfsi>
     2f4:	06 2f       	mov	r16, r22
     2f6:	01 c0       	rjmp	.+2      	; 0x2fa <servo_0+0x166>
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     2f8:	01 e0       	ldi	r16, 0x01	; 1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2fa:	0a 95       	dec	r16
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <servo_0+0x166>
	_delay_us(goc);
	clrb(SERVO_PORT,leg);
     2fe:	8b b3       	in	r24, 0x1b	; 27
     300:	c0 95       	com	r28
     302:	c8 23       	and	r28, r24
     304:	cb bb       	out	0x1b, r28	; 27
	_delay_us(20000-goc);
     306:	a7 01       	movw	r20, r14
     308:	96 01       	movw	r18, r12
     30a:	60 e0       	ldi	r22, 0x00	; 0
     30c:	70 e4       	ldi	r23, 0x40	; 64
     30e:	8c e9       	ldi	r24, 0x9C	; 156
     310:	96 e4       	ldi	r25, 0x46	; 70
     312:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__subsf3>
     316:	6b 01       	movw	r12, r22
     318:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     31a:	2b ea       	ldi	r18, 0xAB	; 171
     31c:	3a ea       	ldi	r19, 0xAA	; 170
     31e:	4a ea       	ldi	r20, 0xAA	; 170
     320:	50 e4       	ldi	r21, 0x40	; 64
     322:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__mulsf3>
     326:	4b 01       	movw	r8, r22
     328:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	40 e8       	ldi	r20, 0x80	; 128
     330:	5f e3       	ldi	r21, 0x3F	; 63
     332:	0e 94 12 08 	call	0x1024	; 0x1024 <__cmpsf2>
     336:	88 23       	and	r24, r24
     338:	0c f4       	brge	.+2      	; 0x33c <servo_0+0x1a8>
     33a:	72 c0       	rjmp	.+228    	; 0x420 <servo_0+0x28c>

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
     33c:	20 e0       	ldi	r18, 0x00	; 0
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	40 e8       	ldi	r20, 0x80	; 128
     342:	50 e4       	ldi	r21, 0x40	; 64
     344:	c7 01       	movw	r24, r14
     346:	b6 01       	movw	r22, r12
     348:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__mulsf3>
     34c:	2b 01       	movw	r4, r22
     34e:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
     350:	20 e0       	ldi	r18, 0x00	; 0
     352:	3f ef       	ldi	r19, 0xFF	; 255
     354:	4f e7       	ldi	r20, 0x7F	; 127
     356:	57 e4       	ldi	r21, 0x47	; 71
     358:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__gesf2>
     35c:	18 16       	cp	r1, r24
     35e:	0c f0       	brlt	.+2      	; 0x362 <servo_0+0x1ce>
     360:	47 c0       	rjmp	.+142    	; 0x3f0 <servo_0+0x25c>
	{
		_delay_ms(__us / 1000.0);
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	4a e7       	ldi	r20, 0x7A	; 122
     368:	54 e4       	ldi	r21, 0x44	; 68
     36a:	c7 01       	movw	r24, r14
     36c:	b6 01       	movw	r22, r12
     36e:	0e 94 16 08 	call	0x102c	; 0x102c <__divsf3>
     372:	4b 01       	movw	r8, r22
     374:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	4a e7       	ldi	r20, 0x7A	; 122
     37c:	55 e4       	ldi	r21, 0x45	; 69
     37e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__mulsf3>
     382:	6b 01       	movw	r12, r22
     384:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	40 e8       	ldi	r20, 0x80	; 128
     38c:	5f e3       	ldi	r21, 0x3F	; 63
     38e:	0e 94 12 08 	call	0x1024	; 0x1024 <__cmpsf2>
     392:	88 23       	and	r24, r24
     394:	3c f1       	brlt	.+78     	; 0x3e4 <servo_0+0x250>
		__ticks = 1;
	else if (__tmp > 65535)
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	3f ef       	ldi	r19, 0xFF	; 255
     39a:	4f e7       	ldi	r20, 0x7F	; 127
     39c:	57 e4       	ldi	r21, 0x47	; 71
     39e:	c7 01       	movw	r24, r14
     3a0:	b6 01       	movw	r22, r12
     3a2:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__gesf2>
     3a6:	18 16       	cp	r1, r24
     3a8:	c4 f4       	brge	.+48     	; 0x3da <servo_0+0x246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3aa:	20 e0       	ldi	r18, 0x00	; 0
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	40 e2       	ldi	r20, 0x20	; 32
     3b0:	51 e4       	ldi	r21, 0x41	; 65
     3b2:	c5 01       	movw	r24, r10
     3b4:	b4 01       	movw	r22, r8
     3b6:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__mulsf3>
     3ba:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__fixunssfsi>
		while(__ticks)
     3be:	61 15       	cp	r22, r1
     3c0:	71 05       	cpc	r23, r1
     3c2:	79 f1       	breq	.+94     	; 0x422 <servo_0+0x28e>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3c4:	20 e9       	ldi	r18, 0x90	; 144
     3c6:	31 e0       	ldi	r19, 0x01	; 1
     3c8:	c9 01       	movw	r24, r18
     3ca:	01 97       	sbiw	r24, 0x01	; 1
     3cc:	f1 f7       	brne	.-4      	; 0x3ca <servo_0+0x236>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3ce:	61 50       	subi	r22, 0x01	; 1
     3d0:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3d2:	61 15       	cp	r22, r1
     3d4:	71 05       	cpc	r23, r1
     3d6:	c1 f7       	brne	.-16     	; 0x3c8 <servo_0+0x234>
     3d8:	24 c0       	rjmp	.+72     	; 0x422 <servo_0+0x28e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3da:	c7 01       	movw	r24, r14
     3dc:	b6 01       	movw	r22, r12
     3de:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__fixunssfsi>
     3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <servo_0+0x254>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     3e4:	61 e0       	ldi	r22, 0x01	; 1
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	cb 01       	movw	r24, r22
     3ea:	01 97       	sbiw	r24, 0x01	; 1
     3ec:	f1 f7       	brne	.-4      	; 0x3ea <servo_0+0x256>
     3ee:	19 c0       	rjmp	.+50     	; 0x422 <servo_0+0x28e>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	4f e7       	ldi	r20, 0x7F	; 127
     3f6:	53 e4       	ldi	r21, 0x43	; 67
     3f8:	c5 01       	movw	r24, r10
     3fa:	b4 01       	movw	r22, r8
     3fc:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__gesf2>
     400:	18 16       	cp	r1, r24
     402:	44 f4       	brge	.+16     	; 0x414 <servo_0+0x280>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     404:	c3 01       	movw	r24, r6
     406:	b2 01       	movw	r22, r4
     408:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__fixunssfsi>
     40c:	cb 01       	movw	r24, r22
     40e:	01 97       	sbiw	r24, 0x01	; 1
     410:	f1 f7       	brne	.-4      	; 0x40e <servo_0+0x27a>
     412:	09 c0       	rjmp	.+18     	; 0x426 <servo_0+0x292>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     414:	c5 01       	movw	r24, r10
     416:	b4 01       	movw	r22, r8
     418:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__fixunssfsi>
     41c:	16 2f       	mov	r17, r22
     41e:	01 c0       	rjmp	.+2      	; 0x422 <servo_0+0x28e>
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     420:	11 e0       	ldi	r17, 0x01	; 1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     422:	1a 95       	dec	r17
     424:	f1 f7       	brne	.-4      	; 0x422 <servo_0+0x28e>
}
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	1f 91       	pop	r17
     42c:	0f 91       	pop	r16
     42e:	ff 90       	pop	r15
     430:	ef 90       	pop	r14
     432:	df 90       	pop	r13
     434:	cf 90       	pop	r12
     436:	bf 90       	pop	r11
     438:	af 90       	pop	r10
     43a:	9f 90       	pop	r9
     43c:	8f 90       	pop	r8
     43e:	7f 90       	pop	r7
     440:	6f 90       	pop	r6
     442:	5f 90       	pop	r5
     444:	4f 90       	pop	r4
     446:	08 95       	ret

00000448 <servo_1>:
void servo_1(int leg,float goc1,int goc2,int goc3)//ham dieu khien 1 chan
{
     448:	4f 92       	push	r4
     44a:	5f 92       	push	r5
     44c:	6f 92       	push	r6
     44e:	7f 92       	push	r7
     450:	8f 92       	push	r8
     452:	9f 92       	push	r9
     454:	af 92       	push	r10
     456:	bf 92       	push	r11
     458:	cf 92       	push	r12
     45a:	df 92       	push	r13
     45c:	ef 92       	push	r14
     45e:	ff 92       	push	r15
     460:	0f 93       	push	r16
     462:	1f 93       	push	r17
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	7c 01       	movw	r14, r24
     46a:	2a 01       	movw	r4, r20
     46c:	3b 01       	movw	r6, r22
     46e:	49 01       	movw	r8, r18
     470:	cf e0       	ldi	r28, 0x0F	; 15
     472:	d0 e0       	ldi	r29, 0x00	; 0
	for(int x=0;x<15;x++)
	{
		servo_0(leg,goc1);
     474:	b3 01       	movw	r22, r6
     476:	a2 01       	movw	r20, r4
     478:	c7 01       	movw	r24, r14
     47a:	0e 94 ca 00 	call	0x194	; 0x194 <servo_0>
     47e:	21 97       	sbiw	r28, 0x01	; 1
	clrb(SERVO_PORT,leg);
	_delay_us(20000-goc);
}
void servo_1(int leg,float goc1,int goc2,int goc3)//ham dieu khien 1 chan
{
	for(int x=0;x<15;x++)
     480:	20 97       	sbiw	r28, 0x00	; 0
     482:	c1 f7       	brne	.-16     	; 0x474 <__stack+0x15>
     484:	cf e0       	ldi	r28, 0x0F	; 15
     486:	d0 e0       	ldi	r29, 0x00	; 0
	{
		servo_0(leg,goc1);
	}
	for(int x=0;x<15;x++)
	{
		servo_0(leg+1,goc2);
     488:	aa 24       	eor	r10, r10
     48a:	97 fc       	sbrc	r9, 7
     48c:	a0 94       	com	r10
     48e:	ba 2c       	mov	r11, r10
     490:	67 01       	movw	r12, r14
     492:	8f ef       	ldi	r24, 0xFF	; 255
     494:	c8 1a       	sub	r12, r24
     496:	d8 0a       	sbc	r13, r24
     498:	c5 01       	movw	r24, r10
     49a:	b4 01       	movw	r22, r8
     49c:	0e 94 ac 08 	call	0x1158	; 0x1158 <__floatsisf>
     4a0:	ab 01       	movw	r20, r22
     4a2:	bc 01       	movw	r22, r24
     4a4:	c6 01       	movw	r24, r12
     4a6:	0e 94 ca 00 	call	0x194	; 0x194 <servo_0>
     4aa:	21 97       	sbiw	r28, 0x01	; 1
{
	for(int x=0;x<15;x++)
	{
		servo_0(leg,goc1);
	}
	for(int x=0;x<15;x++)
     4ac:	20 97       	sbiw	r28, 0x00	; 0
     4ae:	a1 f7       	brne	.-24     	; 0x498 <__stack+0x39>
     4b0:	ca e0       	ldi	r28, 0x0A	; 10
     4b2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		servo_0(leg+1,goc2);
	}
	for(int x=0;x<10;x++)
	{
		servo_0(leg,goc3);
     4b4:	48 01       	movw	r8, r16
     4b6:	aa 24       	eor	r10, r10
     4b8:	97 fc       	sbrc	r9, 7
     4ba:	a0 94       	com	r10
     4bc:	ba 2c       	mov	r11, r10
     4be:	c5 01       	movw	r24, r10
     4c0:	b4 01       	movw	r22, r8
     4c2:	0e 94 ac 08 	call	0x1158	; 0x1158 <__floatsisf>
     4c6:	ab 01       	movw	r20, r22
     4c8:	bc 01       	movw	r22, r24
     4ca:	c7 01       	movw	r24, r14
     4cc:	0e 94 ca 00 	call	0x194	; 0x194 <servo_0>
     4d0:	21 97       	sbiw	r28, 0x01	; 1
	}
	for(int x=0;x<15;x++)
	{
		servo_0(leg+1,goc2);
	}
	for(int x=0;x<10;x++)
     4d2:	20 97       	sbiw	r28, 0x00	; 0
     4d4:	a1 f7       	brne	.-24     	; 0x4be <__stack+0x5f>
	{
		servo_0(leg,goc3);
	}		
}
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	1f 91       	pop	r17
     4dc:	0f 91       	pop	r16
     4de:	ff 90       	pop	r15
     4e0:	ef 90       	pop	r14
     4e2:	df 90       	pop	r13
     4e4:	cf 90       	pop	r12
     4e6:	bf 90       	pop	r11
     4e8:	af 90       	pop	r10
     4ea:	9f 90       	pop	r9
     4ec:	8f 90       	pop	r8
     4ee:	7f 90       	pop	r7
     4f0:	6f 90       	pop	r6
     4f2:	5f 90       	pop	r5
     4f4:	4f 90       	pop	r4
     4f6:	08 95       	ret

000004f8 <servo_2>:
void servo_2(int servo1,float goc1,int servo2,float goc2)
{
     4f8:	2f 92       	push	r2
     4fa:	3f 92       	push	r3
     4fc:	4f 92       	push	r4
     4fe:	5f 92       	push	r5
     500:	6f 92       	push	r6
     502:	7f 92       	push	r7
     504:	8f 92       	push	r8
     506:	9f 92       	push	r9
     508:	af 92       	push	r10
     50a:	bf 92       	push	r11
     50c:	cf 92       	push	r12
     50e:	df 92       	push	r13
     510:	ef 92       	push	r14
     512:	ff 92       	push	r15
     514:	0f 93       	push	r16
     516:	1f 93       	push	r17
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
     520:	27 97       	sbiw	r28, 0x07	; 7
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	de bf       	out	0x3e, r29	; 62
     528:	0f be       	out	0x3f, r0	; 63
     52a:	cd bf       	out	0x3d, r28	; 61
     52c:	a8 2e       	mov	r10, r24
     52e:	cb 01       	movw	r24, r22
     530:	ba 01       	movw	r22, r20
     532:	b2 2e       	mov	r11, r18
     534:	27 01       	movw	r4, r14
     536:	38 01       	movw	r6, r16
	goc1=11*goc1+500;
     538:	20 e0       	ldi	r18, 0x00	; 0
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	40 e3       	ldi	r20, 0x30	; 48
     53e:	51 e4       	ldi	r21, 0x41	; 65
     540:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__mulsf3>
     544:	20 e0       	ldi	r18, 0x00	; 0
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	4a ef       	ldi	r20, 0xFA	; 250
     54a:	53 e4       	ldi	r21, 0x43	; 67
     54c:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__addsf3>
     550:	6b 01       	movw	r12, r22
     552:	7c 01       	movw	r14, r24
	goc2=11*goc2+500;
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	40 e3       	ldi	r20, 0x30	; 48
     55a:	51 e4       	ldi	r21, 0x41	; 65
     55c:	c3 01       	movw	r24, r6
     55e:	b2 01       	movw	r22, r4
     560:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__mulsf3>
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	4a ef       	ldi	r20, 0xFA	; 250
     56a:	53 e4       	ldi	r21, 0x43	; 67
     56c:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__addsf3>
     570:	69 83       	std	Y+1, r22	; 0x01
     572:	7a 83       	std	Y+2, r23	; 0x02
     574:	8b 83       	std	Y+3, r24	; 0x03
     576:	9c 83       	std	Y+4, r25	; 0x04
	setb(SERVO_PORT,servo1);
     578:	2b b3       	in	r18, 0x1b	; 27
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	8c 01       	movw	r16, r24
     580:	02 c0       	rjmp	.+4      	; 0x586 <servo_2+0x8e>
     582:	00 0f       	add	r16, r16
     584:	11 1f       	adc	r17, r17
     586:	aa 94       	dec	r10
     588:	e2 f7       	brpl	.-8      	; 0x582 <servo_2+0x8a>
     58a:	20 2b       	or	r18, r16
     58c:	2b bb       	out	0x1b, r18	; 27
	setb(SERVO_PORT,servo2);
     58e:	2b b3       	in	r18, 0x1b	; 27
     590:	1c 01       	movw	r2, r24
     592:	02 c0       	rjmp	.+4      	; 0x598 <servo_2+0xa0>
     594:	22 0c       	add	r2, r2
     596:	33 1c       	adc	r3, r3
     598:	ba 94       	dec	r11
     59a:	e2 f7       	brpl	.-8      	; 0x594 <servo_2+0x9c>
     59c:	82 2f       	mov	r24, r18
     59e:	82 29       	or	r24, r2
     5a0:	8b bb       	out	0x1b, r24	; 27
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     5a2:	2b ea       	ldi	r18, 0xAB	; 171
     5a4:	3a ea       	ldi	r19, 0xAA	; 170
     5a6:	4a ea       	ldi	r20, 0xAA	; 170
     5a8:	50 e4       	ldi	r21, 0x40	; 64
     5aa:	c7 01       	movw	r24, r14
     5ac:	b6 01       	movw	r22, r12
     5ae:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__mulsf3>
     5b2:	4b 01       	movw	r8, r22
     5b4:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	40 e8       	ldi	r20, 0x80	; 128
     5bc:	5f e3       	ldi	r21, 0x3F	; 63
     5be:	0e 94 12 08 	call	0x1024	; 0x1024 <__cmpsf2>
     5c2:	88 23       	and	r24, r24
     5c4:	0c f4       	brge	.+2      	; 0x5c8 <servo_2+0xd0>
     5c6:	76 c0       	rjmp	.+236    	; 0x6b4 <servo_2+0x1bc>

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	40 e8       	ldi	r20, 0x80	; 128
     5ce:	50 e4       	ldi	r21, 0x40	; 64
     5d0:	c7 01       	movw	r24, r14
     5d2:	b6 01       	movw	r22, r12
     5d4:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__mulsf3>
     5d8:	2b 01       	movw	r4, r22
     5da:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	3f ef       	ldi	r19, 0xFF	; 255
     5e0:	4f e7       	ldi	r20, 0x7F	; 127
     5e2:	57 e4       	ldi	r21, 0x47	; 71
     5e4:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__gesf2>
     5e8:	18 16       	cp	r1, r24
     5ea:	0c f0       	brlt	.+2      	; 0x5ee <servo_2+0xf6>
     5ec:	4b c0       	rjmp	.+150    	; 0x684 <servo_2+0x18c>
	{
		_delay_ms(__us / 1000.0);
     5ee:	20 e0       	ldi	r18, 0x00	; 0
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	4a e7       	ldi	r20, 0x7A	; 122
     5f4:	54 e4       	ldi	r21, 0x44	; 68
     5f6:	c7 01       	movw	r24, r14
     5f8:	b6 01       	movw	r22, r12
     5fa:	0e 94 16 08 	call	0x102c	; 0x102c <__divsf3>
     5fe:	2b 01       	movw	r4, r22
     600:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	4a e7       	ldi	r20, 0x7A	; 122
     608:	55 e4       	ldi	r21, 0x45	; 69
     60a:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__mulsf3>
     60e:	4b 01       	movw	r8, r22
     610:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	40 e8       	ldi	r20, 0x80	; 128
     618:	5f e3       	ldi	r21, 0x3F	; 63
     61a:	0e 94 12 08 	call	0x1024	; 0x1024 <__cmpsf2>
     61e:	88 23       	and	r24, r24
     620:	5c f1       	brlt	.+86     	; 0x678 <servo_2+0x180>
		__ticks = 1;
	else if (__tmp > 65535)
     622:	20 e0       	ldi	r18, 0x00	; 0
     624:	3f ef       	ldi	r19, 0xFF	; 255
     626:	4f e7       	ldi	r20, 0x7F	; 127
     628:	57 e4       	ldi	r21, 0x47	; 71
     62a:	c5 01       	movw	r24, r10
     62c:	b4 01       	movw	r22, r8
     62e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__gesf2>
     632:	18 16       	cp	r1, r24
     634:	e4 f4       	brge	.+56     	; 0x66e <servo_2+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	40 e2       	ldi	r20, 0x20	; 32
     63c:	51 e4       	ldi	r21, 0x41	; 65
     63e:	c3 01       	movw	r24, r6
     640:	b2 01       	movw	r22, r4
     642:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__mulsf3>
     646:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__fixunssfsi>
		while(__ticks)
     64a:	61 15       	cp	r22, r1
     64c:	71 05       	cpc	r23, r1
     64e:	a1 f1       	breq	.+104    	; 0x6b8 <servo_2+0x1c0>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     650:	20 e9       	ldi	r18, 0x90	; 144
     652:	31 e0       	ldi	r19, 0x01	; 1
     654:	5f 81       	ldd	r21, Y+7	; 0x07
     656:	4e 81       	ldd	r20, Y+6	; 0x06
     658:	c9 01       	movw	r24, r18
     65a:	01 97       	sbiw	r24, 0x01	; 1
     65c:	f1 f7       	brne	.-4      	; 0x65a <servo_2+0x162>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     65e:	61 50       	subi	r22, 0x01	; 1
     660:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     662:	61 15       	cp	r22, r1
     664:	71 05       	cpc	r23, r1
     666:	c1 f7       	brne	.-16     	; 0x658 <servo_2+0x160>
     668:	5f 83       	std	Y+7, r21	; 0x07
     66a:	4e 83       	std	Y+6, r20	; 0x06
     66c:	25 c0       	rjmp	.+74     	; 0x6b8 <servo_2+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     66e:	c5 01       	movw	r24, r10
     670:	b4 01       	movw	r22, r8
     672:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__fixunssfsi>
     676:	02 c0       	rjmp	.+4      	; 0x67c <servo_2+0x184>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     678:	61 e0       	ldi	r22, 0x01	; 1
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	cb 01       	movw	r24, r22
     67e:	01 97       	sbiw	r24, 0x01	; 1
     680:	f1 f7       	brne	.-4      	; 0x67e <servo_2+0x186>
     682:	1a c0       	rjmp	.+52     	; 0x6b8 <servo_2+0x1c0>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	4f e7       	ldi	r20, 0x7F	; 127
     68a:	53 e4       	ldi	r21, 0x43	; 67
     68c:	c5 01       	movw	r24, r10
     68e:	b4 01       	movw	r22, r8
     690:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__gesf2>
     694:	18 16       	cp	r1, r24
     696:	44 f4       	brge	.+16     	; 0x6a8 <servo_2+0x1b0>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     698:	c3 01       	movw	r24, r6
     69a:	b2 01       	movw	r22, r4
     69c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__fixunssfsi>
     6a0:	cb 01       	movw	r24, r22
     6a2:	01 97       	sbiw	r24, 0x01	; 1
     6a4:	f1 f7       	brne	.-4      	; 0x6a2 <servo_2+0x1aa>
     6a6:	0b c0       	rjmp	.+22     	; 0x6be <servo_2+0x1c6>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     6a8:	c5 01       	movw	r24, r10
     6aa:	b4 01       	movw	r22, r8
     6ac:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__fixunssfsi>
     6b0:	6f 83       	std	Y+7, r22	; 0x07
     6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <servo_2+0x1c0>
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	8f 83       	std	Y+7, r24	; 0x07
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6b8:	8f 81       	ldd	r24, Y+7	; 0x07
     6ba:	8a 95       	dec	r24
     6bc:	f1 f7       	brne	.-4      	; 0x6ba <servo_2+0x1c2>
	_delay_us(goc1);
	clrb(SERVO_PORT,servo1);
     6be:	8b b3       	in	r24, 0x1b	; 27
     6c0:	00 95       	com	r16
     6c2:	08 23       	and	r16, r24
     6c4:	0b bb       	out	0x1b, r16	; 27
	_delay_us(goc2-goc1);
     6c6:	a7 01       	movw	r20, r14
     6c8:	96 01       	movw	r18, r12
     6ca:	69 81       	ldd	r22, Y+1	; 0x01
     6cc:	7a 81       	ldd	r23, Y+2	; 0x02
     6ce:	8b 81       	ldd	r24, Y+3	; 0x03
     6d0:	9c 81       	ldd	r25, Y+4	; 0x04
     6d2:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__subsf3>
     6d6:	6b 01       	movw	r12, r22
     6d8:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     6da:	2b ea       	ldi	r18, 0xAB	; 171
     6dc:	3a ea       	ldi	r19, 0xAA	; 170
     6de:	4a ea       	ldi	r20, 0xAA	; 170
     6e0:	50 e4       	ldi	r21, 0x40	; 64
     6e2:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__mulsf3>
     6e6:	4b 01       	movw	r8, r22
     6e8:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
     6ea:	20 e0       	ldi	r18, 0x00	; 0
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	40 e8       	ldi	r20, 0x80	; 128
     6f0:	5f e3       	ldi	r21, 0x3F	; 63
     6f2:	0e 94 12 08 	call	0x1024	; 0x1024 <__cmpsf2>
     6f6:	88 23       	and	r24, r24
     6f8:	0c f4       	brge	.+2      	; 0x6fc <servo_2+0x204>
     6fa:	74 c0       	rjmp	.+232    	; 0x7e4 <servo_2+0x2ec>

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	40 e8       	ldi	r20, 0x80	; 128
     702:	50 e4       	ldi	r21, 0x40	; 64
     704:	c7 01       	movw	r24, r14
     706:	b6 01       	movw	r22, r12
     708:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__mulsf3>
     70c:	2b 01       	movw	r4, r22
     70e:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	3f ef       	ldi	r19, 0xFF	; 255
     714:	4f e7       	ldi	r20, 0x7F	; 127
     716:	57 e4       	ldi	r21, 0x47	; 71
     718:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__gesf2>
     71c:	18 16       	cp	r1, r24
     71e:	0c f0       	brlt	.+2      	; 0x722 <servo_2+0x22a>
     720:	49 c0       	rjmp	.+146    	; 0x7b4 <servo_2+0x2bc>
	{
		_delay_ms(__us / 1000.0);
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	4a e7       	ldi	r20, 0x7A	; 122
     728:	54 e4       	ldi	r21, 0x44	; 68
     72a:	c7 01       	movw	r24, r14
     72c:	b6 01       	movw	r22, r12
     72e:	0e 94 16 08 	call	0x102c	; 0x102c <__divsf3>
     732:	4b 01       	movw	r8, r22
     734:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	4a e7       	ldi	r20, 0x7A	; 122
     73c:	55 e4       	ldi	r21, 0x45	; 69
     73e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__mulsf3>
     742:	6b 01       	movw	r12, r22
     744:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	40 e8       	ldi	r20, 0x80	; 128
     74c:	5f e3       	ldi	r21, 0x3F	; 63
     74e:	0e 94 12 08 	call	0x1024	; 0x1024 <__cmpsf2>
     752:	88 23       	and	r24, r24
     754:	4c f1       	brlt	.+82     	; 0x7a8 <servo_2+0x2b0>
		__ticks = 1;
	else if (__tmp > 65535)
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	3f ef       	ldi	r19, 0xFF	; 255
     75a:	4f e7       	ldi	r20, 0x7F	; 127
     75c:	57 e4       	ldi	r21, 0x47	; 71
     75e:	c7 01       	movw	r24, r14
     760:	b6 01       	movw	r22, r12
     762:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__gesf2>
     766:	18 16       	cp	r1, r24
     768:	d4 f4       	brge	.+52     	; 0x79e <servo_2+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	40 e2       	ldi	r20, 0x20	; 32
     770:	51 e4       	ldi	r21, 0x41	; 65
     772:	c5 01       	movw	r24, r10
     774:	b4 01       	movw	r22, r8
     776:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__mulsf3>
     77a:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__fixunssfsi>
		while(__ticks)
     77e:	61 15       	cp	r22, r1
     780:	71 05       	cpc	r23, r1
     782:	91 f1       	breq	.+100    	; 0x7e8 <servo_2+0x2f0>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     784:	20 e9       	ldi	r18, 0x90	; 144
     786:	31 e0       	ldi	r19, 0x01	; 1
     788:	4e 81       	ldd	r20, Y+6	; 0x06
     78a:	c9 01       	movw	r24, r18
     78c:	01 97       	sbiw	r24, 0x01	; 1
     78e:	f1 f7       	brne	.-4      	; 0x78c <servo_2+0x294>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     790:	61 50       	subi	r22, 0x01	; 1
     792:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     794:	61 15       	cp	r22, r1
     796:	71 05       	cpc	r23, r1
     798:	c1 f7       	brne	.-16     	; 0x78a <servo_2+0x292>
     79a:	4e 83       	std	Y+6, r20	; 0x06
     79c:	25 c0       	rjmp	.+74     	; 0x7e8 <servo_2+0x2f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     79e:	c7 01       	movw	r24, r14
     7a0:	b6 01       	movw	r22, r12
     7a2:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__fixunssfsi>
     7a6:	02 c0       	rjmp	.+4      	; 0x7ac <servo_2+0x2b4>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	cb 01       	movw	r24, r22
     7ae:	01 97       	sbiw	r24, 0x01	; 1
     7b0:	f1 f7       	brne	.-4      	; 0x7ae <servo_2+0x2b6>
     7b2:	1a c0       	rjmp	.+52     	; 0x7e8 <servo_2+0x2f0>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	4f e7       	ldi	r20, 0x7F	; 127
     7ba:	53 e4       	ldi	r21, 0x43	; 67
     7bc:	c5 01       	movw	r24, r10
     7be:	b4 01       	movw	r22, r8
     7c0:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__gesf2>
     7c4:	18 16       	cp	r1, r24
     7c6:	44 f4       	brge	.+16     	; 0x7d8 <servo_2+0x2e0>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     7c8:	c3 01       	movw	r24, r6
     7ca:	b2 01       	movw	r22, r4
     7cc:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__fixunssfsi>
     7d0:	cb 01       	movw	r24, r22
     7d2:	01 97       	sbiw	r24, 0x01	; 1
     7d4:	f1 f7       	brne	.-4      	; 0x7d2 <servo_2+0x2da>
     7d6:	0b c0       	rjmp	.+22     	; 0x7ee <servo_2+0x2f6>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     7d8:	c5 01       	movw	r24, r10
     7da:	b4 01       	movw	r22, r8
     7dc:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__fixunssfsi>
     7e0:	6d 83       	std	Y+5, r22	; 0x05
     7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <servo_2+0x2f0>
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     7e4:	e1 e0       	ldi	r30, 0x01	; 1
     7e6:	ed 83       	std	Y+5, r30	; 0x05
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     7e8:	8d 81       	ldd	r24, Y+5	; 0x05
     7ea:	8a 95       	dec	r24
     7ec:	f1 f7       	brne	.-4      	; 0x7ea <servo_2+0x2f2>
	clrb(SERVO_PORT,servo2);
     7ee:	8b b3       	in	r24, 0x1b	; 27
     7f0:	92 2d       	mov	r25, r2
     7f2:	90 95       	com	r25
     7f4:	89 23       	and	r24, r25
     7f6:	8b bb       	out	0x1b, r24	; 27
	_delay_us(20000-goc2);
     7f8:	29 81       	ldd	r18, Y+1	; 0x01
     7fa:	3a 81       	ldd	r19, Y+2	; 0x02
     7fc:	4b 81       	ldd	r20, Y+3	; 0x03
     7fe:	5c 81       	ldd	r21, Y+4	; 0x04
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	70 e4       	ldi	r23, 0x40	; 64
     804:	8c e9       	ldi	r24, 0x9C	; 156
     806:	96 e4       	ldi	r25, 0x46	; 70
     808:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__subsf3>
     80c:	6b 01       	movw	r12, r22
     80e:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     810:	2b ea       	ldi	r18, 0xAB	; 171
     812:	3a ea       	ldi	r19, 0xAA	; 170
     814:	4a ea       	ldi	r20, 0xAA	; 170
     816:	50 e4       	ldi	r21, 0x40	; 64
     818:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__mulsf3>
     81c:	4b 01       	movw	r8, r22
     81e:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	40 e8       	ldi	r20, 0x80	; 128
     826:	5f e3       	ldi	r21, 0x3F	; 63
     828:	0e 94 12 08 	call	0x1024	; 0x1024 <__cmpsf2>
     82c:	88 23       	and	r24, r24
     82e:	0c f4       	brge	.+2      	; 0x832 <servo_2+0x33a>
     830:	74 c0       	rjmp	.+232    	; 0x91a <servo_2+0x422>

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	40 e8       	ldi	r20, 0x80	; 128
     838:	50 e4       	ldi	r21, 0x40	; 64
     83a:	c7 01       	movw	r24, r14
     83c:	b6 01       	movw	r22, r12
     83e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__mulsf3>
     842:	2b 01       	movw	r4, r22
     844:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	3f ef       	ldi	r19, 0xFF	; 255
     84a:	4f e7       	ldi	r20, 0x7F	; 127
     84c:	57 e4       	ldi	r21, 0x47	; 71
     84e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__gesf2>
     852:	18 16       	cp	r1, r24
     854:	0c f0       	brlt	.+2      	; 0x858 <servo_2+0x360>
     856:	49 c0       	rjmp	.+146    	; 0x8ea <servo_2+0x3f2>
	{
		_delay_ms(__us / 1000.0);
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	4a e7       	ldi	r20, 0x7A	; 122
     85e:	54 e4       	ldi	r21, 0x44	; 68
     860:	c7 01       	movw	r24, r14
     862:	b6 01       	movw	r22, r12
     864:	0e 94 16 08 	call	0x102c	; 0x102c <__divsf3>
     868:	4b 01       	movw	r8, r22
     86a:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     86c:	20 e0       	ldi	r18, 0x00	; 0
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	4a e7       	ldi	r20, 0x7A	; 122
     872:	55 e4       	ldi	r21, 0x45	; 69
     874:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__mulsf3>
     878:	6b 01       	movw	r12, r22
     87a:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	40 e8       	ldi	r20, 0x80	; 128
     882:	5f e3       	ldi	r21, 0x3F	; 63
     884:	0e 94 12 08 	call	0x1024	; 0x1024 <__cmpsf2>
     888:	88 23       	and	r24, r24
     88a:	4c f1       	brlt	.+82     	; 0x8de <servo_2+0x3e6>
		__ticks = 1;
	else if (__tmp > 65535)
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	3f ef       	ldi	r19, 0xFF	; 255
     890:	4f e7       	ldi	r20, 0x7F	; 127
     892:	57 e4       	ldi	r21, 0x47	; 71
     894:	c7 01       	movw	r24, r14
     896:	b6 01       	movw	r22, r12
     898:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__gesf2>
     89c:	18 16       	cp	r1, r24
     89e:	d4 f4       	brge	.+52     	; 0x8d4 <servo_2+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	40 e2       	ldi	r20, 0x20	; 32
     8a6:	51 e4       	ldi	r21, 0x41	; 65
     8a8:	c5 01       	movw	r24, r10
     8aa:	b4 01       	movw	r22, r8
     8ac:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__mulsf3>
     8b0:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__fixunssfsi>
		while(__ticks)
     8b4:	61 15       	cp	r22, r1
     8b6:	71 05       	cpc	r23, r1
     8b8:	91 f1       	breq	.+100    	; 0x91e <servo_2+0x426>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8ba:	20 e9       	ldi	r18, 0x90	; 144
     8bc:	31 e0       	ldi	r19, 0x01	; 1
     8be:	4e 81       	ldd	r20, Y+6	; 0x06
     8c0:	c9 01       	movw	r24, r18
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	f1 f7       	brne	.-4      	; 0x8c2 <servo_2+0x3ca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8c6:	61 50       	subi	r22, 0x01	; 1
     8c8:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8ca:	61 15       	cp	r22, r1
     8cc:	71 05       	cpc	r23, r1
     8ce:	c1 f7       	brne	.-16     	; 0x8c0 <servo_2+0x3c8>
     8d0:	4e 83       	std	Y+6, r20	; 0x06
     8d2:	25 c0       	rjmp	.+74     	; 0x91e <servo_2+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8d4:	c7 01       	movw	r24, r14
     8d6:	b6 01       	movw	r22, r12
     8d8:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__fixunssfsi>
     8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <servo_2+0x3ea>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     8de:	61 e0       	ldi	r22, 0x01	; 1
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	cb 01       	movw	r24, r22
     8e4:	01 97       	sbiw	r24, 0x01	; 1
     8e6:	f1 f7       	brne	.-4      	; 0x8e4 <servo_2+0x3ec>
     8e8:	1a c0       	rjmp	.+52     	; 0x91e <servo_2+0x426>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	4f e7       	ldi	r20, 0x7F	; 127
     8f0:	53 e4       	ldi	r21, 0x43	; 67
     8f2:	c5 01       	movw	r24, r10
     8f4:	b4 01       	movw	r22, r8
     8f6:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__gesf2>
     8fa:	18 16       	cp	r1, r24
     8fc:	44 f4       	brge	.+16     	; 0x90e <servo_2+0x416>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     8fe:	c3 01       	movw	r24, r6
     900:	b2 01       	movw	r22, r4
     902:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__fixunssfsi>
     906:	cb 01       	movw	r24, r22
     908:	01 97       	sbiw	r24, 0x01	; 1
     90a:	f1 f7       	brne	.-4      	; 0x908 <servo_2+0x410>
     90c:	0b c0       	rjmp	.+22     	; 0x924 <servo_2+0x42c>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     90e:	c5 01       	movw	r24, r10
     910:	b4 01       	movw	r22, r8
     912:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__fixunssfsi>
     916:	6e 83       	std	Y+6, r22	; 0x06
     918:	02 c0       	rjmp	.+4      	; 0x91e <servo_2+0x426>
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     91a:	f1 e0       	ldi	r31, 0x01	; 1
     91c:	fe 83       	std	Y+6, r31	; 0x06
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     91e:	8e 81       	ldd	r24, Y+6	; 0x06
     920:	8a 95       	dec	r24
     922:	f1 f7       	brne	.-4      	; 0x920 <servo_2+0x428>
}
     924:	27 96       	adiw	r28, 0x07	; 7
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	f8 94       	cli
     92a:	de bf       	out	0x3e, r29	; 62
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	cd bf       	out	0x3d, r28	; 61
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	ff 90       	pop	r15
     93a:	ef 90       	pop	r14
     93c:	df 90       	pop	r13
     93e:	cf 90       	pop	r12
     940:	bf 90       	pop	r11
     942:	af 90       	pop	r10
     944:	9f 90       	pop	r9
     946:	8f 90       	pop	r8
     948:	7f 90       	pop	r7
     94a:	6f 90       	pop	r6
     94c:	5f 90       	pop	r5
     94e:	4f 90       	pop	r4
     950:	3f 90       	pop	r3
     952:	2f 90       	pop	r2
     954:	08 95       	ret

00000956 <cungvung>:
void cungvung()
{
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	ca e0       	ldi	r28, 0x0A	; 10
     964:	d0 e0       	ldi	r29, 0x00	; 0
	for(int x=0;x<10;x++)
	{
		servo_2(0,40,2,40);
     966:	e1 2c       	mov	r14, r1
     968:	f1 2c       	mov	r15, r1
     96a:	00 e2       	ldi	r16, 0x20	; 32
     96c:	12 e4       	ldi	r17, 0x42	; 66
     96e:	22 e0       	ldi	r18, 0x02	; 2
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	b8 01       	movw	r22, r16
     974:	a7 01       	movw	r20, r14
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <servo_2>
		servo_2(4,143,6,143);
     97e:	e1 2c       	mov	r14, r1
     980:	f1 2c       	mov	r15, r1
     982:	0f e0       	ldi	r16, 0x0F	; 15
     984:	13 e4       	ldi	r17, 0x43	; 67
     986:	26 e0       	ldi	r18, 0x06	; 6
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	b8 01       	movw	r22, r16
     98c:	a7 01       	movw	r20, r14
     98e:	84 e0       	ldi	r24, 0x04	; 4
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <servo_2>
     996:	21 97       	sbiw	r28, 0x01	; 1
	clrb(SERVO_PORT,servo2);
	_delay_us(20000-goc2);
}
void cungvung()
{
	for(int x=0;x<10;x++)
     998:	20 97       	sbiw	r28, 0x00	; 0
     99a:	29 f7       	brne	.-54     	; 0x966 <cungvung+0x10>
	{
		servo_2(0,40,2,40);
		servo_2(4,143,6,143);
	}
}
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	1f 91       	pop	r17
     9a2:	0f 91       	pop	r16
     9a4:	ff 90       	pop	r15
     9a6:	ef 90       	pop	r14
     9a8:	08 95       	ret

000009aa <dung4chan>:
void dung4chan()
{
     9aa:	ef 92       	push	r14
     9ac:	ff 92       	push	r15
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	c4 e1       	ldi	r28, 0x14	; 20
     9b8:	d0 e0       	ldi	r29, 0x00	; 0
	for (int x=0;x<20;x++)
	{
		servo_2(1,45,3,45);
     9ba:	e1 2c       	mov	r14, r1
     9bc:	f1 2c       	mov	r15, r1
     9be:	04 e3       	ldi	r16, 0x34	; 52
     9c0:	12 e4       	ldi	r17, 0x42	; 66
     9c2:	23 e0       	ldi	r18, 0x03	; 3
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	b8 01       	movw	r22, r16
     9c8:	a7 01       	movw	r20, r14
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <servo_2>
		servo_2(5,135,7,135);
     9d2:	e1 2c       	mov	r14, r1
     9d4:	f1 2c       	mov	r15, r1
     9d6:	07 e0       	ldi	r16, 0x07	; 7
     9d8:	13 e4       	ldi	r17, 0x43	; 67
     9da:	27 e0       	ldi	r18, 0x07	; 7
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	b8 01       	movw	r22, r16
     9e0:	a7 01       	movw	r20, r14
     9e2:	85 e0       	ldi	r24, 0x05	; 5
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <servo_2>
     9ea:	21 97       	sbiw	r28, 0x01	; 1
		servo_2(4,143,6,143);
	}
}
void dung4chan()
{
	for (int x=0;x<20;x++)
     9ec:	20 97       	sbiw	r28, 0x00	; 0
     9ee:	29 f7       	brne	.-54     	; 0x9ba <dung4chan+0x10>
     9f0:	c4 e1       	ldi	r28, 0x14	; 20
     9f2:	d0 e0       	ldi	r29, 0x00	; 0
		servo_2(1,45,3,45);
		servo_2(5,135,7,135);
	}
	for(int x=0;x<20;x++)
	{
		servo_2(0,40,2,40);
     9f4:	e1 2c       	mov	r14, r1
     9f6:	f1 2c       	mov	r15, r1
     9f8:	00 e2       	ldi	r16, 0x20	; 32
     9fa:	12 e4       	ldi	r17, 0x42	; 66
     9fc:	22 e0       	ldi	r18, 0x02	; 2
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <servo_2>
		servo_2(4,143,6,143);
     a0c:	e1 2c       	mov	r14, r1
     a0e:	f1 2c       	mov	r15, r1
     a10:	0f e0       	ldi	r16, 0x0F	; 15
     a12:	13 e4       	ldi	r17, 0x43	; 67
     a14:	26 e0       	ldi	r18, 0x06	; 6
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	b8 01       	movw	r22, r16
     a1a:	a7 01       	movw	r20, r14
     a1c:	84 e0       	ldi	r24, 0x04	; 4
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <servo_2>
     a24:	21 97       	sbiw	r28, 0x01	; 1
	for (int x=0;x<20;x++)
	{
		servo_2(1,45,3,45);
		servo_2(5,135,7,135);
	}
	for(int x=0;x<20;x++)
     a26:	20 97       	sbiw	r28, 0x00	; 0
     a28:	29 f7       	brne	.-54     	; 0x9f4 <dung4chan+0x4a>
	{
		servo_2(0,40,2,40);
		servo_2(4,143,6,143);
	}
}
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	1f 91       	pop	r17
     a30:	0f 91       	pop	r16
     a32:	ff 90       	pop	r15
     a34:	ef 90       	pop	r14
     a36:	08 95       	ret

00000a38 <depa>:
void depa()
{
     a38:	ef 92       	push	r14
     a3a:	ff 92       	push	r15
     a3c:	0f 93       	push	r16
     a3e:	1f 93       	push	r17
     a40:	cf 93       	push	r28
     a42:	df 93       	push	r29
	servo_1(4,110,50,143);//chan 4
     a44:	0f e8       	ldi	r16, 0x8F	; 143
     a46:	10 e0       	ldi	r17, 0x00	; 0
     a48:	22 e3       	ldi	r18, 0x32	; 50
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	6c ed       	ldi	r22, 0xDC	; 220
     a52:	72 e4       	ldi	r23, 0x42	; 66
     a54:	84 e0       	ldi	r24, 0x04	; 4
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	0e 94 24 02 	call	0x448	; 0x448 <servo_1>
	servo_1(6,110,180,143);//chan 6
     a5c:	24 eb       	ldi	r18, 0xB4	; 180
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	6c ed       	ldi	r22, 0xDC	; 220
     a66:	72 e4       	ldi	r23, 0x42	; 66
     a68:	86 e0       	ldi	r24, 0x06	; 6
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	0e 94 24 02 	call	0x448	; 0x448 <servo_1>
	servo_1(4,110,135,143);	//chan 4
     a70:	27 e8       	ldi	r18, 0x87	; 135
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	40 e0       	ldi	r20, 0x00	; 0
     a76:	50 e0       	ldi	r21, 0x00	; 0
     a78:	6c ed       	ldi	r22, 0xDC	; 220
     a7a:	72 e4       	ldi	r23, 0x42	; 66
     a7c:	84 e0       	ldi	r24, 0x04	; 4
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 24 02 	call	0x448	; 0x448 <servo_1>
	servo_1(2,60,90,40);//chan 2
     a84:	08 e2       	ldi	r16, 0x28	; 40
     a86:	10 e0       	ldi	r17, 0x00	; 0
     a88:	2a e5       	ldi	r18, 0x5A	; 90
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	40 e0       	ldi	r20, 0x00	; 0
     a8e:	50 e0       	ldi	r21, 0x00	; 0
     a90:	60 e7       	ldi	r22, 0x70	; 112
     a92:	72 e4       	ldi	r23, 0x42	; 66
     a94:	82 e0       	ldi	r24, 0x02	; 2
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0e 94 24 02 	call	0x448	; 0x448 <servo_1>
     a9c:	ca e0       	ldi	r28, 0x0A	; 10
     a9e:	d0 e0       	ldi	r29, 0x00	; 0
	for(int x=0;x<10;x++)
	{
		servo_2(1,90,3,120);
     aa0:	e1 2c       	mov	r14, r1
     aa2:	f1 2c       	mov	r15, r1
     aa4:	00 ef       	ldi	r16, 0xF0	; 240
     aa6:	12 e4       	ldi	r17, 0x42	; 66
     aa8:	23 e0       	ldi	r18, 0x03	; 3
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	64 eb       	ldi	r22, 0xB4	; 180
     ab2:	72 e4       	ldi	r23, 0x42	; 66
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <servo_2>
		servo_2(5,60,7,90);
     abc:	e1 2c       	mov	r14, r1
     abe:	f1 2c       	mov	r15, r1
     ac0:	04 eb       	ldi	r16, 0xB4	; 180
     ac2:	12 e4       	ldi	r17, 0x42	; 66
     ac4:	27 e0       	ldi	r18, 0x07	; 7
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	40 e0       	ldi	r20, 0x00	; 0
     aca:	50 e0       	ldi	r21, 0x00	; 0
     acc:	60 e7       	ldi	r22, 0x70	; 112
     ace:	72 e4       	ldi	r23, 0x42	; 66
     ad0:	85 e0       	ldi	r24, 0x05	; 5
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <servo_2>
     ad8:	21 97       	sbiw	r28, 0x01	; 1
{
	servo_1(4,110,50,143);//chan 4
	servo_1(6,110,180,143);//chan 6
	servo_1(4,110,135,143);	//chan 4
	servo_1(2,60,90,40);//chan 2
	for(int x=0;x<10;x++)
     ada:	20 97       	sbiw	r28, 0x00	; 0
     adc:	09 f7       	brne	.-62     	; 0xaa0 <depa+0x68>
	{
		servo_2(1,90,3,120);
		servo_2(5,60,7,90);
	}
	cungvung();
     ade:	0e 94 ab 04 	call	0x956	; 0x956 <cungvung>
}
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	08 95       	ret

00000af0 <move>:
void move()
{
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
	//2 chan trai
	servo_1(0,60,10,40);//chan 0
     afc:	08 e2       	ldi	r16, 0x28	; 40
     afe:	10 e0       	ldi	r17, 0x00	; 0
     b00:	2a e0       	ldi	r18, 0x0A	; 10
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	40 e0       	ldi	r20, 0x00	; 0
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e7       	ldi	r22, 0x70	; 112
     b0a:	72 e4       	ldi	r23, 0x42	; 66
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	0e 94 24 02 	call	0x448	; 0x448 <servo_1>
	servo_1(2,70,40,40);//chan 2
     b14:	28 e2       	ldi	r18, 0x28	; 40
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	40 e0       	ldi	r20, 0x00	; 0
     b1a:	50 e0       	ldi	r21, 0x00	; 0
     b1c:	6c e8       	ldi	r22, 0x8C	; 140
     b1e:	72 e4       	ldi	r23, 0x42	; 66
     b20:	82 e0       	ldi	r24, 0x02	; 2
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	0e 94 24 02 	call	0x448	; 0x448 <servo_1>
     b28:	ca e0       	ldi	r28, 0x0A	; 10
     b2a:	d0 e0       	ldi	r29, 0x00	; 0
	for(int x=0;x<10;x++)
	{
		servo_2(1,65,3,105);
     b2c:	e1 2c       	mov	r14, r1
     b2e:	f1 2c       	mov	r15, r1
     b30:	02 ed       	ldi	r16, 0xD2	; 210
     b32:	12 e4       	ldi	r17, 0x42	; 66
     b34:	23 e0       	ldi	r18, 0x03	; 3
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	40 e0       	ldi	r20, 0x00	; 0
     b3a:	50 e0       	ldi	r21, 0x00	; 0
     b3c:	62 e8       	ldi	r22, 0x82	; 130
     b3e:	72 e4       	ldi	r23, 0x42	; 66
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <servo_2>
		servo_2(5,45,7,70);
     b48:	e1 2c       	mov	r14, r1
     b4a:	f1 2c       	mov	r15, r1
     b4c:	0c e8       	ldi	r16, 0x8C	; 140
     b4e:	12 e4       	ldi	r17, 0x42	; 66
     b50:	27 e0       	ldi	r18, 0x07	; 7
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	64 e3       	ldi	r22, 0x34	; 52
     b5a:	72 e4       	ldi	r23, 0x42	; 66
     b5c:	85 e0       	ldi	r24, 0x05	; 5
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <servo_2>
     b64:	21 97       	sbiw	r28, 0x01	; 1
void move()
{
	//2 chan trai
	servo_1(0,60,10,40);//chan 0
	servo_1(2,70,40,40);//chan 2
	for(int x=0;x<10;x++)
     b66:	20 97       	sbiw	r28, 0x00	; 0
     b68:	09 f7       	brne	.-62     	; 0xb2c <move+0x3c>
		servo_2(1,65,3,105);
		servo_2(5,45,7,70);
		/*servo_2(0,45,2,45);
		servo_2(4,135,6,135);*/
	}
	cungvung();
     b6a:	0e 94 ab 04 	call	0x956	; 0x956 <cungvung>
	//2 chan phai
	servo_1(6,110,180,143);//chan 6
     b6e:	0f e8       	ldi	r16, 0x8F	; 143
     b70:	10 e0       	ldi	r17, 0x00	; 0
     b72:	24 eb       	ldi	r18, 0xB4	; 180
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	40 e0       	ldi	r20, 0x00	; 0
     b78:	50 e0       	ldi	r21, 0x00	; 0
     b7a:	6c ed       	ldi	r22, 0xDC	; 220
     b7c:	72 e4       	ldi	r23, 0x42	; 66
     b7e:	86 e0       	ldi	r24, 0x06	; 6
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 24 02 	call	0x448	; 0x448 <servo_1>
	servo_1(4,110,150,143);//chan 4
     b86:	26 e9       	ldi	r18, 0x96	; 150
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	40 e0       	ldi	r20, 0x00	; 0
     b8c:	50 e0       	ldi	r21, 0x00	; 0
     b8e:	6c ed       	ldi	r22, 0xDC	; 220
     b90:	72 e4       	ldi	r23, 0x42	; 66
     b92:	84 e0       	ldi	r24, 0x04	; 4
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	0e 94 24 02 	call	0x448	; 0x448 <servo_1>
     b9a:	ca e0       	ldi	r28, 0x0A	; 10
     b9c:	d0 e0       	ldi	r29, 0x00	; 0
	for(int x=0;x<10;x++)
	{
		servo_2(1,90,3,122);
     b9e:	e1 2c       	mov	r14, r1
     ba0:	f1 2c       	mov	r15, r1
     ba2:	04 ef       	ldi	r16, 0xF4	; 244
     ba4:	12 e4       	ldi	r17, 0x42	; 66
     ba6:	23 e0       	ldi	r18, 0x03	; 3
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	40 e0       	ldi	r20, 0x00	; 0
     bac:	50 e0       	ldi	r21, 0x00	; 0
     bae:	64 eb       	ldi	r22, 0xB4	; 180
     bb0:	72 e4       	ldi	r23, 0x42	; 66
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <servo_2>
		servo_2(5,63,7,90);
     bba:	e1 2c       	mov	r14, r1
     bbc:	f1 2c       	mov	r15, r1
     bbe:	04 eb       	ldi	r16, 0xB4	; 180
     bc0:	12 e4       	ldi	r17, 0x42	; 66
     bc2:	27 e0       	ldi	r18, 0x07	; 7
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	40 e0       	ldi	r20, 0x00	; 0
     bc8:	50 e0       	ldi	r21, 0x00	; 0
     bca:	6c e7       	ldi	r22, 0x7C	; 124
     bcc:	72 e4       	ldi	r23, 0x42	; 66
     bce:	85 e0       	ldi	r24, 0x05	; 5
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <servo_2>
     bd6:	21 97       	sbiw	r28, 0x01	; 1
	}
	cungvung();
	//2 chan phai
	servo_1(6,110,180,143);//chan 6
	servo_1(4,110,150,143);//chan 4
	for(int x=0;x<10;x++)
     bd8:	20 97       	sbiw	r28, 0x00	; 0
     bda:	09 f7       	brne	.-62     	; 0xb9e <move+0xae>
		servo_2(1,90,3,122);
		servo_2(5,63,7,90);
		/*servo_2(0,45,2,45);
		servo_2(4,135,6,135);*/
	}
	cungvung();
     bdc:	0e 94 ab 04 	call	0x956	; 0x956 <cungvung>
}
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	08 95       	ret

00000bee <move2>:
void move2()
{
     bee:	ef 92       	push	r14
     bf0:	ff 92       	push	r15
     bf2:	0f 93       	push	r16
     bf4:	1f 93       	push	r17
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
	//2 chan trai
	servo_1(0,100,10,40);//chan 0
     bfa:	08 e2       	ldi	r16, 0x28	; 40
     bfc:	10 e0       	ldi	r17, 0x00	; 0
     bfe:	2a e0       	ldi	r18, 0x0A	; 10
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	40 e0       	ldi	r20, 0x00	; 0
     c04:	50 e0       	ldi	r21, 0x00	; 0
     c06:	68 ec       	ldi	r22, 0xC8	; 200
     c08:	72 e4       	ldi	r23, 0x42	; 66
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	0e 94 24 02 	call	0x448	; 0x448 <servo_1>
	servo_1(2,110,40,40);//chan 2
     c12:	28 e2       	ldi	r18, 0x28	; 40
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	6c ed       	ldi	r22, 0xDC	; 220
     c1c:	72 e4       	ldi	r23, 0x42	; 66
     c1e:	82 e0       	ldi	r24, 0x02	; 2
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	0e 94 24 02 	call	0x448	; 0x448 <servo_1>
     c26:	ca e0       	ldi	r28, 0x0A	; 10
     c28:	d0 e0       	ldi	r29, 0x00	; 0
	for(int x=0;x<10;x++)
	{
		servo_2(1,65,3,105);
     c2a:	e1 2c       	mov	r14, r1
     c2c:	f1 2c       	mov	r15, r1
     c2e:	02 ed       	ldi	r16, 0xD2	; 210
     c30:	12 e4       	ldi	r17, 0x42	; 66
     c32:	23 e0       	ldi	r18, 0x03	; 3
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	50 e0       	ldi	r21, 0x00	; 0
     c3a:	62 e8       	ldi	r22, 0x82	; 130
     c3c:	72 e4       	ldi	r23, 0x42	; 66
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <servo_2>
		servo_2(5,45,7,70);
     c46:	e1 2c       	mov	r14, r1
     c48:	f1 2c       	mov	r15, r1
     c4a:	0c e8       	ldi	r16, 0x8C	; 140
     c4c:	12 e4       	ldi	r17, 0x42	; 66
     c4e:	27 e0       	ldi	r18, 0x07	; 7
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	40 e0       	ldi	r20, 0x00	; 0
     c54:	50 e0       	ldi	r21, 0x00	; 0
     c56:	64 e3       	ldi	r22, 0x34	; 52
     c58:	72 e4       	ldi	r23, 0x42	; 66
     c5a:	85 e0       	ldi	r24, 0x05	; 5
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <servo_2>
     c62:	21 97       	sbiw	r28, 0x01	; 1
void move2()
{
	//2 chan trai
	servo_1(0,100,10,40);//chan 0
	servo_1(2,110,40,40);//chan 2
	for(int x=0;x<10;x++)
     c64:	20 97       	sbiw	r28, 0x00	; 0
     c66:	09 f7       	brne	.-62     	; 0xc2a <move2+0x3c>
		servo_2(1,65,3,105);
		servo_2(5,45,7,70);
		/*servo_2(0,45,2,45);
		servo_2(4,135,6,135);*/
	}
	cungvung();
     c68:	0e 94 ab 04 	call	0x956	; 0x956 <cungvung>
	//2 chan phai
	servo_1(6,70,180,143);//chan 6
     c6c:	0f e8       	ldi	r16, 0x8F	; 143
     c6e:	10 e0       	ldi	r17, 0x00	; 0
     c70:	24 eb       	ldi	r18, 0xB4	; 180
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	40 e0       	ldi	r20, 0x00	; 0
     c76:	50 e0       	ldi	r21, 0x00	; 0
     c78:	6c e8       	ldi	r22, 0x8C	; 140
     c7a:	72 e4       	ldi	r23, 0x42	; 66
     c7c:	86 e0       	ldi	r24, 0x06	; 6
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 24 02 	call	0x448	; 0x448 <servo_1>
	servo_1(4,70,150,143);//chan 4
     c84:	26 e9       	ldi	r18, 0x96	; 150
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	40 e0       	ldi	r20, 0x00	; 0
     c8a:	50 e0       	ldi	r21, 0x00	; 0
     c8c:	6c e8       	ldi	r22, 0x8C	; 140
     c8e:	72 e4       	ldi	r23, 0x42	; 66
     c90:	84 e0       	ldi	r24, 0x04	; 4
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	0e 94 24 02 	call	0x448	; 0x448 <servo_1>
     c98:	ca e0       	ldi	r28, 0x0A	; 10
     c9a:	d0 e0       	ldi	r29, 0x00	; 0
	for(int x=0;x<10;x++)
	{
		servo_2(1,90,3,122);
     c9c:	e1 2c       	mov	r14, r1
     c9e:	f1 2c       	mov	r15, r1
     ca0:	04 ef       	ldi	r16, 0xF4	; 244
     ca2:	12 e4       	ldi	r17, 0x42	; 66
     ca4:	23 e0       	ldi	r18, 0x03	; 3
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	64 eb       	ldi	r22, 0xB4	; 180
     cae:	72 e4       	ldi	r23, 0x42	; 66
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <servo_2>
		servo_2(5,63,7,90);
     cb8:	e1 2c       	mov	r14, r1
     cba:	f1 2c       	mov	r15, r1
     cbc:	04 eb       	ldi	r16, 0xB4	; 180
     cbe:	12 e4       	ldi	r17, 0x42	; 66
     cc0:	27 e0       	ldi	r18, 0x07	; 7
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	50 e0       	ldi	r21, 0x00	; 0
     cc8:	6c e7       	ldi	r22, 0x7C	; 124
     cca:	72 e4       	ldi	r23, 0x42	; 66
     ccc:	85 e0       	ldi	r24, 0x05	; 5
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <servo_2>
     cd4:	21 97       	sbiw	r28, 0x01	; 1
	}
	cungvung();
	//2 chan phai
	servo_1(6,70,180,143);//chan 6
	servo_1(4,70,150,143);//chan 4
	for(int x=0;x<10;x++)
     cd6:	20 97       	sbiw	r28, 0x00	; 0
     cd8:	09 f7       	brne	.-62     	; 0xc9c <move2+0xae>
		servo_2(1,90,3,122);
		servo_2(5,63,7,90);
		/*servo_2(0,45,2,45);
		servo_2(4,135,6,135);*/
	}
	cungvung();
     cda:	0e 94 ab 04 	call	0x956	; 0x956 <cungvung>
}
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	1f 91       	pop	r17
     ce4:	0f 91       	pop	r16
     ce6:	ff 90       	pop	r15
     ce8:	ef 90       	pop	r14
     cea:	08 95       	ret

00000cec <turnright>:
void turnright()
{
     cec:	ef 92       	push	r14
     cee:	ff 92       	push	r15
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	ca e0       	ldi	r28, 0x0A	; 10
     cfa:	d0 e0       	ldi	r29, 0x00	; 0
	//chan trai
	//servo_1(0,60,10,40);//chan 0
	//servo_1(2,60,40,40);//chan 2
	for(int x=0;x<10;x++)
	{
		servo_2(1,65,3,110);
     cfc:	e1 2c       	mov	r14, r1
     cfe:	f1 2c       	mov	r15, r1
     d00:	0c ed       	ldi	r16, 0xDC	; 220
     d02:	12 e4       	ldi	r17, 0x42	; 66
     d04:	23 e0       	ldi	r18, 0x03	; 3
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e0       	ldi	r20, 0x00	; 0
     d0a:	50 e0       	ldi	r21, 0x00	; 0
     d0c:	62 e8       	ldi	r22, 0x82	; 130
     d0e:	72 e4       	ldi	r23, 0x42	; 66
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <servo_2>
		servo_2(5,40,7,70);
     d18:	e1 2c       	mov	r14, r1
     d1a:	f1 2c       	mov	r15, r1
     d1c:	0c e8       	ldi	r16, 0x8C	; 140
     d1e:	12 e4       	ldi	r17, 0x42	; 66
     d20:	27 e0       	ldi	r18, 0x07	; 7
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	40 e0       	ldi	r20, 0x00	; 0
     d26:	50 e0       	ldi	r21, 0x00	; 0
     d28:	60 e2       	ldi	r22, 0x20	; 32
     d2a:	72 e4       	ldi	r23, 0x42	; 66
     d2c:	85 e0       	ldi	r24, 0x05	; 5
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <servo_2>
     d34:	21 97       	sbiw	r28, 0x01	; 1
void turnright()
{
	//chan trai
	//servo_1(0,60,10,40);//chan 0
	//servo_1(2,60,40,40);//chan 2
	for(int x=0;x<10;x++)
     d36:	20 97       	sbiw	r28, 0x00	; 0
     d38:	09 f7       	brne	.-62     	; 0xcfc <turnright+0x10>
	{
		servo_2(1,65,3,110);
		servo_2(5,40,7,70);
	}
	cungvung();
     d3a:	0e 94 ab 04 	call	0x956	; 0x956 <cungvung>
	//2 chan phai
	servo_1(6,110,180,143);//chan 6
     d3e:	0f e8       	ldi	r16, 0x8F	; 143
     d40:	10 e0       	ldi	r17, 0x00	; 0
     d42:	24 eb       	ldi	r18, 0xB4	; 180
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	40 e0       	ldi	r20, 0x00	; 0
     d48:	50 e0       	ldi	r21, 0x00	; 0
     d4a:	6c ed       	ldi	r22, 0xDC	; 220
     d4c:	72 e4       	ldi	r23, 0x42	; 66
     d4e:	86 e0       	ldi	r24, 0x06	; 6
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	0e 94 24 02 	call	0x448	; 0x448 <servo_1>
	servo_1(4,110,150,143);//chan 4
     d56:	26 e9       	ldi	r18, 0x96	; 150
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	40 e0       	ldi	r20, 0x00	; 0
     d5c:	50 e0       	ldi	r21, 0x00	; 0
     d5e:	6c ed       	ldi	r22, 0xDC	; 220
     d60:	72 e4       	ldi	r23, 0x42	; 66
     d62:	84 e0       	ldi	r24, 0x04	; 4
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 24 02 	call	0x448	; 0x448 <servo_1>
     d6a:	ca e0       	ldi	r28, 0x0A	; 10
     d6c:	d0 e0       	ldi	r29, 0x00	; 0
	for(int x=0;x<10;x++)
	{
		servo_2(1,90,3,135);
     d6e:	e1 2c       	mov	r14, r1
     d70:	f1 2c       	mov	r15, r1
     d72:	07 e0       	ldi	r16, 0x07	; 7
     d74:	13 e4       	ldi	r17, 0x43	; 67
     d76:	23 e0       	ldi	r18, 0x03	; 3
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	40 e0       	ldi	r20, 0x00	; 0
     d7c:	50 e0       	ldi	r21, 0x00	; 0
     d7e:	64 eb       	ldi	r22, 0xB4	; 180
     d80:	72 e4       	ldi	r23, 0x42	; 66
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <servo_2>
		servo_2(5,90,7,110);
     d8a:	e1 2c       	mov	r14, r1
     d8c:	f1 2c       	mov	r15, r1
     d8e:	0c ed       	ldi	r16, 0xDC	; 220
     d90:	12 e4       	ldi	r17, 0x42	; 66
     d92:	27 e0       	ldi	r18, 0x07	; 7
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	40 e0       	ldi	r20, 0x00	; 0
     d98:	50 e0       	ldi	r21, 0x00	; 0
     d9a:	64 eb       	ldi	r22, 0xB4	; 180
     d9c:	72 e4       	ldi	r23, 0x42	; 66
     d9e:	85 e0       	ldi	r24, 0x05	; 5
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <servo_2>
     da6:	21 97       	sbiw	r28, 0x01	; 1
	}
	cungvung();
	//2 chan phai
	servo_1(6,110,180,143);//chan 6
	servo_1(4,110,150,143);//chan 4
	for(int x=0;x<10;x++)
     da8:	20 97       	sbiw	r28, 0x00	; 0
     daa:	09 f7       	brne	.-62     	; 0xd6e <turnright+0x82>
	{
		servo_2(1,90,3,135);
		servo_2(5,90,7,110);
	}
	cungvung();
     dac:	0e 94 ab 04 	call	0x956	; 0x956 <cungvung>
	
}
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	1f 91       	pop	r17
     db6:	0f 91       	pop	r16
     db8:	ff 90       	pop	r15
     dba:	ef 90       	pop	r14
     dbc:	08 95       	ret

00000dbe <turnleft>:
void turnleft()
{
     dbe:	ef 92       	push	r14
     dc0:	ff 92       	push	r15
     dc2:	0f 93       	push	r16
     dc4:	1f 93       	push	r17
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
	//chan trai
	servo_1(0,60,10,40);//chan 0
     dca:	08 e2       	ldi	r16, 0x28	; 40
     dcc:	10 e0       	ldi	r17, 0x00	; 0
     dce:	2a e0       	ldi	r18, 0x0A	; 10
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	40 e0       	ldi	r20, 0x00	; 0
     dd4:	50 e0       	ldi	r21, 0x00	; 0
     dd6:	60 e7       	ldi	r22, 0x70	; 112
     dd8:	72 e4       	ldi	r23, 0x42	; 66
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	0e 94 24 02 	call	0x448	; 0x448 <servo_1>
	servo_1(2,60,40,40);//chan 2
     de2:	28 e2       	ldi	r18, 0x28	; 40
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	40 e0       	ldi	r20, 0x00	; 0
     de8:	50 e0       	ldi	r21, 0x00	; 0
     dea:	60 e7       	ldi	r22, 0x70	; 112
     dec:	72 e4       	ldi	r23, 0x42	; 66
     dee:	82 e0       	ldi	r24, 0x02	; 2
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 24 02 	call	0x448	; 0x448 <servo_1>
     df6:	ca e0       	ldi	r28, 0x0A	; 10
     df8:	d0 e0       	ldi	r29, 0x00	; 0
	for(int x=0;x<10;x++)
	{
		servo_2(1,65,3,110);
     dfa:	e1 2c       	mov	r14, r1
     dfc:	f1 2c       	mov	r15, r1
     dfe:	0c ed       	ldi	r16, 0xDC	; 220
     e00:	12 e4       	ldi	r17, 0x42	; 66
     e02:	23 e0       	ldi	r18, 0x03	; 3
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	40 e0       	ldi	r20, 0x00	; 0
     e08:	50 e0       	ldi	r21, 0x00	; 0
     e0a:	62 e8       	ldi	r22, 0x82	; 130
     e0c:	72 e4       	ldi	r23, 0x42	; 66
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <servo_2>
		servo_2(5,40,7,70);
     e16:	e1 2c       	mov	r14, r1
     e18:	f1 2c       	mov	r15, r1
     e1a:	0c e8       	ldi	r16, 0x8C	; 140
     e1c:	12 e4       	ldi	r17, 0x42	; 66
     e1e:	27 e0       	ldi	r18, 0x07	; 7
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	40 e0       	ldi	r20, 0x00	; 0
     e24:	50 e0       	ldi	r21, 0x00	; 0
     e26:	60 e2       	ldi	r22, 0x20	; 32
     e28:	72 e4       	ldi	r23, 0x42	; 66
     e2a:	85 e0       	ldi	r24, 0x05	; 5
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <servo_2>
     e32:	21 97       	sbiw	r28, 0x01	; 1
void turnleft()
{
	//chan trai
	servo_1(0,60,10,40);//chan 0
	servo_1(2,60,40,40);//chan 2
	for(int x=0;x<10;x++)
     e34:	20 97       	sbiw	r28, 0x00	; 0
     e36:	09 f7       	brne	.-62     	; 0xdfa <turnleft+0x3c>
	{
		servo_2(1,65,3,110);
		servo_2(5,40,7,70);
	}
	cungvung();
     e38:	0e 94 ab 04 	call	0x956	; 0x956 <cungvung>
     e3c:	ca e0       	ldi	r28, 0x0A	; 10
     e3e:	d0 e0       	ldi	r29, 0x00	; 0
	//2 chan phai
	//servo_1(6,110,110,143);//chan 6
	//servo_1(4,110,90,143);//chan 4
	for(int x=0;x<10;x++)
	{
		servo_2(1,90,3,135);
     e40:	e1 2c       	mov	r14, r1
     e42:	f1 2c       	mov	r15, r1
     e44:	07 e0       	ldi	r16, 0x07	; 7
     e46:	13 e4       	ldi	r17, 0x43	; 67
     e48:	23 e0       	ldi	r18, 0x03	; 3
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	40 e0       	ldi	r20, 0x00	; 0
     e4e:	50 e0       	ldi	r21, 0x00	; 0
     e50:	64 eb       	ldi	r22, 0xB4	; 180
     e52:	72 e4       	ldi	r23, 0x42	; 66
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <servo_2>
		servo_2(5,90,7,110);
     e5c:	e1 2c       	mov	r14, r1
     e5e:	f1 2c       	mov	r15, r1
     e60:	0c ed       	ldi	r16, 0xDC	; 220
     e62:	12 e4       	ldi	r17, 0x42	; 66
     e64:	27 e0       	ldi	r18, 0x07	; 7
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	40 e0       	ldi	r20, 0x00	; 0
     e6a:	50 e0       	ldi	r21, 0x00	; 0
     e6c:	64 eb       	ldi	r22, 0xB4	; 180
     e6e:	72 e4       	ldi	r23, 0x42	; 66
     e70:	85 e0       	ldi	r24, 0x05	; 5
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <servo_2>
     e78:	21 97       	sbiw	r28, 0x01	; 1
	}
	cungvung();
	//2 chan phai
	//servo_1(6,110,110,143);//chan 6
	//servo_1(4,110,90,143);//chan 4
	for(int x=0;x<10;x++)
     e7a:	20 97       	sbiw	r28, 0x00	; 0
     e7c:	09 f7       	brne	.-62     	; 0xe40 <turnleft+0x82>
	{
		servo_2(1,90,3,135);
		servo_2(5,90,7,110);
	}
	cungvung();
     e7e:	0e 94 ab 04 	call	0x956	; 0x956 <cungvung>
	
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	1f 91       	pop	r17
     e88:	0f 91       	pop	r16
     e8a:	ff 90       	pop	r15
     e8c:	ef 90       	pop	r14
     e8e:	08 95       	ret

00000e90 <init_SRF05>:
#define SRF05_PIN PIND
#define TRIG 6
#define ECHO 7
void init_SRF05()
{
	setb(SRF05_DDR,TRIG);
     e90:	8e 9a       	sbi	0x11, 6	; 17
	clrb(SRF05_DDR,ECHO);
     e92:	8f 98       	cbi	0x11, 7	; 17
     e94:	08 95       	ret

00000e96 <SRF05>:
}
float SRF05()
{
	long biendem;
	float distance;
	setb(SRF05_PORT,TRIG);
     e96:	96 9a       	sbi	0x12, 6	; 18
     e98:	8a e6       	ldi	r24, 0x6A	; 106
     e9a:	8a 95       	dec	r24
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <SRF05+0x4>
	_delay_us(20);
	clrb(SRF05_PORT,TRIG);
     e9e:	96 98       	cbi	0x12, 6	; 18
	while(inbit(SRF05_PIN,ECHO)==0);
     ea0:	87 9b       	sbis	0x10, 7	; 16
     ea2:	fe cf       	rjmp	.-4      	; 0xea0 <SRF05+0xa>
	TCNT1=0;
     ea4:	1d bc       	out	0x2d, r1	; 45
     ea6:	1c bc       	out	0x2c, r1	; 44
	while(inbit(SRF05_PIN,ECHO)==1);
     ea8:	87 99       	sbic	0x10, 7	; 16
     eaa:	fe cf       	rjmp	.-4      	; 0xea8 <SRF05+0x12>
	biendem=TCNT1;
     eac:	2c b5       	in	r18, 0x2c	; 44
     eae:	3d b5       	in	r19, 0x2d	; 45
	distance=(float)(343*biendem/4000);
     eb0:	a7 e5       	ldi	r26, 0x57	; 87
     eb2:	b1 e0       	ldi	r27, 0x01	; 1
     eb4:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__umulhisi3>
     eb8:	20 ea       	ldi	r18, 0xA0	; 160
     eba:	3f e0       	ldi	r19, 0x0F	; 15
     ebc:	40 e0       	ldi	r20, 0x00	; 0
     ebe:	50 e0       	ldi	r21, 0x00	; 0
     ec0:	0e 94 c3 09 	call	0x1386	; 0x1386 <__divmodsi4>
     ec4:	ca 01       	movw	r24, r20
     ec6:	b9 01       	movw	r22, r18
     ec8:	0e 94 ac 08 	call	0x1158	; 0x1158 <__floatsisf>
	return distance;
     ecc:	08 95       	ret

00000ece <main>:
#define SERVO_DDR DDRA//Dinh nghia ddr va port cua servo
#define SERVO_PORT PORTA
void init_QUADRUPED()
{
	SERVO_DDR=0xFF;
     ece:	8f ef       	ldi	r24, 0xFF	; 255
     ed0:	8a bb       	out	0x1a, r24	; 26
#include "F:\AVR\Header\myLCD_HP.h"
#include "F:\AVR\Header\myQUADRUPED.h"
#include "F:\AVR\Header\mySRF05.h"
int main(void)
{
	init_QUADRUPED();dung4chan();
     ed2:	0e 94 d5 04 	call	0x9aa	; 0x9aa <dung4chan>
	init_SRF05();	
     ed6:	0e 94 48 07 	call	0xe90	; 0xe90 <init_SRF05>
	init_LCD();
     eda:	0e 94 ac 00 	call	0x158	; 0x158 <init_LCD>
void hesochia(int div)
{
	TCNT1=0;
     ede:	1d bc       	out	0x2d, r1	; 45
     ee0:	1c bc       	out	0x2c, r1	; 44
	else if (div==256)
		TCCR1B=(1<<CS12);
	else if (div==64)
		TCCR1B=(1<<CS10)|(1<<CS11);
	else if (div==8)
		TCCR1B=(1<<CS11);
     ee2:	82 e0       	ldi	r24, 0x02	; 2
     ee4:	8e bd       	out	0x2e, r24	; 46
	hesochia(8);
	
	depa();
     ee6:	0e 94 1c 05 	call	0xa38	; 0xa38 <depa>
	SRF05();
     eea:	0e 94 4b 07 	call	0xe96	; 0xe96 <SRF05>
	//move();
	while(1)
    {	
		if (SRF05()>300)
     eee:	0e 94 4b 07 	call	0xe96	; 0xe96 <SRF05>
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	46 e9       	ldi	r20, 0x96	; 150
     ef8:	53 e4       	ldi	r21, 0x43	; 67
     efa:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__gesf2>
     efe:	18 16       	cp	r1, r24
     f00:	1c f4       	brge	.+6      	; 0xf08 <main+0x3a>
		{
			move();
     f02:	0e 94 78 05 	call	0xaf0	; 0xaf0 <move>
				move();
			}
			while(1)
				move2();
		}
	}
     f06:	f3 cf       	rjmp	.-26     	; 0xeee <main+0x20>
		{
			move();
		}
		else
		{
			turnright();
     f08:	0e 94 76 06 	call	0xcec	; 0xcec <turnright>
			turnright();
     f0c:	0e 94 76 06 	call	0xcec	; 0xcec <turnright>
			for (int q=0;q<5;q++)
			{
				move();
     f10:	0e 94 78 05 	call	0xaf0	; 0xaf0 <move>
     f14:	0e 94 78 05 	call	0xaf0	; 0xaf0 <move>
     f18:	0e 94 78 05 	call	0xaf0	; 0xaf0 <move>
     f1c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <move>
     f20:	0e 94 78 05 	call	0xaf0	; 0xaf0 <move>
			}
			for (int w=0;w<2;w++)
			{
				turnleft();
     f24:	0e 94 df 06 	call	0xdbe	; 0xdbe <turnleft>
     f28:	0e 94 df 06 	call	0xdbe	; 0xdbe <turnleft>
     f2c:	c8 e0       	ldi	r28, 0x08	; 8
     f2e:	d0 e0       	ldi	r29, 0x00	; 0
			}
			for (int qw=0;qw<8;qw++)
			{
				move();
     f30:	0e 94 78 05 	call	0xaf0	; 0xaf0 <move>
     f34:	21 97       	sbiw	r28, 0x01	; 1
			}
			for (int w=0;w<2;w++)
			{
				turnleft();
			}
			for (int qw=0;qw<8;qw++)
     f36:	20 97       	sbiw	r28, 0x00	; 0
     f38:	d9 f7       	brne	.-10     	; 0xf30 <main+0x62>
			{
				move();
			}
			for (int w=0;w<3;w++)
			{
				turnleft();
     f3a:	0e 94 df 06 	call	0xdbe	; 0xdbe <turnleft>
     f3e:	0e 94 df 06 	call	0xdbe	; 0xdbe <turnleft>
     f42:	0e 94 df 06 	call	0xdbe	; 0xdbe <turnleft>
     f46:	c8 e0       	ldi	r28, 0x08	; 8
     f48:	d0 e0       	ldi	r29, 0x00	; 0
			}
			for (int qw=0;qw<8;qw++)
			{
				move();
     f4a:	0e 94 78 05 	call	0xaf0	; 0xaf0 <move>
     f4e:	21 97       	sbiw	r28, 0x01	; 1
			}
			for (int w=0;w<3;w++)
			{
				turnleft();
			}
			for (int qw=0;qw<8;qw++)
     f50:	20 97       	sbiw	r28, 0x00	; 0
     f52:	d9 f7       	brne	.-10     	; 0xf4a <main+0x7c>
			{
				move();
			}
			while(1)
				move2();
     f54:	0e 94 f7 05 	call	0xbee	; 0xbee <move2>
     f58:	fd cf       	rjmp	.-6      	; 0xf54 <main+0x86>

00000f5a <__subsf3>:
     f5a:	50 58       	subi	r21, 0x80	; 128

00000f5c <__addsf3>:
     f5c:	bb 27       	eor	r27, r27
     f5e:	aa 27       	eor	r26, r26
     f60:	0e d0       	rcall	.+28     	; 0xf7e <__addsf3x>
     f62:	70 c1       	rjmp	.+736    	; 0x1244 <__fp_round>
     f64:	61 d1       	rcall	.+706    	; 0x1228 <__fp_pscA>
     f66:	30 f0       	brcs	.+12     	; 0xf74 <__addsf3+0x18>
     f68:	66 d1       	rcall	.+716    	; 0x1236 <__fp_pscB>
     f6a:	20 f0       	brcs	.+8      	; 0xf74 <__addsf3+0x18>
     f6c:	31 f4       	brne	.+12     	; 0xf7a <__addsf3+0x1e>
     f6e:	9f 3f       	cpi	r25, 0xFF	; 255
     f70:	11 f4       	brne	.+4      	; 0xf76 <__addsf3+0x1a>
     f72:	1e f4       	brtc	.+6      	; 0xf7a <__addsf3+0x1e>
     f74:	56 c1       	rjmp	.+684    	; 0x1222 <__fp_nan>
     f76:	0e f4       	brtc	.+2      	; 0xf7a <__addsf3+0x1e>
     f78:	e0 95       	com	r30
     f7a:	e7 fb       	bst	r30, 7
     f7c:	4c c1       	rjmp	.+664    	; 0x1216 <__fp_inf>

00000f7e <__addsf3x>:
     f7e:	e9 2f       	mov	r30, r25
     f80:	72 d1       	rcall	.+740    	; 0x1266 <__fp_split3>
     f82:	80 f3       	brcs	.-32     	; 0xf64 <__addsf3+0x8>
     f84:	ba 17       	cp	r27, r26
     f86:	62 07       	cpc	r22, r18
     f88:	73 07       	cpc	r23, r19
     f8a:	84 07       	cpc	r24, r20
     f8c:	95 07       	cpc	r25, r21
     f8e:	18 f0       	brcs	.+6      	; 0xf96 <__addsf3x+0x18>
     f90:	71 f4       	brne	.+28     	; 0xfae <__addsf3x+0x30>
     f92:	9e f5       	brtc	.+102    	; 0xffa <__addsf3x+0x7c>
     f94:	8a c1       	rjmp	.+788    	; 0x12aa <__fp_zero>
     f96:	0e f4       	brtc	.+2      	; 0xf9a <__addsf3x+0x1c>
     f98:	e0 95       	com	r30
     f9a:	0b 2e       	mov	r0, r27
     f9c:	ba 2f       	mov	r27, r26
     f9e:	a0 2d       	mov	r26, r0
     fa0:	0b 01       	movw	r0, r22
     fa2:	b9 01       	movw	r22, r18
     fa4:	90 01       	movw	r18, r0
     fa6:	0c 01       	movw	r0, r24
     fa8:	ca 01       	movw	r24, r20
     faa:	a0 01       	movw	r20, r0
     fac:	11 24       	eor	r1, r1
     fae:	ff 27       	eor	r31, r31
     fb0:	59 1b       	sub	r21, r25
     fb2:	99 f0       	breq	.+38     	; 0xfda <__addsf3x+0x5c>
     fb4:	59 3f       	cpi	r21, 0xF9	; 249
     fb6:	50 f4       	brcc	.+20     	; 0xfcc <__addsf3x+0x4e>
     fb8:	50 3e       	cpi	r21, 0xE0	; 224
     fba:	68 f1       	brcs	.+90     	; 0x1016 <__addsf3x+0x98>
     fbc:	1a 16       	cp	r1, r26
     fbe:	f0 40       	sbci	r31, 0x00	; 0
     fc0:	a2 2f       	mov	r26, r18
     fc2:	23 2f       	mov	r18, r19
     fc4:	34 2f       	mov	r19, r20
     fc6:	44 27       	eor	r20, r20
     fc8:	58 5f       	subi	r21, 0xF8	; 248
     fca:	f3 cf       	rjmp	.-26     	; 0xfb2 <__addsf3x+0x34>
     fcc:	46 95       	lsr	r20
     fce:	37 95       	ror	r19
     fd0:	27 95       	ror	r18
     fd2:	a7 95       	ror	r26
     fd4:	f0 40       	sbci	r31, 0x00	; 0
     fd6:	53 95       	inc	r21
     fd8:	c9 f7       	brne	.-14     	; 0xfcc <__addsf3x+0x4e>
     fda:	7e f4       	brtc	.+30     	; 0xffa <__addsf3x+0x7c>
     fdc:	1f 16       	cp	r1, r31
     fde:	ba 0b       	sbc	r27, r26
     fe0:	62 0b       	sbc	r22, r18
     fe2:	73 0b       	sbc	r23, r19
     fe4:	84 0b       	sbc	r24, r20
     fe6:	ba f0       	brmi	.+46     	; 0x1016 <__addsf3x+0x98>
     fe8:	91 50       	subi	r25, 0x01	; 1
     fea:	a1 f0       	breq	.+40     	; 0x1014 <__addsf3x+0x96>
     fec:	ff 0f       	add	r31, r31
     fee:	bb 1f       	adc	r27, r27
     ff0:	66 1f       	adc	r22, r22
     ff2:	77 1f       	adc	r23, r23
     ff4:	88 1f       	adc	r24, r24
     ff6:	c2 f7       	brpl	.-16     	; 0xfe8 <__addsf3x+0x6a>
     ff8:	0e c0       	rjmp	.+28     	; 0x1016 <__addsf3x+0x98>
     ffa:	ba 0f       	add	r27, r26
     ffc:	62 1f       	adc	r22, r18
     ffe:	73 1f       	adc	r23, r19
    1000:	84 1f       	adc	r24, r20
    1002:	48 f4       	brcc	.+18     	; 0x1016 <__addsf3x+0x98>
    1004:	87 95       	ror	r24
    1006:	77 95       	ror	r23
    1008:	67 95       	ror	r22
    100a:	b7 95       	ror	r27
    100c:	f7 95       	ror	r31
    100e:	9e 3f       	cpi	r25, 0xFE	; 254
    1010:	08 f0       	brcs	.+2      	; 0x1014 <__addsf3x+0x96>
    1012:	b3 cf       	rjmp	.-154    	; 0xf7a <__addsf3+0x1e>
    1014:	93 95       	inc	r25
    1016:	88 0f       	add	r24, r24
    1018:	08 f0       	brcs	.+2      	; 0x101c <__addsf3x+0x9e>
    101a:	99 27       	eor	r25, r25
    101c:	ee 0f       	add	r30, r30
    101e:	97 95       	ror	r25
    1020:	87 95       	ror	r24
    1022:	08 95       	ret

00001024 <__cmpsf2>:
    1024:	d4 d0       	rcall	.+424    	; 0x11ce <__fp_cmp>
    1026:	08 f4       	brcc	.+2      	; 0x102a <__cmpsf2+0x6>
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	08 95       	ret

0000102c <__divsf3>:
    102c:	0c d0       	rcall	.+24     	; 0x1046 <__divsf3x>
    102e:	0a c1       	rjmp	.+532    	; 0x1244 <__fp_round>
    1030:	02 d1       	rcall	.+516    	; 0x1236 <__fp_pscB>
    1032:	40 f0       	brcs	.+16     	; 0x1044 <__divsf3+0x18>
    1034:	f9 d0       	rcall	.+498    	; 0x1228 <__fp_pscA>
    1036:	30 f0       	brcs	.+12     	; 0x1044 <__divsf3+0x18>
    1038:	21 f4       	brne	.+8      	; 0x1042 <__divsf3+0x16>
    103a:	5f 3f       	cpi	r21, 0xFF	; 255
    103c:	19 f0       	breq	.+6      	; 0x1044 <__divsf3+0x18>
    103e:	eb c0       	rjmp	.+470    	; 0x1216 <__fp_inf>
    1040:	51 11       	cpse	r21, r1
    1042:	34 c1       	rjmp	.+616    	; 0x12ac <__fp_szero>
    1044:	ee c0       	rjmp	.+476    	; 0x1222 <__fp_nan>

00001046 <__divsf3x>:
    1046:	0f d1       	rcall	.+542    	; 0x1266 <__fp_split3>
    1048:	98 f3       	brcs	.-26     	; 0x1030 <__divsf3+0x4>

0000104a <__divsf3_pse>:
    104a:	99 23       	and	r25, r25
    104c:	c9 f3       	breq	.-14     	; 0x1040 <__divsf3+0x14>
    104e:	55 23       	and	r21, r21
    1050:	b1 f3       	breq	.-20     	; 0x103e <__divsf3+0x12>
    1052:	95 1b       	sub	r25, r21
    1054:	55 0b       	sbc	r21, r21
    1056:	bb 27       	eor	r27, r27
    1058:	aa 27       	eor	r26, r26
    105a:	62 17       	cp	r22, r18
    105c:	73 07       	cpc	r23, r19
    105e:	84 07       	cpc	r24, r20
    1060:	38 f0       	brcs	.+14     	; 0x1070 <__divsf3_pse+0x26>
    1062:	9f 5f       	subi	r25, 0xFF	; 255
    1064:	5f 4f       	sbci	r21, 0xFF	; 255
    1066:	22 0f       	add	r18, r18
    1068:	33 1f       	adc	r19, r19
    106a:	44 1f       	adc	r20, r20
    106c:	aa 1f       	adc	r26, r26
    106e:	a9 f3       	breq	.-22     	; 0x105a <__divsf3_pse+0x10>
    1070:	33 d0       	rcall	.+102    	; 0x10d8 <__divsf3_pse+0x8e>
    1072:	0e 2e       	mov	r0, r30
    1074:	3a f0       	brmi	.+14     	; 0x1084 <__divsf3_pse+0x3a>
    1076:	e0 e8       	ldi	r30, 0x80	; 128
    1078:	30 d0       	rcall	.+96     	; 0x10da <__divsf3_pse+0x90>
    107a:	91 50       	subi	r25, 0x01	; 1
    107c:	50 40       	sbci	r21, 0x00	; 0
    107e:	e6 95       	lsr	r30
    1080:	00 1c       	adc	r0, r0
    1082:	ca f7       	brpl	.-14     	; 0x1076 <__divsf3_pse+0x2c>
    1084:	29 d0       	rcall	.+82     	; 0x10d8 <__divsf3_pse+0x8e>
    1086:	fe 2f       	mov	r31, r30
    1088:	27 d0       	rcall	.+78     	; 0x10d8 <__divsf3_pse+0x8e>
    108a:	66 0f       	add	r22, r22
    108c:	77 1f       	adc	r23, r23
    108e:	88 1f       	adc	r24, r24
    1090:	bb 1f       	adc	r27, r27
    1092:	26 17       	cp	r18, r22
    1094:	37 07       	cpc	r19, r23
    1096:	48 07       	cpc	r20, r24
    1098:	ab 07       	cpc	r26, r27
    109a:	b0 e8       	ldi	r27, 0x80	; 128
    109c:	09 f0       	breq	.+2      	; 0x10a0 <__divsf3_pse+0x56>
    109e:	bb 0b       	sbc	r27, r27
    10a0:	80 2d       	mov	r24, r0
    10a2:	bf 01       	movw	r22, r30
    10a4:	ff 27       	eor	r31, r31
    10a6:	93 58       	subi	r25, 0x83	; 131
    10a8:	5f 4f       	sbci	r21, 0xFF	; 255
    10aa:	2a f0       	brmi	.+10     	; 0x10b6 <__divsf3_pse+0x6c>
    10ac:	9e 3f       	cpi	r25, 0xFE	; 254
    10ae:	51 05       	cpc	r21, r1
    10b0:	68 f0       	brcs	.+26     	; 0x10cc <__divsf3_pse+0x82>
    10b2:	b1 c0       	rjmp	.+354    	; 0x1216 <__fp_inf>
    10b4:	fb c0       	rjmp	.+502    	; 0x12ac <__fp_szero>
    10b6:	5f 3f       	cpi	r21, 0xFF	; 255
    10b8:	ec f3       	brlt	.-6      	; 0x10b4 <__divsf3_pse+0x6a>
    10ba:	98 3e       	cpi	r25, 0xE8	; 232
    10bc:	dc f3       	brlt	.-10     	; 0x10b4 <__divsf3_pse+0x6a>
    10be:	86 95       	lsr	r24
    10c0:	77 95       	ror	r23
    10c2:	67 95       	ror	r22
    10c4:	b7 95       	ror	r27
    10c6:	f7 95       	ror	r31
    10c8:	9f 5f       	subi	r25, 0xFF	; 255
    10ca:	c9 f7       	brne	.-14     	; 0x10be <__divsf3_pse+0x74>
    10cc:	88 0f       	add	r24, r24
    10ce:	91 1d       	adc	r25, r1
    10d0:	96 95       	lsr	r25
    10d2:	87 95       	ror	r24
    10d4:	97 f9       	bld	r25, 7
    10d6:	08 95       	ret
    10d8:	e1 e0       	ldi	r30, 0x01	; 1
    10da:	66 0f       	add	r22, r22
    10dc:	77 1f       	adc	r23, r23
    10de:	88 1f       	adc	r24, r24
    10e0:	bb 1f       	adc	r27, r27
    10e2:	62 17       	cp	r22, r18
    10e4:	73 07       	cpc	r23, r19
    10e6:	84 07       	cpc	r24, r20
    10e8:	ba 07       	cpc	r27, r26
    10ea:	20 f0       	brcs	.+8      	; 0x10f4 <__divsf3_pse+0xaa>
    10ec:	62 1b       	sub	r22, r18
    10ee:	73 0b       	sbc	r23, r19
    10f0:	84 0b       	sbc	r24, r20
    10f2:	ba 0b       	sbc	r27, r26
    10f4:	ee 1f       	adc	r30, r30
    10f6:	88 f7       	brcc	.-30     	; 0x10da <__divsf3_pse+0x90>
    10f8:	e0 95       	com	r30
    10fa:	08 95       	ret

000010fc <__fixunssfsi>:
    10fc:	bc d0       	rcall	.+376    	; 0x1276 <__fp_splitA>
    10fe:	88 f0       	brcs	.+34     	; 0x1122 <__fixunssfsi+0x26>
    1100:	9f 57       	subi	r25, 0x7F	; 127
    1102:	90 f0       	brcs	.+36     	; 0x1128 <__fixunssfsi+0x2c>
    1104:	b9 2f       	mov	r27, r25
    1106:	99 27       	eor	r25, r25
    1108:	b7 51       	subi	r27, 0x17	; 23
    110a:	a0 f0       	brcs	.+40     	; 0x1134 <__fixunssfsi+0x38>
    110c:	d1 f0       	breq	.+52     	; 0x1142 <__fixunssfsi+0x46>
    110e:	66 0f       	add	r22, r22
    1110:	77 1f       	adc	r23, r23
    1112:	88 1f       	adc	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	1a f0       	brmi	.+6      	; 0x111e <__fixunssfsi+0x22>
    1118:	ba 95       	dec	r27
    111a:	c9 f7       	brne	.-14     	; 0x110e <__fixunssfsi+0x12>
    111c:	12 c0       	rjmp	.+36     	; 0x1142 <__fixunssfsi+0x46>
    111e:	b1 30       	cpi	r27, 0x01	; 1
    1120:	81 f0       	breq	.+32     	; 0x1142 <__fixunssfsi+0x46>
    1122:	c3 d0       	rcall	.+390    	; 0x12aa <__fp_zero>
    1124:	b1 e0       	ldi	r27, 0x01	; 1
    1126:	08 95       	ret
    1128:	c0 c0       	rjmp	.+384    	; 0x12aa <__fp_zero>
    112a:	67 2f       	mov	r22, r23
    112c:	78 2f       	mov	r23, r24
    112e:	88 27       	eor	r24, r24
    1130:	b8 5f       	subi	r27, 0xF8	; 248
    1132:	39 f0       	breq	.+14     	; 0x1142 <__fixunssfsi+0x46>
    1134:	b9 3f       	cpi	r27, 0xF9	; 249
    1136:	cc f3       	brlt	.-14     	; 0x112a <__fixunssfsi+0x2e>
    1138:	86 95       	lsr	r24
    113a:	77 95       	ror	r23
    113c:	67 95       	ror	r22
    113e:	b3 95       	inc	r27
    1140:	d9 f7       	brne	.-10     	; 0x1138 <__fixunssfsi+0x3c>
    1142:	3e f4       	brtc	.+14     	; 0x1152 <__fixunssfsi+0x56>
    1144:	90 95       	com	r25
    1146:	80 95       	com	r24
    1148:	70 95       	com	r23
    114a:	61 95       	neg	r22
    114c:	7f 4f       	sbci	r23, 0xFF	; 255
    114e:	8f 4f       	sbci	r24, 0xFF	; 255
    1150:	9f 4f       	sbci	r25, 0xFF	; 255
    1152:	08 95       	ret

00001154 <__floatunsisf>:
    1154:	e8 94       	clt
    1156:	09 c0       	rjmp	.+18     	; 0x116a <__floatsisf+0x12>

00001158 <__floatsisf>:
    1158:	97 fb       	bst	r25, 7
    115a:	3e f4       	brtc	.+14     	; 0x116a <__floatsisf+0x12>
    115c:	90 95       	com	r25
    115e:	80 95       	com	r24
    1160:	70 95       	com	r23
    1162:	61 95       	neg	r22
    1164:	7f 4f       	sbci	r23, 0xFF	; 255
    1166:	8f 4f       	sbci	r24, 0xFF	; 255
    1168:	9f 4f       	sbci	r25, 0xFF	; 255
    116a:	99 23       	and	r25, r25
    116c:	a9 f0       	breq	.+42     	; 0x1198 <__floatsisf+0x40>
    116e:	f9 2f       	mov	r31, r25
    1170:	96 e9       	ldi	r25, 0x96	; 150
    1172:	bb 27       	eor	r27, r27
    1174:	93 95       	inc	r25
    1176:	f6 95       	lsr	r31
    1178:	87 95       	ror	r24
    117a:	77 95       	ror	r23
    117c:	67 95       	ror	r22
    117e:	b7 95       	ror	r27
    1180:	f1 11       	cpse	r31, r1
    1182:	f8 cf       	rjmp	.-16     	; 0x1174 <__floatsisf+0x1c>
    1184:	fa f4       	brpl	.+62     	; 0x11c4 <__floatsisf+0x6c>
    1186:	bb 0f       	add	r27, r27
    1188:	11 f4       	brne	.+4      	; 0x118e <__floatsisf+0x36>
    118a:	60 ff       	sbrs	r22, 0
    118c:	1b c0       	rjmp	.+54     	; 0x11c4 <__floatsisf+0x6c>
    118e:	6f 5f       	subi	r22, 0xFF	; 255
    1190:	7f 4f       	sbci	r23, 0xFF	; 255
    1192:	8f 4f       	sbci	r24, 0xFF	; 255
    1194:	9f 4f       	sbci	r25, 0xFF	; 255
    1196:	16 c0       	rjmp	.+44     	; 0x11c4 <__floatsisf+0x6c>
    1198:	88 23       	and	r24, r24
    119a:	11 f0       	breq	.+4      	; 0x11a0 <__floatsisf+0x48>
    119c:	96 e9       	ldi	r25, 0x96	; 150
    119e:	11 c0       	rjmp	.+34     	; 0x11c2 <__floatsisf+0x6a>
    11a0:	77 23       	and	r23, r23
    11a2:	21 f0       	breq	.+8      	; 0x11ac <__floatsisf+0x54>
    11a4:	9e e8       	ldi	r25, 0x8E	; 142
    11a6:	87 2f       	mov	r24, r23
    11a8:	76 2f       	mov	r23, r22
    11aa:	05 c0       	rjmp	.+10     	; 0x11b6 <__floatsisf+0x5e>
    11ac:	66 23       	and	r22, r22
    11ae:	71 f0       	breq	.+28     	; 0x11cc <__floatsisf+0x74>
    11b0:	96 e8       	ldi	r25, 0x86	; 134
    11b2:	86 2f       	mov	r24, r22
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	2a f0       	brmi	.+10     	; 0x11c4 <__floatsisf+0x6c>
    11ba:	9a 95       	dec	r25
    11bc:	66 0f       	add	r22, r22
    11be:	77 1f       	adc	r23, r23
    11c0:	88 1f       	adc	r24, r24
    11c2:	da f7       	brpl	.-10     	; 0x11ba <__floatsisf+0x62>
    11c4:	88 0f       	add	r24, r24
    11c6:	96 95       	lsr	r25
    11c8:	87 95       	ror	r24
    11ca:	97 f9       	bld	r25, 7
    11cc:	08 95       	ret

000011ce <__fp_cmp>:
    11ce:	99 0f       	add	r25, r25
    11d0:	00 08       	sbc	r0, r0
    11d2:	55 0f       	add	r21, r21
    11d4:	aa 0b       	sbc	r26, r26
    11d6:	e0 e8       	ldi	r30, 0x80	; 128
    11d8:	fe ef       	ldi	r31, 0xFE	; 254
    11da:	16 16       	cp	r1, r22
    11dc:	17 06       	cpc	r1, r23
    11de:	e8 07       	cpc	r30, r24
    11e0:	f9 07       	cpc	r31, r25
    11e2:	c0 f0       	brcs	.+48     	; 0x1214 <__fp_cmp+0x46>
    11e4:	12 16       	cp	r1, r18
    11e6:	13 06       	cpc	r1, r19
    11e8:	e4 07       	cpc	r30, r20
    11ea:	f5 07       	cpc	r31, r21
    11ec:	98 f0       	brcs	.+38     	; 0x1214 <__fp_cmp+0x46>
    11ee:	62 1b       	sub	r22, r18
    11f0:	73 0b       	sbc	r23, r19
    11f2:	84 0b       	sbc	r24, r20
    11f4:	95 0b       	sbc	r25, r21
    11f6:	39 f4       	brne	.+14     	; 0x1206 <__fp_cmp+0x38>
    11f8:	0a 26       	eor	r0, r26
    11fa:	61 f0       	breq	.+24     	; 0x1214 <__fp_cmp+0x46>
    11fc:	23 2b       	or	r18, r19
    11fe:	24 2b       	or	r18, r20
    1200:	25 2b       	or	r18, r21
    1202:	21 f4       	brne	.+8      	; 0x120c <__fp_cmp+0x3e>
    1204:	08 95       	ret
    1206:	0a 26       	eor	r0, r26
    1208:	09 f4       	brne	.+2      	; 0x120c <__fp_cmp+0x3e>
    120a:	a1 40       	sbci	r26, 0x01	; 1
    120c:	a6 95       	lsr	r26
    120e:	8f ef       	ldi	r24, 0xFF	; 255
    1210:	81 1d       	adc	r24, r1
    1212:	81 1d       	adc	r24, r1
    1214:	08 95       	ret

00001216 <__fp_inf>:
    1216:	97 f9       	bld	r25, 7
    1218:	9f 67       	ori	r25, 0x7F	; 127
    121a:	80 e8       	ldi	r24, 0x80	; 128
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	60 e0       	ldi	r22, 0x00	; 0
    1220:	08 95       	ret

00001222 <__fp_nan>:
    1222:	9f ef       	ldi	r25, 0xFF	; 255
    1224:	80 ec       	ldi	r24, 0xC0	; 192
    1226:	08 95       	ret

00001228 <__fp_pscA>:
    1228:	00 24       	eor	r0, r0
    122a:	0a 94       	dec	r0
    122c:	16 16       	cp	r1, r22
    122e:	17 06       	cpc	r1, r23
    1230:	18 06       	cpc	r1, r24
    1232:	09 06       	cpc	r0, r25
    1234:	08 95       	ret

00001236 <__fp_pscB>:
    1236:	00 24       	eor	r0, r0
    1238:	0a 94       	dec	r0
    123a:	12 16       	cp	r1, r18
    123c:	13 06       	cpc	r1, r19
    123e:	14 06       	cpc	r1, r20
    1240:	05 06       	cpc	r0, r21
    1242:	08 95       	ret

00001244 <__fp_round>:
    1244:	09 2e       	mov	r0, r25
    1246:	03 94       	inc	r0
    1248:	00 0c       	add	r0, r0
    124a:	11 f4       	brne	.+4      	; 0x1250 <__fp_round+0xc>
    124c:	88 23       	and	r24, r24
    124e:	52 f0       	brmi	.+20     	; 0x1264 <__fp_round+0x20>
    1250:	bb 0f       	add	r27, r27
    1252:	40 f4       	brcc	.+16     	; 0x1264 <__fp_round+0x20>
    1254:	bf 2b       	or	r27, r31
    1256:	11 f4       	brne	.+4      	; 0x125c <__fp_round+0x18>
    1258:	60 ff       	sbrs	r22, 0
    125a:	04 c0       	rjmp	.+8      	; 0x1264 <__fp_round+0x20>
    125c:	6f 5f       	subi	r22, 0xFF	; 255
    125e:	7f 4f       	sbci	r23, 0xFF	; 255
    1260:	8f 4f       	sbci	r24, 0xFF	; 255
    1262:	9f 4f       	sbci	r25, 0xFF	; 255
    1264:	08 95       	ret

00001266 <__fp_split3>:
    1266:	57 fd       	sbrc	r21, 7
    1268:	90 58       	subi	r25, 0x80	; 128
    126a:	44 0f       	add	r20, r20
    126c:	55 1f       	adc	r21, r21
    126e:	59 f0       	breq	.+22     	; 0x1286 <__fp_splitA+0x10>
    1270:	5f 3f       	cpi	r21, 0xFF	; 255
    1272:	71 f0       	breq	.+28     	; 0x1290 <__fp_splitA+0x1a>
    1274:	47 95       	ror	r20

00001276 <__fp_splitA>:
    1276:	88 0f       	add	r24, r24
    1278:	97 fb       	bst	r25, 7
    127a:	99 1f       	adc	r25, r25
    127c:	61 f0       	breq	.+24     	; 0x1296 <__fp_splitA+0x20>
    127e:	9f 3f       	cpi	r25, 0xFF	; 255
    1280:	79 f0       	breq	.+30     	; 0x12a0 <__fp_splitA+0x2a>
    1282:	87 95       	ror	r24
    1284:	08 95       	ret
    1286:	12 16       	cp	r1, r18
    1288:	13 06       	cpc	r1, r19
    128a:	14 06       	cpc	r1, r20
    128c:	55 1f       	adc	r21, r21
    128e:	f2 cf       	rjmp	.-28     	; 0x1274 <__fp_split3+0xe>
    1290:	46 95       	lsr	r20
    1292:	f1 df       	rcall	.-30     	; 0x1276 <__fp_splitA>
    1294:	08 c0       	rjmp	.+16     	; 0x12a6 <__fp_splitA+0x30>
    1296:	16 16       	cp	r1, r22
    1298:	17 06       	cpc	r1, r23
    129a:	18 06       	cpc	r1, r24
    129c:	99 1f       	adc	r25, r25
    129e:	f1 cf       	rjmp	.-30     	; 0x1282 <__fp_splitA+0xc>
    12a0:	86 95       	lsr	r24
    12a2:	71 05       	cpc	r23, r1
    12a4:	61 05       	cpc	r22, r1
    12a6:	08 94       	sec
    12a8:	08 95       	ret

000012aa <__fp_zero>:
    12aa:	e8 94       	clt

000012ac <__fp_szero>:
    12ac:	bb 27       	eor	r27, r27
    12ae:	66 27       	eor	r22, r22
    12b0:	77 27       	eor	r23, r23
    12b2:	cb 01       	movw	r24, r22
    12b4:	97 f9       	bld	r25, 7
    12b6:	08 95       	ret

000012b8 <__gesf2>:
    12b8:	8a df       	rcall	.-236    	; 0x11ce <__fp_cmp>
    12ba:	08 f4       	brcc	.+2      	; 0x12be <__gesf2+0x6>
    12bc:	8f ef       	ldi	r24, 0xFF	; 255
    12be:	08 95       	ret

000012c0 <__mulsf3>:
    12c0:	0b d0       	rcall	.+22     	; 0x12d8 <__mulsf3x>
    12c2:	c0 cf       	rjmp	.-128    	; 0x1244 <__fp_round>
    12c4:	b1 df       	rcall	.-158    	; 0x1228 <__fp_pscA>
    12c6:	28 f0       	brcs	.+10     	; 0x12d2 <__mulsf3+0x12>
    12c8:	b6 df       	rcall	.-148    	; 0x1236 <__fp_pscB>
    12ca:	18 f0       	brcs	.+6      	; 0x12d2 <__mulsf3+0x12>
    12cc:	95 23       	and	r25, r21
    12ce:	09 f0       	breq	.+2      	; 0x12d2 <__mulsf3+0x12>
    12d0:	a2 cf       	rjmp	.-188    	; 0x1216 <__fp_inf>
    12d2:	a7 cf       	rjmp	.-178    	; 0x1222 <__fp_nan>
    12d4:	11 24       	eor	r1, r1
    12d6:	ea cf       	rjmp	.-44     	; 0x12ac <__fp_szero>

000012d8 <__mulsf3x>:
    12d8:	c6 df       	rcall	.-116    	; 0x1266 <__fp_split3>
    12da:	a0 f3       	brcs	.-24     	; 0x12c4 <__mulsf3+0x4>

000012dc <__mulsf3_pse>:
    12dc:	95 9f       	mul	r25, r21
    12de:	d1 f3       	breq	.-12     	; 0x12d4 <__mulsf3+0x14>
    12e0:	95 0f       	add	r25, r21
    12e2:	50 e0       	ldi	r21, 0x00	; 0
    12e4:	55 1f       	adc	r21, r21
    12e6:	62 9f       	mul	r22, r18
    12e8:	f0 01       	movw	r30, r0
    12ea:	72 9f       	mul	r23, r18
    12ec:	bb 27       	eor	r27, r27
    12ee:	f0 0d       	add	r31, r0
    12f0:	b1 1d       	adc	r27, r1
    12f2:	63 9f       	mul	r22, r19
    12f4:	aa 27       	eor	r26, r26
    12f6:	f0 0d       	add	r31, r0
    12f8:	b1 1d       	adc	r27, r1
    12fa:	aa 1f       	adc	r26, r26
    12fc:	64 9f       	mul	r22, r20
    12fe:	66 27       	eor	r22, r22
    1300:	b0 0d       	add	r27, r0
    1302:	a1 1d       	adc	r26, r1
    1304:	66 1f       	adc	r22, r22
    1306:	82 9f       	mul	r24, r18
    1308:	22 27       	eor	r18, r18
    130a:	b0 0d       	add	r27, r0
    130c:	a1 1d       	adc	r26, r1
    130e:	62 1f       	adc	r22, r18
    1310:	73 9f       	mul	r23, r19
    1312:	b0 0d       	add	r27, r0
    1314:	a1 1d       	adc	r26, r1
    1316:	62 1f       	adc	r22, r18
    1318:	83 9f       	mul	r24, r19
    131a:	a0 0d       	add	r26, r0
    131c:	61 1d       	adc	r22, r1
    131e:	22 1f       	adc	r18, r18
    1320:	74 9f       	mul	r23, r20
    1322:	33 27       	eor	r19, r19
    1324:	a0 0d       	add	r26, r0
    1326:	61 1d       	adc	r22, r1
    1328:	23 1f       	adc	r18, r19
    132a:	84 9f       	mul	r24, r20
    132c:	60 0d       	add	r22, r0
    132e:	21 1d       	adc	r18, r1
    1330:	82 2f       	mov	r24, r18
    1332:	76 2f       	mov	r23, r22
    1334:	6a 2f       	mov	r22, r26
    1336:	11 24       	eor	r1, r1
    1338:	9f 57       	subi	r25, 0x7F	; 127
    133a:	50 40       	sbci	r21, 0x00	; 0
    133c:	8a f0       	brmi	.+34     	; 0x1360 <__mulsf3_pse+0x84>
    133e:	e1 f0       	breq	.+56     	; 0x1378 <__mulsf3_pse+0x9c>
    1340:	88 23       	and	r24, r24
    1342:	4a f0       	brmi	.+18     	; 0x1356 <__mulsf3_pse+0x7a>
    1344:	ee 0f       	add	r30, r30
    1346:	ff 1f       	adc	r31, r31
    1348:	bb 1f       	adc	r27, r27
    134a:	66 1f       	adc	r22, r22
    134c:	77 1f       	adc	r23, r23
    134e:	88 1f       	adc	r24, r24
    1350:	91 50       	subi	r25, 0x01	; 1
    1352:	50 40       	sbci	r21, 0x00	; 0
    1354:	a9 f7       	brne	.-22     	; 0x1340 <__mulsf3_pse+0x64>
    1356:	9e 3f       	cpi	r25, 0xFE	; 254
    1358:	51 05       	cpc	r21, r1
    135a:	70 f0       	brcs	.+28     	; 0x1378 <__mulsf3_pse+0x9c>
    135c:	5c cf       	rjmp	.-328    	; 0x1216 <__fp_inf>
    135e:	a6 cf       	rjmp	.-180    	; 0x12ac <__fp_szero>
    1360:	5f 3f       	cpi	r21, 0xFF	; 255
    1362:	ec f3       	brlt	.-6      	; 0x135e <__mulsf3_pse+0x82>
    1364:	98 3e       	cpi	r25, 0xE8	; 232
    1366:	dc f3       	brlt	.-10     	; 0x135e <__mulsf3_pse+0x82>
    1368:	86 95       	lsr	r24
    136a:	77 95       	ror	r23
    136c:	67 95       	ror	r22
    136e:	b7 95       	ror	r27
    1370:	f7 95       	ror	r31
    1372:	e7 95       	ror	r30
    1374:	9f 5f       	subi	r25, 0xFF	; 255
    1376:	c1 f7       	brne	.-16     	; 0x1368 <__mulsf3_pse+0x8c>
    1378:	fe 2b       	or	r31, r30
    137a:	88 0f       	add	r24, r24
    137c:	91 1d       	adc	r25, r1
    137e:	96 95       	lsr	r25
    1380:	87 95       	ror	r24
    1382:	97 f9       	bld	r25, 7
    1384:	08 95       	ret

00001386 <__divmodsi4>:
    1386:	05 2e       	mov	r0, r21
    1388:	97 fb       	bst	r25, 7
    138a:	1e f4       	brtc	.+6      	; 0x1392 <__divmodsi4+0xc>
    138c:	00 94       	com	r0
    138e:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__negsi2>
    1392:	57 fd       	sbrc	r21, 7
    1394:	07 d0       	rcall	.+14     	; 0x13a4 <__divmodsi4_neg2>
    1396:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__udivmodsi4>
    139a:	07 fc       	sbrc	r0, 7
    139c:	03 d0       	rcall	.+6      	; 0x13a4 <__divmodsi4_neg2>
    139e:	4e f4       	brtc	.+18     	; 0x13b2 <__divmodsi4_exit>
    13a0:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <__negsi2>

000013a4 <__divmodsi4_neg2>:
    13a4:	50 95       	com	r21
    13a6:	40 95       	com	r20
    13a8:	30 95       	com	r19
    13aa:	21 95       	neg	r18
    13ac:	3f 4f       	sbci	r19, 0xFF	; 255
    13ae:	4f 4f       	sbci	r20, 0xFF	; 255
    13b0:	5f 4f       	sbci	r21, 0xFF	; 255

000013b2 <__divmodsi4_exit>:
    13b2:	08 95       	ret

000013b4 <__negsi2>:
    13b4:	90 95       	com	r25
    13b6:	80 95       	com	r24
    13b8:	70 95       	com	r23
    13ba:	61 95       	neg	r22
    13bc:	7f 4f       	sbci	r23, 0xFF	; 255
    13be:	8f 4f       	sbci	r24, 0xFF	; 255
    13c0:	9f 4f       	sbci	r25, 0xFF	; 255
    13c2:	08 95       	ret

000013c4 <__umulhisi3>:
    13c4:	a2 9f       	mul	r26, r18
    13c6:	b0 01       	movw	r22, r0
    13c8:	b3 9f       	mul	r27, r19
    13ca:	c0 01       	movw	r24, r0
    13cc:	a3 9f       	mul	r26, r19
    13ce:	70 0d       	add	r23, r0
    13d0:	81 1d       	adc	r24, r1
    13d2:	11 24       	eor	r1, r1
    13d4:	91 1d       	adc	r25, r1
    13d6:	b2 9f       	mul	r27, r18
    13d8:	70 0d       	add	r23, r0
    13da:	81 1d       	adc	r24, r1
    13dc:	11 24       	eor	r1, r1
    13de:	91 1d       	adc	r25, r1
    13e0:	08 95       	ret

000013e2 <__udivmodsi4>:
    13e2:	a1 e2       	ldi	r26, 0x21	; 33
    13e4:	1a 2e       	mov	r1, r26
    13e6:	aa 1b       	sub	r26, r26
    13e8:	bb 1b       	sub	r27, r27
    13ea:	fd 01       	movw	r30, r26
    13ec:	0d c0       	rjmp	.+26     	; 0x1408 <__udivmodsi4_ep>

000013ee <__udivmodsi4_loop>:
    13ee:	aa 1f       	adc	r26, r26
    13f0:	bb 1f       	adc	r27, r27
    13f2:	ee 1f       	adc	r30, r30
    13f4:	ff 1f       	adc	r31, r31
    13f6:	a2 17       	cp	r26, r18
    13f8:	b3 07       	cpc	r27, r19
    13fa:	e4 07       	cpc	r30, r20
    13fc:	f5 07       	cpc	r31, r21
    13fe:	20 f0       	brcs	.+8      	; 0x1408 <__udivmodsi4_ep>
    1400:	a2 1b       	sub	r26, r18
    1402:	b3 0b       	sbc	r27, r19
    1404:	e4 0b       	sbc	r30, r20
    1406:	f5 0b       	sbc	r31, r21

00001408 <__udivmodsi4_ep>:
    1408:	66 1f       	adc	r22, r22
    140a:	77 1f       	adc	r23, r23
    140c:	88 1f       	adc	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	1a 94       	dec	r1
    1412:	69 f7       	brne	.-38     	; 0x13ee <__udivmodsi4_loop>
    1414:	60 95       	com	r22
    1416:	70 95       	com	r23
    1418:	80 95       	com	r24
    141a:	90 95       	com	r25
    141c:	9b 01       	movw	r18, r22
    141e:	ac 01       	movw	r20, r24
    1420:	bd 01       	movw	r22, r26
    1422:	cf 01       	movw	r24, r30
    1424:	08 95       	ret

00001426 <_exit>:
    1426:	f8 94       	cli

00001428 <__stop_program>:
    1428:	ff cf       	rjmp	.-2      	; 0x1428 <__stop_program>
