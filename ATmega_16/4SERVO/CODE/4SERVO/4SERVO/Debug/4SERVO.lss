
4SERVO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c80  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000068e  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000189  00000000  00000000  000013ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002c6  00000000  00000000  00001543  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000094  00000000  00000000  0000180c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001b6  00000000  00000000  000018a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000b13  00000000  00000000  00001a56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000a8  00000000  00000000  00002569  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e8       	ldi	r30, 0x80	; 128
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 f6 03 	call	0x7ec	; 0x7ec <main>
  7a:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <servo_2>:
	}
}*/

//ham dieu khien 2 servo
void servo_2(int servo1,float start1,int stop1,int servo2,float start2,int stop2)
{
  82:	2f 92       	push	r2
  84:	3f 92       	push	r3
  86:	4f 92       	push	r4
  88:	5f 92       	push	r5
  8a:	6f 92       	push	r6
  8c:	7f 92       	push	r7
  8e:	8f 92       	push	r8
  90:	9f 92       	push	r9
  92:	af 92       	push	r10
  94:	bf 92       	push	r11
  96:	cf 92       	push	r12
  98:	df 92       	push	r13
  9a:	ef 92       	push	r14
  9c:	ff 92       	push	r15
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	68 97       	sbiw	r28, 0x18	; 24
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	f8 94       	cli
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	cd bf       	out	0x3d, r28	; 61
  b6:	18 2f       	mov	r17, r24
  b8:	cb 01       	movw	r24, r22
  ba:	ba 01       	movw	r22, r20
  bc:	49 01       	movw	r8, r18
	start1=940+5.17*start1;
  be:	24 ea       	ldi	r18, 0xA4	; 164
  c0:	30 e7       	ldi	r19, 0x70	; 112
  c2:	45 ea       	ldi	r20, 0xA5	; 165
  c4:	50 e4       	ldi	r21, 0x40	; 64
  c6:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
  ca:	20 e0       	ldi	r18, 0x00	; 0
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	4b e6       	ldi	r20, 0x6B	; 107
  d0:	54 e4       	ldi	r21, 0x44	; 68
  d2:	0e 94 24 04 	call	0x848	; 0x848 <__addsf3>
  d6:	6b 87       	std	Y+11, r22	; 0x0b
  d8:	7c 87       	std	Y+12, r23	; 0x0c
  da:	8d 87       	std	Y+13, r24	; 0x0d
  dc:	9e 87       	std	Y+14, r25	; 0x0e
	start2=940+5.17*start2;
  de:	24 ea       	ldi	r18, 0xA4	; 164
  e0:	30 e7       	ldi	r19, 0x70	; 112
  e2:	45 ea       	ldi	r20, 0xA5	; 165
  e4:	50 e4       	ldi	r21, 0x40	; 64
  e6:	c7 01       	movw	r24, r14
  e8:	b6 01       	movw	r22, r12
  ea:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	4b e6       	ldi	r20, 0x6B	; 107
  f4:	54 e4       	ldi	r21, 0x44	; 68
  f6:	0e 94 24 04 	call	0x848	; 0x848 <__addsf3>
  fa:	6f 87       	std	Y+15, r22	; 0x0f
  fc:	78 8b       	std	Y+16, r23	; 0x10
  fe:	89 8b       	std	Y+17, r24	; 0x11
 100:	9a 8b       	std	Y+18, r25	; 0x12
	stop1=940+5.17*stop1;
 102:	b4 01       	movw	r22, r8
 104:	88 27       	eor	r24, r24
 106:	77 fd       	sbrc	r23, 7
 108:	80 95       	com	r24
 10a:	98 2f       	mov	r25, r24
 10c:	0e 94 27 05 	call	0xa4e	; 0xa4e <__floatsisf>
 110:	24 ea       	ldi	r18, 0xA4	; 164
 112:	30 e7       	ldi	r19, 0x70	; 112
 114:	45 ea       	ldi	r20, 0xA5	; 165
 116:	50 e4       	ldi	r21, 0x40	; 64
 118:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	4b e6       	ldi	r20, 0x6B	; 107
 122:	54 e4       	ldi	r21, 0x44	; 68
 124:	0e 94 24 04 	call	0x848	; 0x848 <__addsf3>
 128:	2b 01       	movw	r4, r22
 12a:	3c 01       	movw	r6, r24
	stop2=940+5.17*stop2;
 12c:	b5 01       	movw	r22, r10
 12e:	88 27       	eor	r24, r24
 130:	77 fd       	sbrc	r23, 7
 132:	80 95       	com	r24
 134:	98 2f       	mov	r25, r24
 136:	0e 94 27 05 	call	0xa4e	; 0xa4e <__floatsisf>
 13a:	24 ea       	ldi	r18, 0xA4	; 164
 13c:	30 e7       	ldi	r19, 0x70	; 112
 13e:	45 ea       	ldi	r20, 0xA5	; 165
 140:	50 e4       	ldi	r21, 0x40	; 64
 142:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
 146:	20 e0       	ldi	r18, 0x00	; 0
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	4b e6       	ldi	r20, 0x6B	; 107
 14c:	54 e4       	ldi	r21, 0x44	; 68
 14e:	0e 94 24 04 	call	0x848	; 0x848 <__addsf3>
 152:	6b 01       	movw	r12, r22
 154:	7c 01       	movw	r14, r24
//ham dieu khien 2 servo
void servo_2(int servo1,float start1,int stop1,int servo2,float start2,int stop2)
{
	start1=940+5.17*start1;
	start2=940+5.17*start2;
	stop1=940+5.17*stop1;
 156:	c3 01       	movw	r24, r6
 158:	b2 01       	movw	r22, r4
 15a:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__fixsfsi>
	stop2=940+5.17*stop2;
	int temp,temp1,temp2;
	if (start1>stop1)//neu = 0 thi goc tang len.
 15e:	88 27       	eor	r24, r24
 160:	77 fd       	sbrc	r23, 7
 162:	80 95       	com	r24
 164:	98 2f       	mov	r25, r24
 166:	0e 94 27 05 	call	0xa4e	; 0xa4e <__floatsisf>
 16a:	2b 01       	movw	r4, r22
 16c:	3c 01       	movw	r6, r24
void servo_2(int servo1,float start1,int stop1,int servo2,float start2,int stop2)
{
	start1=940+5.17*start1;
	start2=940+5.17*start2;
	stop1=940+5.17*stop1;
	stop2=940+5.17*stop2;
 16e:	c7 01       	movw	r24, r14
 170:	b6 01       	movw	r22, r12
 172:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__fixsfsi>
	int temp,temp1,temp2;
	if (start1>stop1)//neu = 0 thi goc tang len.
		temp1=1;
	else
		temp1=0;
	if (start2>stop2)
 176:	88 27       	eor	r24, r24
 178:	77 fd       	sbrc	r23, 7
 17a:	80 95       	com	r24
 17c:	98 2f       	mov	r25, r24
 17e:	0e 94 27 05 	call	0xa4e	; 0xa4e <__floatsisf>
 182:	6f 83       	std	Y+7, r22	; 0x07
 184:	78 87       	std	Y+8, r23	; 0x08
 186:	89 87       	std	Y+9, r24	; 0x09
 188:	9a 87       	std	Y+10, r25	; 0x0a
			start2+=1;
		else
			start2-=1;
		if (start1<start2)//lay start1 < start2
		{
			setb(SERVO_PORT,servo1);
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	ac 01       	movw	r20, r24
 190:	02 c0       	rjmp	.+4      	; 0x196 <servo_2+0x114>
 192:	44 0f       	add	r20, r20
 194:	55 1f       	adc	r21, r21
 196:	1a 95       	dec	r17
 198:	e2 f7       	brpl	.-8      	; 0x192 <servo_2+0x110>
 19a:	4b 8b       	std	Y+19, r20	; 0x13
			setb(SERVO_PORT,servo2);
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <servo_2+0x120>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	0a 95       	dec	r16
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <servo_2+0x11c>
 1a6:	8c 8b       	std	Y+20, r24	; 0x14
			_delay_us(start1);
			clrb(SERVO_PORT,servo1);
 1a8:	24 2f       	mov	r18, r20
 1aa:	20 95       	com	r18
 1ac:	2d 8b       	std	Y+21, r18	; 0x15
			_delay_us(start2-start1);
			clrb(SERVO_PORT,servo2);
 1ae:	38 2f       	mov	r19, r24
 1b0:	30 95       	com	r19
 1b2:	3e 8b       	std	Y+22, r19	; 0x16
 1b4:	3f 84       	ldd	r3, Y+15	; 0x0f
 1b6:	28 88       	ldd	r2, Y+16	; 0x10
 1b8:	89 89       	ldd	r24, Y+17	; 0x11
 1ba:	89 83       	std	Y+1, r24	; 0x01
 1bc:	9a 89       	ldd	r25, Y+18	; 0x12
 1be:	9a 83       	std	Y+2, r25	; 0x02
 1c0:	1b 85       	ldd	r17, Y+11	; 0x0b
 1c2:	ec 84       	ldd	r14, Y+12	; 0x0c
 1c4:	fd 84       	ldd	r15, Y+13	; 0x0d
 1c6:	0e 85       	ldd	r16, Y+14	; 0x0e
 1c8:	e8 8e       	std	Y+24, r14	; 0x18
 1ca:	ff 8a       	std	Y+23, r15	; 0x17
 1cc:	de c2       	rjmp	.+1468   	; 0x78a <__stack+0x32b>
	else 
		temp2=0;
	while((start1<stop1)||(start2<stop2))
	{
		
		if (temp1==0)
 1ce:	a3 01       	movw	r20, r6
 1d0:	92 01       	movw	r18, r4
 1d2:	6b 85       	ldd	r22, Y+11	; 0x0b
 1d4:	7c 85       	ldd	r23, Y+12	; 0x0c
 1d6:	8d 85       	ldd	r24, Y+13	; 0x0d
 1d8:	9e 85       	ldd	r25, Y+14	; 0x0e
 1da:	0e 94 d7 05 	call	0xbae	; 0xbae <__gesf2>
 1de:	18 16       	cp	r1, r24
 1e0:	7c f0       	brlt	.+30     	; 0x200 <servo_2+0x17e>
			start1+=1;
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	40 e8       	ldi	r20, 0x80	; 128
 1e8:	5f e3       	ldi	r21, 0x3F	; 63
 1ea:	61 2f       	mov	r22, r17
 1ec:	78 8d       	ldd	r23, Y+24	; 0x18
 1ee:	8f 89       	ldd	r24, Y+23	; 0x17
 1f0:	90 2f       	mov	r25, r16
 1f2:	0e 94 24 04 	call	0x848	; 0x848 <__addsf3>
 1f6:	16 2f       	mov	r17, r22
 1f8:	78 8f       	std	Y+24, r23	; 0x18
 1fa:	8f 8b       	std	Y+23, r24	; 0x17
 1fc:	09 2f       	mov	r16, r25
 1fe:	0e c0       	rjmp	.+28     	; 0x21c <servo_2+0x19a>
		else
			start1-=1;
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	40 e8       	ldi	r20, 0x80	; 128
 206:	5f e3       	ldi	r21, 0x3F	; 63
 208:	61 2f       	mov	r22, r17
 20a:	78 8d       	ldd	r23, Y+24	; 0x18
 20c:	8f 89       	ldd	r24, Y+23	; 0x17
 20e:	90 2f       	mov	r25, r16
 210:	0e 94 23 04 	call	0x846	; 0x846 <__subsf3>
 214:	16 2f       	mov	r17, r22
 216:	78 8f       	std	Y+24, r23	; 0x18
 218:	8f 8b       	std	Y+23, r24	; 0x17
 21a:	09 2f       	mov	r16, r25
		if (temp2==0)
 21c:	2f 81       	ldd	r18, Y+7	; 0x07
 21e:	38 85       	ldd	r19, Y+8	; 0x08
 220:	49 85       	ldd	r20, Y+9	; 0x09
 222:	5a 85       	ldd	r21, Y+10	; 0x0a
 224:	6f 85       	ldd	r22, Y+15	; 0x0f
 226:	78 89       	ldd	r23, Y+16	; 0x10
 228:	89 89       	ldd	r24, Y+17	; 0x11
 22a:	9a 89       	ldd	r25, Y+18	; 0x12
 22c:	0e 94 d7 05 	call	0xbae	; 0xbae <__gesf2>
 230:	18 16       	cp	r1, r24
 232:	7c f0       	brlt	.+30     	; 0x252 <servo_2+0x1d0>
			start2+=1;
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	40 e8       	ldi	r20, 0x80	; 128
 23a:	5f e3       	ldi	r21, 0x3F	; 63
 23c:	63 2d       	mov	r22, r3
 23e:	72 2d       	mov	r23, r2
 240:	89 81       	ldd	r24, Y+1	; 0x01
 242:	9a 81       	ldd	r25, Y+2	; 0x02
 244:	0e 94 24 04 	call	0x848	; 0x848 <__addsf3>
 248:	36 2e       	mov	r3, r22
 24a:	27 2e       	mov	r2, r23
 24c:	89 83       	std	Y+1, r24	; 0x01
 24e:	9a 83       	std	Y+2, r25	; 0x02
 250:	0e c0       	rjmp	.+28     	; 0x26e <servo_2+0x1ec>
		else
			start2-=1;
 252:	20 e0       	ldi	r18, 0x00	; 0
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	40 e8       	ldi	r20, 0x80	; 128
 258:	5f e3       	ldi	r21, 0x3F	; 63
 25a:	63 2d       	mov	r22, r3
 25c:	72 2d       	mov	r23, r2
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	9a 81       	ldd	r25, Y+2	; 0x02
 262:	0e 94 23 04 	call	0x846	; 0x846 <__subsf3>
 266:	36 2e       	mov	r3, r22
 268:	27 2e       	mov	r2, r23
 26a:	89 83       	std	Y+1, r24	; 0x01
 26c:	9a 83       	std	Y+2, r25	; 0x02
		if (start1<start2)//lay start1 < start2
 26e:	23 2d       	mov	r18, r3
 270:	32 2d       	mov	r19, r2
 272:	49 81       	ldd	r20, Y+1	; 0x01
 274:	5a 81       	ldd	r21, Y+2	; 0x02
 276:	61 2f       	mov	r22, r17
 278:	78 8d       	ldd	r23, Y+24	; 0x18
 27a:	8f 89       	ldd	r24, Y+23	; 0x17
 27c:	90 2f       	mov	r25, r16
 27e:	0e 94 88 04 	call	0x910	; 0x910 <__cmpsf2>
 282:	88 23       	and	r24, r24
 284:	0c f0       	brlt	.+2      	; 0x288 <servo_2+0x206>
 286:	41 c1       	rjmp	.+642    	; 0x50a <__stack+0xab>
		{
			setb(SERVO_PORT,servo1);
 288:	8b b3       	in	r24, 0x1b	; 27
 28a:	eb 89       	ldd	r30, Y+19	; 0x13
 28c:	8e 2b       	or	r24, r30
 28e:	8b bb       	out	0x1b, r24	; 27
			setb(SERVO_PORT,servo2);
 290:	8b b3       	in	r24, 0x1b	; 27
 292:	fc 89       	ldd	r31, Y+20	; 0x14
 294:	8f 2b       	or	r24, r31
 296:	8b bb       	out	0x1b, r24	; 27
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
 298:	2b ea       	ldi	r18, 0xAB	; 171
 29a:	3a ea       	ldi	r19, 0xAA	; 170
 29c:	4a e2       	ldi	r20, 0x2A	; 42
 29e:	50 e4       	ldi	r21, 0x40	; 64
 2a0:	61 2f       	mov	r22, r17
 2a2:	78 8d       	ldd	r23, Y+24	; 0x18
 2a4:	8f 89       	ldd	r24, Y+23	; 0x17
 2a6:	90 2f       	mov	r25, r16
 2a8:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
 2ac:	6b 01       	movw	r12, r22
 2ae:	7c 01       	movw	r14, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	40 e8       	ldi	r20, 0x80	; 128
 2b6:	5f e3       	ldi	r21, 0x3F	; 63
 2b8:	0e 94 88 04 	call	0x910	; 0x910 <__cmpsf2>
 2bc:	88 23       	and	r24, r24
 2be:	0c f4       	brge	.+2      	; 0x2c2 <servo_2+0x240>
 2c0:	77 c0       	rjmp	.+238    	; 0x3b0 <servo_2+0x32e>

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
 2c2:	21 2f       	mov	r18, r17
 2c4:	38 8d       	ldd	r19, Y+24	; 0x18
 2c6:	4f 89       	ldd	r20, Y+23	; 0x17
 2c8:	50 2f       	mov	r21, r16
 2ca:	61 2f       	mov	r22, r17
 2cc:	78 8d       	ldd	r23, Y+24	; 0x18
 2ce:	8f 89       	ldd	r24, Y+23	; 0x17
 2d0:	90 2f       	mov	r25, r16
 2d2:	0e 94 24 04 	call	0x848	; 0x848 <__addsf3>
 2d6:	4b 01       	movw	r8, r22
 2d8:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
 2da:	20 e0       	ldi	r18, 0x00	; 0
 2dc:	3f ef       	ldi	r19, 0xFF	; 255
 2de:	4f e7       	ldi	r20, 0x7F	; 127
 2e0:	57 e4       	ldi	r21, 0x47	; 71
 2e2:	0e 94 d7 05 	call	0xbae	; 0xbae <__gesf2>
 2e6:	18 16       	cp	r1, r24
 2e8:	0c f0       	brlt	.+2      	; 0x2ec <servo_2+0x26a>
 2ea:	4b c0       	rjmp	.+150    	; 0x382 <servo_2+0x300>
	{
		_delay_ms(__us / 1000.0);
 2ec:	20 e0       	ldi	r18, 0x00	; 0
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	4a e7       	ldi	r20, 0x7A	; 122
 2f2:	54 e4       	ldi	r21, 0x44	; 68
 2f4:	61 2f       	mov	r22, r17
 2f6:	78 8d       	ldd	r23, Y+24	; 0x18
 2f8:	8f 89       	ldd	r24, Y+23	; 0x17
 2fa:	90 2f       	mov	r25, r16
 2fc:	0e 94 8c 04 	call	0x918	; 0x918 <__divsf3>
 300:	4b 01       	movw	r8, r22
 302:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 304:	20 e0       	ldi	r18, 0x00	; 0
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	4a ef       	ldi	r20, 0xFA	; 250
 30a:	54 e4       	ldi	r21, 0x44	; 68
 30c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
 310:	6b 01       	movw	r12, r22
 312:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 314:	20 e0       	ldi	r18, 0x00	; 0
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	40 e8       	ldi	r20, 0x80	; 128
 31a:	5f e3       	ldi	r21, 0x3F	; 63
 31c:	0e 94 88 04 	call	0x910	; 0x910 <__cmpsf2>
 320:	88 23       	and	r24, r24
 322:	44 f1       	brlt	.+80     	; 0x374 <servo_2+0x2f2>
		__ticks = 1;
	else if (__tmp > 65535)
 324:	20 e0       	ldi	r18, 0x00	; 0
 326:	3f ef       	ldi	r19, 0xFF	; 255
 328:	4f e7       	ldi	r20, 0x7F	; 127
 32a:	57 e4       	ldi	r21, 0x47	; 71
 32c:	c7 01       	movw	r24, r14
 32e:	b6 01       	movw	r22, r12
 330:	0e 94 d7 05 	call	0xbae	; 0xbae <__gesf2>
 334:	18 16       	cp	r1, r24
 336:	cc f4       	brge	.+50     	; 0x36a <servo_2+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 338:	20 e0       	ldi	r18, 0x00	; 0
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	40 e2       	ldi	r20, 0x20	; 32
 33e:	51 e4       	ldi	r21, 0x41	; 65
 340:	c5 01       	movw	r24, r10
 342:	b4 01       	movw	r22, r8
 344:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
 348:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fixunssfsi>
		while(__ticks)
 34c:	61 15       	cp	r22, r1
 34e:	71 05       	cpc	r23, r1
 350:	89 f1       	breq	.+98     	; 0x3b4 <servo_2+0x332>
 352:	38 8d       	ldd	r19, Y+24	; 0x18
 354:	2f 89       	ldd	r18, Y+23	; 0x17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 356:	88 ec       	ldi	r24, 0xC8	; 200
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <servo_2+0x2d8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 35e:	61 50       	subi	r22, 0x01	; 1
 360:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 362:	61 15       	cp	r22, r1
 364:	71 05       	cpc	r23, r1
 366:	b9 f7       	brne	.-18     	; 0x356 <servo_2+0x2d4>
 368:	27 c0       	rjmp	.+78     	; 0x3b8 <servo_2+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 36a:	c7 01       	movw	r24, r14
 36c:	b6 01       	movw	r22, r12
 36e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fixunssfsi>
 372:	02 c0       	rjmp	.+4      	; 0x378 <servo_2+0x2f6>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	cb 01       	movw	r24, r22
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <servo_2+0x2f8>
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	1e c0       	rjmp	.+60     	; 0x3be <servo_2+0x33c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 382:	20 e0       	ldi	r18, 0x00	; 0
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	4f e7       	ldi	r20, 0x7F	; 127
 388:	53 e4       	ldi	r21, 0x43	; 67
 38a:	c7 01       	movw	r24, r14
 38c:	b6 01       	movw	r22, r12
 38e:	0e 94 d7 05 	call	0xbae	; 0xbae <__gesf2>
 392:	18 16       	cp	r1, r24
 394:	44 f4       	brge	.+16     	; 0x3a6 <servo_2+0x324>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 396:	c5 01       	movw	r24, r10
 398:	b4 01       	movw	r22, r8
 39a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fixunssfsi>
 39e:	cb 01       	movw	r24, r22
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <servo_2+0x31e>
 3a4:	0e c0       	rjmp	.+28     	; 0x3c2 <servo_2+0x340>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 3a6:	c7 01       	movw	r24, r14
 3a8:	b6 01       	movw	r22, r12
 3aa:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fixunssfsi>
 3ae:	07 c0       	rjmp	.+14     	; 0x3be <servo_2+0x33c>
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 3b0:	61 e0       	ldi	r22, 0x01	; 1
 3b2:	05 c0       	rjmp	.+10     	; 0x3be <servo_2+0x33c>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3b4:	60 e0       	ldi	r22, 0x00	; 0
 3b6:	03 c0       	rjmp	.+6      	; 0x3be <servo_2+0x33c>
 3b8:	38 8f       	std	Y+24, r19	; 0x18
 3ba:	2f 8b       	std	Y+23, r18	; 0x17
 3bc:	60 e0       	ldi	r22, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 3be:	6a 95       	dec	r22
 3c0:	f1 f7       	brne	.-4      	; 0x3be <servo_2+0x33c>
			_delay_us(start1);
			clrb(SERVO_PORT,servo1);
 3c2:	8b b3       	in	r24, 0x1b	; 27
 3c4:	2d 89       	ldd	r18, Y+21	; 0x15
 3c6:	82 23       	and	r24, r18
 3c8:	8b bb       	out	0x1b, r24	; 27
			_delay_us(start2-start1);
 3ca:	21 2f       	mov	r18, r17
 3cc:	38 8d       	ldd	r19, Y+24	; 0x18
 3ce:	4f 89       	ldd	r20, Y+23	; 0x17
 3d0:	50 2f       	mov	r21, r16
 3d2:	63 2d       	mov	r22, r3
 3d4:	72 2d       	mov	r23, r2
 3d6:	89 81       	ldd	r24, Y+1	; 0x01
 3d8:	9a 81       	ldd	r25, Y+2	; 0x02
 3da:	0e 94 23 04 	call	0x846	; 0x846 <__subsf3>
 3de:	6b 01       	movw	r12, r22
 3e0:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
 3e2:	2b ea       	ldi	r18, 0xAB	; 171
 3e4:	3a ea       	ldi	r19, 0xAA	; 170
 3e6:	4a e2       	ldi	r20, 0x2A	; 42
 3e8:	50 e4       	ldi	r21, 0x40	; 64
 3ea:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
 3ee:	4b 01       	movw	r8, r22
 3f0:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
 3f2:	20 e0       	ldi	r18, 0x00	; 0
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	40 e8       	ldi	r20, 0x80	; 128
 3f8:	5f e3       	ldi	r21, 0x3F	; 63
 3fa:	0e 94 88 04 	call	0x910	; 0x910 <__cmpsf2>
 3fe:	88 23       	and	r24, r24
 400:	0c f4       	brge	.+2      	; 0x404 <servo_2+0x382>
 402:	75 c0       	rjmp	.+234    	; 0x4ee <__stack+0x8f>

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
 404:	a7 01       	movw	r20, r14
 406:	96 01       	movw	r18, r12
 408:	c7 01       	movw	r24, r14
 40a:	b6 01       	movw	r22, r12
 40c:	0e 94 24 04 	call	0x848	; 0x848 <__addsf3>
 410:	6b 83       	std	Y+3, r22	; 0x03
 412:	7c 83       	std	Y+4, r23	; 0x04
 414:	8d 83       	std	Y+5, r24	; 0x05
 416:	9e 83       	std	Y+6, r25	; 0x06
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
 418:	20 e0       	ldi	r18, 0x00	; 0
 41a:	3f ef       	ldi	r19, 0xFF	; 255
 41c:	4f e7       	ldi	r20, 0x7F	; 127
 41e:	57 e4       	ldi	r21, 0x47	; 71
 420:	0e 94 d7 05 	call	0xbae	; 0xbae <__gesf2>
 424:	18 16       	cp	r1, r24
 426:	0c f0       	brlt	.+2      	; 0x42a <servo_2+0x3a8>
 428:	49 c0       	rjmp	.+146    	; 0x4bc <__stack+0x5d>
	{
		_delay_ms(__us / 1000.0);
 42a:	20 e0       	ldi	r18, 0x00	; 0
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	4a e7       	ldi	r20, 0x7A	; 122
 430:	54 e4       	ldi	r21, 0x44	; 68
 432:	c7 01       	movw	r24, r14
 434:	b6 01       	movw	r22, r12
 436:	0e 94 8c 04 	call	0x918	; 0x918 <__divsf3>
 43a:	4b 01       	movw	r8, r22
 43c:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 43e:	20 e0       	ldi	r18, 0x00	; 0
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	4a ef       	ldi	r20, 0xFA	; 250
 444:	54 e4       	ldi	r21, 0x44	; 68
 446:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
 44a:	6b 01       	movw	r12, r22
 44c:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 44e:	20 e0       	ldi	r18, 0x00	; 0
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	40 e8       	ldi	r20, 0x80	; 128
 454:	5f e3       	ldi	r21, 0x3F	; 63
 456:	0e 94 88 04 	call	0x910	; 0x910 <__cmpsf2>
 45a:	88 23       	and	r24, r24
 45c:	44 f1       	brlt	.+80     	; 0x4ae <__stack+0x4f>
		__ticks = 1;
	else if (__tmp > 65535)
 45e:	20 e0       	ldi	r18, 0x00	; 0
 460:	3f ef       	ldi	r19, 0xFF	; 255
 462:	4f e7       	ldi	r20, 0x7F	; 127
 464:	57 e4       	ldi	r21, 0x47	; 71
 466:	c7 01       	movw	r24, r14
 468:	b6 01       	movw	r22, r12
 46a:	0e 94 d7 05 	call	0xbae	; 0xbae <__gesf2>
 46e:	18 16       	cp	r1, r24
 470:	cc f4       	brge	.+50     	; 0x4a4 <__stack+0x45>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 472:	20 e0       	ldi	r18, 0x00	; 0
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	40 e2       	ldi	r20, 0x20	; 32
 478:	51 e4       	ldi	r21, 0x41	; 65
 47a:	c5 01       	movw	r24, r10
 47c:	b4 01       	movw	r22, r8
 47e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
 482:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fixunssfsi>
		while(__ticks)
 486:	61 15       	cp	r22, r1
 488:	71 05       	cpc	r23, r1
 48a:	99 f1       	breq	.+102    	; 0x4f2 <__stack+0x93>
 48c:	38 8d       	ldd	r19, Y+24	; 0x18
 48e:	2f 89       	ldd	r18, Y+23	; 0x17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 490:	88 ec       	ldi	r24, 0xC8	; 200
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	01 97       	sbiw	r24, 0x01	; 1
 496:	f1 f7       	brne	.-4      	; 0x494 <__stack+0x35>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 498:	61 50       	subi	r22, 0x01	; 1
 49a:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 49c:	61 15       	cp	r22, r1
 49e:	71 05       	cpc	r23, r1
 4a0:	b9 f7       	brne	.-18     	; 0x490 <__stack+0x31>
 4a2:	29 c0       	rjmp	.+82     	; 0x4f6 <__stack+0x97>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 4a4:	c7 01       	movw	r24, r14
 4a6:	b6 01       	movw	r22, r12
 4a8:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fixunssfsi>
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__stack+0x53>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 4ae:	61 e0       	ldi	r22, 0x01	; 1
 4b0:	70 e0       	ldi	r23, 0x00	; 0
 4b2:	cb 01       	movw	r24, r22
 4b4:	01 97       	sbiw	r24, 0x01	; 1
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <__stack+0x55>
 4b8:	60 e0       	ldi	r22, 0x00	; 0
 4ba:	20 c0       	rjmp	.+64     	; 0x4fc <__stack+0x9d>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 4bc:	20 e0       	ldi	r18, 0x00	; 0
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	4f e7       	ldi	r20, 0x7F	; 127
 4c2:	53 e4       	ldi	r21, 0x43	; 67
 4c4:	c5 01       	movw	r24, r10
 4c6:	b4 01       	movw	r22, r8
 4c8:	0e 94 d7 05 	call	0xbae	; 0xbae <__gesf2>
 4cc:	18 16       	cp	r1, r24
 4ce:	54 f4       	brge	.+20     	; 0x4e4 <__stack+0x85>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 4d0:	6b 81       	ldd	r22, Y+3	; 0x03
 4d2:	7c 81       	ldd	r23, Y+4	; 0x04
 4d4:	8d 81       	ldd	r24, Y+5	; 0x05
 4d6:	9e 81       	ldd	r25, Y+6	; 0x06
 4d8:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fixunssfsi>
 4dc:	cb 01       	movw	r24, r22
 4de:	01 97       	sbiw	r24, 0x01	; 1
 4e0:	f1 f7       	brne	.-4      	; 0x4de <__stack+0x7f>
 4e2:	0e c0       	rjmp	.+28     	; 0x500 <__stack+0xa1>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 4e4:	c5 01       	movw	r24, r10
 4e6:	b4 01       	movw	r22, r8
 4e8:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fixunssfsi>
 4ec:	07 c0       	rjmp	.+14     	; 0x4fc <__stack+0x9d>
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 4ee:	61 e0       	ldi	r22, 0x01	; 1
 4f0:	05 c0       	rjmp	.+10     	; 0x4fc <__stack+0x9d>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4f2:	60 e0       	ldi	r22, 0x00	; 0
 4f4:	03 c0       	rjmp	.+6      	; 0x4fc <__stack+0x9d>
 4f6:	38 8f       	std	Y+24, r19	; 0x18
 4f8:	2f 8b       	std	Y+23, r18	; 0x17
 4fa:	60 e0       	ldi	r22, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 4fc:	6a 95       	dec	r22
 4fe:	f1 f7       	brne	.-4      	; 0x4fc <__stack+0x9d>
			clrb(SERVO_PORT,servo2);
 500:	8b b3       	in	r24, 0x1b	; 27
 502:	3e 89       	ldd	r19, Y+22	; 0x16
 504:	83 23       	and	r24, r19
 506:	8b bb       	out	0x1b, r24	; 27
 508:	40 c1       	rjmp	.+640    	; 0x78a <__stack+0x32b>
		}
		else
		{
			setb(SERVO_PORT,servo1);
 50a:	8b b3       	in	r24, 0x1b	; 27
 50c:	9b 89       	ldd	r25, Y+19	; 0x13
 50e:	89 2b       	or	r24, r25
 510:	8b bb       	out	0x1b, r24	; 27
			setb(SERVO_PORT,servo2);
 512:	8b b3       	in	r24, 0x1b	; 27
 514:	ec 89       	ldd	r30, Y+20	; 0x14
 516:	8e 2b       	or	r24, r30
 518:	8b bb       	out	0x1b, r24	; 27
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
 51a:	2b ea       	ldi	r18, 0xAB	; 171
 51c:	3a ea       	ldi	r19, 0xAA	; 170
 51e:	4a e2       	ldi	r20, 0x2A	; 42
 520:	50 e4       	ldi	r21, 0x40	; 64
 522:	63 2d       	mov	r22, r3
 524:	72 2d       	mov	r23, r2
 526:	89 81       	ldd	r24, Y+1	; 0x01
 528:	9a 81       	ldd	r25, Y+2	; 0x02
 52a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
 52e:	6b 01       	movw	r12, r22
 530:	7c 01       	movw	r14, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
 532:	20 e0       	ldi	r18, 0x00	; 0
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	40 e8       	ldi	r20, 0x80	; 128
 538:	5f e3       	ldi	r21, 0x3F	; 63
 53a:	0e 94 88 04 	call	0x910	; 0x910 <__cmpsf2>
 53e:	88 23       	and	r24, r24
 540:	0c f4       	brge	.+2      	; 0x544 <__stack+0xe5>
 542:	77 c0       	rjmp	.+238    	; 0x632 <__stack+0x1d3>

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
 544:	23 2d       	mov	r18, r3
 546:	32 2d       	mov	r19, r2
 548:	49 81       	ldd	r20, Y+1	; 0x01
 54a:	5a 81       	ldd	r21, Y+2	; 0x02
 54c:	63 2d       	mov	r22, r3
 54e:	72 2d       	mov	r23, r2
 550:	89 81       	ldd	r24, Y+1	; 0x01
 552:	9a 81       	ldd	r25, Y+2	; 0x02
 554:	0e 94 24 04 	call	0x848	; 0x848 <__addsf3>
 558:	4b 01       	movw	r8, r22
 55a:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
 55c:	20 e0       	ldi	r18, 0x00	; 0
 55e:	3f ef       	ldi	r19, 0xFF	; 255
 560:	4f e7       	ldi	r20, 0x7F	; 127
 562:	57 e4       	ldi	r21, 0x47	; 71
 564:	0e 94 d7 05 	call	0xbae	; 0xbae <__gesf2>
 568:	18 16       	cp	r1, r24
 56a:	0c f0       	brlt	.+2      	; 0x56e <__stack+0x10f>
 56c:	4b c0       	rjmp	.+150    	; 0x604 <__stack+0x1a5>
	{
		_delay_ms(__us / 1000.0);
 56e:	20 e0       	ldi	r18, 0x00	; 0
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	4a e7       	ldi	r20, 0x7A	; 122
 574:	54 e4       	ldi	r21, 0x44	; 68
 576:	63 2d       	mov	r22, r3
 578:	72 2d       	mov	r23, r2
 57a:	89 81       	ldd	r24, Y+1	; 0x01
 57c:	9a 81       	ldd	r25, Y+2	; 0x02
 57e:	0e 94 8c 04 	call	0x918	; 0x918 <__divsf3>
 582:	4b 01       	movw	r8, r22
 584:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 586:	20 e0       	ldi	r18, 0x00	; 0
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	4a ef       	ldi	r20, 0xFA	; 250
 58c:	54 e4       	ldi	r21, 0x44	; 68
 58e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
 592:	6b 01       	movw	r12, r22
 594:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 596:	20 e0       	ldi	r18, 0x00	; 0
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	40 e8       	ldi	r20, 0x80	; 128
 59c:	5f e3       	ldi	r21, 0x3F	; 63
 59e:	0e 94 88 04 	call	0x910	; 0x910 <__cmpsf2>
 5a2:	88 23       	and	r24, r24
 5a4:	44 f1       	brlt	.+80     	; 0x5f6 <__stack+0x197>
		__ticks = 1;
	else if (__tmp > 65535)
 5a6:	20 e0       	ldi	r18, 0x00	; 0
 5a8:	3f ef       	ldi	r19, 0xFF	; 255
 5aa:	4f e7       	ldi	r20, 0x7F	; 127
 5ac:	57 e4       	ldi	r21, 0x47	; 71
 5ae:	c7 01       	movw	r24, r14
 5b0:	b6 01       	movw	r22, r12
 5b2:	0e 94 d7 05 	call	0xbae	; 0xbae <__gesf2>
 5b6:	18 16       	cp	r1, r24
 5b8:	cc f4       	brge	.+50     	; 0x5ec <__stack+0x18d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 5ba:	20 e0       	ldi	r18, 0x00	; 0
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	40 e2       	ldi	r20, 0x20	; 32
 5c0:	51 e4       	ldi	r21, 0x41	; 65
 5c2:	c5 01       	movw	r24, r10
 5c4:	b4 01       	movw	r22, r8
 5c6:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
 5ca:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fixunssfsi>
		while(__ticks)
 5ce:	61 15       	cp	r22, r1
 5d0:	71 05       	cpc	r23, r1
 5d2:	89 f1       	breq	.+98     	; 0x636 <__stack+0x1d7>
 5d4:	38 8d       	ldd	r19, Y+24	; 0x18
 5d6:	2f 89       	ldd	r18, Y+23	; 0x17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5d8:	88 ec       	ldi	r24, 0xC8	; 200
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	01 97       	sbiw	r24, 0x01	; 1
 5de:	f1 f7       	brne	.-4      	; 0x5dc <__stack+0x17d>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5e0:	61 50       	subi	r22, 0x01	; 1
 5e2:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5e4:	61 15       	cp	r22, r1
 5e6:	71 05       	cpc	r23, r1
 5e8:	b9 f7       	brne	.-18     	; 0x5d8 <__stack+0x179>
 5ea:	27 c0       	rjmp	.+78     	; 0x63a <__stack+0x1db>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 5ec:	c7 01       	movw	r24, r14
 5ee:	b6 01       	movw	r22, r12
 5f0:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fixunssfsi>
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <__stack+0x19b>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 5f6:	61 e0       	ldi	r22, 0x01	; 1
 5f8:	70 e0       	ldi	r23, 0x00	; 0
 5fa:	cb 01       	movw	r24, r22
 5fc:	01 97       	sbiw	r24, 0x01	; 1
 5fe:	f1 f7       	brne	.-4      	; 0x5fc <__stack+0x19d>
 600:	60 e0       	ldi	r22, 0x00	; 0
 602:	1e c0       	rjmp	.+60     	; 0x640 <__stack+0x1e1>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 604:	20 e0       	ldi	r18, 0x00	; 0
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	4f e7       	ldi	r20, 0x7F	; 127
 60a:	53 e4       	ldi	r21, 0x43	; 67
 60c:	c7 01       	movw	r24, r14
 60e:	b6 01       	movw	r22, r12
 610:	0e 94 d7 05 	call	0xbae	; 0xbae <__gesf2>
 614:	18 16       	cp	r1, r24
 616:	44 f4       	brge	.+16     	; 0x628 <__stack+0x1c9>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 618:	c5 01       	movw	r24, r10
 61a:	b4 01       	movw	r22, r8
 61c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fixunssfsi>
 620:	cb 01       	movw	r24, r22
 622:	01 97       	sbiw	r24, 0x01	; 1
 624:	f1 f7       	brne	.-4      	; 0x622 <__stack+0x1c3>
 626:	0e c0       	rjmp	.+28     	; 0x644 <__stack+0x1e5>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 628:	c7 01       	movw	r24, r14
 62a:	b6 01       	movw	r22, r12
 62c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fixunssfsi>
 630:	07 c0       	rjmp	.+14     	; 0x640 <__stack+0x1e1>
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 632:	61 e0       	ldi	r22, 0x01	; 1
 634:	05 c0       	rjmp	.+10     	; 0x640 <__stack+0x1e1>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 636:	60 e0       	ldi	r22, 0x00	; 0
 638:	03 c0       	rjmp	.+6      	; 0x640 <__stack+0x1e1>
 63a:	38 8f       	std	Y+24, r19	; 0x18
 63c:	2f 8b       	std	Y+23, r18	; 0x17
 63e:	60 e0       	ldi	r22, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 640:	6a 95       	dec	r22
 642:	f1 f7       	brne	.-4      	; 0x640 <__stack+0x1e1>
			_delay_us(start2);
			clrb(SERVO_PORT,servo1);
 644:	8b b3       	in	r24, 0x1b	; 27
 646:	fd 89       	ldd	r31, Y+21	; 0x15
 648:	8f 23       	and	r24, r31
 64a:	8b bb       	out	0x1b, r24	; 27
			_delay_us(start1-start2);
 64c:	23 2d       	mov	r18, r3
 64e:	32 2d       	mov	r19, r2
 650:	49 81       	ldd	r20, Y+1	; 0x01
 652:	5a 81       	ldd	r21, Y+2	; 0x02
 654:	61 2f       	mov	r22, r17
 656:	78 8d       	ldd	r23, Y+24	; 0x18
 658:	8f 89       	ldd	r24, Y+23	; 0x17
 65a:	90 2f       	mov	r25, r16
 65c:	0e 94 23 04 	call	0x846	; 0x846 <__subsf3>
 660:	6b 01       	movw	r12, r22
 662:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
 664:	2b ea       	ldi	r18, 0xAB	; 171
 666:	3a ea       	ldi	r19, 0xAA	; 170
 668:	4a e2       	ldi	r20, 0x2A	; 42
 66a:	50 e4       	ldi	r21, 0x40	; 64
 66c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
 670:	4b 01       	movw	r8, r22
 672:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
 674:	20 e0       	ldi	r18, 0x00	; 0
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	40 e8       	ldi	r20, 0x80	; 128
 67a:	5f e3       	ldi	r21, 0x3F	; 63
 67c:	0e 94 88 04 	call	0x910	; 0x910 <__cmpsf2>
 680:	88 23       	and	r24, r24
 682:	0c f4       	brge	.+2      	; 0x686 <__stack+0x227>
 684:	75 c0       	rjmp	.+234    	; 0x770 <__stack+0x311>

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
 686:	a7 01       	movw	r20, r14
 688:	96 01       	movw	r18, r12
 68a:	c7 01       	movw	r24, r14
 68c:	b6 01       	movw	r22, r12
 68e:	0e 94 24 04 	call	0x848	; 0x848 <__addsf3>
 692:	6b 83       	std	Y+3, r22	; 0x03
 694:	7c 83       	std	Y+4, r23	; 0x04
 696:	8d 83       	std	Y+5, r24	; 0x05
 698:	9e 83       	std	Y+6, r25	; 0x06
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
 69a:	20 e0       	ldi	r18, 0x00	; 0
 69c:	3f ef       	ldi	r19, 0xFF	; 255
 69e:	4f e7       	ldi	r20, 0x7F	; 127
 6a0:	57 e4       	ldi	r21, 0x47	; 71
 6a2:	0e 94 d7 05 	call	0xbae	; 0xbae <__gesf2>
 6a6:	18 16       	cp	r1, r24
 6a8:	0c f0       	brlt	.+2      	; 0x6ac <__stack+0x24d>
 6aa:	49 c0       	rjmp	.+146    	; 0x73e <__stack+0x2df>
	{
		_delay_ms(__us / 1000.0);
 6ac:	20 e0       	ldi	r18, 0x00	; 0
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	4a e7       	ldi	r20, 0x7A	; 122
 6b2:	54 e4       	ldi	r21, 0x44	; 68
 6b4:	c7 01       	movw	r24, r14
 6b6:	b6 01       	movw	r22, r12
 6b8:	0e 94 8c 04 	call	0x918	; 0x918 <__divsf3>
 6bc:	4b 01       	movw	r8, r22
 6be:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 6c0:	20 e0       	ldi	r18, 0x00	; 0
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	4a ef       	ldi	r20, 0xFA	; 250
 6c6:	54 e4       	ldi	r21, 0x44	; 68
 6c8:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
 6cc:	6b 01       	movw	r12, r22
 6ce:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 6d0:	20 e0       	ldi	r18, 0x00	; 0
 6d2:	30 e0       	ldi	r19, 0x00	; 0
 6d4:	40 e8       	ldi	r20, 0x80	; 128
 6d6:	5f e3       	ldi	r21, 0x3F	; 63
 6d8:	0e 94 88 04 	call	0x910	; 0x910 <__cmpsf2>
 6dc:	88 23       	and	r24, r24
 6de:	44 f1       	brlt	.+80     	; 0x730 <__stack+0x2d1>
		__ticks = 1;
	else if (__tmp > 65535)
 6e0:	20 e0       	ldi	r18, 0x00	; 0
 6e2:	3f ef       	ldi	r19, 0xFF	; 255
 6e4:	4f e7       	ldi	r20, 0x7F	; 127
 6e6:	57 e4       	ldi	r21, 0x47	; 71
 6e8:	c7 01       	movw	r24, r14
 6ea:	b6 01       	movw	r22, r12
 6ec:	0e 94 d7 05 	call	0xbae	; 0xbae <__gesf2>
 6f0:	18 16       	cp	r1, r24
 6f2:	cc f4       	brge	.+50     	; 0x726 <__stack+0x2c7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 6f4:	20 e0       	ldi	r18, 0x00	; 0
 6f6:	30 e0       	ldi	r19, 0x00	; 0
 6f8:	40 e2       	ldi	r20, 0x20	; 32
 6fa:	51 e4       	ldi	r21, 0x41	; 65
 6fc:	c5 01       	movw	r24, r10
 6fe:	b4 01       	movw	r22, r8
 700:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__mulsf3>
 704:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fixunssfsi>
		while(__ticks)
 708:	61 15       	cp	r22, r1
 70a:	71 05       	cpc	r23, r1
 70c:	99 f1       	breq	.+102    	; 0x774 <__stack+0x315>
 70e:	38 8d       	ldd	r19, Y+24	; 0x18
 710:	2f 89       	ldd	r18, Y+23	; 0x17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 712:	88 ec       	ldi	r24, 0xC8	; 200
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	01 97       	sbiw	r24, 0x01	; 1
 718:	f1 f7       	brne	.-4      	; 0x716 <__stack+0x2b7>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 71a:	61 50       	subi	r22, 0x01	; 1
 71c:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 71e:	61 15       	cp	r22, r1
 720:	71 05       	cpc	r23, r1
 722:	b9 f7       	brne	.-18     	; 0x712 <__stack+0x2b3>
 724:	29 c0       	rjmp	.+82     	; 0x778 <__stack+0x319>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 726:	c7 01       	movw	r24, r14
 728:	b6 01       	movw	r22, r12
 72a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fixunssfsi>
 72e:	02 c0       	rjmp	.+4      	; 0x734 <__stack+0x2d5>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 730:	61 e0       	ldi	r22, 0x01	; 1
 732:	70 e0       	ldi	r23, 0x00	; 0
 734:	cb 01       	movw	r24, r22
 736:	01 97       	sbiw	r24, 0x01	; 1
 738:	f1 f7       	brne	.-4      	; 0x736 <__stack+0x2d7>
 73a:	60 e0       	ldi	r22, 0x00	; 0
 73c:	20 c0       	rjmp	.+64     	; 0x77e <__stack+0x31f>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 73e:	20 e0       	ldi	r18, 0x00	; 0
 740:	30 e0       	ldi	r19, 0x00	; 0
 742:	4f e7       	ldi	r20, 0x7F	; 127
 744:	53 e4       	ldi	r21, 0x43	; 67
 746:	c5 01       	movw	r24, r10
 748:	b4 01       	movw	r22, r8
 74a:	0e 94 d7 05 	call	0xbae	; 0xbae <__gesf2>
 74e:	18 16       	cp	r1, r24
 750:	54 f4       	brge	.+20     	; 0x766 <__stack+0x307>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 752:	6b 81       	ldd	r22, Y+3	; 0x03
 754:	7c 81       	ldd	r23, Y+4	; 0x04
 756:	8d 81       	ldd	r24, Y+5	; 0x05
 758:	9e 81       	ldd	r25, Y+6	; 0x06
 75a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fixunssfsi>
 75e:	cb 01       	movw	r24, r22
 760:	01 97       	sbiw	r24, 0x01	; 1
 762:	f1 f7       	brne	.-4      	; 0x760 <__stack+0x301>
 764:	0e c0       	rjmp	.+28     	; 0x782 <__stack+0x323>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 766:	c5 01       	movw	r24, r10
 768:	b4 01       	movw	r22, r8
 76a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fixunssfsi>
 76e:	07 c0       	rjmp	.+14     	; 0x77e <__stack+0x31f>
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 770:	61 e0       	ldi	r22, 0x01	; 1
 772:	05 c0       	rjmp	.+10     	; 0x77e <__stack+0x31f>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 774:	60 e0       	ldi	r22, 0x00	; 0
 776:	03 c0       	rjmp	.+6      	; 0x77e <__stack+0x31f>
 778:	38 8f       	std	Y+24, r19	; 0x18
 77a:	2f 8b       	std	Y+23, r18	; 0x17
 77c:	60 e0       	ldi	r22, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 77e:	6a 95       	dec	r22
 780:	f1 f7       	brne	.-4      	; 0x77e <__stack+0x31f>
			clrb(SERVO_PORT,servo2);
 782:	8b b3       	in	r24, 0x1b	; 27
 784:	2e 89       	ldd	r18, Y+22	; 0x16
 786:	82 23       	and	r24, r18
 788:	8b bb       	out	0x1b, r24	; 27
		temp1=0;
	if (start2>stop2)
		temp2=1;
	else 
		temp2=0;
	while((start1<stop1)||(start2<stop2))
 78a:	a3 01       	movw	r20, r6
 78c:	92 01       	movw	r18, r4
 78e:	61 2f       	mov	r22, r17
 790:	78 8d       	ldd	r23, Y+24	; 0x18
 792:	8f 89       	ldd	r24, Y+23	; 0x17
 794:	90 2f       	mov	r25, r16
 796:	0e 94 88 04 	call	0x910	; 0x910 <__cmpsf2>
 79a:	88 23       	and	r24, r24
 79c:	0c f4       	brge	.+2      	; 0x7a0 <__stack+0x341>
 79e:	17 cd       	rjmp	.-1490   	; 0x1ce <servo_2+0x14c>
 7a0:	2f 81       	ldd	r18, Y+7	; 0x07
 7a2:	38 85       	ldd	r19, Y+8	; 0x08
 7a4:	49 85       	ldd	r20, Y+9	; 0x09
 7a6:	5a 85       	ldd	r21, Y+10	; 0x0a
 7a8:	63 2d       	mov	r22, r3
 7aa:	72 2d       	mov	r23, r2
 7ac:	89 81       	ldd	r24, Y+1	; 0x01
 7ae:	9a 81       	ldd	r25, Y+2	; 0x02
 7b0:	0e 94 88 04 	call	0x910	; 0x910 <__cmpsf2>
 7b4:	88 23       	and	r24, r24
 7b6:	0c f4       	brge	.+2      	; 0x7ba <__stack+0x35b>
 7b8:	0a cd       	rjmp	.-1516   	; 0x1ce <servo_2+0x14c>
			clrb(SERVO_PORT,servo1);
			_delay_us(start1-start2);
			clrb(SERVO_PORT,servo2);
		}
	}
}
 7ba:	68 96       	adiw	r28, 0x18	; 24
 7bc:	0f b6       	in	r0, 0x3f	; 63
 7be:	f8 94       	cli
 7c0:	de bf       	out	0x3e, r29	; 62
 7c2:	0f be       	out	0x3f, r0	; 63
 7c4:	cd bf       	out	0x3d, r28	; 61
 7c6:	df 91       	pop	r29
 7c8:	cf 91       	pop	r28
 7ca:	1f 91       	pop	r17
 7cc:	0f 91       	pop	r16
 7ce:	ff 90       	pop	r15
 7d0:	ef 90       	pop	r14
 7d2:	df 90       	pop	r13
 7d4:	cf 90       	pop	r12
 7d6:	bf 90       	pop	r11
 7d8:	af 90       	pop	r10
 7da:	9f 90       	pop	r9
 7dc:	8f 90       	pop	r8
 7de:	7f 90       	pop	r7
 7e0:	6f 90       	pop	r6
 7e2:	5f 90       	pop	r5
 7e4:	4f 90       	pop	r4
 7e6:	3f 90       	pop	r3
 7e8:	2f 90       	pop	r2
 7ea:	08 95       	ret

000007ec <main>:
int main(void)
{
	//le cap 1 chan cap 2
	SERVO_DDR=0xFF;
 7ec:	8f ef       	ldi	r24, 0xFF	; 255
 7ee:	8a bb       	out	0x1a, r24	; 26
	SERVO_PORT=0X00;
 7f0:	1b ba       	out	0x1b, r1	; 27
	//PORTB=0XFF;
	//int a=1000,b=1200,c=1500,d=2000;
	while(1)
    {		
		servo_2(0,0,180,1,180,0);
		SERVO_PORT=0Xff;
 7f2:	77 24       	eor	r7, r7
 7f4:	7a 94       	dec	r7
 7f6:	68 94       	set
 7f8:	88 24       	eor	r8, r8
 7fa:	84 f8       	bld	r8, 4
 7fc:	0f 2e       	mov	r0, r31
 7fe:	f7 e2       	ldi	r31, 0x27	; 39
 800:	9f 2e       	mov	r9, r31
 802:	f0 2d       	mov	r31, r0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 804:	c8 ec       	ldi	r28, 0xC8	; 200
 806:	d0 e0       	ldi	r29, 0x00	; 0
	//DDRB=0X00;
	//PORTB=0XFF;
	//int a=1000,b=1200,c=1500,d=2000;
	while(1)
    {		
		servo_2(0,0,180,1,180,0);
 808:	a1 2c       	mov	r10, r1
 80a:	b1 2c       	mov	r11, r1
 80c:	0f 2e       	mov	r0, r31
 80e:	c1 2c       	mov	r12, r1
 810:	d1 2c       	mov	r13, r1
 812:	f4 e3       	ldi	r31, 0x34	; 52
 814:	ef 2e       	mov	r14, r31
 816:	f3 e4       	ldi	r31, 0x43	; 67
 818:	ff 2e       	mov	r15, r31
 81a:	f0 2d       	mov	r31, r0
 81c:	01 e0       	ldi	r16, 0x01	; 1
 81e:	10 e0       	ldi	r17, 0x00	; 0
 820:	24 eb       	ldi	r18, 0xB4	; 180
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	40 e0       	ldi	r20, 0x00	; 0
 826:	50 e0       	ldi	r21, 0x00	; 0
 828:	ba 01       	movw	r22, r20
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	0e 94 41 00 	call	0x82	; 0x82 <servo_2>
		SERVO_PORT=0Xff;
 832:	7b ba       	out	0x1b, r7	; 27
 834:	88 2d       	mov	r24, r8
 836:	99 2d       	mov	r25, r9
 838:	fe 01       	movw	r30, r28
 83a:	31 97       	sbiw	r30, 0x01	; 1
 83c:	f1 f7       	brne	.-4      	; 0x83a <main+0x4e>
 83e:	01 97       	sbiw	r24, 0x01	; 1
 840:	00 97       	sbiw	r24, 0x00	; 0
 842:	d1 f7       	brne	.-12     	; 0x838 <main+0x4c>
 844:	e1 cf       	rjmp	.-62     	; 0x808 <main+0x1c>

00000846 <__subsf3>:
 846:	50 58       	subi	r21, 0x80	; 128

00000848 <__addsf3>:
 848:	bb 27       	eor	r27, r27
 84a:	aa 27       	eor	r26, r26
 84c:	0e d0       	rcall	.+28     	; 0x86a <__addsf3x>
 84e:	75 c1       	rjmp	.+746    	; 0xb3a <__fp_round>
 850:	66 d1       	rcall	.+716    	; 0xb1e <__fp_pscA>
 852:	30 f0       	brcs	.+12     	; 0x860 <__addsf3+0x18>
 854:	6b d1       	rcall	.+726    	; 0xb2c <__fp_pscB>
 856:	20 f0       	brcs	.+8      	; 0x860 <__addsf3+0x18>
 858:	31 f4       	brne	.+12     	; 0x866 <__addsf3+0x1e>
 85a:	9f 3f       	cpi	r25, 0xFF	; 255
 85c:	11 f4       	brne	.+4      	; 0x862 <__addsf3+0x1a>
 85e:	1e f4       	brtc	.+6      	; 0x866 <__addsf3+0x1e>
 860:	5b c1       	rjmp	.+694    	; 0xb18 <__fp_nan>
 862:	0e f4       	brtc	.+2      	; 0x866 <__addsf3+0x1e>
 864:	e0 95       	com	r30
 866:	e7 fb       	bst	r30, 7
 868:	51 c1       	rjmp	.+674    	; 0xb0c <__fp_inf>

0000086a <__addsf3x>:
 86a:	e9 2f       	mov	r30, r25
 86c:	77 d1       	rcall	.+750    	; 0xb5c <__fp_split3>
 86e:	80 f3       	brcs	.-32     	; 0x850 <__addsf3+0x8>
 870:	ba 17       	cp	r27, r26
 872:	62 07       	cpc	r22, r18
 874:	73 07       	cpc	r23, r19
 876:	84 07       	cpc	r24, r20
 878:	95 07       	cpc	r25, r21
 87a:	18 f0       	brcs	.+6      	; 0x882 <__addsf3x+0x18>
 87c:	71 f4       	brne	.+28     	; 0x89a <__addsf3x+0x30>
 87e:	9e f5       	brtc	.+102    	; 0x8e6 <__addsf3x+0x7c>
 880:	8f c1       	rjmp	.+798    	; 0xba0 <__fp_zero>
 882:	0e f4       	brtc	.+2      	; 0x886 <__addsf3x+0x1c>
 884:	e0 95       	com	r30
 886:	0b 2e       	mov	r0, r27
 888:	ba 2f       	mov	r27, r26
 88a:	a0 2d       	mov	r26, r0
 88c:	0b 01       	movw	r0, r22
 88e:	b9 01       	movw	r22, r18
 890:	90 01       	movw	r18, r0
 892:	0c 01       	movw	r0, r24
 894:	ca 01       	movw	r24, r20
 896:	a0 01       	movw	r20, r0
 898:	11 24       	eor	r1, r1
 89a:	ff 27       	eor	r31, r31
 89c:	59 1b       	sub	r21, r25
 89e:	99 f0       	breq	.+38     	; 0x8c6 <__addsf3x+0x5c>
 8a0:	59 3f       	cpi	r21, 0xF9	; 249
 8a2:	50 f4       	brcc	.+20     	; 0x8b8 <__addsf3x+0x4e>
 8a4:	50 3e       	cpi	r21, 0xE0	; 224
 8a6:	68 f1       	brcs	.+90     	; 0x902 <__addsf3x+0x98>
 8a8:	1a 16       	cp	r1, r26
 8aa:	f0 40       	sbci	r31, 0x00	; 0
 8ac:	a2 2f       	mov	r26, r18
 8ae:	23 2f       	mov	r18, r19
 8b0:	34 2f       	mov	r19, r20
 8b2:	44 27       	eor	r20, r20
 8b4:	58 5f       	subi	r21, 0xF8	; 248
 8b6:	f3 cf       	rjmp	.-26     	; 0x89e <__addsf3x+0x34>
 8b8:	46 95       	lsr	r20
 8ba:	37 95       	ror	r19
 8bc:	27 95       	ror	r18
 8be:	a7 95       	ror	r26
 8c0:	f0 40       	sbci	r31, 0x00	; 0
 8c2:	53 95       	inc	r21
 8c4:	c9 f7       	brne	.-14     	; 0x8b8 <__addsf3x+0x4e>
 8c6:	7e f4       	brtc	.+30     	; 0x8e6 <__addsf3x+0x7c>
 8c8:	1f 16       	cp	r1, r31
 8ca:	ba 0b       	sbc	r27, r26
 8cc:	62 0b       	sbc	r22, r18
 8ce:	73 0b       	sbc	r23, r19
 8d0:	84 0b       	sbc	r24, r20
 8d2:	ba f0       	brmi	.+46     	; 0x902 <__addsf3x+0x98>
 8d4:	91 50       	subi	r25, 0x01	; 1
 8d6:	a1 f0       	breq	.+40     	; 0x900 <__addsf3x+0x96>
 8d8:	ff 0f       	add	r31, r31
 8da:	bb 1f       	adc	r27, r27
 8dc:	66 1f       	adc	r22, r22
 8de:	77 1f       	adc	r23, r23
 8e0:	88 1f       	adc	r24, r24
 8e2:	c2 f7       	brpl	.-16     	; 0x8d4 <__addsf3x+0x6a>
 8e4:	0e c0       	rjmp	.+28     	; 0x902 <__addsf3x+0x98>
 8e6:	ba 0f       	add	r27, r26
 8e8:	62 1f       	adc	r22, r18
 8ea:	73 1f       	adc	r23, r19
 8ec:	84 1f       	adc	r24, r20
 8ee:	48 f4       	brcc	.+18     	; 0x902 <__addsf3x+0x98>
 8f0:	87 95       	ror	r24
 8f2:	77 95       	ror	r23
 8f4:	67 95       	ror	r22
 8f6:	b7 95       	ror	r27
 8f8:	f7 95       	ror	r31
 8fa:	9e 3f       	cpi	r25, 0xFE	; 254
 8fc:	08 f0       	brcs	.+2      	; 0x900 <__addsf3x+0x96>
 8fe:	b3 cf       	rjmp	.-154    	; 0x866 <__addsf3+0x1e>
 900:	93 95       	inc	r25
 902:	88 0f       	add	r24, r24
 904:	08 f0       	brcs	.+2      	; 0x908 <__addsf3x+0x9e>
 906:	99 27       	eor	r25, r25
 908:	ee 0f       	add	r30, r30
 90a:	97 95       	ror	r25
 90c:	87 95       	ror	r24
 90e:	08 95       	ret

00000910 <__cmpsf2>:
 910:	d9 d0       	rcall	.+434    	; 0xac4 <__fp_cmp>
 912:	08 f4       	brcc	.+2      	; 0x916 <__cmpsf2+0x6>
 914:	81 e0       	ldi	r24, 0x01	; 1
 916:	08 95       	ret

00000918 <__divsf3>:
 918:	0c d0       	rcall	.+24     	; 0x932 <__divsf3x>
 91a:	0f c1       	rjmp	.+542    	; 0xb3a <__fp_round>
 91c:	07 d1       	rcall	.+526    	; 0xb2c <__fp_pscB>
 91e:	40 f0       	brcs	.+16     	; 0x930 <__divsf3+0x18>
 920:	fe d0       	rcall	.+508    	; 0xb1e <__fp_pscA>
 922:	30 f0       	brcs	.+12     	; 0x930 <__divsf3+0x18>
 924:	21 f4       	brne	.+8      	; 0x92e <__divsf3+0x16>
 926:	5f 3f       	cpi	r21, 0xFF	; 255
 928:	19 f0       	breq	.+6      	; 0x930 <__divsf3+0x18>
 92a:	f0 c0       	rjmp	.+480    	; 0xb0c <__fp_inf>
 92c:	51 11       	cpse	r21, r1
 92e:	39 c1       	rjmp	.+626    	; 0xba2 <__fp_szero>
 930:	f3 c0       	rjmp	.+486    	; 0xb18 <__fp_nan>

00000932 <__divsf3x>:
 932:	14 d1       	rcall	.+552    	; 0xb5c <__fp_split3>
 934:	98 f3       	brcs	.-26     	; 0x91c <__divsf3+0x4>

00000936 <__divsf3_pse>:
 936:	99 23       	and	r25, r25
 938:	c9 f3       	breq	.-14     	; 0x92c <__divsf3+0x14>
 93a:	55 23       	and	r21, r21
 93c:	b1 f3       	breq	.-20     	; 0x92a <__divsf3+0x12>
 93e:	95 1b       	sub	r25, r21
 940:	55 0b       	sbc	r21, r21
 942:	bb 27       	eor	r27, r27
 944:	aa 27       	eor	r26, r26
 946:	62 17       	cp	r22, r18
 948:	73 07       	cpc	r23, r19
 94a:	84 07       	cpc	r24, r20
 94c:	38 f0       	brcs	.+14     	; 0x95c <__divsf3_pse+0x26>
 94e:	9f 5f       	subi	r25, 0xFF	; 255
 950:	5f 4f       	sbci	r21, 0xFF	; 255
 952:	22 0f       	add	r18, r18
 954:	33 1f       	adc	r19, r19
 956:	44 1f       	adc	r20, r20
 958:	aa 1f       	adc	r26, r26
 95a:	a9 f3       	breq	.-22     	; 0x946 <__divsf3_pse+0x10>
 95c:	33 d0       	rcall	.+102    	; 0x9c4 <__divsf3_pse+0x8e>
 95e:	0e 2e       	mov	r0, r30
 960:	3a f0       	brmi	.+14     	; 0x970 <__divsf3_pse+0x3a>
 962:	e0 e8       	ldi	r30, 0x80	; 128
 964:	30 d0       	rcall	.+96     	; 0x9c6 <__divsf3_pse+0x90>
 966:	91 50       	subi	r25, 0x01	; 1
 968:	50 40       	sbci	r21, 0x00	; 0
 96a:	e6 95       	lsr	r30
 96c:	00 1c       	adc	r0, r0
 96e:	ca f7       	brpl	.-14     	; 0x962 <__divsf3_pse+0x2c>
 970:	29 d0       	rcall	.+82     	; 0x9c4 <__divsf3_pse+0x8e>
 972:	fe 2f       	mov	r31, r30
 974:	27 d0       	rcall	.+78     	; 0x9c4 <__divsf3_pse+0x8e>
 976:	66 0f       	add	r22, r22
 978:	77 1f       	adc	r23, r23
 97a:	88 1f       	adc	r24, r24
 97c:	bb 1f       	adc	r27, r27
 97e:	26 17       	cp	r18, r22
 980:	37 07       	cpc	r19, r23
 982:	48 07       	cpc	r20, r24
 984:	ab 07       	cpc	r26, r27
 986:	b0 e8       	ldi	r27, 0x80	; 128
 988:	09 f0       	breq	.+2      	; 0x98c <__divsf3_pse+0x56>
 98a:	bb 0b       	sbc	r27, r27
 98c:	80 2d       	mov	r24, r0
 98e:	bf 01       	movw	r22, r30
 990:	ff 27       	eor	r31, r31
 992:	93 58       	subi	r25, 0x83	; 131
 994:	5f 4f       	sbci	r21, 0xFF	; 255
 996:	2a f0       	brmi	.+10     	; 0x9a2 <__divsf3_pse+0x6c>
 998:	9e 3f       	cpi	r25, 0xFE	; 254
 99a:	51 05       	cpc	r21, r1
 99c:	68 f0       	brcs	.+26     	; 0x9b8 <__divsf3_pse+0x82>
 99e:	b6 c0       	rjmp	.+364    	; 0xb0c <__fp_inf>
 9a0:	00 c1       	rjmp	.+512    	; 0xba2 <__fp_szero>
 9a2:	5f 3f       	cpi	r21, 0xFF	; 255
 9a4:	ec f3       	brlt	.-6      	; 0x9a0 <__divsf3_pse+0x6a>
 9a6:	98 3e       	cpi	r25, 0xE8	; 232
 9a8:	dc f3       	brlt	.-10     	; 0x9a0 <__divsf3_pse+0x6a>
 9aa:	86 95       	lsr	r24
 9ac:	77 95       	ror	r23
 9ae:	67 95       	ror	r22
 9b0:	b7 95       	ror	r27
 9b2:	f7 95       	ror	r31
 9b4:	9f 5f       	subi	r25, 0xFF	; 255
 9b6:	c9 f7       	brne	.-14     	; 0x9aa <__divsf3_pse+0x74>
 9b8:	88 0f       	add	r24, r24
 9ba:	91 1d       	adc	r25, r1
 9bc:	96 95       	lsr	r25
 9be:	87 95       	ror	r24
 9c0:	97 f9       	bld	r25, 7
 9c2:	08 95       	ret
 9c4:	e1 e0       	ldi	r30, 0x01	; 1
 9c6:	66 0f       	add	r22, r22
 9c8:	77 1f       	adc	r23, r23
 9ca:	88 1f       	adc	r24, r24
 9cc:	bb 1f       	adc	r27, r27
 9ce:	62 17       	cp	r22, r18
 9d0:	73 07       	cpc	r23, r19
 9d2:	84 07       	cpc	r24, r20
 9d4:	ba 07       	cpc	r27, r26
 9d6:	20 f0       	brcs	.+8      	; 0x9e0 <__divsf3_pse+0xaa>
 9d8:	62 1b       	sub	r22, r18
 9da:	73 0b       	sbc	r23, r19
 9dc:	84 0b       	sbc	r24, r20
 9de:	ba 0b       	sbc	r27, r26
 9e0:	ee 1f       	adc	r30, r30
 9e2:	88 f7       	brcc	.-30     	; 0x9c6 <__divsf3_pse+0x90>
 9e4:	e0 95       	com	r30
 9e6:	08 95       	ret

000009e8 <__fixsfsi>:
 9e8:	04 d0       	rcall	.+8      	; 0x9f2 <__fixunssfsi>
 9ea:	68 94       	set
 9ec:	b1 11       	cpse	r27, r1
 9ee:	d9 c0       	rjmp	.+434    	; 0xba2 <__fp_szero>
 9f0:	08 95       	ret

000009f2 <__fixunssfsi>:
 9f2:	bc d0       	rcall	.+376    	; 0xb6c <__fp_splitA>
 9f4:	88 f0       	brcs	.+34     	; 0xa18 <__fixunssfsi+0x26>
 9f6:	9f 57       	subi	r25, 0x7F	; 127
 9f8:	90 f0       	brcs	.+36     	; 0xa1e <__fixunssfsi+0x2c>
 9fa:	b9 2f       	mov	r27, r25
 9fc:	99 27       	eor	r25, r25
 9fe:	b7 51       	subi	r27, 0x17	; 23
 a00:	a0 f0       	brcs	.+40     	; 0xa2a <__fixunssfsi+0x38>
 a02:	d1 f0       	breq	.+52     	; 0xa38 <__fixunssfsi+0x46>
 a04:	66 0f       	add	r22, r22
 a06:	77 1f       	adc	r23, r23
 a08:	88 1f       	adc	r24, r24
 a0a:	99 1f       	adc	r25, r25
 a0c:	1a f0       	brmi	.+6      	; 0xa14 <__fixunssfsi+0x22>
 a0e:	ba 95       	dec	r27
 a10:	c9 f7       	brne	.-14     	; 0xa04 <__fixunssfsi+0x12>
 a12:	12 c0       	rjmp	.+36     	; 0xa38 <__fixunssfsi+0x46>
 a14:	b1 30       	cpi	r27, 0x01	; 1
 a16:	81 f0       	breq	.+32     	; 0xa38 <__fixunssfsi+0x46>
 a18:	c3 d0       	rcall	.+390    	; 0xba0 <__fp_zero>
 a1a:	b1 e0       	ldi	r27, 0x01	; 1
 a1c:	08 95       	ret
 a1e:	c0 c0       	rjmp	.+384    	; 0xba0 <__fp_zero>
 a20:	67 2f       	mov	r22, r23
 a22:	78 2f       	mov	r23, r24
 a24:	88 27       	eor	r24, r24
 a26:	b8 5f       	subi	r27, 0xF8	; 248
 a28:	39 f0       	breq	.+14     	; 0xa38 <__fixunssfsi+0x46>
 a2a:	b9 3f       	cpi	r27, 0xF9	; 249
 a2c:	cc f3       	brlt	.-14     	; 0xa20 <__fixunssfsi+0x2e>
 a2e:	86 95       	lsr	r24
 a30:	77 95       	ror	r23
 a32:	67 95       	ror	r22
 a34:	b3 95       	inc	r27
 a36:	d9 f7       	brne	.-10     	; 0xa2e <__fixunssfsi+0x3c>
 a38:	3e f4       	brtc	.+14     	; 0xa48 <__fixunssfsi+0x56>
 a3a:	90 95       	com	r25
 a3c:	80 95       	com	r24
 a3e:	70 95       	com	r23
 a40:	61 95       	neg	r22
 a42:	7f 4f       	sbci	r23, 0xFF	; 255
 a44:	8f 4f       	sbci	r24, 0xFF	; 255
 a46:	9f 4f       	sbci	r25, 0xFF	; 255
 a48:	08 95       	ret

00000a4a <__floatunsisf>:
 a4a:	e8 94       	clt
 a4c:	09 c0       	rjmp	.+18     	; 0xa60 <__floatsisf+0x12>

00000a4e <__floatsisf>:
 a4e:	97 fb       	bst	r25, 7
 a50:	3e f4       	brtc	.+14     	; 0xa60 <__floatsisf+0x12>
 a52:	90 95       	com	r25
 a54:	80 95       	com	r24
 a56:	70 95       	com	r23
 a58:	61 95       	neg	r22
 a5a:	7f 4f       	sbci	r23, 0xFF	; 255
 a5c:	8f 4f       	sbci	r24, 0xFF	; 255
 a5e:	9f 4f       	sbci	r25, 0xFF	; 255
 a60:	99 23       	and	r25, r25
 a62:	a9 f0       	breq	.+42     	; 0xa8e <__floatsisf+0x40>
 a64:	f9 2f       	mov	r31, r25
 a66:	96 e9       	ldi	r25, 0x96	; 150
 a68:	bb 27       	eor	r27, r27
 a6a:	93 95       	inc	r25
 a6c:	f6 95       	lsr	r31
 a6e:	87 95       	ror	r24
 a70:	77 95       	ror	r23
 a72:	67 95       	ror	r22
 a74:	b7 95       	ror	r27
 a76:	f1 11       	cpse	r31, r1
 a78:	f8 cf       	rjmp	.-16     	; 0xa6a <__floatsisf+0x1c>
 a7a:	fa f4       	brpl	.+62     	; 0xaba <__floatsisf+0x6c>
 a7c:	bb 0f       	add	r27, r27
 a7e:	11 f4       	brne	.+4      	; 0xa84 <__floatsisf+0x36>
 a80:	60 ff       	sbrs	r22, 0
 a82:	1b c0       	rjmp	.+54     	; 0xaba <__floatsisf+0x6c>
 a84:	6f 5f       	subi	r22, 0xFF	; 255
 a86:	7f 4f       	sbci	r23, 0xFF	; 255
 a88:	8f 4f       	sbci	r24, 0xFF	; 255
 a8a:	9f 4f       	sbci	r25, 0xFF	; 255
 a8c:	16 c0       	rjmp	.+44     	; 0xaba <__floatsisf+0x6c>
 a8e:	88 23       	and	r24, r24
 a90:	11 f0       	breq	.+4      	; 0xa96 <__floatsisf+0x48>
 a92:	96 e9       	ldi	r25, 0x96	; 150
 a94:	11 c0       	rjmp	.+34     	; 0xab8 <__floatsisf+0x6a>
 a96:	77 23       	and	r23, r23
 a98:	21 f0       	breq	.+8      	; 0xaa2 <__floatsisf+0x54>
 a9a:	9e e8       	ldi	r25, 0x8E	; 142
 a9c:	87 2f       	mov	r24, r23
 a9e:	76 2f       	mov	r23, r22
 aa0:	05 c0       	rjmp	.+10     	; 0xaac <__floatsisf+0x5e>
 aa2:	66 23       	and	r22, r22
 aa4:	71 f0       	breq	.+28     	; 0xac2 <__floatsisf+0x74>
 aa6:	96 e8       	ldi	r25, 0x86	; 134
 aa8:	86 2f       	mov	r24, r22
 aaa:	70 e0       	ldi	r23, 0x00	; 0
 aac:	60 e0       	ldi	r22, 0x00	; 0
 aae:	2a f0       	brmi	.+10     	; 0xaba <__floatsisf+0x6c>
 ab0:	9a 95       	dec	r25
 ab2:	66 0f       	add	r22, r22
 ab4:	77 1f       	adc	r23, r23
 ab6:	88 1f       	adc	r24, r24
 ab8:	da f7       	brpl	.-10     	; 0xab0 <__floatsisf+0x62>
 aba:	88 0f       	add	r24, r24
 abc:	96 95       	lsr	r25
 abe:	87 95       	ror	r24
 ac0:	97 f9       	bld	r25, 7
 ac2:	08 95       	ret

00000ac4 <__fp_cmp>:
 ac4:	99 0f       	add	r25, r25
 ac6:	00 08       	sbc	r0, r0
 ac8:	55 0f       	add	r21, r21
 aca:	aa 0b       	sbc	r26, r26
 acc:	e0 e8       	ldi	r30, 0x80	; 128
 ace:	fe ef       	ldi	r31, 0xFE	; 254
 ad0:	16 16       	cp	r1, r22
 ad2:	17 06       	cpc	r1, r23
 ad4:	e8 07       	cpc	r30, r24
 ad6:	f9 07       	cpc	r31, r25
 ad8:	c0 f0       	brcs	.+48     	; 0xb0a <__fp_cmp+0x46>
 ada:	12 16       	cp	r1, r18
 adc:	13 06       	cpc	r1, r19
 ade:	e4 07       	cpc	r30, r20
 ae0:	f5 07       	cpc	r31, r21
 ae2:	98 f0       	brcs	.+38     	; 0xb0a <__fp_cmp+0x46>
 ae4:	62 1b       	sub	r22, r18
 ae6:	73 0b       	sbc	r23, r19
 ae8:	84 0b       	sbc	r24, r20
 aea:	95 0b       	sbc	r25, r21
 aec:	39 f4       	brne	.+14     	; 0xafc <__fp_cmp+0x38>
 aee:	0a 26       	eor	r0, r26
 af0:	61 f0       	breq	.+24     	; 0xb0a <__fp_cmp+0x46>
 af2:	23 2b       	or	r18, r19
 af4:	24 2b       	or	r18, r20
 af6:	25 2b       	or	r18, r21
 af8:	21 f4       	brne	.+8      	; 0xb02 <__fp_cmp+0x3e>
 afa:	08 95       	ret
 afc:	0a 26       	eor	r0, r26
 afe:	09 f4       	brne	.+2      	; 0xb02 <__fp_cmp+0x3e>
 b00:	a1 40       	sbci	r26, 0x01	; 1
 b02:	a6 95       	lsr	r26
 b04:	8f ef       	ldi	r24, 0xFF	; 255
 b06:	81 1d       	adc	r24, r1
 b08:	81 1d       	adc	r24, r1
 b0a:	08 95       	ret

00000b0c <__fp_inf>:
 b0c:	97 f9       	bld	r25, 7
 b0e:	9f 67       	ori	r25, 0x7F	; 127
 b10:	80 e8       	ldi	r24, 0x80	; 128
 b12:	70 e0       	ldi	r23, 0x00	; 0
 b14:	60 e0       	ldi	r22, 0x00	; 0
 b16:	08 95       	ret

00000b18 <__fp_nan>:
 b18:	9f ef       	ldi	r25, 0xFF	; 255
 b1a:	80 ec       	ldi	r24, 0xC0	; 192
 b1c:	08 95       	ret

00000b1e <__fp_pscA>:
 b1e:	00 24       	eor	r0, r0
 b20:	0a 94       	dec	r0
 b22:	16 16       	cp	r1, r22
 b24:	17 06       	cpc	r1, r23
 b26:	18 06       	cpc	r1, r24
 b28:	09 06       	cpc	r0, r25
 b2a:	08 95       	ret

00000b2c <__fp_pscB>:
 b2c:	00 24       	eor	r0, r0
 b2e:	0a 94       	dec	r0
 b30:	12 16       	cp	r1, r18
 b32:	13 06       	cpc	r1, r19
 b34:	14 06       	cpc	r1, r20
 b36:	05 06       	cpc	r0, r21
 b38:	08 95       	ret

00000b3a <__fp_round>:
 b3a:	09 2e       	mov	r0, r25
 b3c:	03 94       	inc	r0
 b3e:	00 0c       	add	r0, r0
 b40:	11 f4       	brne	.+4      	; 0xb46 <__fp_round+0xc>
 b42:	88 23       	and	r24, r24
 b44:	52 f0       	brmi	.+20     	; 0xb5a <__fp_round+0x20>
 b46:	bb 0f       	add	r27, r27
 b48:	40 f4       	brcc	.+16     	; 0xb5a <__fp_round+0x20>
 b4a:	bf 2b       	or	r27, r31
 b4c:	11 f4       	brne	.+4      	; 0xb52 <__fp_round+0x18>
 b4e:	60 ff       	sbrs	r22, 0
 b50:	04 c0       	rjmp	.+8      	; 0xb5a <__fp_round+0x20>
 b52:	6f 5f       	subi	r22, 0xFF	; 255
 b54:	7f 4f       	sbci	r23, 0xFF	; 255
 b56:	8f 4f       	sbci	r24, 0xFF	; 255
 b58:	9f 4f       	sbci	r25, 0xFF	; 255
 b5a:	08 95       	ret

00000b5c <__fp_split3>:
 b5c:	57 fd       	sbrc	r21, 7
 b5e:	90 58       	subi	r25, 0x80	; 128
 b60:	44 0f       	add	r20, r20
 b62:	55 1f       	adc	r21, r21
 b64:	59 f0       	breq	.+22     	; 0xb7c <__fp_splitA+0x10>
 b66:	5f 3f       	cpi	r21, 0xFF	; 255
 b68:	71 f0       	breq	.+28     	; 0xb86 <__fp_splitA+0x1a>
 b6a:	47 95       	ror	r20

00000b6c <__fp_splitA>:
 b6c:	88 0f       	add	r24, r24
 b6e:	97 fb       	bst	r25, 7
 b70:	99 1f       	adc	r25, r25
 b72:	61 f0       	breq	.+24     	; 0xb8c <__fp_splitA+0x20>
 b74:	9f 3f       	cpi	r25, 0xFF	; 255
 b76:	79 f0       	breq	.+30     	; 0xb96 <__fp_splitA+0x2a>
 b78:	87 95       	ror	r24
 b7a:	08 95       	ret
 b7c:	12 16       	cp	r1, r18
 b7e:	13 06       	cpc	r1, r19
 b80:	14 06       	cpc	r1, r20
 b82:	55 1f       	adc	r21, r21
 b84:	f2 cf       	rjmp	.-28     	; 0xb6a <__fp_split3+0xe>
 b86:	46 95       	lsr	r20
 b88:	f1 df       	rcall	.-30     	; 0xb6c <__fp_splitA>
 b8a:	08 c0       	rjmp	.+16     	; 0xb9c <__fp_splitA+0x30>
 b8c:	16 16       	cp	r1, r22
 b8e:	17 06       	cpc	r1, r23
 b90:	18 06       	cpc	r1, r24
 b92:	99 1f       	adc	r25, r25
 b94:	f1 cf       	rjmp	.-30     	; 0xb78 <__fp_splitA+0xc>
 b96:	86 95       	lsr	r24
 b98:	71 05       	cpc	r23, r1
 b9a:	61 05       	cpc	r22, r1
 b9c:	08 94       	sec
 b9e:	08 95       	ret

00000ba0 <__fp_zero>:
 ba0:	e8 94       	clt

00000ba2 <__fp_szero>:
 ba2:	bb 27       	eor	r27, r27
 ba4:	66 27       	eor	r22, r22
 ba6:	77 27       	eor	r23, r23
 ba8:	cb 01       	movw	r24, r22
 baa:	97 f9       	bld	r25, 7
 bac:	08 95       	ret

00000bae <__gesf2>:
 bae:	8a df       	rcall	.-236    	; 0xac4 <__fp_cmp>
 bb0:	08 f4       	brcc	.+2      	; 0xbb4 <__gesf2+0x6>
 bb2:	8f ef       	ldi	r24, 0xFF	; 255
 bb4:	08 95       	ret

00000bb6 <__mulsf3>:
 bb6:	0b d0       	rcall	.+22     	; 0xbce <__mulsf3x>
 bb8:	c0 cf       	rjmp	.-128    	; 0xb3a <__fp_round>
 bba:	b1 df       	rcall	.-158    	; 0xb1e <__fp_pscA>
 bbc:	28 f0       	brcs	.+10     	; 0xbc8 <__mulsf3+0x12>
 bbe:	b6 df       	rcall	.-148    	; 0xb2c <__fp_pscB>
 bc0:	18 f0       	brcs	.+6      	; 0xbc8 <__mulsf3+0x12>
 bc2:	95 23       	and	r25, r21
 bc4:	09 f0       	breq	.+2      	; 0xbc8 <__mulsf3+0x12>
 bc6:	a2 cf       	rjmp	.-188    	; 0xb0c <__fp_inf>
 bc8:	a7 cf       	rjmp	.-178    	; 0xb18 <__fp_nan>
 bca:	11 24       	eor	r1, r1
 bcc:	ea cf       	rjmp	.-44     	; 0xba2 <__fp_szero>

00000bce <__mulsf3x>:
 bce:	c6 df       	rcall	.-116    	; 0xb5c <__fp_split3>
 bd0:	a0 f3       	brcs	.-24     	; 0xbba <__mulsf3+0x4>

00000bd2 <__mulsf3_pse>:
 bd2:	95 9f       	mul	r25, r21
 bd4:	d1 f3       	breq	.-12     	; 0xbca <__mulsf3+0x14>
 bd6:	95 0f       	add	r25, r21
 bd8:	50 e0       	ldi	r21, 0x00	; 0
 bda:	55 1f       	adc	r21, r21
 bdc:	62 9f       	mul	r22, r18
 bde:	f0 01       	movw	r30, r0
 be0:	72 9f       	mul	r23, r18
 be2:	bb 27       	eor	r27, r27
 be4:	f0 0d       	add	r31, r0
 be6:	b1 1d       	adc	r27, r1
 be8:	63 9f       	mul	r22, r19
 bea:	aa 27       	eor	r26, r26
 bec:	f0 0d       	add	r31, r0
 bee:	b1 1d       	adc	r27, r1
 bf0:	aa 1f       	adc	r26, r26
 bf2:	64 9f       	mul	r22, r20
 bf4:	66 27       	eor	r22, r22
 bf6:	b0 0d       	add	r27, r0
 bf8:	a1 1d       	adc	r26, r1
 bfa:	66 1f       	adc	r22, r22
 bfc:	82 9f       	mul	r24, r18
 bfe:	22 27       	eor	r18, r18
 c00:	b0 0d       	add	r27, r0
 c02:	a1 1d       	adc	r26, r1
 c04:	62 1f       	adc	r22, r18
 c06:	73 9f       	mul	r23, r19
 c08:	b0 0d       	add	r27, r0
 c0a:	a1 1d       	adc	r26, r1
 c0c:	62 1f       	adc	r22, r18
 c0e:	83 9f       	mul	r24, r19
 c10:	a0 0d       	add	r26, r0
 c12:	61 1d       	adc	r22, r1
 c14:	22 1f       	adc	r18, r18
 c16:	74 9f       	mul	r23, r20
 c18:	33 27       	eor	r19, r19
 c1a:	a0 0d       	add	r26, r0
 c1c:	61 1d       	adc	r22, r1
 c1e:	23 1f       	adc	r18, r19
 c20:	84 9f       	mul	r24, r20
 c22:	60 0d       	add	r22, r0
 c24:	21 1d       	adc	r18, r1
 c26:	82 2f       	mov	r24, r18
 c28:	76 2f       	mov	r23, r22
 c2a:	6a 2f       	mov	r22, r26
 c2c:	11 24       	eor	r1, r1
 c2e:	9f 57       	subi	r25, 0x7F	; 127
 c30:	50 40       	sbci	r21, 0x00	; 0
 c32:	8a f0       	brmi	.+34     	; 0xc56 <__mulsf3_pse+0x84>
 c34:	e1 f0       	breq	.+56     	; 0xc6e <__mulsf3_pse+0x9c>
 c36:	88 23       	and	r24, r24
 c38:	4a f0       	brmi	.+18     	; 0xc4c <__mulsf3_pse+0x7a>
 c3a:	ee 0f       	add	r30, r30
 c3c:	ff 1f       	adc	r31, r31
 c3e:	bb 1f       	adc	r27, r27
 c40:	66 1f       	adc	r22, r22
 c42:	77 1f       	adc	r23, r23
 c44:	88 1f       	adc	r24, r24
 c46:	91 50       	subi	r25, 0x01	; 1
 c48:	50 40       	sbci	r21, 0x00	; 0
 c4a:	a9 f7       	brne	.-22     	; 0xc36 <__mulsf3_pse+0x64>
 c4c:	9e 3f       	cpi	r25, 0xFE	; 254
 c4e:	51 05       	cpc	r21, r1
 c50:	70 f0       	brcs	.+28     	; 0xc6e <__mulsf3_pse+0x9c>
 c52:	5c cf       	rjmp	.-328    	; 0xb0c <__fp_inf>
 c54:	a6 cf       	rjmp	.-180    	; 0xba2 <__fp_szero>
 c56:	5f 3f       	cpi	r21, 0xFF	; 255
 c58:	ec f3       	brlt	.-6      	; 0xc54 <__mulsf3_pse+0x82>
 c5a:	98 3e       	cpi	r25, 0xE8	; 232
 c5c:	dc f3       	brlt	.-10     	; 0xc54 <__mulsf3_pse+0x82>
 c5e:	86 95       	lsr	r24
 c60:	77 95       	ror	r23
 c62:	67 95       	ror	r22
 c64:	b7 95       	ror	r27
 c66:	f7 95       	ror	r31
 c68:	e7 95       	ror	r30
 c6a:	9f 5f       	subi	r25, 0xFF	; 255
 c6c:	c1 f7       	brne	.-16     	; 0xc5e <__mulsf3_pse+0x8c>
 c6e:	fe 2b       	or	r31, r30
 c70:	88 0f       	add	r24, r24
 c72:	91 1d       	adc	r25, r1
 c74:	96 95       	lsr	r25
 c76:	87 95       	ror	r24
 c78:	97 f9       	bld	r25, 7
 c7a:	08 95       	ret

00000c7c <_exit>:
 c7c:	f8 94       	cli

00000c7e <__stop_program>:
 c7e:	ff cf       	rjmp	.-2      	; 0xc7e <__stop_program>
