
SDCARDBYME.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000231  00800060  00800060  00000a62  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000a62  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000108  00000000  00000000  00000a92  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00002490  00000000  00000000  00000b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002f0  00000000  00000000  0000302a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000007c7  00000000  00000000  0000331a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000578  00000000  00000000  00003ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000008d5  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000027fa  00000000  00000000  00004931  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000110  00000000  00000000  0000712b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__ctors_end>
   4:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
   8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
   c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
  10:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
  14:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
  18:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
  1c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
  20:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
  24:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
  28:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
  2c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
  30:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
  34:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
  38:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
  3c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
  40:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
  44:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
  48:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
  4c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
  50:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	46 41       	sbci	r20, 0x16	; 22
  56:	54 33       	cpi	r21, 0x34	; 52
  58:	32 20       	and	r3, r2
  5a:	6e 6f       	ori	r22, 0xFE	; 254
  5c:	74 20       	and	r7, r4
  5e:	66 6f       	ori	r22, 0xF6	; 246
  60:	75 6e       	ori	r23, 0xE5	; 229
  62:	64 21       	and	r22, r4
	...

00000065 <__c.2296>:
  65:	55 6e 6b 6e 6f 77 6e 20 53 44 20 43 61 72 64 20     Unknown SD Card 
  75:	44 65 74 65 63 74 65 64 21 00                       Detected!.

0000007f <__c.2293>:
  7f:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
  8f:	79 20 43 61 72 64 20 28 56 65 72 20 32 2e 78 29     y Card (Ver 2.x)
  9f:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

000000aa <__c.2290>:
  aa:	48 69 67 68 20 43 61 70 61 63 69 74 79 20 43 61     High Capacity Ca
  ba:	72 64 20 44 65 74 65 63 74 65 64 21 00              rd Detected!.

000000c7 <__c.2286>:
  c7:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
  d7:	79 20 43 61 72 64 20 28 56 65 72 20 31 2e 78 29     y Card (Ver 1.x)
  e7:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

000000f2 <__c.2282>:
  f2:	43 61 72 64 20 49 6e 69 74 69 61 6c 69 7a 61 74     Card Initializat
 102:	69 6f 6e 20 66 61 69 6c 65 64 2e 2e 00              ion failed...

0000010f <__c.2280>:
 10f:	53 44 20 63 61 72 64 20 6e 6f 74 20 64 65 74 65     SD card not dete
 11f:	63 74 65 64 2e 2e 00                                cted...

00000126 <__c.2275>:
 126:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
 136:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
 146:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 00           *************.

00000154 <__c.2273>:
 154:	20 20 20 20 44 68 61 72 6d 61 6e 69 27 73 20 6d         Dharmani's m
 164:	69 63 72 6f 53 44 20 43 61 72 64 20 54 65 73 74     icroSD Card Test
 174:	69 6e 67 2e 2e 20 20 00                             ing..  .

0000017c <__c.2271>:
 17c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
 18c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
 19c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 00           *************.

000001aa <__ctors_end>:
 1aa:	11 24       	eor	r1, r1
 1ac:	1f be       	out	0x3f, r1	; 63
 1ae:	cf e5       	ldi	r28, 0x5F	; 95
 1b0:	d4 e0       	ldi	r29, 0x04	; 4
 1b2:	de bf       	out	0x3e, r29	; 62
 1b4:	cd bf       	out	0x3d, r28	; 61

000001b6 <__do_copy_data>:
 1b6:	10 e0       	ldi	r17, 0x00	; 0
 1b8:	a0 e6       	ldi	r26, 0x60	; 96
 1ba:	b0 e0       	ldi	r27, 0x00	; 0
 1bc:	ee ee       	ldi	r30, 0xEE	; 238
 1be:	f9 e0       	ldi	r31, 0x09	; 9
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <__do_copy_data+0x10>
 1c2:	05 90       	lpm	r0, Z+
 1c4:	0d 92       	st	X+, r0
 1c6:	a0 36       	cpi	r26, 0x60	; 96
 1c8:	b1 07       	cpc	r27, r17
 1ca:	d9 f7       	brne	.-10     	; 0x1c2 <__do_copy_data+0xc>

000001cc <__do_clear_bss>:
 1cc:	22 e0       	ldi	r18, 0x02	; 2
 1ce:	a0 e6       	ldi	r26, 0x60	; 96
 1d0:	b0 e0       	ldi	r27, 0x00	; 0
 1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <.do_clear_bss_start>

000001d4 <.do_clear_bss_loop>:
 1d4:	1d 92       	st	X+, r1

000001d6 <.do_clear_bss_start>:
 1d6:	a1 39       	cpi	r26, 0x91	; 145
 1d8:	b2 07       	cpc	r27, r18
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <.do_clear_bss_loop>
 1dc:	0e 94 2e 04 	call	0x85c	; 0x85c <main>
 1e0:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <_exit>

000001e4 <__bad_interrupt>:
 1e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e8 <spi_init>:
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
	  SD_readSingleBlock (startBlock);
 1e8:	82 e5       	ldi	r24, 0x52	; 82
 1ea:	8d b9       	out	0x0d, r24	; 13
 1ec:	1e b8       	out	0x0e, r1	; 14
 1ee:	08 95       	ret

000001f0 <SPI_transmit>:
 1f0:	8f b9       	out	0x0f, r24	; 15
 1f2:	77 9b       	sbis	0x0e, 7	; 14
	  i = fileSize % bytesPerSector;
 1f4:	fe cf       	rjmp	.-4      	; 0x1f2 <SPI_transmit+0x2>
 1f6:	8f b1       	in	r24, 0x0f	; 15
 1f8:	08 95       	ret

000001fa <SPI_receive>:
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	8f b9       	out	0x0f, r24	; 15
 1fe:	77 9b       	sbis	0x0e, 7	; 14
 200:	fe cf       	rjmp	.-4      	; 0x1fe <SPI_receive+0x4>
 202:	8f b1       	in	r24, 0x0f	; 15
 204:	08 95       	ret

00000206 <SD_sendCommand>:
 206:	cf 92       	push	r12
 208:	df 92       	push	r13
 20a:	ef 92       	push	r14
 20c:	ff 92       	push	r15
 20e:	cf 93       	push	r28
 210:	c8 2f       	mov	r28, r24
 212:	6a 01       	movw	r12, r20
 214:	7b 01       	movw	r14, r22
	  j = sector;
 216:	80 91 80 02 	lds	r24, 0x0280
   }
   else
   {
      startBlock = getFirstSector (cluster);
 21a:	81 11       	cpse	r24, r1
 21c:	15 c0       	rjmp	.+42     	; 0x248 <SD_sendCommand+0x42>
 21e:	8f ee       	ldi	r24, 0xEF	; 239
 220:	8c 0f       	add	r24, r28
 222:	82 30       	cpi	r24, 0x02	; 2
 224:	40 f0       	brcs	.+16     	; 0x236 <SD_sendCommand+0x30>
 226:	88 ee       	ldi	r24, 0xE8	; 232
 228:	8c 0f       	add	r24, r28
 22a:	82 30       	cpi	r24, 0x02	; 2
 22c:	20 f0       	brcs	.+8      	; 0x236 <SD_sendCommand+0x30>
 22e:	80 ee       	ldi	r24, 0xE0	; 224
 230:	8c 0f       	add	r24, r28
	  i=0;
 232:	82 30       	cpi	r24, 0x02	; 2
 234:	48 f4       	brcc	.+18     	; 0x248 <SD_sendCommand+0x42>
	  j=0;
 236:	0b 2e       	mov	r0, r27
   }
   

   TX_NEWLINE;
 238:	b9 e0       	ldi	r27, 0x09	; 9
 23a:	cc 0c       	add	r12, r12
 23c:	dd 1c       	adc	r13, r13
 23e:	ee 1c       	adc	r14, r14
 240:	ff 1c       	adc	r15, r15
 242:	ba 95       	dec	r27
   transmitString_F(PSTR(" Enter text (end with ~):"));
 244:	d1 f7       	brne	.-12     	; 0x23a <SD_sendCommand+0x34>
 246:	b0 2d       	mov	r27, r0
 248:	c1 98       	cbi	0x18, 1	; 24
 24a:	8c 2f       	mov	r24, r28
 24c:	80 64       	ori	r24, 0x40	; 64
   
   do
   {
     if(sectorEndFlag == 1) //special case when the last character in previous sector was '\r'
 24e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPI_transmit>
	 {
	 	transmitByte ('\n');
 252:	8f 2d       	mov	r24, r15
 254:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPI_transmit>
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
 258:	8e 2d       	mov	r24, r14
 25a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPI_transmit>
 25e:	8d 2d       	mov	r24, r13
 260:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPI_transmit>
		fileSize++;
 264:	8c 2d       	mov	r24, r12
 266:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPI_transmit>
 26a:	c8 30       	cpi	r28, 0x08	; 8
 26c:	21 f4       	brne	.+8      	; 0x276 <SD_sendCommand+0x70>
 26e:	87 e8       	ldi	r24, 0x87	; 135
 270:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPI_transmit>
 274:	07 c0       	rjmp	.+14     	; 0x284 <SD_sendCommand+0x7e>
 276:	85 e9       	ldi	r24, 0x95	; 149
 278:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPI_transmit>
 27c:	03 c0       	rjmp	.+6      	; 0x284 <SD_sendCommand+0x7e>
 27e:	fa 94       	dec	r15
 280:	11 f4       	brne	.+4      	; 0x286 <SD_sendCommand+0x80>
 282:	1b c0       	rjmp	.+54     	; 0x2ba <SD_sendCommand+0xb4>
 284:	f1 2c       	mov	r15, r1
 286:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SPI_receive>
   do
   {
     if(sectorEndFlag == 1) //special case when the last character in previous sector was '\r'
	 {
	 	transmitByte ('\n');
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
 28a:	8f 3f       	cpi	r24, 0xFF	; 255
 28c:	c1 f3       	breq	.-16     	; 0x27e <SD_sendCommand+0x78>
 28e:	f8 2e       	mov	r15, r24
		fileSize++;
	 }

	sectorEndFlag = 0;

	 data = receiveByte();
 290:	81 11       	cpse	r24, r1
 292:	15 c0       	rjmp	.+42     	; 0x2be <SD_sendCommand+0xb8>
 294:	ca 33       	cpi	r28, 0x3A	; 58
	 if(data == 0x08)	//'Back Space' key pressed
 296:	a1 f4       	brne	.+40     	; 0x2c0 <SD_sendCommand+0xba>
 298:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SPI_receive>
	 { 
	   if(i != 0)
 29c:	86 ff       	sbrs	r24, 6
 29e:	04 c0       	rjmp	.+8      	; 0x2a8 <SD_sendCommand+0xa2>
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	80 93 80 02 	sts	0x0280, r24
	   { 
	     transmitByte(data);
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <SD_sendCommand+0xa6>
 2a8:	10 92 80 02 	sts	0x0280, r1
		 transmitByte(' '); 
 2ac:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SPI_receive>
	     transmitByte(data); 
 2b0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SPI_receive>
 2b4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SPI_receive>
	     i--; 
 2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <SD_sendCommand+0xba>
 2ba:	f8 2e       	mov	r15, r24
		 fileSize--;
 2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <SD_sendCommand+0xba>
 2be:	f8 2e       	mov	r15, r24
 2c0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SPI_receive>
 2c4:	c1 9a       	sbi	0x18, 1	; 24
 2c6:	8f 2d       	mov	r24, r15
 2c8:	cf 91       	pop	r28
 2ca:	ff 90       	pop	r15
 2cc:	ef 90       	pop	r14
 2ce:	df 90       	pop	r13
 2d0:	cf 90       	pop	r12
 2d2:	08 95       	ret

000002d4 <SD_readSingleBlock>:
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	ab 01       	movw	r20, r22
 2da:	bc 01       	movw	r22, r24
 2dc:	81 e1       	ldi	r24, 0x11	; 17
 2de:	0e 94 03 01 	call	0x206	; 0x206 <SD_sendCommand>
 2e2:	81 11       	cpse	r24, r1
	   } 
	   continue;     
	 }
	 transmitByte(data);
 2e4:	23 c0       	rjmp	.+70     	; 0x32c <SD_readSingleBlock+0x58>
 2e6:	c1 98       	cbi	0x18, 1	; 24
     buffer[i++] = data;
 2e8:	c0 e0       	ldi	r28, 0x00	; 0
 2ea:	d0 e0       	ldi	r29, 0x00	; 0
 2ec:	06 c0       	rjmp	.+12     	; 0x2fa <SD_readSingleBlock+0x26>
 2ee:	21 97       	sbiw	r28, 0x01	; 1
 2f0:	20 97       	sbiw	r28, 0x00	; 0
 2f2:	19 f4       	brne	.+6      	; 0x2fa <SD_readSingleBlock+0x26>
 2f4:	c1 9a       	sbi	0x18, 1	; 24
	 fileSize++;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	19 c0       	rjmp	.+50     	; 0x32c <SD_readSingleBlock+0x58>
 2fa:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SPI_receive>
 2fe:	8e 3f       	cpi	r24, 0xFE	; 254
 300:	b1 f7       	brne	.-20     	; 0x2ee <SD_readSingleBlock+0x1a>
 302:	c0 e0       	ldi	r28, 0x00	; 0
 304:	d0 e0       	ldi	r29, 0x00	; 0
 306:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SPI_receive>
 30a:	fe 01       	movw	r30, r28
 30c:	e6 58       	subi	r30, 0x86	; 134
 30e:	ff 4f       	sbci	r31, 0xFF	; 255
 310:	80 83       	st	Z, r24
 312:	21 96       	adiw	r28, 0x01	; 1
 314:	c1 15       	cp	r28, r1
 316:	82 e0       	ldi	r24, 0x02	; 2
 318:	d8 07       	cpc	r29, r24
 31a:	a9 f7       	brne	.-22     	; 0x306 <SD_readSingleBlock+0x32>
     if(data == '\r')  //'Carriege Return (CR)' character
 31c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SPI_receive>
 320:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SPI_receive>
     {
        if(i == 512)
 324:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SPI_receive>
 328:	c1 9a       	sbi	0x18, 1	; 24
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
	    else
		{ 
		   transmitByte ('\n');
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
           buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
 330:	08 95       	ret

00000332 <SD_writeSingleBlock>:
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	ab 01       	movw	r20, r22
 338:	bc 01       	movw	r22, r24
		   fileSize++;
 33a:	88 e1       	ldi	r24, 0x18	; 24
 33c:	0e 94 03 01 	call	0x206	; 0x206 <SD_sendCommand>
 340:	81 11       	cpse	r24, r1
 342:	3e c0       	rjmp	.+124    	; 0x3c0 <SD_writeSingleBlock+0x8e>
 344:	c1 98       	cbi	0x18, 1	; 24
 346:	8e ef       	ldi	r24, 0xFE	; 254
 348:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPI_transmit>
 34c:	c0 e0       	ldi	r28, 0x00	; 0
 34e:	d0 e0       	ldi	r29, 0x00	; 0
 350:	fe 01       	movw	r30, r28
 352:	e6 58       	subi	r30, 0x86	; 134
 354:	ff 4f       	sbci	r31, 0xFF	; 255
 356:	80 81       	ld	r24, Z
 358:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPI_transmit>
 35c:	21 96       	adiw	r28, 0x01	; 1
 35e:	c1 15       	cp	r28, r1
        if(i == 512)
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
	    else
		{ 
		   transmitByte ('\n');
           buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
 360:	22 e0       	ldi	r18, 0x02	; 2
 362:	d2 07       	cpc	r29, r18
		   fileSize++;
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
 364:	a9 f7       	brne	.-22     	; 0x350 <SD_writeSingleBlock+0x1e>
 366:	8f ef       	ldi	r24, 0xFF	; 255
 368:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPI_transmit>
 36c:	8f ef       	ldi	r24, 0xFF	; 255
 36e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPI_transmit>
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
	   error = SD_writeSingleBlock (startBlock);
 372:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SPI_receive>
 376:	98 2f       	mov	r25, r24
 378:	9f 71       	andi	r25, 0x1F	; 31
 37a:	95 30       	cpi	r25, 0x05	; 5
 37c:	39 f0       	breq	.+14     	; 0x38c <SD_writeSingleBlock+0x5a>
 37e:	c1 9a       	sbi	0x18, 1	; 24
 380:	1f c0       	rjmp	.+62     	; 0x3c0 <SD_writeSingleBlock+0x8e>
 382:	21 96       	adiw	r28, 0x01	; 1
 384:	29 f4       	brne	.+10     	; 0x390 <SD_writeSingleBlock+0x5e>
       j++;
 386:	c1 9a       	sbi	0x18, 1	; 24
	   if(j == sectorPerCluster) {j = 0; break;}
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	1a c0       	rjmp	.+52     	; 0x3c0 <SD_writeSingleBlock+0x8e>
 38c:	c0 e0       	ldi	r28, 0x00	; 0
 38e:	d0 e0       	ldi	r29, 0x00	; 0
 390:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SPI_receive>
 394:	88 23       	and	r24, r24
 396:	a9 f3       	breq	.-22     	; 0x382 <SD_writeSingleBlock+0x50>
 398:	c1 9a       	sbi	0x18, 1	; 24
	   startBlock++; 
 39a:	8f ef       	ldi	r24, 0xFF	; 255
 39c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPI_transmit>
 3a0:	c1 98       	cbi	0x18, 1	; 24
 3a2:	08 c0       	rjmp	.+16     	; 0x3b4 <SD_writeSingleBlock+0x82>
 3a4:	ce 01       	movw	r24, r28
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	21 96       	adiw	r28, 0x01	; 1
 3aa:	19 f4       	brne	.+6      	; 0x3b2 <SD_writeSingleBlock+0x80>
 3ac:	c1 9a       	sbi	0x18, 1	; 24
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	07 c0       	rjmp	.+14     	; 0x3c0 <SD_writeSingleBlock+0x8e>
 3b2:	ec 01       	movw	r28, r24
 3b4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SPI_receive>
 3b8:	88 23       	and	r24, r24
 3ba:	a1 f3       	breq	.-24     	; 0x3a4 <SD_writeSingleBlock+0x72>
 3bc:	c1 9a       	sbi	0x18, 1	; 24
 3be:	80 e0       	ldi	r24, 0x00	; 0
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	08 95       	ret

000003c6 <uart0_init>:
 3c6:	10 bc       	out	0x20, r1	; 32
 3c8:	83 e3       	ldi	r24, 0x33	; 51
	   error = SD_writeSingleBlock (startBlock);
       j++;
	   if(j == sectorPerCluster) {j = 0; break;}
	   startBlock++; 
     }
	}while (data != '~');
 3ca:	89 b9       	out	0x09, r24	; 9
 3cc:	86 e8       	ldi	r24, 0x86	; 134
 3ce:	80 bd       	out	0x20, r24	; 32
 3d0:	88 e9       	ldi	r24, 0x98	; 152
 3d2:	8a b9       	out	0x0a, r24	; 10

   if(data == '~') 
 3d4:	08 95       	ret

000003d6 <transmitByte>:
 3d6:	5d 9b       	sbis	0x0b, 5	; 11
 3d8:	fe cf       	rjmp	.-4      	; 0x3d6 <transmitByte>
 3da:	8c b9       	out	0x0c, r24	; 12
   {
      fileSize--;	//to remove the last entered '~' character
 3dc:	08 95       	ret

000003de <SD_init>:
 3de:	0f 93       	push	r16
 3e0:	1f 93       	push	r17
 3e2:	cf 93       	push	r28
 3e4:	df 93       	push	r29
 3e6:	1a e0       	ldi	r17, 0x0A	; 10
 3e8:	8f ef       	ldi	r24, 0xFF	; 255
 3ea:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPI_transmit>
 3ee:	11 50       	subi	r17, 0x01	; 1
 3f0:	d9 f7       	brne	.-10     	; 0x3e8 <SD_init+0xa>
 3f2:	c1 98       	cbi	0x18, 1	; 24
 3f4:	40 e0       	ldi	r20, 0x00	; 0
 3f6:	50 e0       	ldi	r21, 0x00	; 0
 3f8:	ba 01       	movw	r22, r20
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	0e 94 03 01 	call	0x206	; 0x206 <SD_sendCommand>
 400:	c0 e2       	ldi	r28, 0x20	; 32
	  i--;
 402:	d0 e0       	ldi	r29, 0x00	; 0
 404:	0a c0       	rjmp	.+20     	; 0x41a <SD_init+0x3c>
 406:	40 e0       	ldi	r20, 0x00	; 0
	  for(;i<512;i++)  //fill the rest of the buffer with 0x00
 408:	50 e0       	ldi	r21, 0x00	; 0
 40a:	ba 01       	movw	r22, r20
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	0e 94 03 01 	call	0x206	; 0x206 <SD_sendCommand>
        buffer[i]= 0x00;
 412:	21 97       	sbiw	r28, 0x01	; 1
 414:	20 97       	sbiw	r28, 0x00	; 0
 416:	09 f4       	brne	.+2      	; 0x41a <SD_init+0x3c>

   if(data == '~') 
   {
      fileSize--;	//to remove the last entered '~' character
	  i--;
	  for(;i<512;i++)  //fill the rest of the buffer with 0x00
 418:	7a c0       	rjmp	.+244    	; 0x50e <__stack+0xaf>
 41a:	81 30       	cpi	r24, 0x01	; 1
 41c:	a1 f7       	brne	.-24     	; 0x406 <SD_init+0x28>
 41e:	c1 9a       	sbi	0x18, 1	; 24
 420:	8f ef       	ldi	r24, 0xFF	; 255
 422:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPI_transmit>
        buffer[i]= 0x00;
   	  error = SD_writeSingleBlock (startBlock);
 426:	8f ef       	ldi	r24, 0xFF	; 255
 428:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPI_transmit>
 42c:	4a ea       	ldi	r20, 0xAA	; 170
 42e:	51 e0       	ldi	r21, 0x01	; 1
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	88 e0       	ldi	r24, 0x08	; 8
 436:	0e 94 03 01 	call	0x206	; 0x206 <SD_sendCommand>

   getSetNextCluster(prevCluster, SET, cluster);
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
}        

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
 43a:	ce ef       	ldi	r28, 0xFE	; 254
 43c:	d0 e0       	ldi	r29, 0x00	; 0
 43e:	15 c0       	rjmp	.+42     	; 0x46a <__stack+0xb>
 440:	4a ea       	ldi	r20, 0xAA	; 170
 442:	51 e0       	ldi	r21, 0x01	; 1

if(appendFile)  //executes this loop if file is to be appended
 444:	60 e0       	ldi	r22, 0x00	; 0
 446:	70 e0       	ldi	r23, 0x00	; 0
 448:	88 e0       	ldi	r24, 0x08	; 8
 44a:	0e 94 03 01 	call	0x206	; 0x206 <SD_sendCommand>
      break;
   } 
	  
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
 44e:	21 97       	sbiw	r28, 0x01	; 1
 450:	20 97       	sbiw	r28, 0x00	; 0
 452:	59 f4       	brne	.+22     	; 0x46a <__stack+0xb>
 454:	8d e0       	ldi	r24, 0x0D	; 13
 456:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <transmitByte>

   if(cluster == 0)
 45a:	8a e0       	ldi	r24, 0x0A	; 10
 45c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <transmitByte>
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	80 93 8b 02 	sts	0x028B, r24
   {
      TX_NEWLINE;
 466:	01 e0       	ldi	r16, 0x01	; 1
 468:	03 c0       	rjmp	.+6      	; 0x470 <__stack+0x11>
 46a:	81 30       	cpi	r24, 0x01	; 1
 46c:	49 f7       	brne	.-46     	; 0x440 <SD_init+0x62>
 46e:	02 e0       	ldi	r16, 0x02	; 2
      transmitString_F(PSTR(" No free cluster!"));
 470:	40 e0       	ldi	r20, 0x00	; 0
 472:	50 e0       	ldi	r21, 0x00	; 0
 474:	ba 01       	movw	r22, r20
 476:	87 e3       	ldi	r24, 0x37	; 55
	  return;
 478:	0e 94 03 01 	call	0x206	; 0x206 <SD_sendCommand>
   }

   getSetNextCluster(prevCluster, SET, cluster);
 47c:	40 e0       	ldi	r20, 0x00	; 0
 47e:	50 e0       	ldi	r21, 0x00	; 0
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	70 e4       	ldi	r23, 0x40	; 64
 484:	89 e2       	ldi	r24, 0x29	; 41
 486:	0e 94 03 01 	call	0x206	; 0x206 <SD_sendCommand>
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
 48a:	ce ef       	ldi	r28, 0xFE	; 254
 48c:	d0 e0       	ldi	r29, 0x00	; 0
 48e:	18 c0       	rjmp	.+48     	; 0x4c0 <__stack+0x61>
 490:	40 e0       	ldi	r20, 0x00	; 0
 492:	50 e0       	ldi	r21, 0x00	; 0
 494:	ba 01       	movw	r22, r20
 496:	87 e3       	ldi	r24, 0x37	; 55
 498:	0e 94 03 01 	call	0x206	; 0x206 <SD_sendCommand>
      break;
   } 
	  
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
 49c:	40 e0       	ldi	r20, 0x00	; 0
 49e:	50 e0       	ldi	r21, 0x00	; 0
	  return;
   }

   getSetNextCluster(prevCluster, SET, cluster);
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
}        
 4a0:	60 e0       	ldi	r22, 0x00	; 0

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry

if(appendFile)  //executes this loop if file is to be appended
{
  SD_readSingleBlock (appendFileSector);    
 4a2:	70 e4       	ldi	r23, 0x40	; 64
 4a4:	89 e2       	ldi	r24, 0x29	; 41
 4a6:	0e 94 03 01 	call	0x206	; 0x206 <SD_sendCommand>
 4aa:	21 97       	sbiw	r28, 0x01	; 1
 4ac:	20 97       	sbiw	r28, 0x00	; 0
 4ae:	41 f4       	brne	.+16     	; 0x4c0 <__stack+0x61>
 4b0:	8d e0       	ldi	r24, 0x0D	; 13
 4b2:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <transmitByte>
  dir = (struct dir_Structure *) &buffer[appendFileLocation]; 
 4b6:	8a e0       	ldi	r24, 0x0A	; 10
 4b8:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <transmitByte>
 4bc:	12 e0       	ldi	r17, 0x02	; 2
 4be:	32 c0       	rjmp	.+100    	; 0x524 <__stack+0xc5>
 4c0:	81 11       	cpse	r24, r1
  extraMemory = fileSize - dir->fileSize;
 4c2:	e6 cf       	rjmp	.-52     	; 0x490 <__stack+0x31>
 4c4:	10 92 80 02 	sts	0x0280, r1
 4c8:	02 30       	cpi	r16, 0x02	; 2
 4ca:	61 f5       	brne	.+88     	; 0x524 <__stack+0xc5>
 4cc:	22 c0       	rjmp	.+68     	; 0x512 <__stack+0xb3>
 4ce:	40 e0       	ldi	r20, 0x00	; 0
 4d0:	50 e0       	ldi	r21, 0x00	; 0
 4d2:	ba 01       	movw	r22, r20
 4d4:	8a e3       	ldi	r24, 0x3A	; 58
 4d6:	0e 94 03 01 	call	0x206	; 0x206 <SD_sendCommand>
 4da:	21 97       	sbiw	r28, 0x01	; 1
 4dc:	20 97       	sbiw	r28, 0x00	; 0
 4de:	49 f4       	brne	.+18     	; 0x4f2 <__stack+0x93>
 4e0:	8d e0       	ldi	r24, 0x0D	; 13
 4e2:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <transmitByte>
  dir->fileSize = fileSize;
 4e6:	8a e0       	ldi	r24, 0x0A	; 10
 4e8:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <transmitByte>
 4ec:	10 92 8b 02 	sts	0x028B, r1
  SD_writeSingleBlock (appendFileSector);
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <__stack+0x97>
 4f2:	81 11       	cpse	r24, r1
 4f4:	ec cf       	rjmp	.-40     	; 0x4ce <__stack+0x6f>
 4f6:	80 91 80 02 	lds	r24, 0x0280
 4fa:	81 30       	cpi	r24, 0x01	; 1
 4fc:	21 f4       	brne	.+8      	; 0x506 <__stack+0xa7>
 4fe:	82 e0       	ldi	r24, 0x02	; 2
 500:	80 93 8b 02 	sts	0x028B, r24
  freeMemoryUpdate (REMOVE, extraMemory); //updating free memory count in FSinfo sector;
 504:	0f c0       	rjmp	.+30     	; 0x524 <__stack+0xc5>
 506:	83 e0       	ldi	r24, 0x03	; 3
 508:	80 93 8b 02 	sts	0x028B, r24

  
  TX_NEWLINE;
 50c:	0b c0       	rjmp	.+22     	; 0x524 <__stack+0xc5>
 50e:	11 e0       	ldi	r17, 0x01	; 1
 510:	09 c0       	rjmp	.+18     	; 0x524 <__stack+0xc5>
 512:	40 e0       	ldi	r20, 0x00	; 0
 514:	50 e0       	ldi	r21, 0x00	; 0
 516:	ba 01       	movw	r22, r20
  transmitString_F(PSTR(" File appended!"));
 518:	8a e3       	ldi	r24, 0x3A	; 58
 51a:	0e 94 03 01 	call	0x206	; 0x206 <SD_sendCommand>
 51e:	ce ef       	ldi	r28, 0xFE	; 254
  TX_NEWLINE;
 520:	d0 e0       	ldi	r29, 0x00	; 0
 522:	e7 cf       	rjmp	.-50     	; 0x4f2 <__stack+0x93>
 524:	81 2f       	mov	r24, r17
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	1f 91       	pop	r17
  return;
 52c:	0f 91       	pop	r16
}

//executes following portion when new file is created

prevCluster = rootCluster; //root cluster
 52e:	08 95       	ret

00000530 <transmitString_F>:
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
 534:	ec 01       	movw	r28, r24
 536:	fe 01       	movw	r30, r28
 538:	24 91       	lpm	r18, Z
 53a:	22 23       	and	r18, r18
 53c:	51 f0       	breq	.+20     	; 0x552 <transmitString_F+0x22>
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector;
 53e:	21 96       	adiw	r28, 0x01	; 1
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
		  dir->NTreserved = 0;			//always set to 0
		  dir->timeTenth = 0;			//always set to 0
		  dir->createTime = 0x9684;		//fixed time of creation
 540:	fc 01       	movw	r30, r24
 542:	84 91       	lpm	r24, Z
 544:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <transmitByte>
 548:	ce 01       	movw	r24, r28
 54a:	fe 01       	movw	r30, r28
		  dir->createDate = 0x3a37;		//fixed date of creation
 54c:	24 91       	lpm	r18, Z
 54e:	21 11       	cpse	r18, r1
 550:	f6 cf       	rjmp	.-20     	; 0x53e <transmitString_F+0xe>
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	08 95       	ret

00000558 <getSetFreeCluster>:
 558:	cf 92       	push	r12
 55a:	df 92       	push	r13
 55c:	ef 92       	push	r14
 55e:	ff 92       	push	r15
 560:	cf 93       	push	r28
 562:	df 93       	push	r29
 564:	d8 2f       	mov	r29, r24
 566:	c6 2f       	mov	r28, r22
 568:	69 01       	movw	r12, r18
 56a:	7a 01       	movw	r14, r20
 56c:	80 91 7c 02 	lds	r24, 0x027C
 570:	90 91 7d 02 	lds	r25, 0x027D

prevCluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (prevCluster);
 574:	a0 91 7e 02 	lds	r26, 0x027E
 578:	b0 91 7f 02 	lds	r27, 0x027F
 57c:	bc 01       	movw	r22, r24
 57e:	cd 01       	movw	r24, r26
 580:	6f 5f       	subi	r22, 0xFF	; 255
 582:	7f 4f       	sbci	r23, 0xFF	; 255
 584:	8f 4f       	sbci	r24, 0xFF	; 255

   for(sector = 0; sector < sectorPerCluster; sector++)
 586:	9f 4f       	sbci	r25, 0xFF	; 255
 588:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SD_readSingleBlock>
 58c:	40 91 7a 00 	lds	r20, 0x007A
 590:	50 91 7b 00 	lds	r21, 0x007B
 594:	60 91 7c 00 	lds	r22, 0x007C
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
 598:	70 91 7d 00 	lds	r23, 0x007D
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
 59c:	42 35       	cpi	r20, 0x52	; 82
 59e:	52 45       	sbci	r21, 0x52	; 82
 5a0:	61 46       	sbci	r22, 0x61	; 97
 5a2:	71 44       	sbci	r23, 0x41	; 65
 5a4:	09 f0       	breq	.+2      	; 0x5a8 <getSetFreeCluster+0x50>
 5a6:	59 c0       	rjmp	.+178    	; 0x65a <getSetFreeCluster+0x102>
 5a8:	40 91 5e 02 	lds	r20, 0x025E
 5ac:	50 91 5f 02 	lds	r21, 0x025F
 5b0:	60 91 60 02 	lds	r22, 0x0260
	

     for(i=0; i<bytesPerSector; i+=32)
 5b4:	70 91 61 02 	lds	r23, 0x0261
 5b8:	42 37       	cpi	r20, 0x72	; 114
 5ba:	52 47       	sbci	r21, 0x72	; 114
 5bc:	61 44       	sbci	r22, 0x41	; 65
 5be:	71 46       	sbci	r23, 0x61	; 97
 5c0:	09 f0       	breq	.+2      	; 0x5c4 <getSetFreeCluster+0x6c>
     {
	    dir = (struct dir_Structure *) &buffer[i];

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
 5c2:	4f c0       	rjmp	.+158    	; 0x662 <getSetFreeCluster+0x10a>
 5c4:	40 91 76 02 	lds	r20, 0x0276
 5c8:	50 91 77 02 	lds	r21, 0x0277
 5cc:	60 91 78 02 	lds	r22, 0x0278
 5d0:	70 91 79 02 	lds	r23, 0x0279
 5d4:	41 15       	cp	r20, r1
 5d6:	51 05       	cpc	r21, r1
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &buffer[i];
 5d8:	65 45       	sbci	r22, 0x55	; 85
 5da:	7a 4a       	sbci	r23, 0xAA	; 170

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
		 { 					  //indicating end of the directory file list
		   dir->name[0] = 0x00;
 5dc:	09 f0       	breq	.+2      	; 0x5e0 <getSetFreeCluster+0x88>
 5de:	45 c0       	rjmp	.+138    	; 0x66a <getSetFreeCluster+0x112>
           return;
 5e0:	c1 11       	cpse	r28, r1
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &buffer[i];
 5e2:	14 c0       	rjmp	.+40     	; 0x60c <getSetFreeCluster+0xb4>
 5e4:	d1 30       	cpi	r29, 0x01	; 1
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
 5e6:	49 f4       	brne	.+18     	; 0x5fa <getSetFreeCluster+0xa2>
 5e8:	60 91 62 02 	lds	r22, 0x0262
		 { 					  //indicating end of the directory file list
		   dir->name[0] = 0x00;
           return;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
 5ec:	70 91 63 02 	lds	r23, 0x0263
 5f0:	80 91 64 02 	lds	r24, 0x0264
 5f4:	90 91 65 02 	lds	r25, 0x0265
 5f8:	3b c0       	rjmp	.+118    	; 0x670 <getSetFreeCluster+0x118>
 5fa:	60 91 66 02 	lds	r22, 0x0266
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
 5fe:	70 91 67 02 	lds	r23, 0x0267
 602:	80 91 68 02 	lds	r24, 0x0268
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
 606:	90 91 69 02 	lds	r25, 0x0269
           return;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
 60a:	32 c0       	rjmp	.+100    	; 0x670 <getSetFreeCluster+0x118>
 60c:	d1 30       	cpi	r29, 0x01	; 1
 60e:	49 f4       	brne	.+18     	; 0x622 <getSetFreeCluster+0xca>
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
 610:	c0 92 62 02 	sts	0x0262, r12
		  dir->NTreserved = 0;			//always set to 0
 614:	d0 92 63 02 	sts	0x0263, r13
		  dir->timeTenth = 0;			//always set to 0
		  dir->createTime = 0x9684;		//fixed time of creation
 618:	e0 92 64 02 	sts	0x0264, r14
		  dir->createDate = 0x3a37;		//fixed date of creation
 61c:	f0 92 65 02 	sts	0x0265, r15
		  dir->lastAccessDate = 0x3a37;	//fixed date of last access
 620:	08 c0       	rjmp	.+16     	; 0x632 <getSetFreeCluster+0xda>
 622:	c0 92 66 02 	sts	0x0266, r12
		  dir->writeTime = 0x9684;		//fixed time of last write
 626:	d0 92 67 02 	sts	0x0267, r13
		  dir->writeDate = 0x3a37;		//fixed date of last write
 62a:	e0 92 68 02 	sts	0x0268, r14
		  dir->firstClusterHI = firstClusterHigh;
 62e:	f0 92 69 02 	sts	0x0269, r15
		  dir->firstClusterLO = firstClusterLow;
 632:	80 91 7c 02 	lds	r24, 0x027C
		  dir->fileSize = fileSize;
 636:	90 91 7d 02 	lds	r25, 0x027D
 63a:	a0 91 7e 02 	lds	r26, 0x027E
 63e:	b0 91 7f 02 	lds	r27, 0x027F
 642:	bc 01       	movw	r22, r24
 644:	cd 01       	movw	r24, r26
 646:	6f 5f       	subi	r22, 0xFF	; 255
 648:	7f 4f       	sbci	r23, 0xFF	; 255
 64a:	8f 4f       	sbci	r24, 0xFF	; 255

		  SD_writeSingleBlock (firstSector + sector);
 64c:	9f 4f       	sbci	r25, 0xFF	; 255
 64e:	0e 94 99 01 	call	0x332	; 0x332 <SD_writeSingleBlock>
 652:	6f ef       	ldi	r22, 0xFF	; 255
		  fileCreatedFlag = 1;

		  TX_NEWLINE;
 654:	7f ef       	ldi	r23, 0xFF	; 255
 656:	cb 01       	movw	r24, r22
 658:	0b c0       	rjmp	.+22     	; 0x670 <getSetFreeCluster+0x118>
 65a:	6f ef       	ldi	r22, 0xFF	; 255
 65c:	7f ef       	ldi	r23, 0xFF	; 255
 65e:	cb 01       	movw	r24, r22
		  TX_NEWLINE;
 660:	07 c0       	rjmp	.+14     	; 0x670 <getSetFreeCluster+0x118>
 662:	6f ef       	ldi	r22, 0xFF	; 255
 664:	7f ef       	ldi	r23, 0xFF	; 255
 666:	cb 01       	movw	r24, r22
 668:	03 c0       	rjmp	.+6      	; 0x670 <getSetFreeCluster+0x118>
 66a:	6f ef       	ldi	r22, 0xFF	; 255
		  transmitString_F(PSTR(" File Created!"));
 66c:	7f ef       	ldi	r23, 0xFF	; 255
 66e:	cb 01       	movw	r24, r22
 670:	df 91       	pop	r29
 672:	cf 91       	pop	r28

		  freeMemoryUpdate (REMOVE, fileSize); //updating free memory count in FSinfo sector
 674:	ff 90       	pop	r15
 676:	ef 90       	pop	r14
 678:	df 90       	pop	r13
 67a:	cf 90       	pop	r12
 67c:	08 95       	ret

0000067e <getBootSectorData>:
 67e:	cf 92       	push	r12
 680:	df 92       	push	r13
 682:	ef 92       	push	r14
 684:	ff 92       	push	r15
 686:	0f 93       	push	r16
 688:	1f 93       	push	r17
		  dir->firstClusterHI = firstClusterHigh;
		  dir->firstClusterLO = firstClusterLow;
		  dir->fileSize = fileSize;

		  SD_writeSingleBlock (firstSector + sector);
		  fileCreatedFlag = 1;
 68a:	cf 93       	push	r28
 68c:	df 93       	push	r29
 68e:	10 92 7c 02 	sts	0x027C, r1
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
 692:	10 92 7d 02 	sts	0x027D, r1
 696:	10 92 7e 02 	sts	0x027E, r1
 69a:	10 92 7f 02 	sts	0x027F, r1
 69e:	60 e0       	ldi	r22, 0x00	; 0
 6a0:	70 e0       	ldi	r23, 0x00	; 0
 6a2:	cb 01       	movw	r24, r22
 6a4:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SD_readSingleBlock>
 6a8:	80 91 7a 00 	lds	r24, 0x007A
 6ac:	8d 7f       	andi	r24, 0xFD	; 253

while(1)
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
 6ae:	89 3e       	cpi	r24, 0xE9	; 233
 6b0:	01 f1       	breq	.+64     	; 0x6f2 <getBootSectorData+0x74>
 6b2:	80 91 78 02 	lds	r24, 0x0278
 6b6:	90 91 79 02 	lds	r25, 0x0279
 6ba:	85 35       	cpi	r24, 0x55	; 85
 6bc:	9a 4a       	sbci	r25, 0xAA	; 170
 6be:	09 f0       	breq	.+2      	; 0x6c2 <getBootSectorData+0x44>
 6c0:	aa c0       	rjmp	.+340    	; 0x816 <getBootSectorData+0x198>
 6c2:	60 91 40 02 	lds	r22, 0x0240
 6c6:	70 91 41 02 	lds	r23, 0x0241
 6ca:	80 91 42 02 	lds	r24, 0x0242
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
 6ce:	90 91 43 02 	lds	r25, 0x0243
 6d2:	60 93 7c 02 	sts	0x027C, r22
 6d6:	70 93 7d 02 	sts	0x027D, r23
 6da:	80 93 7e 02 	sts	0x027E, r24
 6de:	90 93 7f 02 	sts	0x027F, r25

   if(cluster > 0x0ffffff6)
 6e2:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SD_readSingleBlock>
 6e6:	80 91 7a 00 	lds	r24, 0x007A
 6ea:	8d 7f       	andi	r24, 0xFD	; 253
 6ec:	89 3e       	cpi	r24, 0xE9	; 233
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
 6ee:	09 f0       	breq	.+2      	; 0x6f2 <getBootSectorData+0x74>
 6f0:	94 c0       	rjmp	.+296    	; 0x81a <getBootSectorData+0x19c>
 6f2:	80 91 85 00 	lds	r24, 0x0085
 6f6:	90 91 86 00 	lds	r25, 0x0086
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
 6fa:	90 93 6d 00 	sts	0x006D, r25
 6fe:	80 93 6c 00 	sts	0x006C, r24
 702:	80 91 87 00 	lds	r24, 0x0087
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	90 93 7b 02 	sts	0x027B, r25
		getSetNextCluster(prevCluster, SET, cluster); //link the new cluster of root to the previous cluster
 70c:	80 93 7a 02 	sts	0x027A, r24
 710:	e0 91 88 00 	lds	r30, 0x0088
 714:	f0 91 89 00 	lds	r31, 0x0089
 718:	f0 93 86 02 	sts	0x0286, r31
 71c:	e0 93 85 02 	sts	0x0285, r30
 720:	80 91 a6 00 	lds	r24, 0x00A6
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
 724:	90 91 a7 00 	lds	r25, 0x00A7
 728:	a0 91 a8 00 	lds	r26, 0x00A8
 72c:	b0 91 a9 00 	lds	r27, 0x00A9
 730:	80 93 72 00 	sts	0x0072, r24
 734:	90 93 73 00 	sts	0x0073, r25

   if(cluster > 0x0ffffff6)
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
 738:	a0 93 74 00 	sts	0x0074, r26
 73c:	b0 93 75 00 	sts	0x0075, r27
 740:	c0 91 85 02 	lds	r28, 0x0285
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
      } 

      else
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
 744:	d0 91 86 02 	lds	r29, 0x0286
 748:	a0 91 8a 00 	lds	r26, 0x008A
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
 74c:	20 91 9e 00 	lds	r18, 0x009E
 750:	30 91 9f 00 	lds	r19, 0x009F
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
	    return;
      }
   }
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return;}
 754:	40 91 a0 00 	lds	r20, 0x00A0
 758:	50 91 a1 00 	lds	r21, 0x00A1
 75c:	b0 e0       	ldi	r27, 0x00	; 0
 75e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__muluhisi3>
 762:	00 91 96 00 	lds	r16, 0x0096
 766:	10 91 97 00 	lds	r17, 0x0097
 76a:	20 91 98 00 	lds	r18, 0x0098
 76e:	30 91 99 00 	lds	r19, 0x0099
   }
   else
   {
      startBlock = getFirstSector (cluster);
	  i=0;
	  j=0;
 772:	0c 0f       	add	r16, r28
     }
	}while (data != '~');

   if(data == '~') 
   {
      fileSize--;	//to remove the last entered '~' character
 774:	1d 1f       	adc	r17, r29
 776:	21 1d       	adc	r18, r1
 778:	31 1d       	adc	r19, r1
 77a:	06 0f       	add	r16, r22
 77c:	17 1f       	adc	r17, r23
 77e:	28 1f       	adc	r18, r24
 780:	39 1f       	adc	r19, r25
 782:	00 93 64 00 	sts	0x0064, r16
 786:	10 93 65 00 	sts	0x0065, r17
 78a:	20 93 66 00 	sts	0x0066, r18
 78e:	30 93 67 00 	sts	0x0067, r19
 792:	40 91 7a 02 	lds	r20, 0x027A
 796:	50 91 7b 02 	lds	r21, 0x027B
 79a:	00 91 9a 00 	lds	r16, 0x009A
   
   prevCluster = cluster;
 }
 
 return;
}
 79e:	10 91 9b 00 	lds	r17, 0x009B
 7a2:	20 91 9c 00 	lds	r18, 0x009C
 7a6:	30 91 9d 00 	lds	r19, 0x009D
 7aa:	0e 1b       	sub	r16, r30
 7ac:	1f 0b       	sbc	r17, r31
 7ae:	21 09       	sbc	r18, r1
 7b0:	31 09       	sbc	r19, r1
 7b2:	68 01       	movw	r12, r16
 7b4:	79 01       	movw	r14, r18
 7b6:	c6 1a       	sub	r12, r22
 7b8:	d7 0a       	sbc	r13, r23
 7ba:	e8 0a       	sbc	r14, r24
 7bc:	f9 0a       	sbc	r15, r25
 7be:	c7 01       	movw	r24, r14
 7c0:	b6 01       	movw	r22, r12
 7c2:	9a 01       	movw	r18, r20
 7c4:	40 e0       	ldi	r20, 0x00	; 0
 7c6:	50 e0       	ldi	r21, 0x00	; 0
 7c8:	0e 94 b9 04 	call	0x972	; 0x972 <__udivmodsi4>
 7cc:	20 93 6e 00 	sts	0x006E, r18
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
 7d0:	30 93 6f 00 	sts	0x006F, r19
 7d4:	40 93 70 00 	sts	0x0070, r20
 7d8:	50 93 71 00 	sts	0x0071, r21
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
 7dc:	20 e0       	ldi	r18, 0x00	; 0
 7de:	30 e0       	ldi	r19, 0x00	; 0
 7e0:	a9 01       	movw	r20, r18
 7e2:	60 e0       	ldi	r22, 0x00	; 0
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	0e 94 ac 02 	call	0x558	; 0x558 <getSetFreeCluster>
 7ea:	00 91 6e 00 	lds	r16, 0x006E
 7ee:	10 91 6f 00 	lds	r17, 0x006F
 7f2:	20 91 70 00 	lds	r18, 0x0070
 7f6:	30 91 71 00 	lds	r19, 0x0071
 7fa:	06 17       	cp	r16, r22
 7fc:	17 07       	cpc	r17, r23
 7fe:	28 07       	cpc	r18, r24
 800:	39 07       	cpc	r19, r25
 802:	20 f4       	brcc	.+8      	; 0x80c <getBootSectorData+0x18e>
     freeClusterCountUpdated = 0;
 804:	10 92 8c 02 	sts	0x028C, r1
else
	 freeClusterCountUpdated = 1;
return 0;
 808:	80 e0       	ldi	r24, 0x00	; 0
 80a:	08 c0       	rjmp	.+16     	; 0x81c <getBootSectorData+0x19e>
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
 80c:	81 e0       	ldi	r24, 0x01	; 1
 80e:	80 93 8c 02 	sts	0x028C, r24
return 0;
 812:	80 e0       	ldi	r24, 0x00	; 0
 814:	03 c0       	rjmp	.+6      	; 0x81c <getBootSectorData+0x19e>

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
{
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	01 c0       	rjmp	.+2      	; 0x81c <getBootSectorData+0x19e>
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
 81a:	81 e0       	ldi	r24, 0x01	; 1
if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
return 0;
}
 81c:	df 91       	pop	r29
 81e:	cf 91       	pop	r28
 820:	1f 91       	pop	r17
 822:	0f 91       	pop	r16
 824:	ff 90       	pop	r15
 826:	ef 90       	pop	r14
 828:	df 90       	pop	r13
 82a:	cf 90       	pop	r12
 82c:	08 95       	ret

0000082e <port_init>:
#include "FAT32.c"


void port_init(void)
{
PORTA = 0x00;
 82e:	1b ba       	out	0x1b, r1	; 27
DDRA  = 0x00;
 830:	1a ba       	out	0x1a, r1	; 26
PORTB = 0xEF;
 832:	8f ee       	ldi	r24, 0xEF	; 239
 834:	88 bb       	out	0x18, r24	; 24
DDRB  = 0xBF; //MISO line i/p, rest o/p
 836:	8f eb       	ldi	r24, 0xBF	; 191
 838:	87 bb       	out	0x17, r24	; 23
PORTC = 0x00;
 83a:	15 ba       	out	0x15, r1	; 21
DDRC  = 0x00;
 83c:	14 ba       	out	0x14, r1	; 20
PORTD = 0x00;
 83e:	12 ba       	out	0x12, r1	; 18
DDRD  = 0xFE;
 840:	8e ef       	ldi	r24, 0xFE	; 254
 842:	81 bb       	out	0x11, r24	; 17
 844:	08 95       	ret

00000846 <init_devices>:


//call this routine to initialize all peripherals
void init_devices(void)
{
 cli();  //all interrupts disabled
 846:	f8 94       	cli
 port_init();
 848:	0e 94 17 04 	call	0x82e	; 0x82e <port_init>
 spi_init();
 84c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <spi_init>
 uart0_init();
 850:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <uart0_init>

 MCUCR = 0x00;
 854:	15 be       	out	0x35, r1	; 53
 GICR  = 0x00;
 856:	1b be       	out	0x3b, r1	; 59
 TIMSK = 0x00; //timer interrupt sources
 858:	19 be       	out	0x39, r1	; 57
 85a:	08 95       	ret

0000085c <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 85c:	2f ef       	ldi	r18, 0xFF	; 255
 85e:	80 e7       	ldi	r24, 0x70	; 112
 860:	92 e0       	ldi	r25, 0x02	; 2
 862:	21 50       	subi	r18, 0x01	; 1
 864:	80 40       	sbci	r24, 0x00	; 0
 866:	90 40       	sbci	r25, 0x00	; 0
 868:	e1 f7       	brne	.-8      	; 0x862 <main+0x6>
 86a:	00 c0       	rjmp	.+0      	; 0x86c <main+0x10>
 86c:	00 00       	nop
	unsigned int i;
	unsigned char fileName[13];

	_delay_ms(100);  //delay for VCC stabilization

	init_devices();
 86e:	0e 94 23 04 	call	0x846	; 0x846 <init_devices>

	PORTD |= 0x04; //switching ON the LED (for testing purpose only)
 872:	92 9a       	sbi	0x12, 2	; 18

	TX_NEWLINE;
 874:	8d e0       	ldi	r24, 0x0D	; 13
 876:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <transmitByte>
 87a:	8a e0       	ldi	r24, 0x0A	; 10
 87c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <transmitByte>
	TX_NEWLINE;
 880:	8d e0       	ldi	r24, 0x0D	; 13
 882:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <transmitByte>
 886:	8a e0       	ldi	r24, 0x0A	; 10
 888:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <transmitByte>
	transmitString_F (PSTR("*********************************************"));
 88c:	8c e7       	ldi	r24, 0x7C	; 124
 88e:	91 e0       	ldi	r25, 0x01	; 1
 890:	0e 94 98 02 	call	0x530	; 0x530 <transmitString_F>
	TX_NEWLINE;
 894:	8d e0       	ldi	r24, 0x0D	; 13
 896:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <transmitByte>
 89a:	8a e0       	ldi	r24, 0x0A	; 10
 89c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <transmitByte>
	transmitString_F (PSTR("    Dharmani's microSD Card Testing..  "));
 8a0:	84 e5       	ldi	r24, 0x54	; 84
 8a2:	91 e0       	ldi	r25, 0x01	; 1
 8a4:	0e 94 98 02 	call	0x530	; 0x530 <transmitString_F>
	TX_NEWLINE;
 8a8:	8d e0       	ldi	r24, 0x0D	; 13
 8aa:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <transmitByte>
 8ae:	8a e0       	ldi	r24, 0x0A	; 10
 8b0:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <transmitByte>
	transmitString_F (PSTR("*********************************************"));
 8b4:	86 e2       	ldi	r24, 0x26	; 38
 8b6:	91 e0       	ldi	r25, 0x01	; 1
 8b8:	0e 94 98 02 	call	0x530	; 0x530 <transmitString_F>
	TX_NEWLINE;
 8bc:	8d e0       	ldi	r24, 0x0D	; 13
 8be:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <transmitByte>
 8c2:	8a e0       	ldi	r24, 0x0A	; 10
 8c4:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <transmitByte>

	cardType = 0;
 8c8:	10 92 8b 02 	sts	0x028B, r1
 8cc:	ca e0       	ldi	r28, 0x0A	; 10
 8ce:	d0 e0       	ldi	r29, 0x00	; 0

	for (i=0; i<10; i++)
	{
	  error = SD_init();
 8d0:	0e 94 ef 01 	call	0x3de	; 0x3de <SD_init>
	  if(!error) break;
 8d4:	88 23       	and	r24, r24
 8d6:	09 f4       	brne	.+2      	; 0x8da <main+0x7e>
 8d8:	3f c0       	rjmp	.+126    	; 0x958 <main+0xfc>
 8da:	21 97       	sbiw	r28, 0x01	; 1
	transmitString_F (PSTR("*********************************************"));
	TX_NEWLINE;

	cardType = 0;

	for (i=0; i<10; i++)
 8dc:	20 97       	sbiw	r28, 0x00	; 0
 8de:	c1 f7       	brne	.-16     	; 0x8d0 <main+0x74>
 8e0:	44 c0       	rjmp	.+136    	; 0x96a <main+0x10e>
	  if(!error) break;
	}

	if(error)
	{
		if(error == 1) transmitString_F(PSTR("SD card not detected.."));
 8e2:	8f e0       	ldi	r24, 0x0F	; 15
 8e4:	91 e0       	ldi	r25, 0x01	; 1
 8e6:	0e 94 98 02 	call	0x530	; 0x530 <transmitString_F>
 8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <main+0x94>
		if(error == 2) transmitString_F(PSTR("Card Initialization failed.."));
 8ec:	82 30       	cpi	r24, 0x02	; 2
 8ee:	09 f0       	breq	.+2      	; 0x8f2 <main+0x96>
 8f0:	05 c0       	rjmp	.+10     	; 0x8fc <main+0xa0>
 8f2:	82 ef       	ldi	r24, 0xF2	; 242
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	0e 94 98 02 	call	0x530	; 0x530 <transmitString_F>
 8fa:	fa cf       	rjmp	.-12     	; 0x8f0 <main+0x94>
 8fc:	ff cf       	rjmp	.-2      	; 0x8fc <main+0xa0>
		while(1);  //wait here forever if error in SD init 
	}

	switch (cardType)
	{
	  case 1:transmitString_F(PSTR("Standard Capacity Card (Ver 1.x) Detected!"));
 8fe:	87 ec       	ldi	r24, 0xC7	; 199
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	0e 94 98 02 	call	0x530	; 0x530 <transmitString_F>
  			 break;
 906:	0e c0       	rjmp	.+28     	; 0x924 <main+0xc8>
	  case 2:transmitString_F(PSTR("High Capacity Card Detected!"));
 908:	8a ea       	ldi	r24, 0xAA	; 170
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	0e 94 98 02 	call	0x530	; 0x530 <transmitString_F>
  			 break;
 910:	09 c0       	rjmp	.+18     	; 0x924 <main+0xc8>
	  case 3:transmitString_F(PSTR("Standard Capacity Card (Ver 2.x) Detected!"));
 912:	8f e7       	ldi	r24, 0x7F	; 127
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	0e 94 98 02 	call	0x530	; 0x530 <transmitString_F>
  			 break;
 91a:	04 c0       	rjmp	.+8      	; 0x924 <main+0xc8>
	  default:transmitString_F(PSTR("Unknown SD Card Detected!"));
 91c:	85 e6       	ldi	r24, 0x65	; 101
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	0e 94 98 02 	call	0x530	; 0x530 <transmitString_F>
  			 break; 
	}


	SPI_HIGH_SPEED;	//SCK - 4 MHz
 924:	80 e5       	ldi	r24, 0x50	; 80
 926:	8d b9       	out	0x0d, r24	; 13
 928:	70 9a       	sbi	0x0e, 0	; 14
 92a:	8f ec       	ldi	r24, 0xCF	; 207
 92c:	97 e0       	ldi	r25, 0x07	; 7
 92e:	01 97       	sbiw	r24, 0x01	; 1
 930:	f1 f7       	brne	.-4      	; 0x92e <main+0xd2>
 932:	00 c0       	rjmp	.+0      	; 0x934 <main+0xd8>
 934:	00 00       	nop
	_delay_ms(1);   //some delay


	FAT32_active = 1;
	error = getBootSectorData (); //read boot sector and keep necessary data in global variables
 936:	0e 94 3f 03 	call	0x67e	; 0x67e <getBootSectorData>
	if(error) 	
 93a:	81 11       	cpse	r24, r1
 93c:	01 c0       	rjmp	.+2      	; 0x940 <main+0xe4>
 93e:	0b c0       	rjmp	.+22     	; 0x956 <main+0xfa>
	{
	  TX_NEWLINE;
 940:	8d e0       	ldi	r24, 0x0D	; 13
 942:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <transmitByte>
 946:	8a e0       	ldi	r24, 0x0A	; 10
 948:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <transmitByte>
	  transmitString_F (PSTR("FAT32 not found!"));  //FAT32 incompatible drive
 94c:	84 e5       	ldi	r24, 0x54	; 84
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	0e 94 98 02 	call	0x530	; 0x530 <transmitString_F>
 954:	f4 cf       	rjmp	.-24     	; 0x93e <main+0xe2>
 956:	ff cf       	rjmp	.-2      	; 0x956 <main+0xfa>
		if(error == 2) transmitString_F(PSTR("Card Initialization failed.."));

		while(1);  //wait here forever if error in SD init 
	}

	switch (cardType)
 958:	80 91 8b 02 	lds	r24, 0x028B
 95c:	82 30       	cpi	r24, 0x02	; 2
 95e:	a1 f2       	breq	.-88     	; 0x908 <main+0xac>
 960:	83 30       	cpi	r24, 0x03	; 3
 962:	b9 f2       	breq	.-82     	; 0x912 <main+0xb6>
 964:	81 30       	cpi	r24, 0x01	; 1
 966:	d1 f6       	brne	.-76     	; 0x91c <main+0xc0>
 968:	ca cf       	rjmp	.-108    	; 0x8fe <main+0xa2>
	  if(!error) break;
	}

	if(error)
	{
		if(error == 1) transmitString_F(PSTR("SD card not detected.."));
 96a:	81 30       	cpi	r24, 0x01	; 1
 96c:	09 f0       	breq	.+2      	; 0x970 <main+0x114>
 96e:	be cf       	rjmp	.-132    	; 0x8ec <main+0x90>
 970:	b8 cf       	rjmp	.-144    	; 0x8e2 <main+0x86>

00000972 <__udivmodsi4>:
 972:	a1 e2       	ldi	r26, 0x21	; 33
 974:	1a 2e       	mov	r1, r26
 976:	aa 1b       	sub	r26, r26
 978:	bb 1b       	sub	r27, r27
 97a:	fd 01       	movw	r30, r26
 97c:	0d c0       	rjmp	.+26     	; 0x998 <__udivmodsi4_ep>

0000097e <__udivmodsi4_loop>:
 97e:	aa 1f       	adc	r26, r26
 980:	bb 1f       	adc	r27, r27
 982:	ee 1f       	adc	r30, r30
 984:	ff 1f       	adc	r31, r31
 986:	a2 17       	cp	r26, r18
 988:	b3 07       	cpc	r27, r19
 98a:	e4 07       	cpc	r30, r20
 98c:	f5 07       	cpc	r31, r21
 98e:	20 f0       	brcs	.+8      	; 0x998 <__udivmodsi4_ep>
 990:	a2 1b       	sub	r26, r18
 992:	b3 0b       	sbc	r27, r19
 994:	e4 0b       	sbc	r30, r20
 996:	f5 0b       	sbc	r31, r21

00000998 <__udivmodsi4_ep>:
 998:	66 1f       	adc	r22, r22
 99a:	77 1f       	adc	r23, r23
 99c:	88 1f       	adc	r24, r24
 99e:	99 1f       	adc	r25, r25
 9a0:	1a 94       	dec	r1
 9a2:	69 f7       	brne	.-38     	; 0x97e <__udivmodsi4_loop>
 9a4:	60 95       	com	r22
 9a6:	70 95       	com	r23
 9a8:	80 95       	com	r24
 9aa:	90 95       	com	r25
 9ac:	9b 01       	movw	r18, r22
 9ae:	ac 01       	movw	r20, r24
 9b0:	bd 01       	movw	r22, r26
 9b2:	cf 01       	movw	r24, r30
 9b4:	08 95       	ret

000009b6 <__umulhisi3>:
 9b6:	a2 9f       	mul	r26, r18
 9b8:	b0 01       	movw	r22, r0
 9ba:	b3 9f       	mul	r27, r19
 9bc:	c0 01       	movw	r24, r0
 9be:	a3 9f       	mul	r26, r19
 9c0:	70 0d       	add	r23, r0
 9c2:	81 1d       	adc	r24, r1
 9c4:	11 24       	eor	r1, r1
 9c6:	91 1d       	adc	r25, r1
 9c8:	b2 9f       	mul	r27, r18
 9ca:	70 0d       	add	r23, r0
 9cc:	81 1d       	adc	r24, r1
 9ce:	11 24       	eor	r1, r1
 9d0:	91 1d       	adc	r25, r1
 9d2:	08 95       	ret

000009d4 <__muluhisi3>:
 9d4:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__umulhisi3>
 9d8:	a5 9f       	mul	r26, r21
 9da:	90 0d       	add	r25, r0
 9dc:	b4 9f       	mul	r27, r20
 9de:	90 0d       	add	r25, r0
 9e0:	a4 9f       	mul	r26, r20
 9e2:	80 0d       	add	r24, r0
 9e4:	91 1d       	adc	r25, r1
 9e6:	11 24       	eor	r1, r1
 9e8:	08 95       	ret

000009ea <_exit>:
 9ea:	f8 94       	cli

000009ec <__stop_program>:
 9ec:	ff cf       	rjmp	.-2      	; 0x9ec <__stop_program>
