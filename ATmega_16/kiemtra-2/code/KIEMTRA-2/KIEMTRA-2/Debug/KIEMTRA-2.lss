
KIEMTRA-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000001d6  0000024a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000027d  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000147  00000000  00000000  00000529  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000183  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  000007f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000170  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000224  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ed       	ldi	r30, 0xD6	; 214
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  7a:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <quetled>:
#define setb(thanhghi,bit)	thanhghi=thanhghi|(1<<bit)
#define clrb(thanhghi,bit)  thanhghi=thanhghi&(~(1<<bit))
#define inbit(thanhghi,bit) (thanhghi&(1<<bit))>>bit//DDUNG TOI DBIT
char ma[]={0X3F,0x06,0X5B,0X4F,0X66,0X6D,0X7D,0X07,0X7F,0X6F};
void quetled(int so)
{
  82:	9c 01       	movw	r18, r24
	c=(so%100)/10;
	dv=so%10;
	
	
	
	setb(PORTD,0);
  84:	90 9a       	sbi	0x12, 0	; 18
	int n,t,c,dv;
	
	n=so/1000;
	t=(so%1000)/100;
	c=(so%100)/10;
	dv=so%10;
  86:	6a e0       	ldi	r22, 0x0A	; 10
  88:	70 e0       	ldi	r23, 0x00	; 0
  8a:	0e 94 c1 00 	call	0x182	; 0x182 <__divmodhi4>
	
	
	
	setb(PORTD,0);
	PORTA=~ma[dv];
  8e:	fc 01       	movw	r30, r24
  90:	e0 5a       	subi	r30, 0xA0	; 160
  92:	ff 4f       	sbci	r31, 0xFF	; 255
  94:	80 81       	ld	r24, Z
  96:	80 95       	com	r24
  98:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	8f ea       	ldi	r24, 0xAF	; 175
  9c:	94 e0       	ldi	r25, 0x04	; 4
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <quetled+0x1c>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <quetled+0x22>
  a4:	00 00       	nop
	_delay_us(600);
	PORTA=0xff;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8b bb       	out	0x1b, r24	; 27
	clrb(PORTD,0);
  aa:	90 98       	cbi	0x12, 0	; 18
	setb(PORTD,1);
  ac:	91 9a       	sbi	0x12, 1	; 18
{
	int n,t,c,dv;
	
	n=so/1000;
	t=(so%1000)/100;
	c=(so%100)/10;
  ae:	c9 01       	movw	r24, r18
  b0:	64 e6       	ldi	r22, 0x64	; 100
  b2:	70 e0       	ldi	r23, 0x00	; 0
  b4:	0e 94 c1 00 	call	0x182	; 0x182 <__divmodhi4>
  b8:	6a e0       	ldi	r22, 0x0A	; 10
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	0e 94 c1 00 	call	0x182	; 0x182 <__divmodhi4>
	PORTA=~ma[dv];
	_delay_us(600);
	PORTA=0xff;
	clrb(PORTD,0);
	setb(PORTD,1);
	PORTA=~ma[c];
  c0:	fb 01       	movw	r30, r22
  c2:	e0 5a       	subi	r30, 0xA0	; 160
  c4:	ff 4f       	sbci	r31, 0xFF	; 255
  c6:	80 81       	ld	r24, Z
  c8:	80 95       	com	r24
  ca:	8b bb       	out	0x1b, r24	; 27
  cc:	8f ea       	ldi	r24, 0xAF	; 175
  ce:	94 e0       	ldi	r25, 0x04	; 4
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <quetled+0x4e>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <quetled+0x54>
  d6:	00 00       	nop
	_delay_us(600);
	PORTA=0xff;
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	8b bb       	out	0x1b, r24	; 27
	clrb(PORTD,1);
  dc:	91 98       	cbi	0x12, 1	; 18
	setb(PORTD,2);
  de:	92 9a       	sbi	0x12, 2	; 18
void quetled(int so)
{
	int n,t,c,dv;
	
	n=so/1000;
	t=(so%1000)/100;
  e0:	c9 01       	movw	r24, r18
  e2:	68 ee       	ldi	r22, 0xE8	; 232
  e4:	73 e0       	ldi	r23, 0x03	; 3
  e6:	0e 94 c1 00 	call	0x182	; 0x182 <__divmodhi4>
  ea:	64 e6       	ldi	r22, 0x64	; 100
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	0e 94 c1 00 	call	0x182	; 0x182 <__divmodhi4>
	PORTA=~ma[c];
	_delay_us(600);
	PORTA=0xff;
	clrb(PORTD,1);
	setb(PORTD,2);
	PORTA=~ma[t];
  f2:	fb 01       	movw	r30, r22
  f4:	e0 5a       	subi	r30, 0xA0	; 160
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	80 81       	ld	r24, Z
  fa:	80 95       	com	r24
  fc:	8b bb       	out	0x1b, r24	; 27
  fe:	8f ea       	ldi	r24, 0xAF	; 175
 100:	94 e0       	ldi	r25, 0x04	; 4
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <quetled+0x80>
 106:	00 c0       	rjmp	.+0      	; 0x108 <quetled+0x86>
 108:	00 00       	nop
	_delay_us(600);
	PORTA=0xff;
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	8b bb       	out	0x1b, r24	; 27
	clrb(PORTD,2);
 10e:	92 98       	cbi	0x12, 2	; 18
	setb(PORTD,3);
 110:	93 9a       	sbi	0x12, 3	; 18
char ma[]={0X3F,0x06,0X5B,0X4F,0X66,0X6D,0X7D,0X07,0X7F,0X6F};
void quetled(int so)
{
	int n,t,c,dv;
	
	n=so/1000;
 112:	c9 01       	movw	r24, r18
 114:	68 ee       	ldi	r22, 0xE8	; 232
 116:	73 e0       	ldi	r23, 0x03	; 3
 118:	0e 94 c1 00 	call	0x182	; 0x182 <__divmodhi4>
	PORTA=~ma[t];
	_delay_us(600);
	PORTA=0xff;
	clrb(PORTD,2);
	setb(PORTD,3);
	PORTA=~ma[n];
 11c:	fb 01       	movw	r30, r22
 11e:	e0 5a       	subi	r30, 0xA0	; 160
 120:	ff 4f       	sbci	r31, 0xFF	; 255
 122:	80 81       	ld	r24, Z
 124:	80 95       	com	r24
 126:	8b bb       	out	0x1b, r24	; 27
 128:	8f ea       	ldi	r24, 0xAF	; 175
 12a:	94 e0       	ldi	r25, 0x04	; 4
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <quetled+0xaa>
 130:	00 c0       	rjmp	.+0      	; 0x132 <quetled+0xb0>
 132:	00 00       	nop
	_delay_us(600);
	PORTA=0xff;
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	8b bb       	out	0x1b, r24	; 27
	clrb(PORTD,3);
 138:	93 98       	cbi	0x12, 3	; 18
 13a:	08 95       	ret

0000013c <main>:
}
int main(void)
{
	DDRD=0x0F;
 13c:	8f e0       	ldi	r24, 0x0F	; 15
 13e:	81 bb       	out	0x11, r24	; 17
	DDRA=0xFF;//cho phep xuat
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	8a bb       	out	0x1a, r24	; 26
	PORTD=0xFF;
 144:	82 bb       	out	0x12, r24	; 18
	int a=0;
 146:	c0 e0       	ldi	r28, 0x00	; 0
 148:	d0 e0       	ldi	r29, 0x00	; 0
		for (int i=0;i<1;i++)
		{
			quetled(a);
		}
		a++;
		if (a%100==60)
 14a:	04 e6       	ldi	r16, 0x64	; 100
 14c:	10 e0       	ldi	r17, 0x00	; 0
		{
			a=a+40;
		}
		if (a==1100)
		{
			a=0;
 14e:	e1 2c       	mov	r14, r1
 150:	f1 2c       	mov	r15, r1
 152:	04 c0       	rjmp	.+8      	; 0x15c <main+0x20>
		a++;
		if (a%100==60)
		{
			a=a+40;
		}
		if (a==1100)
 154:	e9 01       	movw	r28, r18
 156:	02 c0       	rjmp	.+4      	; 0x15c <main+0x20>
		{
			a=0;
 158:	ce 2d       	mov	r28, r14
 15a:	df 2d       	mov	r29, r15
	while(1)
	{
		//cau b
		for (int i=0;i<1;i++)
		{
			quetled(a);
 15c:	ce 01       	movw	r24, r28
 15e:	0e 94 41 00 	call	0x82	; 0x82 <quetled>
		}
		a++;
 162:	9e 01       	movw	r18, r28
 164:	2f 5f       	subi	r18, 0xFF	; 255
 166:	3f 4f       	sbci	r19, 0xFF	; 255
		if (a%100==60)
 168:	c9 01       	movw	r24, r18
 16a:	b8 01       	movw	r22, r16
 16c:	0e 94 c1 00 	call	0x182	; 0x182 <__divmodhi4>
 170:	cc 97       	sbiw	r24, 0x3c	; 60
 172:	11 f4       	brne	.+4      	; 0x178 <main+0x3c>
		{
			a=a+40;
 174:	28 5d       	subi	r18, 0xD8	; 216
 176:	3f 4f       	sbci	r19, 0xFF	; 255
		}
		if (a==1100)
 178:	2c 34       	cpi	r18, 0x4C	; 76
 17a:	84 e0       	ldi	r24, 0x04	; 4
 17c:	38 07       	cpc	r19, r24
 17e:	51 f7       	brne	.-44     	; 0x154 <main+0x18>
 180:	eb cf       	rjmp	.-42     	; 0x158 <main+0x1c>

00000182 <__divmodhi4>:
 182:	97 fb       	bst	r25, 7
 184:	07 2e       	mov	r0, r23
 186:	16 f4       	brtc	.+4      	; 0x18c <__divmodhi4+0xa>
 188:	00 94       	com	r0
 18a:	07 d0       	rcall	.+14     	; 0x19a <__divmodhi4_neg1>
 18c:	77 fd       	sbrc	r23, 7
 18e:	09 d0       	rcall	.+18     	; 0x1a2 <__divmodhi4_neg2>
 190:	0e 94 d5 00 	call	0x1aa	; 0x1aa <__udivmodhi4>
 194:	07 fc       	sbrc	r0, 7
 196:	05 d0       	rcall	.+10     	; 0x1a2 <__divmodhi4_neg2>
 198:	3e f4       	brtc	.+14     	; 0x1a8 <__divmodhi4_exit>

0000019a <__divmodhi4_neg1>:
 19a:	90 95       	com	r25
 19c:	81 95       	neg	r24
 19e:	9f 4f       	sbci	r25, 0xFF	; 255
 1a0:	08 95       	ret

000001a2 <__divmodhi4_neg2>:
 1a2:	70 95       	com	r23
 1a4:	61 95       	neg	r22
 1a6:	7f 4f       	sbci	r23, 0xFF	; 255

000001a8 <__divmodhi4_exit>:
 1a8:	08 95       	ret

000001aa <__udivmodhi4>:
 1aa:	aa 1b       	sub	r26, r26
 1ac:	bb 1b       	sub	r27, r27
 1ae:	51 e1       	ldi	r21, 0x11	; 17
 1b0:	07 c0       	rjmp	.+14     	; 0x1c0 <__udivmodhi4_ep>

000001b2 <__udivmodhi4_loop>:
 1b2:	aa 1f       	adc	r26, r26
 1b4:	bb 1f       	adc	r27, r27
 1b6:	a6 17       	cp	r26, r22
 1b8:	b7 07       	cpc	r27, r23
 1ba:	10 f0       	brcs	.+4      	; 0x1c0 <__udivmodhi4_ep>
 1bc:	a6 1b       	sub	r26, r22
 1be:	b7 0b       	sbc	r27, r23

000001c0 <__udivmodhi4_ep>:
 1c0:	88 1f       	adc	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	5a 95       	dec	r21
 1c6:	a9 f7       	brne	.-22     	; 0x1b2 <__udivmodhi4_loop>
 1c8:	80 95       	com	r24
 1ca:	90 95       	com	r25
 1cc:	bc 01       	movw	r22, r24
 1ce:	cd 01       	movw	r24, r26
 1d0:	08 95       	ret

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
