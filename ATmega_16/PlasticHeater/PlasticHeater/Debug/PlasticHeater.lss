
PlasticHeater.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bf6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00800060  00000bf6  00000c8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800108  00800108  00000d32  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001015  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d2  00000000  00000000  00001e79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b18  00000000  00000000  0000264b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00003164  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043e  00000000  00000000  000032b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a90  00000000  00000000  000036f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004186  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 30       	cpi	r26, 0x08	; 8
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a8 e0       	ldi	r26, 0x08	; 8
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 30       	cpi	r26, 0x0A	; 10
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 77 00 	call	0xee	; 0xee <main>
  8a:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <HC165_read>:
#define ORIENT2			5

uint8_t _t_heater = 0, _t_hold = 0;
uint8_t HC165_read()
{
	clrb(PORTC, 7);
  92:	af 98       	cbi	0x15, 7	; 21
	setb(PORTC, 7);
  94:	af 9a       	sbi	0x15, 7	; 21
  96:	28 e0       	ldi	r18, 0x08	; 8
	uint8_t val = 0;
  98:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++)
	{
		clrb(PORTD, 7);
  9a:	97 98       	cbi	0x12, 7	; 18
		val = (val << 1) | inbit(PIND, 6);
  9c:	90 b3       	in	r25, 0x10	; 16
  9e:	96 fb       	bst	r25, 6
  a0:	99 27       	eor	r25, r25
  a2:	90 f9       	bld	r25, 0
  a4:	88 0f       	add	r24, r24
  a6:	89 2b       	or	r24, r25
		setb(PORTD, 7);
  a8:	97 9a       	sbi	0x12, 7	; 18
  aa:	21 50       	subi	r18, 0x01	; 1
uint8_t HC165_read()
{
	clrb(PORTC, 7);
	setb(PORTC, 7);
	uint8_t val = 0;
	for (uint8_t i = 0; i < 8; i++)
  ac:	b1 f7       	brne	.-20     	; 0x9a <HC165_read+0x8>
		clrb(PORTD, 7);
		val = (val << 1) | inbit(PIND, 6);
		setb(PORTD, 7);
	}
	return val;
}
  ae:	08 95       	ret

000000b0 <checkEmergency>:

void checkEmergency()
{
	while (inbit(C1_PIN, C1_PIN_EMER) == 0 || inbit(C2_PIN, C2_PIN_EMER) == 0)
  b0:	0d c0       	rjmp	.+26     	; 0xcc <checkEmergency+0x1c>
	{
		UART_println("EMERGENCY!!!");
  b2:	80 e6       	ldi	r24, 0x60	; 96
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 e6 02 	call	0x5cc	; 0x5cc <UART_println>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	89 e6       	ldi	r24, 0x69	; 105
  be:	98 e1       	ldi	r25, 0x18	; 24
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <checkEmergency+0x10>
  c8:	00 c0       	rjmp	.+0      	; 0xca <checkEmergency+0x1a>
  ca:	00 00       	nop
	return val;
}

void checkEmergency()
{
	while (inbit(C1_PIN, C1_PIN_EMER) == 0 || inbit(C2_PIN, C2_PIN_EMER) == 0)
  cc:	b2 9b       	sbis	0x16, 2	; 22
  ce:	f1 cf       	rjmp	.-30     	; 0xb2 <checkEmergency+0x2>
  d0:	83 9b       	sbis	0x10, 3	; 16
  d2:	ef cf       	rjmp	.-34     	; 0xb2 <checkEmergency+0x2>
	{
		UART_println("EMERGENCY!!!");
		_delay_ms(500);
	}
}
  d4:	08 95       	ret

000000d6 <delay>:

void delay()
{
	checkEmergency();
  d6:	0e 94 58 00 	call	0xb0	; 0xb0 <checkEmergency>
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	93 e5       	ldi	r25, 0x53	; 83
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <delay+0xa>
  e8:	00 c0       	rjmp	.+0      	; 0xea <delay+0x14>
  ea:	00 00       	nop
  ec:	08 95       	ret

000000ee <main>:
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	81 ee       	ldi	r24, 0xE1	; 225
  f2:	94 e0       	ldi	r25, 0x04	; 4
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x6>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x10>
  fe:	00 00       	nop

int main(void)
{
	_delay_ms(100);
	
	M2_DDR = 0xFC;
 100:	8c ef       	ldi	r24, 0xFC	; 252
 102:	8a bb       	out	0x1a, r24	; 26
	M2_PORT = 0x00;
 104:	1b ba       	out	0x1b, r1	; 27
	M1_DDR = 0xFF;
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	84 bb       	out	0x14, r24	; 20
	M1_PORT = 0x00;
 10a:	15 ba       	out	0x15, r1	; 21
	
	C1_PORT = 0x0F;
 10c:	8f e0       	ldi	r24, 0x0F	; 15
 10e:	88 bb       	out	0x18, r24	; 24
	C1_DDR = 0x00;
 110:	17 ba       	out	0x17, r1	; 23
	C2_PORT = 0x7C | (0x03 & C2_PORT);
 112:	82 b3       	in	r24, 0x12	; 18
 114:	83 70       	andi	r24, 0x03	; 3
 116:	8c 67       	ori	r24, 0x7C	; 124
 118:	82 bb       	out	0x12, r24	; 18
	C2_DDR = 0x80 | (0x03 & C2_DDR);
 11a:	81 b3       	in	r24, 0x11	; 17
 11c:	83 70       	andi	r24, 0x03	; 3
 11e:	80 68       	ori	r24, 0x80	; 128
 120:	81 bb       	out	0x11, r24	; 17
	
	UART_config(115200);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	72 ec       	ldi	r23, 0xC2	; 194
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 27 02 	call	0x44e	; 0x44e <UART_config>
	UART_println("OK");
 12e:	8d e6       	ldi	r24, 0x6D	; 109
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 e6 02 	call	0x5cc	; 0x5cc <UART_println>
	// emergency button config
	setb(C1_PORT, C1_PIN_EMER);
 136:	c2 9a       	sbi	0x18, 2	; 24
	clrb(C1_DDR, C1_PIN_EMER); // interrupt 2
 138:	ba 98       	cbi	0x17, 2	; 23
	
	setb(C2_PORT, C2_PIN_EMER);
 13a:	93 9a       	sbi	0x12, 3	; 18
	clrb(C2_DDR, C2_PIN_EMER); // interrupt 1
 13c:	8b 98       	cbi	0x11, 3	; 17
	//setb(MCUCR, ISC11); // Falling edge on INT1;
	//GICR |= (1 << INT1) | (1 << INT2);// Enable INT2, INT1;
	//GIFR |= (1 << INTF1) | (1 << INTF2);// clear interrupt flag INT2, INT1;
	
	uint8_t  modee = SINGLE, step = IDLE;
	uint32_t cnt = 0;
 13e:	c1 2c       	mov	r12, r1
 140:	d1 2c       	mov	r13, r1
 142:	76 01       	movw	r14, r12
	//clrb(MCUCSR, ISC2); // Falling edge on INT2;
	//setb(MCUCR, ISC11); // Falling edge on INT1;
	//GICR |= (1 << INT1) | (1 << INT2);// Enable INT2, INT1;
	//GIFR |= (1 << INTF1) | (1 << INTF2);// clear interrupt flag INT2, INT1;
	
	uint8_t  modee = SINGLE, step = IDLE;
 144:	c0 e0       	ldi	r28, 0x00	; 0
 146:	d0 e0       	ldi	r29, 0x00	; 0
			{
				modee = LINKAGE;// single mode
			}
			else
			{
				modee = SINGLE;
 148:	10 e0       	ldi	r17, 0x00	; 0
				cnt = 0;
			}
			// read mode
			if (inbit(C1_PIN, C1_PIN_SWITCH) == SINGLE && inbit(C2_PIN, C2_PIN_SWITCH) == SINGLE)
			{
				modee = LINKAGE;// single mode
 14a:	01 e0       	ldi	r16, 0x01	; 1
 14c:	6e c0       	rjmp	.+220    	; 0x22a <main+0x13c>
	//sei();
	while (1)
	{
		while (step == IDLE)
		{
			checkEmergency();
 14e:	0e 94 58 00 	call	0xb0	; 0xb0 <checkEmergency>
			_t_heater = HC165_read();
 152:	0e 94 49 00 	call	0x92	; 0x92 <HC165_read>
			_t_hold = (_t_heater & 0x0F) * 2;
 156:	98 2f       	mov	r25, r24
 158:	9f 70       	andi	r25, 0x0F	; 15
 15a:	99 0f       	add	r25, r25
 15c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__data_end>
			_t_heater = (_t_heater >> 4) * 2;
 160:	82 95       	swap	r24
 162:	8f 70       	andi	r24, 0x0F	; 15
 164:	88 0f       	add	r24, r24
 166:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_t_heater>
			if (cnt++ > 150000)
 16a:	21 ef       	ldi	r18, 0xF1	; 241
 16c:	c2 16       	cp	r12, r18
 16e:	29 e4       	ldi	r18, 0x49	; 73
 170:	d2 06       	cpc	r13, r18
 172:	22 e0       	ldi	r18, 0x02	; 2
 174:	e2 06       	cpc	r14, r18
 176:	f1 04       	cpc	r15, r1
 178:	30 f4       	brcc	.+12     	; 0x186 <main+0x98>
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	c8 1a       	sub	r12, r24
 17e:	d8 0a       	sbc	r13, r24
 180:	e8 0a       	sbc	r14, r24
 182:	f8 0a       	sbc	r15, r24
 184:	1b c0       	rjmp	.+54     	; 0x1bc <main+0xce>
			{
				UART_print("IDLE - t_heat = ");
 186:	80 e7       	ldi	r24, 0x70	; 112
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 3b 02 	call	0x476	; 0x476 <UART_print>
				UART_printNum(_t_heater, DEC);
 18e:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <_t_heater>
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	4a e0       	ldi	r20, 0x0A	; 10
 19a:	0e 94 4a 02 	call	0x494	; 0x494 <UART_printNum>
				UART_print(",\tt_hold = ");
 19e:	81 e8       	ldi	r24, 0x81	; 129
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 3b 02 	call	0x476	; 0x476 <UART_print>
				UART_printNumln(_t_hold, DEC);
 1a6:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <__data_end>
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	4a e0       	ldi	r20, 0x0A	; 10
 1b2:	0e 94 98 02 	call	0x530	; 0x530 <UART_printNumln>
				cnt = 0;
 1b6:	c1 2c       	mov	r12, r1
 1b8:	d1 2c       	mov	r13, r1
 1ba:	76 01       	movw	r14, r12
			}
			// read mode
			if (inbit(C1_PIN, C1_PIN_SWITCH) == SINGLE && inbit(C2_PIN, C2_PIN_SWITCH) == SINGLE)
 1bc:	b3 99       	sbic	0x16, 3	; 22
 1be:	05 c0       	rjmp	.+10     	; 0x1ca <main+0xdc>
			{
				modee = LINKAGE;// single mode
 1c0:	d0 2f       	mov	r29, r16
 1c2:	85 9b       	sbis	0x10, 5	; 16
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <main+0xde>
 1c6:	d1 2f       	mov	r29, r17
 1c8:	01 c0       	rjmp	.+2      	; 0x1cc <main+0xde>
			}
			else
			{
				modee = SINGLE;
 1ca:	d1 2f       	mov	r29, r17
			}
			if(inbit(C1_PIN, C1_PIN_ORIENT) == 0 || inbit(C2_PIN, C2_PIN_ORIENT) == 0)// check orient button
 1cc:	b0 9b       	sbis	0x16, 0	; 22
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <main+0xe6>
 1d0:	82 99       	sbic	0x10, 2	; 16
 1d2:	2b c0       	rjmp	.+86     	; 0x22a <main+0x13c>
			{
				checkEmergency();
 1d4:	0e 94 58 00 	call	0xb0	; 0xb0 <checkEmergency>
 1d8:	9f ef       	ldi	r25, 0xFF	; 255
 1da:	21 ee       	ldi	r18, 0xE1	; 225
 1dc:	84 e0       	ldi	r24, 0x04	; 4
 1de:	91 50       	subi	r25, 0x01	; 1
 1e0:	20 40       	sbci	r18, 0x00	; 0
 1e2:	80 40       	sbci	r24, 0x00	; 0
 1e4:	e1 f7       	brne	.-8      	; 0x1de <main+0xf0>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <main+0xfa>
 1e8:	00 00       	nop
				_delay_ms(100);
				if(inbit(C1_PIN, C1_PIN_ORIENT) == 0 || inbit(C2_PIN, C2_PIN_ORIENT) == 0)// check orient button
 1ea:	b0 9b       	sbis	0x16, 0	; 22
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <main+0x104>
 1ee:	82 99       	sbic	0x10, 2	; 16
 1f0:	1c c0       	rjmp	.+56     	; 0x22a <main+0x13c>
				{
					step++;
					UART_print("ORIENT PRESSED: ");
 1f2:	8d e8       	ldi	r24, 0x8D	; 141
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 3b 02 	call	0x476	; 0x476 <UART_print>
					UART_printNumln(step, DEC);
 1fa:	4a e0       	ldi	r20, 0x0A	; 10
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 98 02 	call	0x530	; 0x530 <UART_printNumln>
					
					setb(M1_PORT, M1_PIN_Z);// Truc z chay vao = 1
 208:	a8 9a       	sbi	0x15, 0	; 21
					setb(M1_PORT, M1_PIN_CHEM);// Chem2= 1
 20a:	a9 9a       	sbi	0x15, 1	; 21
					if(modee) setb(M2_PORT, M2_PIN_CHEM);// Chem1 = 1
 20c:	dd 23       	and	r29, r29
 20e:	09 f4       	brne	.+2      	; 0x212 <main+0x124>
 210:	e8 c0       	rjmp	.+464    	; 0x3e2 <main+0x2f4>
 212:	df 9a       	sbi	0x1b, 7	; 27
					delay();
 214:	0e 94 6b 00 	call	0xd6	; 0xd6 <delay>
					
					setb(M1_PORT, M1_PIN_EP1);// Truc z chay vao = 1
 218:	ad 9a       	sbi	0x15, 5	; 21
					setb(M1_PORT, M1_PIN_EP2);// Truc z chay vao = 1
 21a:	ac 9a       	sbi	0x15, 4	; 21
					if(modee) setb(M2_PORT, M2_PIN_EP1);// Chem2 = 1
 21c:	db 9a       	sbi	0x1b, 3	; 27
					if(modee) setb(M2_PORT, M2_PIN_EP2);// Chem2 = 1
 21e:	dc 9a       	sbi	0x1b, 4	; 27
					delay();
 220:	0e 94 6b 00 	call	0xd6	; 0xd6 <delay>
			{
				checkEmergency();
				_delay_ms(100);
				if(inbit(C1_PIN, C1_PIN_ORIENT) == 0 || inbit(C2_PIN, C2_PIN_ORIENT) == 0)// check orient button
				{
					step++;
 224:	c1 e0       	ldi	r28, 0x01	; 1
 226:	01 c0       	rjmp	.+2      	; 0x22a <main+0x13c>
 228:	c3 e0       	ldi	r28, 0x03	; 3
	uint32_t cnt = 0;
	//enable global interrupt
	//sei();
	while (1)
	{
		while (step == IDLE)
 22a:	cc 23       	and	r28, r28
 22c:	09 f4       	brne	.+2      	; 0x230 <main+0x142>
 22e:	8f cf       	rjmp	.-226    	; 0x14e <main+0x60>
					delay();
				}
			}
		}
		
		checkEmergency();
 230:	0e 94 58 00 	call	0xb0	; 0xb0 <checkEmergency>
		if(inbit(C1_PIN, C1_PIN_CLAMP) == 0 || inbit(C2_PIN, C2_PIN_CLAMP) == 0)// check clamp button
 234:	b1 9b       	sbis	0x16, 1	; 22
 236:	02 c0       	rjmp	.+4      	; 0x23c <main+0x14e>
 238:	84 99       	sbic	0x10, 4	; 16
 23a:	4a c0       	rjmp	.+148    	; 0x2d0 <main+0x1e2>
		{
			checkEmergency();
 23c:	0e 94 58 00 	call	0xb0	; 0xb0 <checkEmergency>
 240:	9f ef       	ldi	r25, 0xFF	; 255
 242:	21 ee       	ldi	r18, 0xE1	; 225
 244:	84 e0       	ldi	r24, 0x04	; 4
 246:	91 50       	subi	r25, 0x01	; 1
 248:	20 40       	sbci	r18, 0x00	; 0
 24a:	80 40       	sbci	r24, 0x00	; 0
 24c:	e1 f7       	brne	.-8      	; 0x246 <main+0x158>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <main+0x162>
 250:	00 00       	nop
			_delay_ms(100);
			if(inbit(C1_PIN, C1_PIN_CLAMP) == 0 || inbit(C2_PIN, C2_PIN_CLAMP) == 0)// check clamp button
 252:	b1 9b       	sbis	0x16, 1	; 22
 254:	02 c0       	rjmp	.+4      	; 0x25a <main+0x16c>
 256:	84 99       	sbic	0x10, 4	; 16
 258:	3b c0       	rjmp	.+118    	; 0x2d0 <main+0x1e2>
			{
				if (++step > CLAMP_3) step = CLAMP_0;
 25a:	cf 5f       	subi	r28, 0xFF	; 255
 25c:	c5 30       	cpi	r28, 0x05	; 5
 25e:	08 f0       	brcs	.+2      	; 0x262 <main+0x174>
 260:	c5 c0       	rjmp	.+394    	; 0x3ec <main+0x2fe>
				UART_print("CLAMP PRESSED: ");
 262:	8e e9       	ldi	r24, 0x9E	; 158
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 3b 02 	call	0x476	; 0x476 <UART_print>
				UART_printNumln(step, 10);
 26a:	8c 2f       	mov	r24, r28
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	a0 e0       	ldi	r26, 0x00	; 0
 270:	b0 e0       	ldi	r27, 0x00	; 0
 272:	4a e0       	ldi	r20, 0x0A	; 10
 274:	bc 01       	movw	r22, r24
 276:	cd 01       	movw	r24, r26
 278:	0e 94 98 02 	call	0x530	; 0x530 <UART_printNumln>
				switch (step)
 27c:	c2 30       	cpi	r28, 0x02	; 2
 27e:	a1 f0       	breq	.+40     	; 0x2a8 <main+0x1ba>
 280:	18 f4       	brcc	.+6      	; 0x288 <main+0x19a>
 282:	c1 30       	cpi	r28, 0x01	; 1
 284:	29 f5       	brne	.+74     	; 0x2d0 <main+0x1e2>
 286:	05 c0       	rjmp	.+10     	; 0x292 <main+0x1a4>
 288:	c3 30       	cpi	r28, 0x03	; 3
 28a:	a1 f0       	breq	.+40     	; 0x2b4 <main+0x1c6>
 28c:	c4 30       	cpi	r28, 0x04	; 4
 28e:	d1 f0       	breq	.+52     	; 0x2c4 <main+0x1d6>
 290:	1f c0       	rjmp	.+62     	; 0x2d0 <main+0x1e2>
				{
					case CLAMP_0:
					clrb(M1_PORT, M1_PIN_HOLDIN);// ep_in1 = 1
 292:	aa 98       	cbi	0x15, 2	; 21
					if(modee) clrb(M2_PORT, M2_PIN_HOLDIN);// ep_in2 = 1
 294:	dd 23       	and	r29, r29
 296:	09 f4       	brne	.+2      	; 0x29a <main+0x1ac>
 298:	b5 c0       	rjmp	.+362    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 29a:	de 98       	cbi	0x1b, 6	; 27
					clrb(M1_PORT, M1_PIN_HOLDOUT);// ep_in1 = 1
 29c:	ab 98       	cbi	0x15, 3	; 21
					if(modee) clrb(M2_PORT, M2_PIN_HOLDOUT);// ep_in2 = 1
 29e:	dd 98       	cbi	0x1b, 5	; 27
					delay();
 2a0:	0e 94 6b 00 	call	0xd6	; 0xd6 <delay>
					break;
 2a4:	c1 e0       	ldi	r28, 0x01	; 1
 2a6:	b0 c0       	rjmp	.+352    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
					
					case CLAMP_1:
					setb(M1_PORT, M1_PIN_HOLDOUT);// ep_out1 = 1
 2a8:	ab 9a       	sbi	0x15, 3	; 21
					if(modee) setb(M2_PORT, M2_PIN_HOLDOUT);// ep_out2 = 1
 2aa:	d1 11       	cpse	r29, r1
 2ac:	dd 9a       	sbi	0x1b, 5	; 27
					delay();
 2ae:	0e 94 6b 00 	call	0xd6	; 0xd6 <delay>
					break;
 2b2:	aa c0       	rjmp	.+340    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
					
					case CLAMP_2:
					setb(M1_PORT, M1_PIN_HOLDIN);// ep_out1 = 1
 2b4:	aa 9a       	sbi	0x15, 2	; 21
					if(modee) setb(M2_PORT, M2_PIN_HOLDIN);// ep_out2 = 1
 2b6:	d1 11       	cpse	r29, r1
 2b8:	de 9a       	sbi	0x1b, 6	; 27
					delay();
 2ba:	0e 94 6b 00 	call	0xd6	; 0xd6 <delay>
					/* Your code here */
					break;
				}
			}
		}
		if((inbit(C1_PIN, C1_PIN_ORIENT) == 0 || inbit(C2_PIN, C2_PIN_ORIENT) == 0) && step == CLAMP_2)// check orient button
 2be:	b0 99       	sbic	0x16, 0	; 22
 2c0:	bf c0       	rjmp	.+382    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 2c2:	0d c0       	rjmp	.+26     	; 0x2de <main+0x1f0>
					if(modee) setb(M2_PORT, M2_PIN_HOLDIN);// ep_out2 = 1
					delay();
					break;
					
					case CLAMP_3:
					clrb(M1_PORT, M1_PIN_HOLDOUT);// ep_out1 = 1
 2c4:	ab 98       	cbi	0x15, 3	; 21
					if(modee) clrb(M2_PORT, M2_PIN_HOLDOUT);// ep_out2 = 1
 2c6:	d1 11       	cpse	r29, r1
 2c8:	dd 98       	cbi	0x1b, 5	; 27
					delay();
 2ca:	0e 94 6b 00 	call	0xd6	; 0xd6 <delay>
					break;
 2ce:	9c c0       	rjmp	.+312    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
					/* Your code here */
					break;
				}
			}
		}
		if((inbit(C1_PIN, C1_PIN_ORIENT) == 0 || inbit(C2_PIN, C2_PIN_ORIENT) == 0) && step == CLAMP_2)// check orient button
 2d0:	b0 9b       	sbis	0x16, 0	; 22
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <main+0x1ea>
 2d4:	82 99       	sbic	0x10, 2	; 16
 2d6:	a9 cf       	rjmp	.-174    	; 0x22a <main+0x13c>
 2d8:	c3 30       	cpi	r28, 0x03	; 3
 2da:	09 f0       	breq	.+2      	; 0x2de <main+0x1f0>
 2dc:	a6 cf       	rjmp	.-180    	; 0x22a <main+0x13c>
		{
			checkEmergency();
 2de:	0e 94 58 00 	call	0xb0	; 0xb0 <checkEmergency>
 2e2:	9f ef       	ldi	r25, 0xFF	; 255
 2e4:	21 ee       	ldi	r18, 0xE1	; 225
 2e6:	84 e0       	ldi	r24, 0x04	; 4
 2e8:	91 50       	subi	r25, 0x01	; 1
 2ea:	20 40       	sbci	r18, 0x00	; 0
 2ec:	80 40       	sbci	r24, 0x00	; 0
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <main+0x1fa>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <main+0x204>
 2f2:	00 00       	nop
			_delay_ms(100);
			if((inbit(C1_PIN, C1_PIN_ORIENT) == 0 || inbit(C2_PIN, C2_PIN_ORIENT) == 0) && step == CLAMP_2)// check orient button again
 2f4:	b0 9b       	sbis	0x16, 0	; 22
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <main+0x20e>
 2f8:	82 99       	sbic	0x10, 2	; 16
 2fa:	96 cf       	rjmp	.-212    	; 0x228 <main+0x13a>
			{
				// ko ep
				clrb(M1_PORT, M1_PIN_EP1);
 2fc:	ad 98       	cbi	0x15, 5	; 21
				clrb(M1_PORT, M1_PIN_EP2);
 2fe:	ac 98       	cbi	0x15, 4	; 21
				if(modee) clrb(M2_PORT, M2_PIN_EP1);
 300:	dd 23       	and	r29, r29
 302:	a9 f0       	breq	.+42     	; 0x32e <main+0x240>
 304:	db 98       	cbi	0x1b, 3	; 27
				if(modee) clrb(M2_PORT, M2_PIN_EP2);
 306:	dc 98       	cbi	0x1b, 4	; 27
				delay();
 308:	0e 94 6b 00 	call	0xd6	; 0xd6 <delay>
				
				//rut chem
				clrb(M1_PORT, M1_PIN_CHEM);
 30c:	a9 98       	cbi	0x15, 1	; 21
				if(modee) clrb(M2_PORT, M2_PIN_CHEM);
 30e:	df 98       	cbi	0x1b, 7	; 27
				delay();
 310:	0e 94 6b 00 	call	0xd6	; 0xd6 <delay>
				
				// ha ban nhiet
				setb(M1_PORT, M1_PIN_HEATER);
 314:	ae 9a       	sbi	0x15, 6	; 21
				if(modee) setb(M2_PORT, M2_PIN_HEATER);
 316:	da 9a       	sbi	0x1b, 2	; 27
				delay();
 318:	0e 94 6b 00 	call	0xd6	; 0xd6 <delay>
				
				// kep gia nhiet
				setb(M1_PORT, M1_PIN_EP1);
 31c:	ad 9a       	sbi	0x15, 5	; 21
				setb(M1_PORT, M1_PIN_EP2);
 31e:	ac 9a       	sbi	0x15, 4	; 21
				if(modee) setb(M2_PORT, M2_PIN_EP1);
 320:	db 9a       	sbi	0x1b, 3	; 27
				if(modee) setb(M2_PORT, M2_PIN_EP2);
 322:	dc 9a       	sbi	0x1b, 4	; 27
				
				//cho gia nhiet
				for (uint8_t i = 0; i < _t_heater; i++)
 324:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_t_heater>
 328:	81 11       	cpse	r24, r1
 32a:	10 c0       	rjmp	.+32     	; 0x34c <main+0x25e>
 32c:	70 c0       	rjmp	.+224    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
				// ko ep
				clrb(M1_PORT, M1_PIN_EP1);
				clrb(M1_PORT, M1_PIN_EP2);
				if(modee) clrb(M2_PORT, M2_PIN_EP1);
				if(modee) clrb(M2_PORT, M2_PIN_EP2);
				delay();
 32e:	0e 94 6b 00 	call	0xd6	; 0xd6 <delay>
				
				//rut chem
				clrb(M1_PORT, M1_PIN_CHEM);
 332:	a9 98       	cbi	0x15, 1	; 21
				if(modee) clrb(M2_PORT, M2_PIN_CHEM);
				delay();
 334:	0e 94 6b 00 	call	0xd6	; 0xd6 <delay>
				
				// ha ban nhiet
				setb(M1_PORT, M1_PIN_HEATER);
 338:	ae 9a       	sbi	0x15, 6	; 21
				if(modee) setb(M2_PORT, M2_PIN_HEATER);
				delay();
 33a:	0e 94 6b 00 	call	0xd6	; 0xd6 <delay>
				
				// kep gia nhiet
				setb(M1_PORT, M1_PIN_EP1);
 33e:	ad 9a       	sbi	0x15, 5	; 21
				setb(M1_PORT, M1_PIN_EP2);
 340:	ac 9a       	sbi	0x15, 4	; 21
				if(modee) setb(M2_PORT, M2_PIN_EP1);
				if(modee) setb(M2_PORT, M2_PIN_EP2);
				
				//cho gia nhiet
				for (uint8_t i = 0; i < _t_heater; i++)
 342:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_t_heater>
 346:	88 23       	and	r24, r24
 348:	09 f4       	brne	.+2      	; 0x34c <main+0x25e>
 34a:	7d c0       	rjmp	.+250    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
	//clrb(MCUCSR, ISC2); // Falling edge on INT2;
	//setb(MCUCR, ISC11); // Falling edge on INT1;
	//GICR |= (1 << INT1) | (1 << INT2);// Enable INT2, INT1;
	//GIFR |= (1 << INTF1) | (1 << INTF2);// clear interrupt flag INT2, INT1;
	
	uint8_t  modee = SINGLE, step = IDLE;
 34c:	c0 e0       	ldi	r28, 0x00	; 0
				if(modee) setb(M2_PORT, M2_PIN_EP2);
				
				//cho gia nhiet
				for (uint8_t i = 0; i < _t_heater; i++)
				{
					checkEmergency();
 34e:	0e 94 58 00 	call	0xb0	; 0xb0 <checkEmergency>
 352:	9f ef       	ldi	r25, 0xFF	; 255
 354:	23 ed       	ldi	r18, 0xD3	; 211
 356:	80 e3       	ldi	r24, 0x30	; 48
 358:	91 50       	subi	r25, 0x01	; 1
 35a:	20 40       	sbci	r18, 0x00	; 0
 35c:	80 40       	sbci	r24, 0x00	; 0
 35e:	e1 f7       	brne	.-8      	; 0x358 <main+0x26a>
 360:	00 c0       	rjmp	.+0      	; 0x362 <main+0x274>
 362:	00 00       	nop
				setb(M1_PORT, M1_PIN_EP2);
				if(modee) setb(M2_PORT, M2_PIN_EP1);
				if(modee) setb(M2_PORT, M2_PIN_EP2);
				
				//cho gia nhiet
				for (uint8_t i = 0; i < _t_heater; i++)
 364:	cf 5f       	subi	r28, 0xFF	; 255
 366:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_t_heater>
 36a:	c8 17       	cp	r28, r24
 36c:	80 f3       	brcs	.-32     	; 0x34e <main+0x260>
					checkEmergency();
					_delay_ms(1000);
				}
				
				// rut kep
				clrb(M1_PORT, M1_PIN_EP1);
 36e:	ad 98       	cbi	0x15, 5	; 21
				if(modee) clrb(M2_PORT, M2_PIN_EP1);
 370:	dd 23       	and	r29, r29
 372:	09 f4       	brne	.+2      	; 0x376 <main+0x288>
 374:	4e c0       	rjmp	.+156    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 376:	db 98       	cbi	0x1b, 3	; 27
				clrb(M1_PORT, M1_PIN_EP2);
 378:	ac 98       	cbi	0x15, 4	; 21
				if(modee) clrb(M2_PORT, M2_PIN_EP2);
 37a:	dc 98       	cbi	0x1b, 4	; 27
				delay();
 37c:	0e 94 6b 00 	call	0xd6	; 0xd6 <delay>
				
				// rut ban gia nhiet
				clrb(M1_PORT, M1_PIN_HEATER);
 380:	ae 98       	cbi	0x15, 6	; 21
				if(modee) clrb(M2_PORT, M2_PIN_HEATER);
 382:	da 98       	cbi	0x1b, 2	; 27
				delay();
 384:	0e 94 6b 00 	call	0xd6	; 0xd6 <delay>
				
				// kep gia nhiet
				setb(M1_PORT, M1_PIN_EP1);
 388:	ad 9a       	sbi	0x15, 5	; 21
				if(modee) setb(M2_PORT, M2_PIN_EP1);
 38a:	db 9a       	sbi	0x1b, 3	; 27
				setb(M1_PORT, M1_PIN_EP2);
 38c:	ac 9a       	sbi	0x15, 4	; 21
				if(modee) setb(M2_PORT, M2_PIN_EP2);
 38e:	dc 9a       	sbi	0x1b, 4	; 27
				delay();
 390:	0e 94 6b 00 	call	0xd6	; 0xd6 <delay>
				
				//cho dinh cung
				for (uint8_t i = 0; i < _t_hold; i++)
 394:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 398:	88 23       	and	r24, r24
 39a:	09 f4       	brne	.+2      	; 0x39e <main+0x2b0>
 39c:	49 c0       	rjmp	.+146    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	//clrb(MCUCSR, ISC2); // Falling edge on INT2;
	//setb(MCUCR, ISC11); // Falling edge on INT1;
	//GICR |= (1 << INT1) | (1 << INT2);// Enable INT2, INT1;
	//GIFR |= (1 << INTF1) | (1 << INTF2);// clear interrupt flag INT2, INT1;
	
	uint8_t  modee = SINGLE, step = IDLE;
 39e:	c0 e0       	ldi	r28, 0x00	; 0
				delay();
				
				//cho dinh cung
				for (uint8_t i = 0; i < _t_hold; i++)
				{
					checkEmergency();
 3a0:	0e 94 58 00 	call	0xb0	; 0xb0 <checkEmergency>
 3a4:	9f ef       	ldi	r25, 0xFF	; 255
 3a6:	23 ed       	ldi	r18, 0xD3	; 211
 3a8:	80 e3       	ldi	r24, 0x30	; 48
 3aa:	91 50       	subi	r25, 0x01	; 1
 3ac:	20 40       	sbci	r18, 0x00	; 0
 3ae:	80 40       	sbci	r24, 0x00	; 0
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <main+0x2bc>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <main+0x2c6>
 3b4:	00 00       	nop
				setb(M1_PORT, M1_PIN_EP2);
				if(modee) setb(M2_PORT, M2_PIN_EP2);
				delay();
				
				//cho dinh cung
				for (uint8_t i = 0; i < _t_hold; i++)
 3b6:	cf 5f       	subi	r28, 0xFF	; 255
 3b8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 3bc:	c8 17       	cp	r28, r24
 3be:	80 f3       	brcs	.-32     	; 0x3a0 <main+0x2b2>
					checkEmergency();
					_delay_ms(1000);
				}
				
				//rut clamp
				clrb(M1_PORT, M1_PIN_HOLDOUT);// ep_out1 = 1
 3c0:	ab 98       	cbi	0x15, 3	; 21
				if(modee) clrb(M2_PORT, M2_PIN_HOLDOUT);// ep_out2 = 1
 3c2:	dd 23       	and	r29, r29
 3c4:	b9 f1       	breq	.+110    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3c6:	dd 98       	cbi	0x1b, 5	; 27
				clrb(M1_PORT, M1_PIN_HOLDIN);// ep_out1 = 1
 3c8:	aa 98       	cbi	0x15, 2	; 21
				if(modee) clrb(M2_PORT, M2_PIN_HOLDIN);// ep_out2 = 1
 3ca:	de 98       	cbi	0x1b, 6	; 27
				delay();
 3cc:	0e 94 6b 00 	call	0xd6	; 0xd6 <delay>
				
				// rut ep
				clrb(M1_PORT, M1_PIN_EP1);
 3d0:	ad 98       	cbi	0x15, 5	; 21
				if(modee) clrb(M2_PORT, M2_PIN_EP1);
 3d2:	db 98       	cbi	0x1b, 3	; 27
				clrb(M1_PORT, M1_PIN_EP2);
 3d4:	ac 98       	cbi	0x15, 4	; 21
				if(modee) clrb(M2_PORT, M2_PIN_EP2);
 3d6:	dc 98       	cbi	0x1b, 4	; 27
				
				clrb(M1_PORT, M1_PIN_Z);
 3d8:	a8 98       	cbi	0x15, 0	; 21
				delay();
 3da:	0e 94 6b 00 	call	0xd6	; 0xd6 <delay>
				step = IDLE;
 3de:	c0 e0       	ldi	r28, 0x00	; 0
 3e0:	24 cf       	rjmp	.-440    	; 0x22a <main+0x13c>
					UART_printNumln(step, DEC);
					
					setb(M1_PORT, M1_PIN_Z);// Truc z chay vao = 1
					setb(M1_PORT, M1_PIN_CHEM);// Chem2= 1
					if(modee) setb(M2_PORT, M2_PIN_CHEM);// Chem1 = 1
					delay();
 3e2:	0e 94 6b 00 	call	0xd6	; 0xd6 <delay>
					
					setb(M1_PORT, M1_PIN_EP1);// Truc z chay vao = 1
 3e6:	ad 9a       	sbi	0x15, 5	; 21
					setb(M1_PORT, M1_PIN_EP2);// Truc z chay vao = 1
 3e8:	ac 9a       	sbi	0x15, 4	; 21
 3ea:	1a cf       	rjmp	.-460    	; 0x220 <main+0x132>
			checkEmergency();
			_delay_ms(100);
			if(inbit(C1_PIN, C1_PIN_CLAMP) == 0 || inbit(C2_PIN, C2_PIN_CLAMP) == 0)// check clamp button
			{
				if (++step > CLAMP_3) step = CLAMP_0;
				UART_print("CLAMP PRESSED: ");
 3ec:	8e e9       	ldi	r24, 0x9E	; 158
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 3b 02 	call	0x476	; 0x476 <UART_print>
				UART_printNumln(step, 10);
 3f4:	4a e0       	ldi	r20, 0x0A	; 10
 3f6:	61 e0       	ldi	r22, 0x01	; 1
 3f8:	70 e0       	ldi	r23, 0x00	; 0
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 98 02 	call	0x530	; 0x530 <UART_printNumln>
 402:	47 cf       	rjmp	.-370    	; 0x292 <main+0x1a4>
				switch (step)
				{
					case CLAMP_0:
					clrb(M1_PORT, M1_PIN_HOLDIN);// ep_in1 = 1
					if(modee) clrb(M2_PORT, M2_PIN_HOLDIN);// ep_in2 = 1
					clrb(M1_PORT, M1_PIN_HOLDOUT);// ep_in1 = 1
 404:	ab 98       	cbi	0x15, 3	; 21
 406:	4c cf       	rjmp	.-360    	; 0x2a0 <main+0x1b2>
					/* Your code here */
					break;
				}
			}
		}
		if((inbit(C1_PIN, C1_PIN_ORIENT) == 0 || inbit(C2_PIN, C2_PIN_ORIENT) == 0) && step == CLAMP_2)// check orient button
 408:	b0 9b       	sbis	0x16, 0	; 22
 40a:	0f cf       	rjmp	.-482    	; 0x22a <main+0x13c>
 40c:	63 cf       	rjmp	.-314    	; 0x2d4 <main+0x1e6>
					checkEmergency();
					_delay_ms(1000);
				}
				
				// rut kep
				clrb(M1_PORT, M1_PIN_EP1);
 40e:	ad 98       	cbi	0x15, 5	; 21
 410:	b2 cf       	rjmp	.-156    	; 0x376 <main+0x288>
				if(modee) clrb(M2_PORT, M2_PIN_EP1);
				clrb(M1_PORT, M1_PIN_EP2);
 412:	ac 98       	cbi	0x15, 4	; 21
				if(modee) clrb(M2_PORT, M2_PIN_EP2);
				delay();
 414:	0e 94 6b 00 	call	0xd6	; 0xd6 <delay>
				
				// rut ban gia nhiet
				clrb(M1_PORT, M1_PIN_HEATER);
 418:	ae 98       	cbi	0x15, 6	; 21
				if(modee) clrb(M2_PORT, M2_PIN_HEATER);
				delay();
 41a:	0e 94 6b 00 	call	0xd6	; 0xd6 <delay>
				
				// kep gia nhiet
				setb(M1_PORT, M1_PIN_EP1);
 41e:	ad 9a       	sbi	0x15, 5	; 21
				if(modee) setb(M2_PORT, M2_PIN_EP1);
				setb(M1_PORT, M1_PIN_EP2);
 420:	ac 9a       	sbi	0x15, 4	; 21
				if(modee) setb(M2_PORT, M2_PIN_EP2);
				delay();
 422:	0e 94 6b 00 	call	0xd6	; 0xd6 <delay>
				
				//cho dinh cung
				for (uint8_t i = 0; i < _t_hold; i++)
 426:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 42a:	81 11       	cpse	r24, r1
 42c:	b8 cf       	rjmp	.-144    	; 0x39e <main+0x2b0>
 42e:	0d c0       	rjmp	.+26     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
					checkEmergency();
					_delay_ms(1000);
				}
				
				//rut clamp
				clrb(M1_PORT, M1_PIN_HOLDOUT);// ep_out1 = 1
 430:	ab 98       	cbi	0x15, 3	; 21
 432:	c9 cf       	rjmp	.-110    	; 0x3c6 <main+0x2d8>
				if(modee) clrb(M2_PORT, M2_PIN_HOLDOUT);// ep_out2 = 1
				clrb(M1_PORT, M1_PIN_HOLDIN);// ep_out1 = 1
 434:	aa 98       	cbi	0x15, 2	; 21
				if(modee) clrb(M2_PORT, M2_PIN_HOLDIN);// ep_out2 = 1
				delay();
 436:	0e 94 6b 00 	call	0xd6	; 0xd6 <delay>
				
				// rut ep
				clrb(M1_PORT, M1_PIN_EP1);
 43a:	ad 98       	cbi	0x15, 5	; 21
				if(modee) clrb(M2_PORT, M2_PIN_EP1);
				clrb(M1_PORT, M1_PIN_EP2);
 43c:	ac 98       	cbi	0x15, 4	; 21
 43e:	cc cf       	rjmp	.-104    	; 0x3d8 <main+0x2ea>
					/* Your code here */
					break;
				}
			}
		}
		if((inbit(C1_PIN, C1_PIN_ORIENT) == 0 || inbit(C2_PIN, C2_PIN_ORIENT) == 0) && step == CLAMP_2)// check orient button
 440:	82 99       	sbic	0x10, 2	; 16
 442:	f3 ce       	rjmp	.-538    	; 0x22a <main+0x13c>
 444:	4c cf       	rjmp	.-360    	; 0x2de <main+0x1f0>
					checkEmergency();
					_delay_ms(1000);
				}
				
				// rut kep
				clrb(M1_PORT, M1_PIN_EP1);
 446:	ad 98       	cbi	0x15, 5	; 21
 448:	e4 cf       	rjmp	.-56     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
					checkEmergency();
					_delay_ms(1000);
				}
				
				//rut clamp
				clrb(M1_PORT, M1_PIN_HOLDOUT);// ep_out1 = 1
 44a:	ab 98       	cbi	0x15, 3	; 21
 44c:	f3 cf       	rjmp	.-26     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>

0000044e <UART_config>:
}

void UART_printFloatln(double num, uint8_t digits)
{
	UART_printFloat(num, digits);
	UART_print("\r\n");
 44e:	9b 01       	movw	r18, r22
 450:	ac 01       	movw	r20, r24
 452:	10 bc       	out	0x20, r1	; 32
 454:	60 e4       	ldi	r22, 0x40	; 64
 456:	72 e4       	ldi	r23, 0x42	; 66
 458:	8f e0       	ldi	r24, 0x0F	; 15
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 ed 02 	call	0x5da	; 0x5da <__udivmodsi4>
 460:	29 b9       	out	0x09, r18	; 9
 462:	86 e8       	ldi	r24, 0x86	; 134
 464:	80 bd       	out	0x20, r24	; 32
 466:	8a b1       	in	r24, 0x0a	; 10
 468:	88 69       	ori	r24, 0x98	; 152
 46a:	8a b9       	out	0x0a, r24	; 10
 46c:	08 95       	ret

0000046e <UART_putChar>:
 46e:	5d 9b       	sbis	0x0b, 5	; 11
 470:	fe cf       	rjmp	.-4      	; 0x46e <UART_putChar>
 472:	8c b9       	out	0x0c, r24	; 12
 474:	08 95       	ret

00000476 <UART_print>:
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	ec 01       	movw	r28, r24
 47c:	88 81       	ld	r24, Y
 47e:	88 23       	and	r24, r24
 480:	31 f0       	breq	.+12     	; 0x48e <UART_print+0x18>
 482:	21 96       	adiw	r28, 0x01	; 1
 484:	0e 94 37 02 	call	0x46e	; 0x46e <UART_putChar>
 488:	89 91       	ld	r24, Y+
 48a:	81 11       	cpse	r24, r1
 48c:	fb cf       	rjmp	.-10     	; 0x484 <UART_print+0xe>
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	08 95       	ret

00000494 <UART_printNum>:
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	cd b7       	in	r28, 0x3d	; 61
 49a:	de b7       	in	r29, 0x3e	; 62
 49c:	64 97       	sbiw	r28, 0x14	; 20
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	f8 94       	cli
 4a2:	de bf       	out	0x3e, r29	; 62
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	cd bf       	out	0x3d, r28	; 61
 4a8:	4a 30       	cpi	r20, 0x0A	; 10
 4aa:	a1 f4       	brne	.+40     	; 0x4d4 <UART_printNum+0x40>
 4ac:	9f 93       	push	r25
 4ae:	8f 93       	push	r24
 4b0:	7f 93       	push	r23
 4b2:	6f 93       	push	r22
 4b4:	8e ea       	ldi	r24, 0xAE	; 174
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	9f 93       	push	r25
 4ba:	8f 93       	push	r24
 4bc:	ce 01       	movw	r24, r28
 4be:	01 96       	adiw	r24, 0x01	; 1
 4c0:	9f 93       	push	r25
 4c2:	8f 93       	push	r24
 4c4:	0e 94 0f 03 	call	0x61e	; 0x61e <sprintf>
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	f8 94       	cli
 4cc:	de bf       	out	0x3e, r29	; 62
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	cd bf       	out	0x3d, r28	; 61
 4d2:	21 c0       	rjmp	.+66     	; 0x516 <UART_printNum+0x82>
 4d4:	40 31       	cpi	r20, 0x10	; 16
 4d6:	a1 f4       	brne	.+40     	; 0x500 <UART_printNum+0x6c>
 4d8:	9f 93       	push	r25
 4da:	8f 93       	push	r24
 4dc:	7f 93       	push	r23
 4de:	6f 93       	push	r22
 4e0:	82 eb       	ldi	r24, 0xB2	; 178
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	9f 93       	push	r25
 4e6:	8f 93       	push	r24
 4e8:	ce 01       	movw	r24, r28
 4ea:	01 96       	adiw	r24, 0x01	; 1
 4ec:	9f 93       	push	r25
 4ee:	8f 93       	push	r24
 4f0:	0e 94 0f 03 	call	0x61e	; 0x61e <sprintf>
 4f4:	0f b6       	in	r0, 0x3f	; 63
 4f6:	f8 94       	cli
 4f8:	de bf       	out	0x3e, r29	; 62
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	cd bf       	out	0x3d, r28	; 61
 4fe:	0b c0       	rjmp	.+22     	; 0x516 <UART_printNum+0x82>
 500:	42 30       	cpi	r20, 0x02	; 2
 502:	49 f4       	brne	.+18     	; 0x516 <UART_printNum+0x82>
 504:	8a e1       	ldi	r24, 0x1A	; 26
 506:	e8 eb       	ldi	r30, 0xB8	; 184
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	de 01       	movw	r26, r28
 50c:	11 96       	adiw	r26, 0x01	; 1
 50e:	01 90       	ld	r0, Z+
 510:	0d 92       	st	X+, r0
 512:	8a 95       	dec	r24
 514:	e1 f7       	brne	.-8      	; 0x50e <UART_printNum+0x7a>
 516:	ce 01       	movw	r24, r28
 518:	01 96       	adiw	r24, 0x01	; 1
 51a:	0e 94 3b 02 	call	0x476	; 0x476 <UART_print>
 51e:	64 96       	adiw	r28, 0x14	; 20
 520:	0f b6       	in	r0, 0x3f	; 63
 522:	f8 94       	cli
 524:	de bf       	out	0x3e, r29	; 62
 526:	0f be       	out	0x3f, r0	; 63
 528:	cd bf       	out	0x3d, r28	; 61
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	08 95       	ret

00000530 <UART_printNumln>:
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
 534:	cd b7       	in	r28, 0x3d	; 61
 536:	de b7       	in	r29, 0x3e	; 62
 538:	64 97       	sbiw	r28, 0x14	; 20
 53a:	0f b6       	in	r0, 0x3f	; 63
 53c:	f8 94       	cli
 53e:	de bf       	out	0x3e, r29	; 62
 540:	0f be       	out	0x3f, r0	; 63
 542:	cd bf       	out	0x3d, r28	; 61
 544:	4a 30       	cpi	r20, 0x0A	; 10
 546:	a1 f4       	brne	.+40     	; 0x570 <UART_printNumln+0x40>
 548:	9f 93       	push	r25
 54a:	8f 93       	push	r24
 54c:	7f 93       	push	r23
 54e:	6f 93       	push	r22
 550:	82 ed       	ldi	r24, 0xD2	; 210
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	9f 93       	push	r25
 556:	8f 93       	push	r24
 558:	ce 01       	movw	r24, r28
 55a:	01 96       	adiw	r24, 0x01	; 1
 55c:	9f 93       	push	r25
 55e:	8f 93       	push	r24
 560:	0e 94 0f 03 	call	0x61e	; 0x61e <sprintf>
 564:	0f b6       	in	r0, 0x3f	; 63
 566:	f8 94       	cli
 568:	de bf       	out	0x3e, r29	; 62
 56a:	0f be       	out	0x3f, r0	; 63
 56c:	cd bf       	out	0x3d, r28	; 61
 56e:	21 c0       	rjmp	.+66     	; 0x5b2 <UART_printNumln+0x82>
 570:	40 31       	cpi	r20, 0x10	; 16
 572:	a1 f4       	brne	.+40     	; 0x59c <UART_printNumln+0x6c>
 574:	9f 93       	push	r25
 576:	8f 93       	push	r24
 578:	7f 93       	push	r23
 57a:	6f 93       	push	r22
 57c:	88 ed       	ldi	r24, 0xD8	; 216
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	9f 93       	push	r25
 582:	8f 93       	push	r24
 584:	ce 01       	movw	r24, r28
 586:	01 96       	adiw	r24, 0x01	; 1
 588:	9f 93       	push	r25
 58a:	8f 93       	push	r24
 58c:	0e 94 0f 03 	call	0x61e	; 0x61e <sprintf>
 590:	0f b6       	in	r0, 0x3f	; 63
 592:	f8 94       	cli
 594:	de bf       	out	0x3e, r29	; 62
 596:	0f be       	out	0x3f, r0	; 63
 598:	cd bf       	out	0x3d, r28	; 61
 59a:	0b c0       	rjmp	.+22     	; 0x5b2 <UART_printNumln+0x82>
 59c:	42 30       	cpi	r20, 0x02	; 2
 59e:	49 f4       	brne	.+18     	; 0x5b2 <UART_printNumln+0x82>
 5a0:	8c e1       	ldi	r24, 0x1C	; 28
 5a2:	e0 ee       	ldi	r30, 0xE0	; 224
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	de 01       	movw	r26, r28
 5a8:	11 96       	adiw	r26, 0x01	; 1
 5aa:	01 90       	ld	r0, Z+
 5ac:	0d 92       	st	X+, r0
 5ae:	8a 95       	dec	r24
 5b0:	e1 f7       	brne	.-8      	; 0x5aa <UART_printNumln+0x7a>
 5b2:	ce 01       	movw	r24, r28
 5b4:	01 96       	adiw	r24, 0x01	; 1
 5b6:	0e 94 3b 02 	call	0x476	; 0x476 <UART_print>
 5ba:	64 96       	adiw	r28, 0x14	; 20
 5bc:	0f b6       	in	r0, 0x3f	; 63
 5be:	f8 94       	cli
 5c0:	de bf       	out	0x3e, r29	; 62
 5c2:	0f be       	out	0x3f, r0	; 63
 5c4:	cd bf       	out	0x3d, r28	; 61
 5c6:	df 91       	pop	r29
 5c8:	cf 91       	pop	r28
 5ca:	08 95       	ret

000005cc <UART_println>:
}

void UART_println(char* str)
{
	UART_print(str);
 5cc:	0e 94 3b 02 	call	0x476	; 0x476 <UART_print>
	UART_print("\r\n");
 5d0:	85 ed       	ldi	r24, 0xD5	; 213
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	0e 94 3b 02 	call	0x476	; 0x476 <UART_print>
 5d8:	08 95       	ret

000005da <__udivmodsi4>:
 5da:	a1 e2       	ldi	r26, 0x21	; 33
 5dc:	1a 2e       	mov	r1, r26
 5de:	aa 1b       	sub	r26, r26
 5e0:	bb 1b       	sub	r27, r27
 5e2:	fd 01       	movw	r30, r26
 5e4:	0d c0       	rjmp	.+26     	; 0x600 <__udivmodsi4_ep>

000005e6 <__udivmodsi4_loop>:
 5e6:	aa 1f       	adc	r26, r26
 5e8:	bb 1f       	adc	r27, r27
 5ea:	ee 1f       	adc	r30, r30
 5ec:	ff 1f       	adc	r31, r31
 5ee:	a2 17       	cp	r26, r18
 5f0:	b3 07       	cpc	r27, r19
 5f2:	e4 07       	cpc	r30, r20
 5f4:	f5 07       	cpc	r31, r21
 5f6:	20 f0       	brcs	.+8      	; 0x600 <__udivmodsi4_ep>
 5f8:	a2 1b       	sub	r26, r18
 5fa:	b3 0b       	sbc	r27, r19
 5fc:	e4 0b       	sbc	r30, r20
 5fe:	f5 0b       	sbc	r31, r21

00000600 <__udivmodsi4_ep>:
 600:	66 1f       	adc	r22, r22
 602:	77 1f       	adc	r23, r23
 604:	88 1f       	adc	r24, r24
 606:	99 1f       	adc	r25, r25
 608:	1a 94       	dec	r1
 60a:	69 f7       	brne	.-38     	; 0x5e6 <__udivmodsi4_loop>
 60c:	60 95       	com	r22
 60e:	70 95       	com	r23
 610:	80 95       	com	r24
 612:	90 95       	com	r25
 614:	9b 01       	movw	r18, r22
 616:	ac 01       	movw	r20, r24
 618:	bd 01       	movw	r22, r26
 61a:	cf 01       	movw	r24, r30
 61c:	08 95       	ret

0000061e <sprintf>:
 61e:	ae e0       	ldi	r26, 0x0E	; 14
 620:	b0 e0       	ldi	r27, 0x00	; 0
 622:	e5 e1       	ldi	r30, 0x15	; 21
 624:	f3 e0       	ldi	r31, 0x03	; 3
 626:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__prologue_saves__+0x1c>
 62a:	0d 89       	ldd	r16, Y+21	; 0x15
 62c:	1e 89       	ldd	r17, Y+22	; 0x16
 62e:	86 e0       	ldi	r24, 0x06	; 6
 630:	8c 83       	std	Y+4, r24	; 0x04
 632:	1a 83       	std	Y+2, r17	; 0x02
 634:	09 83       	std	Y+1, r16	; 0x01
 636:	8f ef       	ldi	r24, 0xFF	; 255
 638:	9f e7       	ldi	r25, 0x7F	; 127
 63a:	9e 83       	std	Y+6, r25	; 0x06
 63c:	8d 83       	std	Y+5, r24	; 0x05
 63e:	ae 01       	movw	r20, r28
 640:	47 5e       	subi	r20, 0xE7	; 231
 642:	5f 4f       	sbci	r21, 0xFF	; 255
 644:	6f 89       	ldd	r22, Y+23	; 0x17
 646:	78 8d       	ldd	r23, Y+24	; 0x18
 648:	ce 01       	movw	r24, r28
 64a:	01 96       	adiw	r24, 0x01	; 1
 64c:	0e 94 31 03 	call	0x662	; 0x662 <vfprintf>
 650:	ef 81       	ldd	r30, Y+7	; 0x07
 652:	f8 85       	ldd	r31, Y+8	; 0x08
 654:	e0 0f       	add	r30, r16
 656:	f1 1f       	adc	r31, r17
 658:	10 82       	st	Z, r1
 65a:	2e 96       	adiw	r28, 0x0e	; 14
 65c:	e4 e0       	ldi	r30, 0x04	; 4
 65e:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__epilogue_restores__+0x1c>

00000662 <vfprintf>:
 662:	ab e0       	ldi	r26, 0x0B	; 11
 664:	b0 e0       	ldi	r27, 0x00	; 0
 666:	e7 e3       	ldi	r30, 0x37	; 55
 668:	f3 e0       	ldi	r31, 0x03	; 3
 66a:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <__prologue_saves__>
 66e:	6c 01       	movw	r12, r24
 670:	7b 01       	movw	r14, r22
 672:	8a 01       	movw	r16, r20
 674:	fc 01       	movw	r30, r24
 676:	17 82       	std	Z+7, r1	; 0x07
 678:	16 82       	std	Z+6, r1	; 0x06
 67a:	83 81       	ldd	r24, Z+3	; 0x03
 67c:	81 ff       	sbrs	r24, 1
 67e:	cc c1       	rjmp	.+920    	; 0xa18 <vfprintf+0x3b6>
 680:	ce 01       	movw	r24, r28
 682:	01 96       	adiw	r24, 0x01	; 1
 684:	3c 01       	movw	r6, r24
 686:	f6 01       	movw	r30, r12
 688:	93 81       	ldd	r25, Z+3	; 0x03
 68a:	f7 01       	movw	r30, r14
 68c:	93 fd       	sbrc	r25, 3
 68e:	85 91       	lpm	r24, Z+
 690:	93 ff       	sbrs	r25, 3
 692:	81 91       	ld	r24, Z+
 694:	7f 01       	movw	r14, r30
 696:	88 23       	and	r24, r24
 698:	09 f4       	brne	.+2      	; 0x69c <vfprintf+0x3a>
 69a:	ba c1       	rjmp	.+884    	; 0xa10 <vfprintf+0x3ae>
 69c:	85 32       	cpi	r24, 0x25	; 37
 69e:	39 f4       	brne	.+14     	; 0x6ae <vfprintf+0x4c>
 6a0:	93 fd       	sbrc	r25, 3
 6a2:	85 91       	lpm	r24, Z+
 6a4:	93 ff       	sbrs	r25, 3
 6a6:	81 91       	ld	r24, Z+
 6a8:	7f 01       	movw	r14, r30
 6aa:	85 32       	cpi	r24, 0x25	; 37
 6ac:	29 f4       	brne	.+10     	; 0x6b8 <vfprintf+0x56>
 6ae:	b6 01       	movw	r22, r12
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	0e 94 28 05 	call	0xa50	; 0xa50 <fputc>
 6b6:	e7 cf       	rjmp	.-50     	; 0x686 <vfprintf+0x24>
 6b8:	91 2c       	mov	r9, r1
 6ba:	21 2c       	mov	r2, r1
 6bc:	31 2c       	mov	r3, r1
 6be:	ff e1       	ldi	r31, 0x1F	; 31
 6c0:	f3 15       	cp	r31, r3
 6c2:	d8 f0       	brcs	.+54     	; 0x6fa <vfprintf+0x98>
 6c4:	8b 32       	cpi	r24, 0x2B	; 43
 6c6:	79 f0       	breq	.+30     	; 0x6e6 <vfprintf+0x84>
 6c8:	38 f4       	brcc	.+14     	; 0x6d8 <vfprintf+0x76>
 6ca:	80 32       	cpi	r24, 0x20	; 32
 6cc:	79 f0       	breq	.+30     	; 0x6ec <vfprintf+0x8a>
 6ce:	83 32       	cpi	r24, 0x23	; 35
 6d0:	a1 f4       	brne	.+40     	; 0x6fa <vfprintf+0x98>
 6d2:	23 2d       	mov	r18, r3
 6d4:	20 61       	ori	r18, 0x10	; 16
 6d6:	1d c0       	rjmp	.+58     	; 0x712 <vfprintf+0xb0>
 6d8:	8d 32       	cpi	r24, 0x2D	; 45
 6da:	61 f0       	breq	.+24     	; 0x6f4 <vfprintf+0x92>
 6dc:	80 33       	cpi	r24, 0x30	; 48
 6de:	69 f4       	brne	.+26     	; 0x6fa <vfprintf+0x98>
 6e0:	23 2d       	mov	r18, r3
 6e2:	21 60       	ori	r18, 0x01	; 1
 6e4:	16 c0       	rjmp	.+44     	; 0x712 <vfprintf+0xb0>
 6e6:	83 2d       	mov	r24, r3
 6e8:	82 60       	ori	r24, 0x02	; 2
 6ea:	38 2e       	mov	r3, r24
 6ec:	e3 2d       	mov	r30, r3
 6ee:	e4 60       	ori	r30, 0x04	; 4
 6f0:	3e 2e       	mov	r3, r30
 6f2:	2a c0       	rjmp	.+84     	; 0x748 <vfprintf+0xe6>
 6f4:	f3 2d       	mov	r31, r3
 6f6:	f8 60       	ori	r31, 0x08	; 8
 6f8:	1d c0       	rjmp	.+58     	; 0x734 <vfprintf+0xd2>
 6fa:	37 fc       	sbrc	r3, 7
 6fc:	2d c0       	rjmp	.+90     	; 0x758 <vfprintf+0xf6>
 6fe:	20 ed       	ldi	r18, 0xD0	; 208
 700:	28 0f       	add	r18, r24
 702:	2a 30       	cpi	r18, 0x0A	; 10
 704:	40 f0       	brcs	.+16     	; 0x716 <vfprintf+0xb4>
 706:	8e 32       	cpi	r24, 0x2E	; 46
 708:	b9 f4       	brne	.+46     	; 0x738 <vfprintf+0xd6>
 70a:	36 fc       	sbrc	r3, 6
 70c:	81 c1       	rjmp	.+770    	; 0xa10 <vfprintf+0x3ae>
 70e:	23 2d       	mov	r18, r3
 710:	20 64       	ori	r18, 0x40	; 64
 712:	32 2e       	mov	r3, r18
 714:	19 c0       	rjmp	.+50     	; 0x748 <vfprintf+0xe6>
 716:	36 fe       	sbrs	r3, 6
 718:	06 c0       	rjmp	.+12     	; 0x726 <vfprintf+0xc4>
 71a:	8a e0       	ldi	r24, 0x0A	; 10
 71c:	98 9e       	mul	r9, r24
 71e:	20 0d       	add	r18, r0
 720:	11 24       	eor	r1, r1
 722:	92 2e       	mov	r9, r18
 724:	11 c0       	rjmp	.+34     	; 0x748 <vfprintf+0xe6>
 726:	ea e0       	ldi	r30, 0x0A	; 10
 728:	2e 9e       	mul	r2, r30
 72a:	20 0d       	add	r18, r0
 72c:	11 24       	eor	r1, r1
 72e:	22 2e       	mov	r2, r18
 730:	f3 2d       	mov	r31, r3
 732:	f0 62       	ori	r31, 0x20	; 32
 734:	3f 2e       	mov	r3, r31
 736:	08 c0       	rjmp	.+16     	; 0x748 <vfprintf+0xe6>
 738:	8c 36       	cpi	r24, 0x6C	; 108
 73a:	21 f4       	brne	.+8      	; 0x744 <vfprintf+0xe2>
 73c:	83 2d       	mov	r24, r3
 73e:	80 68       	ori	r24, 0x80	; 128
 740:	38 2e       	mov	r3, r24
 742:	02 c0       	rjmp	.+4      	; 0x748 <vfprintf+0xe6>
 744:	88 36       	cpi	r24, 0x68	; 104
 746:	41 f4       	brne	.+16     	; 0x758 <vfprintf+0xf6>
 748:	f7 01       	movw	r30, r14
 74a:	93 fd       	sbrc	r25, 3
 74c:	85 91       	lpm	r24, Z+
 74e:	93 ff       	sbrs	r25, 3
 750:	81 91       	ld	r24, Z+
 752:	7f 01       	movw	r14, r30
 754:	81 11       	cpse	r24, r1
 756:	b3 cf       	rjmp	.-154    	; 0x6be <vfprintf+0x5c>
 758:	98 2f       	mov	r25, r24
 75a:	9f 7d       	andi	r25, 0xDF	; 223
 75c:	95 54       	subi	r25, 0x45	; 69
 75e:	93 30       	cpi	r25, 0x03	; 3
 760:	28 f4       	brcc	.+10     	; 0x76c <vfprintf+0x10a>
 762:	0c 5f       	subi	r16, 0xFC	; 252
 764:	1f 4f       	sbci	r17, 0xFF	; 255
 766:	9f e3       	ldi	r25, 0x3F	; 63
 768:	99 83       	std	Y+1, r25	; 0x01
 76a:	0d c0       	rjmp	.+26     	; 0x786 <vfprintf+0x124>
 76c:	83 36       	cpi	r24, 0x63	; 99
 76e:	31 f0       	breq	.+12     	; 0x77c <vfprintf+0x11a>
 770:	83 37       	cpi	r24, 0x73	; 115
 772:	71 f0       	breq	.+28     	; 0x790 <vfprintf+0x12e>
 774:	83 35       	cpi	r24, 0x53	; 83
 776:	09 f0       	breq	.+2      	; 0x77a <vfprintf+0x118>
 778:	59 c0       	rjmp	.+178    	; 0x82c <vfprintf+0x1ca>
 77a:	21 c0       	rjmp	.+66     	; 0x7be <vfprintf+0x15c>
 77c:	f8 01       	movw	r30, r16
 77e:	80 81       	ld	r24, Z
 780:	89 83       	std	Y+1, r24	; 0x01
 782:	0e 5f       	subi	r16, 0xFE	; 254
 784:	1f 4f       	sbci	r17, 0xFF	; 255
 786:	88 24       	eor	r8, r8
 788:	83 94       	inc	r8
 78a:	91 2c       	mov	r9, r1
 78c:	53 01       	movw	r10, r6
 78e:	13 c0       	rjmp	.+38     	; 0x7b6 <vfprintf+0x154>
 790:	28 01       	movw	r4, r16
 792:	f2 e0       	ldi	r31, 0x02	; 2
 794:	4f 0e       	add	r4, r31
 796:	51 1c       	adc	r5, r1
 798:	f8 01       	movw	r30, r16
 79a:	a0 80       	ld	r10, Z
 79c:	b1 80       	ldd	r11, Z+1	; 0x01
 79e:	36 fe       	sbrs	r3, 6
 7a0:	03 c0       	rjmp	.+6      	; 0x7a8 <vfprintf+0x146>
 7a2:	69 2d       	mov	r22, r9
 7a4:	70 e0       	ldi	r23, 0x00	; 0
 7a6:	02 c0       	rjmp	.+4      	; 0x7ac <vfprintf+0x14a>
 7a8:	6f ef       	ldi	r22, 0xFF	; 255
 7aa:	7f ef       	ldi	r23, 0xFF	; 255
 7ac:	c5 01       	movw	r24, r10
 7ae:	0e 94 1d 05 	call	0xa3a	; 0xa3a <strnlen>
 7b2:	4c 01       	movw	r8, r24
 7b4:	82 01       	movw	r16, r4
 7b6:	f3 2d       	mov	r31, r3
 7b8:	ff 77       	andi	r31, 0x7F	; 127
 7ba:	3f 2e       	mov	r3, r31
 7bc:	16 c0       	rjmp	.+44     	; 0x7ea <vfprintf+0x188>
 7be:	28 01       	movw	r4, r16
 7c0:	22 e0       	ldi	r18, 0x02	; 2
 7c2:	42 0e       	add	r4, r18
 7c4:	51 1c       	adc	r5, r1
 7c6:	f8 01       	movw	r30, r16
 7c8:	a0 80       	ld	r10, Z
 7ca:	b1 80       	ldd	r11, Z+1	; 0x01
 7cc:	36 fe       	sbrs	r3, 6
 7ce:	03 c0       	rjmp	.+6      	; 0x7d6 <vfprintf+0x174>
 7d0:	69 2d       	mov	r22, r9
 7d2:	70 e0       	ldi	r23, 0x00	; 0
 7d4:	02 c0       	rjmp	.+4      	; 0x7da <vfprintf+0x178>
 7d6:	6f ef       	ldi	r22, 0xFF	; 255
 7d8:	7f ef       	ldi	r23, 0xFF	; 255
 7da:	c5 01       	movw	r24, r10
 7dc:	0e 94 12 05 	call	0xa24	; 0xa24 <strnlen_P>
 7e0:	4c 01       	movw	r8, r24
 7e2:	f3 2d       	mov	r31, r3
 7e4:	f0 68       	ori	r31, 0x80	; 128
 7e6:	3f 2e       	mov	r3, r31
 7e8:	82 01       	movw	r16, r4
 7ea:	33 fc       	sbrc	r3, 3
 7ec:	1b c0       	rjmp	.+54     	; 0x824 <vfprintf+0x1c2>
 7ee:	82 2d       	mov	r24, r2
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	88 16       	cp	r8, r24
 7f4:	99 06       	cpc	r9, r25
 7f6:	b0 f4       	brcc	.+44     	; 0x824 <vfprintf+0x1c2>
 7f8:	b6 01       	movw	r22, r12
 7fa:	80 e2       	ldi	r24, 0x20	; 32
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	0e 94 28 05 	call	0xa50	; 0xa50 <fputc>
 802:	2a 94       	dec	r2
 804:	f4 cf       	rjmp	.-24     	; 0x7ee <vfprintf+0x18c>
 806:	f5 01       	movw	r30, r10
 808:	37 fc       	sbrc	r3, 7
 80a:	85 91       	lpm	r24, Z+
 80c:	37 fe       	sbrs	r3, 7
 80e:	81 91       	ld	r24, Z+
 810:	5f 01       	movw	r10, r30
 812:	b6 01       	movw	r22, r12
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	0e 94 28 05 	call	0xa50	; 0xa50 <fputc>
 81a:	21 10       	cpse	r2, r1
 81c:	2a 94       	dec	r2
 81e:	21 e0       	ldi	r18, 0x01	; 1
 820:	82 1a       	sub	r8, r18
 822:	91 08       	sbc	r9, r1
 824:	81 14       	cp	r8, r1
 826:	91 04       	cpc	r9, r1
 828:	71 f7       	brne	.-36     	; 0x806 <vfprintf+0x1a4>
 82a:	e8 c0       	rjmp	.+464    	; 0x9fc <vfprintf+0x39a>
 82c:	84 36       	cpi	r24, 0x64	; 100
 82e:	11 f0       	breq	.+4      	; 0x834 <vfprintf+0x1d2>
 830:	89 36       	cpi	r24, 0x69	; 105
 832:	41 f5       	brne	.+80     	; 0x884 <vfprintf+0x222>
 834:	f8 01       	movw	r30, r16
 836:	37 fe       	sbrs	r3, 7
 838:	07 c0       	rjmp	.+14     	; 0x848 <vfprintf+0x1e6>
 83a:	60 81       	ld	r22, Z
 83c:	71 81       	ldd	r23, Z+1	; 0x01
 83e:	82 81       	ldd	r24, Z+2	; 0x02
 840:	93 81       	ldd	r25, Z+3	; 0x03
 842:	0c 5f       	subi	r16, 0xFC	; 252
 844:	1f 4f       	sbci	r17, 0xFF	; 255
 846:	08 c0       	rjmp	.+16     	; 0x858 <vfprintf+0x1f6>
 848:	60 81       	ld	r22, Z
 84a:	71 81       	ldd	r23, Z+1	; 0x01
 84c:	07 2e       	mov	r0, r23
 84e:	00 0c       	add	r0, r0
 850:	88 0b       	sbc	r24, r24
 852:	99 0b       	sbc	r25, r25
 854:	0e 5f       	subi	r16, 0xFE	; 254
 856:	1f 4f       	sbci	r17, 0xFF	; 255
 858:	f3 2d       	mov	r31, r3
 85a:	ff 76       	andi	r31, 0x6F	; 111
 85c:	3f 2e       	mov	r3, r31
 85e:	97 ff       	sbrs	r25, 7
 860:	09 c0       	rjmp	.+18     	; 0x874 <vfprintf+0x212>
 862:	90 95       	com	r25
 864:	80 95       	com	r24
 866:	70 95       	com	r23
 868:	61 95       	neg	r22
 86a:	7f 4f       	sbci	r23, 0xFF	; 255
 86c:	8f 4f       	sbci	r24, 0xFF	; 255
 86e:	9f 4f       	sbci	r25, 0xFF	; 255
 870:	f0 68       	ori	r31, 0x80	; 128
 872:	3f 2e       	mov	r3, r31
 874:	2a e0       	ldi	r18, 0x0A	; 10
 876:	30 e0       	ldi	r19, 0x00	; 0
 878:	a3 01       	movw	r20, r6
 87a:	0e 94 64 05 	call	0xac8	; 0xac8 <__ultoa_invert>
 87e:	88 2e       	mov	r8, r24
 880:	86 18       	sub	r8, r6
 882:	45 c0       	rjmp	.+138    	; 0x90e <vfprintf+0x2ac>
 884:	85 37       	cpi	r24, 0x75	; 117
 886:	31 f4       	brne	.+12     	; 0x894 <vfprintf+0x232>
 888:	23 2d       	mov	r18, r3
 88a:	2f 7e       	andi	r18, 0xEF	; 239
 88c:	b2 2e       	mov	r11, r18
 88e:	2a e0       	ldi	r18, 0x0A	; 10
 890:	30 e0       	ldi	r19, 0x00	; 0
 892:	25 c0       	rjmp	.+74     	; 0x8de <vfprintf+0x27c>
 894:	93 2d       	mov	r25, r3
 896:	99 7f       	andi	r25, 0xF9	; 249
 898:	b9 2e       	mov	r11, r25
 89a:	8f 36       	cpi	r24, 0x6F	; 111
 89c:	c1 f0       	breq	.+48     	; 0x8ce <vfprintf+0x26c>
 89e:	18 f4       	brcc	.+6      	; 0x8a6 <vfprintf+0x244>
 8a0:	88 35       	cpi	r24, 0x58	; 88
 8a2:	79 f0       	breq	.+30     	; 0x8c2 <vfprintf+0x260>
 8a4:	b5 c0       	rjmp	.+362    	; 0xa10 <vfprintf+0x3ae>
 8a6:	80 37       	cpi	r24, 0x70	; 112
 8a8:	19 f0       	breq	.+6      	; 0x8b0 <vfprintf+0x24e>
 8aa:	88 37       	cpi	r24, 0x78	; 120
 8ac:	21 f0       	breq	.+8      	; 0x8b6 <vfprintf+0x254>
 8ae:	b0 c0       	rjmp	.+352    	; 0xa10 <vfprintf+0x3ae>
 8b0:	e9 2f       	mov	r30, r25
 8b2:	e0 61       	ori	r30, 0x10	; 16
 8b4:	be 2e       	mov	r11, r30
 8b6:	b4 fe       	sbrs	r11, 4
 8b8:	0d c0       	rjmp	.+26     	; 0x8d4 <vfprintf+0x272>
 8ba:	fb 2d       	mov	r31, r11
 8bc:	f4 60       	ori	r31, 0x04	; 4
 8be:	bf 2e       	mov	r11, r31
 8c0:	09 c0       	rjmp	.+18     	; 0x8d4 <vfprintf+0x272>
 8c2:	34 fe       	sbrs	r3, 4
 8c4:	0a c0       	rjmp	.+20     	; 0x8da <vfprintf+0x278>
 8c6:	29 2f       	mov	r18, r25
 8c8:	26 60       	ori	r18, 0x06	; 6
 8ca:	b2 2e       	mov	r11, r18
 8cc:	06 c0       	rjmp	.+12     	; 0x8da <vfprintf+0x278>
 8ce:	28 e0       	ldi	r18, 0x08	; 8
 8d0:	30 e0       	ldi	r19, 0x00	; 0
 8d2:	05 c0       	rjmp	.+10     	; 0x8de <vfprintf+0x27c>
 8d4:	20 e1       	ldi	r18, 0x10	; 16
 8d6:	30 e0       	ldi	r19, 0x00	; 0
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <vfprintf+0x27c>
 8da:	20 e1       	ldi	r18, 0x10	; 16
 8dc:	32 e0       	ldi	r19, 0x02	; 2
 8de:	f8 01       	movw	r30, r16
 8e0:	b7 fe       	sbrs	r11, 7
 8e2:	07 c0       	rjmp	.+14     	; 0x8f2 <vfprintf+0x290>
 8e4:	60 81       	ld	r22, Z
 8e6:	71 81       	ldd	r23, Z+1	; 0x01
 8e8:	82 81       	ldd	r24, Z+2	; 0x02
 8ea:	93 81       	ldd	r25, Z+3	; 0x03
 8ec:	0c 5f       	subi	r16, 0xFC	; 252
 8ee:	1f 4f       	sbci	r17, 0xFF	; 255
 8f0:	06 c0       	rjmp	.+12     	; 0x8fe <vfprintf+0x29c>
 8f2:	60 81       	ld	r22, Z
 8f4:	71 81       	ldd	r23, Z+1	; 0x01
 8f6:	80 e0       	ldi	r24, 0x00	; 0
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	0e 5f       	subi	r16, 0xFE	; 254
 8fc:	1f 4f       	sbci	r17, 0xFF	; 255
 8fe:	a3 01       	movw	r20, r6
 900:	0e 94 64 05 	call	0xac8	; 0xac8 <__ultoa_invert>
 904:	88 2e       	mov	r8, r24
 906:	86 18       	sub	r8, r6
 908:	fb 2d       	mov	r31, r11
 90a:	ff 77       	andi	r31, 0x7F	; 127
 90c:	3f 2e       	mov	r3, r31
 90e:	36 fe       	sbrs	r3, 6
 910:	0d c0       	rjmp	.+26     	; 0x92c <vfprintf+0x2ca>
 912:	23 2d       	mov	r18, r3
 914:	2e 7f       	andi	r18, 0xFE	; 254
 916:	a2 2e       	mov	r10, r18
 918:	89 14       	cp	r8, r9
 91a:	58 f4       	brcc	.+22     	; 0x932 <vfprintf+0x2d0>
 91c:	34 fe       	sbrs	r3, 4
 91e:	0b c0       	rjmp	.+22     	; 0x936 <vfprintf+0x2d4>
 920:	32 fc       	sbrc	r3, 2
 922:	09 c0       	rjmp	.+18     	; 0x936 <vfprintf+0x2d4>
 924:	83 2d       	mov	r24, r3
 926:	8e 7e       	andi	r24, 0xEE	; 238
 928:	a8 2e       	mov	r10, r24
 92a:	05 c0       	rjmp	.+10     	; 0x936 <vfprintf+0x2d4>
 92c:	b8 2c       	mov	r11, r8
 92e:	a3 2c       	mov	r10, r3
 930:	03 c0       	rjmp	.+6      	; 0x938 <vfprintf+0x2d6>
 932:	b8 2c       	mov	r11, r8
 934:	01 c0       	rjmp	.+2      	; 0x938 <vfprintf+0x2d6>
 936:	b9 2c       	mov	r11, r9
 938:	a4 fe       	sbrs	r10, 4
 93a:	0f c0       	rjmp	.+30     	; 0x95a <vfprintf+0x2f8>
 93c:	fe 01       	movw	r30, r28
 93e:	e8 0d       	add	r30, r8
 940:	f1 1d       	adc	r31, r1
 942:	80 81       	ld	r24, Z
 944:	80 33       	cpi	r24, 0x30	; 48
 946:	21 f4       	brne	.+8      	; 0x950 <vfprintf+0x2ee>
 948:	9a 2d       	mov	r25, r10
 94a:	99 7e       	andi	r25, 0xE9	; 233
 94c:	a9 2e       	mov	r10, r25
 94e:	09 c0       	rjmp	.+18     	; 0x962 <vfprintf+0x300>
 950:	a2 fe       	sbrs	r10, 2
 952:	06 c0       	rjmp	.+12     	; 0x960 <vfprintf+0x2fe>
 954:	b3 94       	inc	r11
 956:	b3 94       	inc	r11
 958:	04 c0       	rjmp	.+8      	; 0x962 <vfprintf+0x300>
 95a:	8a 2d       	mov	r24, r10
 95c:	86 78       	andi	r24, 0x86	; 134
 95e:	09 f0       	breq	.+2      	; 0x962 <vfprintf+0x300>
 960:	b3 94       	inc	r11
 962:	a3 fc       	sbrc	r10, 3
 964:	11 c0       	rjmp	.+34     	; 0x988 <vfprintf+0x326>
 966:	a0 fe       	sbrs	r10, 0
 968:	06 c0       	rjmp	.+12     	; 0x976 <vfprintf+0x314>
 96a:	b2 14       	cp	r11, r2
 96c:	88 f4       	brcc	.+34     	; 0x990 <vfprintf+0x32e>
 96e:	28 0c       	add	r2, r8
 970:	92 2c       	mov	r9, r2
 972:	9b 18       	sub	r9, r11
 974:	0e c0       	rjmp	.+28     	; 0x992 <vfprintf+0x330>
 976:	b2 14       	cp	r11, r2
 978:	60 f4       	brcc	.+24     	; 0x992 <vfprintf+0x330>
 97a:	b6 01       	movw	r22, r12
 97c:	80 e2       	ldi	r24, 0x20	; 32
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	0e 94 28 05 	call	0xa50	; 0xa50 <fputc>
 984:	b3 94       	inc	r11
 986:	f7 cf       	rjmp	.-18     	; 0x976 <vfprintf+0x314>
 988:	b2 14       	cp	r11, r2
 98a:	18 f4       	brcc	.+6      	; 0x992 <vfprintf+0x330>
 98c:	2b 18       	sub	r2, r11
 98e:	02 c0       	rjmp	.+4      	; 0x994 <vfprintf+0x332>
 990:	98 2c       	mov	r9, r8
 992:	21 2c       	mov	r2, r1
 994:	a4 fe       	sbrs	r10, 4
 996:	10 c0       	rjmp	.+32     	; 0x9b8 <vfprintf+0x356>
 998:	b6 01       	movw	r22, r12
 99a:	80 e3       	ldi	r24, 0x30	; 48
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	0e 94 28 05 	call	0xa50	; 0xa50 <fputc>
 9a2:	a2 fe       	sbrs	r10, 2
 9a4:	17 c0       	rjmp	.+46     	; 0x9d4 <vfprintf+0x372>
 9a6:	a1 fc       	sbrc	r10, 1
 9a8:	03 c0       	rjmp	.+6      	; 0x9b0 <vfprintf+0x34e>
 9aa:	88 e7       	ldi	r24, 0x78	; 120
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <vfprintf+0x352>
 9b0:	88 e5       	ldi	r24, 0x58	; 88
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	b6 01       	movw	r22, r12
 9b6:	0c c0       	rjmp	.+24     	; 0x9d0 <vfprintf+0x36e>
 9b8:	8a 2d       	mov	r24, r10
 9ba:	86 78       	andi	r24, 0x86	; 134
 9bc:	59 f0       	breq	.+22     	; 0x9d4 <vfprintf+0x372>
 9be:	a1 fe       	sbrs	r10, 1
 9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <vfprintf+0x364>
 9c2:	8b e2       	ldi	r24, 0x2B	; 43
 9c4:	01 c0       	rjmp	.+2      	; 0x9c8 <vfprintf+0x366>
 9c6:	80 e2       	ldi	r24, 0x20	; 32
 9c8:	a7 fc       	sbrc	r10, 7
 9ca:	8d e2       	ldi	r24, 0x2D	; 45
 9cc:	b6 01       	movw	r22, r12
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	0e 94 28 05 	call	0xa50	; 0xa50 <fputc>
 9d4:	89 14       	cp	r8, r9
 9d6:	38 f4       	brcc	.+14     	; 0x9e6 <vfprintf+0x384>
 9d8:	b6 01       	movw	r22, r12
 9da:	80 e3       	ldi	r24, 0x30	; 48
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	0e 94 28 05 	call	0xa50	; 0xa50 <fputc>
 9e2:	9a 94       	dec	r9
 9e4:	f7 cf       	rjmp	.-18     	; 0x9d4 <vfprintf+0x372>
 9e6:	8a 94       	dec	r8
 9e8:	f3 01       	movw	r30, r6
 9ea:	e8 0d       	add	r30, r8
 9ec:	f1 1d       	adc	r31, r1
 9ee:	80 81       	ld	r24, Z
 9f0:	b6 01       	movw	r22, r12
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	0e 94 28 05 	call	0xa50	; 0xa50 <fputc>
 9f8:	81 10       	cpse	r8, r1
 9fa:	f5 cf       	rjmp	.-22     	; 0x9e6 <vfprintf+0x384>
 9fc:	22 20       	and	r2, r2
 9fe:	09 f4       	brne	.+2      	; 0xa02 <vfprintf+0x3a0>
 a00:	42 ce       	rjmp	.-892    	; 0x686 <vfprintf+0x24>
 a02:	b6 01       	movw	r22, r12
 a04:	80 e2       	ldi	r24, 0x20	; 32
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	0e 94 28 05 	call	0xa50	; 0xa50 <fputc>
 a0c:	2a 94       	dec	r2
 a0e:	f6 cf       	rjmp	.-20     	; 0x9fc <vfprintf+0x39a>
 a10:	f6 01       	movw	r30, r12
 a12:	86 81       	ldd	r24, Z+6	; 0x06
 a14:	97 81       	ldd	r25, Z+7	; 0x07
 a16:	02 c0       	rjmp	.+4      	; 0xa1c <vfprintf+0x3ba>
 a18:	8f ef       	ldi	r24, 0xFF	; 255
 a1a:	9f ef       	ldi	r25, 0xFF	; 255
 a1c:	2b 96       	adiw	r28, 0x0b	; 11
 a1e:	e2 e1       	ldi	r30, 0x12	; 18
 a20:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__epilogue_restores__>

00000a24 <strnlen_P>:
 a24:	fc 01       	movw	r30, r24
 a26:	05 90       	lpm	r0, Z+
 a28:	61 50       	subi	r22, 0x01	; 1
 a2a:	70 40       	sbci	r23, 0x00	; 0
 a2c:	01 10       	cpse	r0, r1
 a2e:	d8 f7       	brcc	.-10     	; 0xa26 <strnlen_P+0x2>
 a30:	80 95       	com	r24
 a32:	90 95       	com	r25
 a34:	8e 0f       	add	r24, r30
 a36:	9f 1f       	adc	r25, r31
 a38:	08 95       	ret

00000a3a <strnlen>:
 a3a:	fc 01       	movw	r30, r24
 a3c:	61 50       	subi	r22, 0x01	; 1
 a3e:	70 40       	sbci	r23, 0x00	; 0
 a40:	01 90       	ld	r0, Z+
 a42:	01 10       	cpse	r0, r1
 a44:	d8 f7       	brcc	.-10     	; 0xa3c <strnlen+0x2>
 a46:	80 95       	com	r24
 a48:	90 95       	com	r25
 a4a:	8e 0f       	add	r24, r30
 a4c:	9f 1f       	adc	r25, r31
 a4e:	08 95       	ret

00000a50 <fputc>:
 a50:	0f 93       	push	r16
 a52:	1f 93       	push	r17
 a54:	cf 93       	push	r28
 a56:	df 93       	push	r29
 a58:	fb 01       	movw	r30, r22
 a5a:	23 81       	ldd	r18, Z+3	; 0x03
 a5c:	21 fd       	sbrc	r18, 1
 a5e:	03 c0       	rjmp	.+6      	; 0xa66 <fputc+0x16>
 a60:	8f ef       	ldi	r24, 0xFF	; 255
 a62:	9f ef       	ldi	r25, 0xFF	; 255
 a64:	2c c0       	rjmp	.+88     	; 0xabe <fputc+0x6e>
 a66:	22 ff       	sbrs	r18, 2
 a68:	16 c0       	rjmp	.+44     	; 0xa96 <fputc+0x46>
 a6a:	46 81       	ldd	r20, Z+6	; 0x06
 a6c:	57 81       	ldd	r21, Z+7	; 0x07
 a6e:	24 81       	ldd	r18, Z+4	; 0x04
 a70:	35 81       	ldd	r19, Z+5	; 0x05
 a72:	42 17       	cp	r20, r18
 a74:	53 07       	cpc	r21, r19
 a76:	44 f4       	brge	.+16     	; 0xa88 <fputc+0x38>
 a78:	a0 81       	ld	r26, Z
 a7a:	b1 81       	ldd	r27, Z+1	; 0x01
 a7c:	9d 01       	movw	r18, r26
 a7e:	2f 5f       	subi	r18, 0xFF	; 255
 a80:	3f 4f       	sbci	r19, 0xFF	; 255
 a82:	31 83       	std	Z+1, r19	; 0x01
 a84:	20 83       	st	Z, r18
 a86:	8c 93       	st	X, r24
 a88:	26 81       	ldd	r18, Z+6	; 0x06
 a8a:	37 81       	ldd	r19, Z+7	; 0x07
 a8c:	2f 5f       	subi	r18, 0xFF	; 255
 a8e:	3f 4f       	sbci	r19, 0xFF	; 255
 a90:	37 83       	std	Z+7, r19	; 0x07
 a92:	26 83       	std	Z+6, r18	; 0x06
 a94:	14 c0       	rjmp	.+40     	; 0xabe <fputc+0x6e>
 a96:	8b 01       	movw	r16, r22
 a98:	ec 01       	movw	r28, r24
 a9a:	fb 01       	movw	r30, r22
 a9c:	00 84       	ldd	r0, Z+8	; 0x08
 a9e:	f1 85       	ldd	r31, Z+9	; 0x09
 aa0:	e0 2d       	mov	r30, r0
 aa2:	09 95       	icall
 aa4:	89 2b       	or	r24, r25
 aa6:	e1 f6       	brne	.-72     	; 0xa60 <fputc+0x10>
 aa8:	d8 01       	movw	r26, r16
 aaa:	16 96       	adiw	r26, 0x06	; 6
 aac:	8d 91       	ld	r24, X+
 aae:	9c 91       	ld	r25, X
 ab0:	17 97       	sbiw	r26, 0x07	; 7
 ab2:	01 96       	adiw	r24, 0x01	; 1
 ab4:	17 96       	adiw	r26, 0x07	; 7
 ab6:	9c 93       	st	X, r25
 ab8:	8e 93       	st	-X, r24
 aba:	16 97       	sbiw	r26, 0x06	; 6
 abc:	ce 01       	movw	r24, r28
 abe:	df 91       	pop	r29
 ac0:	cf 91       	pop	r28
 ac2:	1f 91       	pop	r17
 ac4:	0f 91       	pop	r16
 ac6:	08 95       	ret

00000ac8 <__ultoa_invert>:
 ac8:	fa 01       	movw	r30, r20
 aca:	aa 27       	eor	r26, r26
 acc:	28 30       	cpi	r18, 0x08	; 8
 ace:	51 f1       	breq	.+84     	; 0xb24 <__ultoa_invert+0x5c>
 ad0:	20 31       	cpi	r18, 0x10	; 16
 ad2:	81 f1       	breq	.+96     	; 0xb34 <__ultoa_invert+0x6c>
 ad4:	e8 94       	clt
 ad6:	6f 93       	push	r22
 ad8:	6e 7f       	andi	r22, 0xFE	; 254
 ada:	6e 5f       	subi	r22, 0xFE	; 254
 adc:	7f 4f       	sbci	r23, 0xFF	; 255
 ade:	8f 4f       	sbci	r24, 0xFF	; 255
 ae0:	9f 4f       	sbci	r25, 0xFF	; 255
 ae2:	af 4f       	sbci	r26, 0xFF	; 255
 ae4:	b1 e0       	ldi	r27, 0x01	; 1
 ae6:	3e d0       	rcall	.+124    	; 0xb64 <__ultoa_invert+0x9c>
 ae8:	b4 e0       	ldi	r27, 0x04	; 4
 aea:	3c d0       	rcall	.+120    	; 0xb64 <__ultoa_invert+0x9c>
 aec:	67 0f       	add	r22, r23
 aee:	78 1f       	adc	r23, r24
 af0:	89 1f       	adc	r24, r25
 af2:	9a 1f       	adc	r25, r26
 af4:	a1 1d       	adc	r26, r1
 af6:	68 0f       	add	r22, r24
 af8:	79 1f       	adc	r23, r25
 afa:	8a 1f       	adc	r24, r26
 afc:	91 1d       	adc	r25, r1
 afe:	a1 1d       	adc	r26, r1
 b00:	6a 0f       	add	r22, r26
 b02:	71 1d       	adc	r23, r1
 b04:	81 1d       	adc	r24, r1
 b06:	91 1d       	adc	r25, r1
 b08:	a1 1d       	adc	r26, r1
 b0a:	20 d0       	rcall	.+64     	; 0xb4c <__ultoa_invert+0x84>
 b0c:	09 f4       	brne	.+2      	; 0xb10 <__ultoa_invert+0x48>
 b0e:	68 94       	set
 b10:	3f 91       	pop	r19
 b12:	2a e0       	ldi	r18, 0x0A	; 10
 b14:	26 9f       	mul	r18, r22
 b16:	11 24       	eor	r1, r1
 b18:	30 19       	sub	r19, r0
 b1a:	30 5d       	subi	r19, 0xD0	; 208
 b1c:	31 93       	st	Z+, r19
 b1e:	de f6       	brtc	.-74     	; 0xad6 <__ultoa_invert+0xe>
 b20:	cf 01       	movw	r24, r30
 b22:	08 95       	ret
 b24:	46 2f       	mov	r20, r22
 b26:	47 70       	andi	r20, 0x07	; 7
 b28:	40 5d       	subi	r20, 0xD0	; 208
 b2a:	41 93       	st	Z+, r20
 b2c:	b3 e0       	ldi	r27, 0x03	; 3
 b2e:	0f d0       	rcall	.+30     	; 0xb4e <__ultoa_invert+0x86>
 b30:	c9 f7       	brne	.-14     	; 0xb24 <__ultoa_invert+0x5c>
 b32:	f6 cf       	rjmp	.-20     	; 0xb20 <__ultoa_invert+0x58>
 b34:	46 2f       	mov	r20, r22
 b36:	4f 70       	andi	r20, 0x0F	; 15
 b38:	40 5d       	subi	r20, 0xD0	; 208
 b3a:	4a 33       	cpi	r20, 0x3A	; 58
 b3c:	18 f0       	brcs	.+6      	; 0xb44 <__ultoa_invert+0x7c>
 b3e:	49 5d       	subi	r20, 0xD9	; 217
 b40:	31 fd       	sbrc	r19, 1
 b42:	40 52       	subi	r20, 0x20	; 32
 b44:	41 93       	st	Z+, r20
 b46:	02 d0       	rcall	.+4      	; 0xb4c <__ultoa_invert+0x84>
 b48:	a9 f7       	brne	.-22     	; 0xb34 <__ultoa_invert+0x6c>
 b4a:	ea cf       	rjmp	.-44     	; 0xb20 <__ultoa_invert+0x58>
 b4c:	b4 e0       	ldi	r27, 0x04	; 4
 b4e:	a6 95       	lsr	r26
 b50:	97 95       	ror	r25
 b52:	87 95       	ror	r24
 b54:	77 95       	ror	r23
 b56:	67 95       	ror	r22
 b58:	ba 95       	dec	r27
 b5a:	c9 f7       	brne	.-14     	; 0xb4e <__ultoa_invert+0x86>
 b5c:	00 97       	sbiw	r24, 0x00	; 0
 b5e:	61 05       	cpc	r22, r1
 b60:	71 05       	cpc	r23, r1
 b62:	08 95       	ret
 b64:	9b 01       	movw	r18, r22
 b66:	ac 01       	movw	r20, r24
 b68:	0a 2e       	mov	r0, r26
 b6a:	06 94       	lsr	r0
 b6c:	57 95       	ror	r21
 b6e:	47 95       	ror	r20
 b70:	37 95       	ror	r19
 b72:	27 95       	ror	r18
 b74:	ba 95       	dec	r27
 b76:	c9 f7       	brne	.-14     	; 0xb6a <__ultoa_invert+0xa2>
 b78:	62 0f       	add	r22, r18
 b7a:	73 1f       	adc	r23, r19
 b7c:	84 1f       	adc	r24, r20
 b7e:	95 1f       	adc	r25, r21
 b80:	a0 1d       	adc	r26, r0
 b82:	08 95       	ret

00000b84 <__prologue_saves__>:
 b84:	2f 92       	push	r2
 b86:	3f 92       	push	r3
 b88:	4f 92       	push	r4
 b8a:	5f 92       	push	r5
 b8c:	6f 92       	push	r6
 b8e:	7f 92       	push	r7
 b90:	8f 92       	push	r8
 b92:	9f 92       	push	r9
 b94:	af 92       	push	r10
 b96:	bf 92       	push	r11
 b98:	cf 92       	push	r12
 b9a:	df 92       	push	r13
 b9c:	ef 92       	push	r14
 b9e:	ff 92       	push	r15
 ba0:	0f 93       	push	r16
 ba2:	1f 93       	push	r17
 ba4:	cf 93       	push	r28
 ba6:	df 93       	push	r29
 ba8:	cd b7       	in	r28, 0x3d	; 61
 baa:	de b7       	in	r29, 0x3e	; 62
 bac:	ca 1b       	sub	r28, r26
 bae:	db 0b       	sbc	r29, r27
 bb0:	0f b6       	in	r0, 0x3f	; 63
 bb2:	f8 94       	cli
 bb4:	de bf       	out	0x3e, r29	; 62
 bb6:	0f be       	out	0x3f, r0	; 63
 bb8:	cd bf       	out	0x3d, r28	; 61
 bba:	09 94       	ijmp

00000bbc <__epilogue_restores__>:
 bbc:	2a 88       	ldd	r2, Y+18	; 0x12
 bbe:	39 88       	ldd	r3, Y+17	; 0x11
 bc0:	48 88       	ldd	r4, Y+16	; 0x10
 bc2:	5f 84       	ldd	r5, Y+15	; 0x0f
 bc4:	6e 84       	ldd	r6, Y+14	; 0x0e
 bc6:	7d 84       	ldd	r7, Y+13	; 0x0d
 bc8:	8c 84       	ldd	r8, Y+12	; 0x0c
 bca:	9b 84       	ldd	r9, Y+11	; 0x0b
 bcc:	aa 84       	ldd	r10, Y+10	; 0x0a
 bce:	b9 84       	ldd	r11, Y+9	; 0x09
 bd0:	c8 84       	ldd	r12, Y+8	; 0x08
 bd2:	df 80       	ldd	r13, Y+7	; 0x07
 bd4:	ee 80       	ldd	r14, Y+6	; 0x06
 bd6:	fd 80       	ldd	r15, Y+5	; 0x05
 bd8:	0c 81       	ldd	r16, Y+4	; 0x04
 bda:	1b 81       	ldd	r17, Y+3	; 0x03
 bdc:	aa 81       	ldd	r26, Y+2	; 0x02
 bde:	b9 81       	ldd	r27, Y+1	; 0x01
 be0:	ce 0f       	add	r28, r30
 be2:	d1 1d       	adc	r29, r1
 be4:	0f b6       	in	r0, 0x3f	; 63
 be6:	f8 94       	cli
 be8:	de bf       	out	0x3e, r29	; 62
 bea:	0f be       	out	0x3f, r0	; 63
 bec:	cd bf       	out	0x3d, r28	; 61
 bee:	ed 01       	movw	r28, r26
 bf0:	08 95       	ret

00000bf2 <_exit>:
 bf2:	f8 94       	cli

00000bf4 <__stop_program>:
 bf4:	ff cf       	rjmp	.-2      	; 0xbf4 <__stop_program>
