
595.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000195  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000141  00000000  00000000  0000030d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000013e  00000000  00000000  0000044e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000034  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000015d  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000069  00000000  00000000  0000071d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  00000786  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ec       	ldi	r30, 0xCC	; 204
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  7a:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ship>:
#define DDR DDRD
//#define clk clrb(PORTC,1)
//#define latch clrb(PORTC,2)
#include <avr/io.h>
void ship(int data)
{
  82:	28 e0       	ldi	r18, 0x08	; 8
  84:	30 e0       	ldi	r19, 0x00	; 0
	for (int i=8;i>0;i--)
	{
		if((data&0x80)==0x80)
  86:	87 ff       	sbrs	r24, 7
  88:	02 c0       	rjmp	.+4      	; 0x8e <ship+0xc>
			setb(PORT,0);
  8a:	90 9a       	sbi	0x12, 0	; 18
  8c:	01 c0       	rjmp	.+2      	; 0x90 <ship+0xe>
		else
			clrb(PORT,0);
  8e:	90 98       	cbi	0x12, 0	; 18
		data=data<<1;
  90:	88 0f       	add	r24, r24
  92:	99 1f       	adc	r25, r25
		clrb(PORT,1);//xung clk cua thanh ghi dich
  94:	91 98       	cbi	0x12, 1	; 18
		setb(PORT,1);
  96:	91 9a       	sbi	0x12, 1	; 18
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	31 09       	sbc	r19, r1
//#define clk clrb(PORTC,1)
//#define latch clrb(PORTC,2)
#include <avr/io.h>
void ship(int data)
{
	for (int i=8;i>0;i--)
  9c:	21 15       	cp	r18, r1
  9e:	31 05       	cpc	r19, r1
  a0:	91 f7       	brne	.-28     	; 0x86 <ship+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	87 eb       	ldi	r24, 0xB7	; 183
  a4:	9b e0       	ldi	r25, 0x0B	; 11
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <ship+0x24>
  aa:	00 c0       	rjmp	.+0      	; 0xac <ship+0x2a>
  ac:	00 00       	nop
  ae:	08 95       	ret

000000b0 <main>:
	//setb(PORT,2);
	_delay_ms(1);
}
int main(void)
{
	PORT=0X00;
  b0:	12 ba       	out	0x12, r1	; 18
	DDR=0X07;
  b2:	87 e0       	ldi	r24, 0x07	; 7
  b4:	81 bb       	out	0x11, r24	; 17
	DDRA=0xff;
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	8a bb       	out	0x1a, r24	; 26
    while(1)
    {
		
			ship(0xf0);//_delay_ms(10);
			PORTA=0x12;//_delay_ms(1000000);
  ba:	c2 e1       	ldi	r28, 0x12	; 18
	DDR=0X07;
	DDRA=0xff;
    while(1)
    {
		
			ship(0xf0);//_delay_ms(10);
  bc:	80 ef       	ldi	r24, 0xF0	; 240
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 41 00 	call	0x82	; 0x82 <ship>
			PORTA=0x12;//_delay_ms(1000000);
  c4:	cb bb       	out	0x1b, r28	; 27
  c6:	fa cf       	rjmp	.-12     	; 0xbc <main+0xc>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
