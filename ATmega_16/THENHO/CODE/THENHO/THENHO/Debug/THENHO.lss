
THENHO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000050  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002bb  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001d8  00000000  00000000  0000045b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001c3  00000000  00000000  00000633  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000ac  00000000  00000000  000007f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001be  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000015b  00000000  00000000  00000a62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000040  00000000  00000000  00000bbd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ec       	ldi	r30, 0xCC	; 204
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 56 00 	call	0xac	; 0xac <main>
  7a:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <init_UART>:
}
void init_UART()

{
	//UART
	UBRRH=0;		//set toc do truyen baud
  82:	10 bc       	out	0x20, r1	; 32
	UBRRL=51;
  84:	83 e3       	ldi	r24, 0x33	; 51
  86:	89 b9       	out	0x09, r24	; 9
	UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  88:	86 e8       	ldi	r24, 0x86	; 134
  8a:	80 bd       	out	0x20, r24	; 32
	UCSRB=(1<<TXEN)|(1<<RXEN)|(1<<RXCIE);
  8c:	88 e9       	ldi	r24, 0x98	; 152
  8e:	8a b9       	out	0x0a, r24	; 10
  90:	08 95       	ret

00000092 <SPI_MasterInit>:
int wData[3]={0, 80, 160}; //wData: du lieu de send

//Khoi dong SPI o che do Master
void SPI_MasterInit(void)
{
	SPI_DDR |=(1<<SCK_PIN)|(1<<MOSI_PIN);
  92:	87 b3       	in	r24, 0x17	; 23
  94:	80 6a       	ori	r24, 0xA0	; 160
  96:	87 bb       	out	0x17, r24	; 23
	SPI_PORT|=(1<<MISO_PIN); //dien tro keo len cho chan MISO
  98:	c6 9a       	sbi	0x18, 6	; 24
	SPCR=(1<<SPIE)|(1<<SPE)|(1<<MSTR)|(1<<CPHA)|(1<<SPR1)|(1<<SPR0);
  9a:	87 ed       	ldi	r24, 0xD7	; 215
  9c:	8d b9       	out	0x0d, r24	; 13
	//SPIE: interrupt, SPE: enable, MSTR: Master mode, CPHA: Phase, SPR1:0: prescaler=128
	//Setup cho cac chan dieu khien dia chi Slave
	ADDRESS_DDR |=(1<<Slave(2))|(1<<Slave(1))|(1<<Slave(0));
  9e:	87 b3       	in	r24, 0x17	; 23
  a0:	87 60       	ori	r24, 0x07	; 7
  a2:	87 bb       	out	0x17, r24	; 23
	ADDRESS_PORT|=(1<<Slave(2))|(1<<Slave(1))|(1<<Slave(0)); //keo len muc cao de disable Slavers
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	87 60       	ori	r24, 0x07	; 7
  a8:	88 bb       	out	0x18, r24	; 24
  aa:	08 95       	ret

000000ac <main>:
}

//chuong trinh chinh
int main()
{
	SPI_MasterInit(); //khoi dong SPI Master
  ac:	0e 94 49 00 	call	0x92	; 0x92 <SPI_MasterInit>
	init_UART();
  b0:	0e 94 41 00 	call	0x82	; 0x82 <init_UART>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	80 e7       	ldi	r24, 0x70	; 112
  b8:	92 e0       	ldi	r25, 0x02	; 2
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0xe>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x18>
  c4:	00 00       	nop
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <main+0x1a>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
