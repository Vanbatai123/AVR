
LCD_TFT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  00001a76  00001b0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  008000b2  008000b2  00001b5c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b5c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00001bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000029ab  00000000  00000000  00001ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000385  00000000  00000000  00004653  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008c5  00000000  00000000  000049d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000330  00000000  00000000  000052a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042f  00000000  00000000  000055d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e6b  00000000  00000000  000059ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000178  00000000  00000000  0000686a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a8 02 	jmp	0x550	; 0x550 <__ctors_end>
       4:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
       8:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
       c:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      10:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      14:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      18:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      1c:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      20:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      24:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      28:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      2c:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      30:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      34:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      38:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      3c:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      40:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      44:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      48:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      4c:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      50:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	00 00       	nop
      56:	00 00       	nop
      58:	00 3e       	cpi	r16, 0xE0	; 224
      5a:	5b 4f       	sbci	r21, 0xFB	; 251
      5c:	5b 3e       	cpi	r21, 0xEB	; 235
      5e:	3e 6b       	ori	r19, 0xBE	; 190
      60:	4f 6b       	ori	r20, 0xBF	; 191
      62:	3e 1c       	adc	r3, r14
      64:	3e 7c       	andi	r19, 0xCE	; 206
      66:	3e 1c       	adc	r3, r14
      68:	18 3c       	cpi	r17, 0xC8	; 200
      6a:	7e 3c       	cpi	r23, 0xCE	; 206
      6c:	18 1c       	adc	r1, r8
      6e:	57 7d       	andi	r21, 0xD7	; 215
      70:	57 1c       	adc	r5, r7
      72:	1c 5e       	subi	r17, 0xEC	; 236
      74:	7f 5e       	subi	r23, 0xEF	; 239
      76:	1c 00       	.word	0x001c	; ????
      78:	18 3c       	cpi	r17, 0xC8	; 200
      7a:	18 00       	.word	0x0018	; ????
      7c:	ff e7       	ldi	r31, 0x7F	; 127
      7e:	c3 e7       	ldi	r28, 0x73	; 115
      80:	ff 00       	.word	0x00ff	; ????
      82:	18 24       	eor	r1, r8
      84:	18 00       	.word	0x0018	; ????
      86:	ff e7       	ldi	r31, 0x7F	; 127
      88:	db e7       	ldi	r29, 0x7B	; 123
      8a:	ff 30       	cpi	r31, 0x0F	; 15
      8c:	48 3a       	cpi	r20, 0xA8	; 168
      8e:	06 0e       	add	r0, r22
      90:	26 29       	or	r18, r6
      92:	79 29       	or	r23, r9
      94:	26 40       	sbci	r18, 0x06	; 6
      96:	7f 05       	cpc	r23, r15
      98:	05 07       	cpc	r16, r21
      9a:	40 7f       	andi	r20, 0xF0	; 240
      9c:	05 25       	eor	r16, r5
      9e:	3f 5a       	subi	r19, 0xAF	; 175
      a0:	3c e7       	ldi	r19, 0x7C	; 124
      a2:	3c 5a       	subi	r19, 0xAC	; 172
      a4:	7f 3e       	cpi	r23, 0xEF	; 239
      a6:	1c 1c       	adc	r1, r12
      a8:	08 08       	sbc	r0, r8
      aa:	1c 1c       	adc	r1, r12
      ac:	3e 7f       	andi	r19, 0xFE	; 254
      ae:	14 22       	and	r1, r20
      b0:	7f 22       	and	r7, r31
      b2:	14 5f       	subi	r17, 0xF4	; 244
      b4:	5f 00       	.word	0x005f	; ????
      b6:	5f 5f       	subi	r21, 0xFF	; 255
      b8:	06 09       	sbc	r16, r6
      ba:	7f 01       	movw	r14, r30
      bc:	7f 00       	.word	0x007f	; ????
      be:	66 89       	ldd	r22, Z+22	; 0x16
      c0:	95 6a       	ori	r25, 0xA5	; 165
      c2:	60 60       	ori	r22, 0x00	; 0
      c4:	60 60       	ori	r22, 0x00	; 0
      c6:	60 94       	com	r6
      c8:	a2 ff       	sbrs	r26, 2
      ca:	a2 94       	swap	r10
      cc:	08 04       	cpc	r0, r8
      ce:	7e 04       	cpc	r7, r14
      d0:	08 10       	cpse	r0, r8
      d2:	20 7e       	andi	r18, 0xE0	; 224
      d4:	20 10       	cpse	r2, r0
      d6:	08 08       	sbc	r0, r8
      d8:	2a 1c       	adc	r2, r10
      da:	08 08       	sbc	r0, r8
      dc:	1c 2a       	or	r1, r28
      de:	08 08       	sbc	r0, r8
      e0:	1e 10       	cpse	r1, r14
      e2:	10 10       	cpse	r1, r0
      e4:	10 0c       	add	r1, r0
      e6:	1e 0c       	add	r1, r14
      e8:	1e 0c       	add	r1, r14
      ea:	30 38       	cpi	r19, 0x80	; 128
      ec:	3e 38       	cpi	r19, 0x8E	; 142
      ee:	30 06       	cpc	r3, r16
      f0:	0e 3e       	cpi	r16, 0xEE	; 238
      f2:	0e 06       	cpc	r0, r30
      f4:	00 00       	nop
      f6:	00 00       	nop
      f8:	00 00       	nop
      fa:	00 5f       	subi	r16, 0xF0	; 240
      fc:	00 00       	nop
      fe:	00 07       	cpc	r16, r16
     100:	00 07       	cpc	r16, r16
     102:	00 14       	cp	r0, r0
     104:	7f 14       	cp	r7, r15
     106:	7f 14       	cp	r7, r15
     108:	24 2a       	or	r2, r20
     10a:	7f 2a       	or	r7, r31
     10c:	12 23       	and	r17, r18
     10e:	13 08       	sbc	r1, r3
     110:	64 62       	ori	r22, 0x24	; 36
     112:	36 49       	sbci	r19, 0x96	; 150
     114:	56 20       	and	r5, r6
     116:	50 00       	.word	0x0050	; ????
     118:	08 07       	cpc	r16, r24
     11a:	03 00       	.word	0x0003	; ????
     11c:	00 1c       	adc	r0, r0
     11e:	22 41       	sbci	r18, 0x12	; 18
     120:	00 00       	nop
     122:	41 22       	and	r4, r17
     124:	1c 00       	.word	0x001c	; ????
     126:	2a 1c       	adc	r2, r10
     128:	7f 1c       	adc	r7, r15
     12a:	2a 08       	sbc	r2, r10
     12c:	08 3e       	cpi	r16, 0xE8	; 232
     12e:	08 08       	sbc	r0, r8
     130:	00 80       	ld	r0, Z
     132:	70 30       	cpi	r23, 0x00	; 0
     134:	00 08       	sbc	r0, r0
     136:	08 08       	sbc	r0, r8
     138:	08 08       	sbc	r0, r8
     13a:	00 00       	nop
     13c:	60 60       	ori	r22, 0x00	; 0
     13e:	00 20       	and	r0, r0
     140:	10 08       	sbc	r1, r0
     142:	04 02       	muls	r16, r20
     144:	3e 51       	subi	r19, 0x1E	; 30
     146:	49 45       	sbci	r20, 0x59	; 89
     148:	3e 00       	.word	0x003e	; ????
     14a:	42 7f       	andi	r20, 0xF2	; 242
     14c:	40 00       	.word	0x0040	; ????
     14e:	72 49       	sbci	r23, 0x92	; 146
     150:	49 49       	sbci	r20, 0x99	; 153
     152:	46 21       	and	r20, r6
     154:	41 49       	sbci	r20, 0x91	; 145
     156:	4d 33       	cpi	r20, 0x3D	; 61
     158:	18 14       	cp	r1, r8
     15a:	12 7f       	andi	r17, 0xF2	; 242
     15c:	10 27       	eor	r17, r16
     15e:	45 45       	sbci	r20, 0x55	; 85
     160:	45 39       	cpi	r20, 0x95	; 149
     162:	3c 4a       	sbci	r19, 0xAC	; 172
     164:	49 49       	sbci	r20, 0x99	; 153
     166:	31 41       	sbci	r19, 0x11	; 17
     168:	21 11       	cpse	r18, r1
     16a:	09 07       	cpc	r16, r25
     16c:	36 49       	sbci	r19, 0x96	; 150
     16e:	49 49       	sbci	r20, 0x99	; 153
     170:	36 46       	sbci	r19, 0x66	; 102
     172:	49 49       	sbci	r20, 0x99	; 153
     174:	29 1e       	adc	r2, r25
     176:	00 00       	nop
     178:	14 00       	.word	0x0014	; ????
     17a:	00 00       	nop
     17c:	40 34       	cpi	r20, 0x40	; 64
     17e:	00 00       	nop
     180:	00 08       	sbc	r0, r0
     182:	14 22       	and	r1, r20
     184:	41 14       	cp	r4, r1
     186:	14 14       	cp	r1, r4
     188:	14 14       	cp	r1, r4
     18a:	00 41       	sbci	r16, 0x10	; 16
     18c:	22 14       	cp	r2, r2
     18e:	08 02       	muls	r16, r24
     190:	01 59       	subi	r16, 0x91	; 145
     192:	09 06       	cpc	r0, r25
     194:	3e 41       	sbci	r19, 0x1E	; 30
     196:	5d 59       	subi	r21, 0x9D	; 157
     198:	4e 7c       	andi	r20, 0xCE	; 206
     19a:	12 11       	cpse	r17, r2
     19c:	12 7c       	andi	r17, 0xC2	; 194
     19e:	7f 49       	sbci	r23, 0x9F	; 159
     1a0:	49 49       	sbci	r20, 0x99	; 153
     1a2:	36 3e       	cpi	r19, 0xE6	; 230
     1a4:	41 41       	sbci	r20, 0x11	; 17
     1a6:	41 22       	and	r4, r17
     1a8:	7f 41       	sbci	r23, 0x1F	; 31
     1aa:	41 41       	sbci	r20, 0x11	; 17
     1ac:	3e 7f       	andi	r19, 0xFE	; 254
     1ae:	49 49       	sbci	r20, 0x99	; 153
     1b0:	49 41       	sbci	r20, 0x19	; 25
     1b2:	7f 09       	sbc	r23, r15
     1b4:	09 09       	sbc	r16, r9
     1b6:	01 3e       	cpi	r16, 0xE1	; 225
     1b8:	41 41       	sbci	r20, 0x11	; 17
     1ba:	51 73       	andi	r21, 0x31	; 49
     1bc:	7f 08       	sbc	r7, r15
     1be:	08 08       	sbc	r0, r8
     1c0:	7f 00       	.word	0x007f	; ????
     1c2:	41 7f       	andi	r20, 0xF1	; 241
     1c4:	41 00       	.word	0x0041	; ????
     1c6:	20 40       	sbci	r18, 0x00	; 0
     1c8:	41 3f       	cpi	r20, 0xF1	; 241
     1ca:	01 7f       	andi	r16, 0xF1	; 241
     1cc:	08 14       	cp	r0, r8
     1ce:	22 41       	sbci	r18, 0x12	; 18
     1d0:	7f 40       	sbci	r23, 0x0F	; 15
     1d2:	40 40       	sbci	r20, 0x00	; 0
     1d4:	40 7f       	andi	r20, 0xF0	; 240
     1d6:	02 1c       	adc	r0, r2
     1d8:	02 7f       	andi	r16, 0xF2	; 242
     1da:	7f 04       	cpc	r7, r15
     1dc:	08 10       	cpse	r0, r8
     1de:	7f 3e       	cpi	r23, 0xEF	; 239
     1e0:	41 41       	sbci	r20, 0x11	; 17
     1e2:	41 3e       	cpi	r20, 0xE1	; 225
     1e4:	7f 09       	sbc	r23, r15
     1e6:	09 09       	sbc	r16, r9
     1e8:	06 3e       	cpi	r16, 0xE6	; 230
     1ea:	41 51       	subi	r20, 0x11	; 17
     1ec:	21 5e       	subi	r18, 0xE1	; 225
     1ee:	7f 09       	sbc	r23, r15
     1f0:	19 29       	or	r17, r9
     1f2:	46 26       	eor	r4, r22
     1f4:	49 49       	sbci	r20, 0x99	; 153
     1f6:	49 32       	cpi	r20, 0x29	; 41
     1f8:	03 01       	movw	r0, r6
     1fa:	7f 01       	movw	r14, r30
     1fc:	03 3f       	cpi	r16, 0xF3	; 243
     1fe:	40 40       	sbci	r20, 0x00	; 0
     200:	40 3f       	cpi	r20, 0xF0	; 240
     202:	1f 20       	and	r1, r15
     204:	40 20       	and	r4, r0
     206:	1f 3f       	cpi	r17, 0xFF	; 255
     208:	40 38       	cpi	r20, 0x80	; 128
     20a:	40 3f       	cpi	r20, 0xF0	; 240
     20c:	63 14       	cp	r6, r3
     20e:	08 14       	cp	r0, r8
     210:	63 03       	mulsu	r22, r19
     212:	04 78       	andi	r16, 0x84	; 132
     214:	04 03       	mulsu	r16, r20
     216:	61 59       	subi	r22, 0x91	; 145
     218:	49 4d       	sbci	r20, 0xD9	; 217
     21a:	43 00       	.word	0x0043	; ????
     21c:	7f 41       	sbci	r23, 0x1F	; 31
     21e:	41 41       	sbci	r20, 0x11	; 17
     220:	02 04       	cpc	r0, r2
     222:	08 10       	cpse	r0, r8
     224:	20 00       	.word	0x0020	; ????
     226:	41 41       	sbci	r20, 0x11	; 17
     228:	41 7f       	andi	r20, 0xF1	; 241
     22a:	04 02       	muls	r16, r20
     22c:	01 02       	muls	r16, r17
     22e:	04 40       	sbci	r16, 0x04	; 4
     230:	40 40       	sbci	r20, 0x00	; 0
     232:	40 40       	sbci	r20, 0x00	; 0
     234:	00 03       	mulsu	r16, r16
     236:	07 08       	sbc	r0, r7
     238:	00 20       	and	r0, r0
     23a:	54 54       	subi	r21, 0x44	; 68
     23c:	78 40       	sbci	r23, 0x08	; 8
     23e:	7f 28       	or	r7, r15
     240:	44 44       	sbci	r20, 0x44	; 68
     242:	38 38       	cpi	r19, 0x88	; 136
     244:	44 44       	sbci	r20, 0x44	; 68
     246:	44 28       	or	r4, r4
     248:	38 44       	sbci	r19, 0x48	; 72
     24a:	44 28       	or	r4, r4
     24c:	7f 38       	cpi	r23, 0x8F	; 143
     24e:	54 54       	subi	r21, 0x44	; 68
     250:	54 18       	sub	r5, r4
     252:	00 08       	sbc	r0, r0
     254:	7e 09       	sbc	r23, r14
     256:	02 18       	sub	r0, r2
     258:	a4 a4       	ldd	r10, Z+44	; 0x2c
     25a:	9c 78       	andi	r25, 0x8C	; 140
     25c:	7f 08       	sbc	r7, r15
     25e:	04 04       	cpc	r0, r4
     260:	78 00       	.word	0x0078	; ????
     262:	44 7d       	andi	r20, 0xD4	; 212
     264:	40 00       	.word	0x0040	; ????
     266:	20 40       	sbci	r18, 0x00	; 0
     268:	40 3d       	cpi	r20, 0xD0	; 208
     26a:	00 7f       	andi	r16, 0xF0	; 240
     26c:	10 28       	or	r1, r0
     26e:	44 00       	.word	0x0044	; ????
     270:	00 41       	sbci	r16, 0x10	; 16
     272:	7f 40       	sbci	r23, 0x0F	; 15
     274:	00 7c       	andi	r16, 0xC0	; 192
     276:	04 78       	andi	r16, 0x84	; 132
     278:	04 78       	andi	r16, 0x84	; 132
     27a:	7c 08       	sbc	r7, r12
     27c:	04 04       	cpc	r0, r4
     27e:	78 38       	cpi	r23, 0x88	; 136
     280:	44 44       	sbci	r20, 0x44	; 68
     282:	44 38       	cpi	r20, 0x84	; 132
     284:	fc 18       	sub	r15, r12
     286:	24 24       	eor	r2, r4
     288:	18 18       	sub	r1, r8
     28a:	24 24       	eor	r2, r4
     28c:	18 fc       	.word	0xfc18	; ????
     28e:	7c 08       	sbc	r7, r12
     290:	04 04       	cpc	r0, r4
     292:	08 48       	sbci	r16, 0x88	; 136
     294:	54 54       	subi	r21, 0x44	; 68
     296:	54 24       	eor	r5, r4
     298:	04 04       	cpc	r0, r4
     29a:	3f 44       	sbci	r19, 0x4F	; 79
     29c:	24 3c       	cpi	r18, 0xC4	; 196
     29e:	40 40       	sbci	r20, 0x00	; 0
     2a0:	20 7c       	andi	r18, 0xC0	; 192
     2a2:	1c 20       	and	r1, r12
     2a4:	40 20       	and	r4, r0
     2a6:	1c 3c       	cpi	r17, 0xCC	; 204
     2a8:	40 30       	cpi	r20, 0x00	; 0
     2aa:	40 3c       	cpi	r20, 0xC0	; 192
     2ac:	44 28       	or	r4, r4
     2ae:	10 28       	or	r1, r0
     2b0:	44 4c       	sbci	r20, 0xC4	; 196
     2b2:	90 90 90 7c 	lds	r9, 0x7C90
     2b6:	44 64       	ori	r20, 0x44	; 68
     2b8:	54 4c       	sbci	r21, 0xC4	; 196
     2ba:	44 00       	.word	0x0044	; ????
     2bc:	08 36       	cpi	r16, 0x68	; 104
     2be:	41 00       	.word	0x0041	; ????
     2c0:	00 00       	nop
     2c2:	77 00       	.word	0x0077	; ????
     2c4:	00 00       	nop
     2c6:	41 36       	cpi	r20, 0x61	; 97
     2c8:	08 00       	.word	0x0008	; ????
     2ca:	02 01       	movw	r0, r4
     2cc:	02 04       	cpc	r0, r2
     2ce:	02 3c       	cpi	r16, 0xC2	; 194
     2d0:	26 23       	and	r18, r22
     2d2:	26 3c       	cpi	r18, 0xC6	; 198
     2d4:	1e a1       	ldd	r17, Y+38	; 0x26
     2d6:	a1 61       	ori	r26, 0x11	; 17
     2d8:	12 3a       	cpi	r17, 0xA2	; 162
     2da:	40 40       	sbci	r20, 0x00	; 0
     2dc:	20 7a       	andi	r18, 0xA0	; 160
     2de:	38 54       	subi	r19, 0x48	; 72
     2e0:	54 55       	subi	r21, 0x54	; 84
     2e2:	59 21       	and	r21, r9
     2e4:	55 55       	subi	r21, 0x55	; 85
     2e6:	79 41       	sbci	r23, 0x19	; 25
     2e8:	22 54       	subi	r18, 0x42	; 66
     2ea:	54 78       	andi	r21, 0x84	; 132
     2ec:	42 21       	and	r20, r2
     2ee:	55 54       	subi	r21, 0x45	; 69
     2f0:	78 40       	sbci	r23, 0x08	; 8
     2f2:	20 54       	subi	r18, 0x40	; 64
     2f4:	55 79       	andi	r21, 0x95	; 149
     2f6:	40 0c       	add	r4, r0
     2f8:	1e 52       	subi	r17, 0x2E	; 46
     2fa:	72 12       	cpse	r7, r18
     2fc:	39 55       	subi	r19, 0x59	; 89
     2fe:	55 55       	subi	r21, 0x55	; 85
     300:	59 39       	cpi	r21, 0x99	; 153
     302:	54 54       	subi	r21, 0x44	; 68
     304:	54 59       	subi	r21, 0x94	; 148
     306:	39 55       	subi	r19, 0x59	; 89
     308:	54 54       	subi	r21, 0x44	; 68
     30a:	58 00       	.word	0x0058	; ????
     30c:	00 45       	sbci	r16, 0x50	; 80
     30e:	7c 41       	sbci	r23, 0x1C	; 28
     310:	00 02       	muls	r16, r16
     312:	45 7d       	andi	r20, 0xD5	; 213
     314:	42 00       	.word	0x0042	; ????
     316:	01 45       	sbci	r16, 0x51	; 81
     318:	7c 40       	sbci	r23, 0x0C	; 12
     31a:	7d 12       	cpse	r7, r29
     31c:	11 12       	cpse	r1, r17
     31e:	7d f0       	brhs	.+30     	; 0x33e <__trampolines_end+0x2ea>
     320:	28 25       	eor	r18, r8
     322:	28 f0       	brcs	.+10     	; 0x32e <__trampolines_end+0x2da>
     324:	7c 54       	subi	r23, 0x4C	; 76
     326:	55 45       	sbci	r21, 0x55	; 85
     328:	00 20       	and	r0, r0
     32a:	54 54       	subi	r21, 0x44	; 68
     32c:	7c 54       	subi	r23, 0x4C	; 76
     32e:	7c 0a       	sbc	r7, r28
     330:	09 7f       	andi	r16, 0xF9	; 249
     332:	49 32       	cpi	r20, 0x29	; 41
     334:	49 49       	sbci	r20, 0x99	; 153
     336:	49 32       	cpi	r20, 0x29	; 41
     338:	3a 44       	sbci	r19, 0x4A	; 74
     33a:	44 44       	sbci	r20, 0x44	; 68
     33c:	3a 32       	cpi	r19, 0x2A	; 42
     33e:	4a 48       	sbci	r20, 0x8A	; 138
     340:	48 30       	cpi	r20, 0x08	; 8
     342:	3a 41       	sbci	r19, 0x1A	; 26
     344:	41 21       	and	r20, r1
     346:	7a 3a       	cpi	r23, 0xAA	; 170
     348:	42 40       	sbci	r20, 0x02	; 2
     34a:	20 78       	andi	r18, 0x80	; 128
     34c:	00 9d       	mul	r16, r0
     34e:	a0 a0       	ldd	r10, Z+32	; 0x20
     350:	7d 3d       	cpi	r23, 0xDD	; 221
     352:	42 42       	sbci	r20, 0x22	; 34
     354:	42 3d       	cpi	r20, 0xD2	; 210
     356:	3d 40       	sbci	r19, 0x0D	; 13
     358:	40 40       	sbci	r20, 0x00	; 0
     35a:	3d 3c       	cpi	r19, 0xCD	; 205
     35c:	24 ff       	sbrs	r18, 4
     35e:	24 24       	eor	r2, r4
     360:	48 7e       	andi	r20, 0xE8	; 232
     362:	49 43       	sbci	r20, 0x39	; 57
     364:	66 2b       	or	r22, r22
     366:	2f fc       	.word	0xfc2f	; ????
     368:	2f 2b       	or	r18, r31
     36a:	ff 09       	sbc	r31, r15
     36c:	29 f6       	brne	.-118    	; 0x2f8 <__trampolines_end+0x2a4>
     36e:	20 c0       	rjmp	.+64     	; 0x3b0 <__trampolines_end+0x35c>
     370:	88 7e       	andi	r24, 0xE8	; 232
     372:	09 03       	fmul	r16, r17
     374:	20 54       	subi	r18, 0x40	; 64
     376:	54 79       	andi	r21, 0x94	; 148
     378:	41 00       	.word	0x0041	; ????
     37a:	00 44       	sbci	r16, 0x40	; 64
     37c:	7d 41       	sbci	r23, 0x1D	; 29
     37e:	30 48       	sbci	r19, 0x80	; 128
     380:	48 4a       	sbci	r20, 0xA8	; 168
     382:	32 38       	cpi	r19, 0x82	; 130
     384:	40 40       	sbci	r20, 0x00	; 0
     386:	22 7a       	andi	r18, 0xA2	; 162
     388:	00 7a       	andi	r16, 0xA0	; 160
     38a:	0a 0a       	sbc	r0, r26
     38c:	72 7d       	andi	r23, 0xD2	; 210
     38e:	0d 19       	sub	r16, r13
     390:	31 7d       	andi	r19, 0xD1	; 209
     392:	26 29       	or	r18, r6
     394:	29 2f       	mov	r18, r25
     396:	28 26       	eor	r2, r24
     398:	29 29       	or	r18, r9
     39a:	29 26       	eor	r2, r25
     39c:	30 48       	sbci	r19, 0x80	; 128
     39e:	4d 40       	sbci	r20, 0x0D	; 13
     3a0:	20 38       	cpi	r18, 0x80	; 128
     3a2:	08 08       	sbc	r0, r8
     3a4:	08 08       	sbc	r0, r8
     3a6:	08 08       	sbc	r0, r8
     3a8:	08 08       	sbc	r0, r8
     3aa:	38 2f       	mov	r19, r24
     3ac:	10 c8       	rjmp	.-4064   	; 0xfffff3ce <__eeprom_end+0xff7ef3ce>
     3ae:	ac ba       	out	0x1c, r10	; 28
     3b0:	2f 10       	cpse	r2, r15
     3b2:	28 34       	cpi	r18, 0x48	; 72
     3b4:	fa 00       	.word	0x00fa	; ????
     3b6:	00 7b       	andi	r16, 0xB0	; 176
     3b8:	00 00       	nop
     3ba:	08 14       	cp	r0, r8
     3bc:	2a 14       	cp	r2, r10
     3be:	22 22       	and	r2, r18
     3c0:	14 2a       	or	r1, r20
     3c2:	14 08       	sbc	r1, r4
     3c4:	aa 00       	.word	0x00aa	; ????
     3c6:	55 00       	.word	0x0055	; ????
     3c8:	aa aa       	std	Y+50, r10	; 0x32
     3ca:	55 aa       	std	Z+53, r5	; 0x35
     3cc:	55 aa       	std	Z+53, r5	; 0x35
     3ce:	00 00       	nop
     3d0:	00 ff       	sbrs	r16, 0
     3d2:	00 10       	cpse	r0, r0
     3d4:	10 10       	cpse	r1, r0
     3d6:	ff 00       	.word	0x00ff	; ????
     3d8:	14 14       	cp	r1, r4
     3da:	14 ff       	sbrs	r17, 4
     3dc:	00 10       	cpse	r0, r0
     3de:	10 ff       	sbrs	r17, 0
     3e0:	00 ff       	sbrs	r16, 0
     3e2:	10 10       	cpse	r1, r0
     3e4:	f0 10       	cpse	r15, r0
     3e6:	f0 14       	cp	r15, r0
     3e8:	14 14       	cp	r1, r4
     3ea:	fc 00       	.word	0x00fc	; ????
     3ec:	14 14       	cp	r1, r4
     3ee:	f7 00       	.word	0x00f7	; ????
     3f0:	ff 00       	.word	0x00ff	; ????
     3f2:	00 ff       	sbrs	r16, 0
     3f4:	00 ff       	sbrs	r16, 0
     3f6:	14 14       	cp	r1, r4
     3f8:	f4 04       	cpc	r15, r4
     3fa:	fc 14       	cp	r15, r12
     3fc:	14 17       	cp	r17, r20
     3fe:	10 1f       	adc	r17, r16
     400:	10 10       	cpse	r1, r0
     402:	1f 10       	cpse	r1, r15
     404:	1f 14       	cp	r1, r15
     406:	14 14       	cp	r1, r4
     408:	1f 00       	.word	0x001f	; ????
     40a:	10 10       	cpse	r1, r0
     40c:	10 f0       	brcs	.+4      	; 0x412 <__trampolines_end+0x3be>
     40e:	00 00       	nop
     410:	00 00       	nop
     412:	1f 10       	cpse	r1, r15
     414:	10 10       	cpse	r1, r0
     416:	10 1f       	adc	r17, r16
     418:	10 10       	cpse	r1, r0
     41a:	10 10       	cpse	r1, r0
     41c:	f0 10       	cpse	r15, r0
     41e:	00 00       	nop
     420:	00 ff       	sbrs	r16, 0
     422:	10 10       	cpse	r1, r0
     424:	10 10       	cpse	r1, r0
     426:	10 10       	cpse	r1, r0
     428:	10 10       	cpse	r1, r0
     42a:	10 ff       	sbrs	r17, 0
     42c:	10 00       	.word	0x0010	; ????
     42e:	00 00       	nop
     430:	ff 14       	cp	r15, r15
     432:	00 00       	nop
     434:	ff 00       	.word	0x00ff	; ????
     436:	ff 00       	.word	0x00ff	; ????
     438:	00 1f       	adc	r16, r16
     43a:	10 17       	cp	r17, r16
     43c:	00 00       	nop
     43e:	fc 04       	cpc	r15, r12
     440:	f4 14       	cp	r15, r4
     442:	14 17       	cp	r17, r20
     444:	10 17       	cp	r17, r16
     446:	14 14       	cp	r1, r4
     448:	f4 04       	cpc	r15, r4
     44a:	f4 00       	.word	0x00f4	; ????
     44c:	00 ff       	sbrs	r16, 0
     44e:	00 f7       	brcc	.-64     	; 0x410 <__trampolines_end+0x3bc>
     450:	14 14       	cp	r1, r4
     452:	14 14       	cp	r1, r4
     454:	14 14       	cp	r1, r4
     456:	14 f7       	brge	.-60     	; 0x41c <__trampolines_end+0x3c8>
     458:	00 f7       	brcc	.-64     	; 0x41a <__trampolines_end+0x3c6>
     45a:	14 14       	cp	r1, r4
     45c:	14 17       	cp	r17, r20
     45e:	14 10       	cpse	r1, r4
     460:	10 1f       	adc	r17, r16
     462:	10 1f       	adc	r17, r16
     464:	14 14       	cp	r1, r4
     466:	14 f4       	brge	.+4      	; 0x46c <__stack+0xd>
     468:	14 10       	cpse	r1, r4
     46a:	10 f0       	brcs	.+4      	; 0x470 <__stack+0x11>
     46c:	10 f0       	brcs	.+4      	; 0x472 <__stack+0x13>
     46e:	00 00       	nop
     470:	1f 10       	cpse	r1, r15
     472:	1f 00       	.word	0x001f	; ????
     474:	00 00       	nop
     476:	1f 14       	cp	r1, r15
     478:	00 00       	nop
     47a:	00 fc       	sbrc	r0, 0
     47c:	14 00       	.word	0x0014	; ????
     47e:	00 f0       	brcs	.+0      	; 0x480 <__stack+0x21>
     480:	10 f0       	brcs	.+4      	; 0x486 <__stack+0x27>
     482:	10 10       	cpse	r1, r0
     484:	ff 10       	cpse	r15, r15
     486:	ff 14       	cp	r15, r15
     488:	14 14       	cp	r1, r4
     48a:	ff 14       	cp	r15, r15
     48c:	10 10       	cpse	r1, r0
     48e:	10 1f       	adc	r17, r16
     490:	00 00       	nop
     492:	00 00       	nop
     494:	f0 10       	cpse	r15, r0
     496:	ff ff       	.word	0xffff	; ????
     498:	ff ff       	.word	0xffff	; ????
     49a:	ff f0       	brie	.+62     	; 0x4da <__stack+0x7b>
     49c:	f0 f0       	brcs	.+60     	; 0x4da <__stack+0x7b>
     49e:	f0 f0       	brcs	.+60     	; 0x4dc <__stack+0x7d>
     4a0:	ff ff       	.word	0xffff	; ????
     4a2:	ff 00       	.word	0x00ff	; ????
     4a4:	00 00       	nop
     4a6:	00 00       	nop
     4a8:	ff ff       	.word	0xffff	; ????
     4aa:	0f 0f       	add	r16, r31
     4ac:	0f 0f       	add	r16, r31
     4ae:	0f 38       	cpi	r16, 0x8F	; 143
     4b0:	44 44       	sbci	r20, 0x44	; 68
     4b2:	38 44       	sbci	r19, 0x48	; 72
     4b4:	fc 4a       	sbci	r31, 0xAC	; 172
     4b6:	4a 4a       	sbci	r20, 0xAA	; 170
     4b8:	34 7e       	andi	r19, 0xE4	; 228
     4ba:	02 02       	muls	r16, r18
     4bc:	06 06       	cpc	r0, r22
     4be:	02 7e       	andi	r16, 0xE2	; 226
     4c0:	02 7e       	andi	r16, 0xE2	; 226
     4c2:	02 63       	ori	r16, 0x32	; 50
     4c4:	55 49       	sbci	r21, 0x95	; 149
     4c6:	41 63       	ori	r20, 0x31	; 49
     4c8:	38 44       	sbci	r19, 0x48	; 72
     4ca:	44 3c       	cpi	r20, 0xC4	; 196
     4cc:	04 40       	sbci	r16, 0x04	; 4
     4ce:	7e 20       	and	r7, r14
     4d0:	1e 20       	and	r1, r14
     4d2:	06 02       	muls	r16, r22
     4d4:	7e 02       	muls	r23, r30
     4d6:	02 99       	sbic	0x00, 2	; 0
     4d8:	a5 e7       	ldi	r26, 0x75	; 117
     4da:	a5 99       	sbic	0x14, 5	; 20
     4dc:	1c 2a       	or	r1, r28
     4de:	49 2a       	or	r4, r25
     4e0:	1c 4c       	sbci	r17, 0xCC	; 204
     4e2:	72 01       	movw	r14, r4
     4e4:	72 4c       	sbci	r23, 0xC2	; 194
     4e6:	30 4a       	sbci	r19, 0xA0	; 160
     4e8:	4d 4d       	sbci	r20, 0xDD	; 221
     4ea:	30 30       	cpi	r19, 0x00	; 0
     4ec:	48 78       	andi	r20, 0x88	; 136
     4ee:	48 30       	cpi	r20, 0x08	; 8
     4f0:	bc 62       	ori	r27, 0x2C	; 44
     4f2:	5a 46       	sbci	r21, 0x6A	; 106
     4f4:	3d 3e       	cpi	r19, 0xED	; 237
     4f6:	49 49       	sbci	r20, 0x99	; 153
     4f8:	49 00       	.word	0x0049	; ????
     4fa:	7e 01       	movw	r14, r28
     4fc:	01 01       	movw	r0, r2
     4fe:	7e 2a       	or	r7, r30
     500:	2a 2a       	or	r2, r26
     502:	2a 2a       	or	r2, r26
     504:	44 44       	sbci	r20, 0x44	; 68
     506:	5f 44       	sbci	r21, 0x4F	; 79
     508:	44 40       	sbci	r20, 0x04	; 4
     50a:	51 4a       	sbci	r21, 0xA1	; 161
     50c:	44 40       	sbci	r20, 0x04	; 4
     50e:	40 44       	sbci	r20, 0x40	; 64
     510:	4a 51       	subi	r20, 0x1A	; 26
     512:	40 00       	.word	0x0040	; ????
     514:	00 ff       	sbrs	r16, 0
     516:	01 03       	mulsu	r16, r17
     518:	e0 80       	ld	r14, Z
     51a:	ff 00       	.word	0x00ff	; ????
     51c:	00 08       	sbc	r0, r0
     51e:	08 6b       	ori	r16, 0xB8	; 184
     520:	6b 08       	sbc	r6, r11
     522:	36 12       	cpse	r3, r22
     524:	36 24       	eor	r3, r6
     526:	36 06       	cpc	r3, r22
     528:	0f 09       	sbc	r16, r15
     52a:	0f 06       	cpc	r0, r31
     52c:	00 00       	nop
     52e:	18 18       	sub	r1, r8
     530:	00 00       	nop
     532:	00 10       	cpse	r0, r0
     534:	10 00       	.word	0x0010	; ????
     536:	30 40       	sbci	r19, 0x00	; 0
     538:	ff 01       	movw	r30, r30
     53a:	01 00       	.word	0x0001	; ????
     53c:	1f 01       	movw	r2, r30
     53e:	01 1e       	adc	r0, r17
     540:	00 19       	sub	r16, r0
     542:	1d 17       	cp	r17, r29
     544:	12 00       	.word	0x0012	; ????
     546:	3c 3c       	cpi	r19, 0xCC	; 204
     548:	3c 3c       	cpi	r19, 0xCC	; 204
     54a:	00 00       	nop
     54c:	00 00       	nop
	...

00000550 <__ctors_end>:
     550:	11 24       	eor	r1, r1
     552:	1f be       	out	0x3f, r1	; 63
     554:	cf e5       	ldi	r28, 0x5F	; 95
     556:	d4 e0       	ldi	r29, 0x04	; 4
     558:	de bf       	out	0x3e, r29	; 62
     55a:	cd bf       	out	0x3d, r28	; 61

0000055c <__do_copy_data>:
     55c:	10 e0       	ldi	r17, 0x00	; 0
     55e:	a0 e6       	ldi	r26, 0x60	; 96
     560:	b0 e0       	ldi	r27, 0x00	; 0
     562:	e6 e7       	ldi	r30, 0x76	; 118
     564:	fa e1       	ldi	r31, 0x1A	; 26
     566:	02 c0       	rjmp	.+4      	; 0x56c <__do_copy_data+0x10>
     568:	05 90       	lpm	r0, Z+
     56a:	0d 92       	st	X+, r0
     56c:	a2 3b       	cpi	r26, 0xB2	; 178
     56e:	b1 07       	cpc	r27, r17
     570:	d9 f7       	brne	.-10     	; 0x568 <__do_copy_data+0xc>

00000572 <__do_clear_bss>:
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	a2 eb       	ldi	r26, 0xB2	; 178
     576:	b0 e0       	ldi	r27, 0x00	; 0
     578:	01 c0       	rjmp	.+2      	; 0x57c <.do_clear_bss_start>

0000057a <.do_clear_bss_loop>:
     57a:	1d 92       	st	X+, r1

0000057c <.do_clear_bss_start>:
     57c:	a1 3d       	cpi	r26, 0xD1	; 209
     57e:	b2 07       	cpc	r27, r18
     580:	e1 f7       	brne	.-8      	; 0x57a <.do_clear_bss_loop>
     582:	0e 94 f6 08 	call	0x11ec	; 0x11ec <main>
     586:	0c 94 39 0d 	jmp	0x1a72	; 0x1a72 <_exit>

0000058a <__bad_interrupt>:
     58a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000058e <ili9341_hard_init>:



void ili9341_hard_init(void)//init hardware
{
	rstddr=0xFF;//output for reset
     58e:	8f ef       	ldi	r24, 0xFF	; 255
     590:	81 bb       	out	0x11, r24	; 17
	rstport |=(1<<rst);//pull high for normal operation
     592:	97 9a       	sbi	0x12, 7	; 18
	controlddr|=(1<<dc);//D/C as output
     594:	b8 9a       	sbi	0x17, 0	; 23
     596:	08 95       	ret

00000598 <ili9341_spi_init>:
}


void ili9341_spi_init(void)//set spi speed and settings
{
	DDRB |=(1<<1)|(1<<2)|(1<<3)|(1<<5);//CS,SS,MOSI,SCK as output(although SS will be unused throughout the program)
     598:	87 b3       	in	r24, 0x17	; 23
     59a:	8e 62       	ori	r24, 0x2E	; 46
     59c:	87 bb       	out	0x17, r24	; 23
	SPCR=(1<<SPE)|(1<<MSTR);//mode 0,fosc/4
     59e:	80 e5       	ldi	r24, 0x50	; 80
     5a0:	8d b9       	out	0x0d, r24	; 13
	SPSR |=(1<<SPI2X);//doubling spi speed.i.e final spi speed-fosc/2
     5a2:	70 9a       	sbi	0x0e, 0	; 14
	PORTB |=(1<<1);//cs off during startup
     5a4:	c1 9a       	sbi	0x18, 1	; 24
     5a6:	08 95       	ret

000005a8 <ili9341_spi_send>:
}


void ili9341_spi_send(unsigned char spi_data)//send spi data to display
{
	SPDR=spi_data;//move data into spdr
     5a8:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
     5aa:	77 9b       	sbis	0x0e, 7	; 14
     5ac:	fe cf       	rjmp	.-4      	; 0x5aa <ili9341_spi_send+0x2>
}
     5ae:	08 95       	ret

000005b0 <ili9341_writecommand8>:


void ili9341_writecommand8(uint8_t com)//command write
{
	controlport &=~((1<<dc)|(1<<cs));//dc and cs both low to send command
     5b0:	98 b3       	in	r25, 0x18	; 24
     5b2:	9c 7f       	andi	r25, 0xFC	; 252
     5b4:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5b6:	9a e1       	ldi	r25, 0x1A	; 26
     5b8:	9a 95       	dec	r25
     5ba:	f1 f7       	brne	.-4      	; 0x5b8 <ili9341_writecommand8+0x8>
     5bc:	00 c0       	rjmp	.+0      	; 0x5be <ili9341_writecommand8+0xe>
	_delay_us(5);//little delay
	ili9341_spi_send(com);
     5be:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <ili9341_spi_send>
	controlport |=(1<<cs);//pull high cs
     5c2:	c1 9a       	sbi	0x18, 1	; 24
     5c4:	08 95       	ret

000005c6 <ili9341_writedata8>:
}


void ili9341_writedata8(uint8_t data)//data write
{
	controlport |=(1<<dc);//st dc high for data
     5c6:	c0 9a       	sbi	0x18, 0	; 24
     5c8:	95 e0       	ldi	r25, 0x05	; 5
     5ca:	9a 95       	dec	r25
     5cc:	f1 f7       	brne	.-4      	; 0x5ca <ili9341_writedata8+0x4>
     5ce:	00 00       	nop
	_delay_us(1);//delay
	controlport &=~(1<<cs);//set cs low for operation
     5d0:	c1 98       	cbi	0x18, 1	; 24
	ili9341_spi_send(data);
     5d2:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <ili9341_spi_send>
	controlport |=(1<<cs);
     5d6:	c1 9a       	sbi	0x18, 1	; 24
     5d8:	08 95       	ret

000005da <ili9341_setaddress>:
}


void ili9341_setaddress(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)//set coordinate for print or other function
{
     5da:	df 92       	push	r13
     5dc:	ef 92       	push	r14
     5de:	ff 92       	push	r15
     5e0:	0f 93       	push	r16
     5e2:	1f 93       	push	r17
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	e8 2e       	mov	r14, r24
     5ea:	d9 2e       	mov	r13, r25
     5ec:	d6 2f       	mov	r29, r22
     5ee:	17 2f       	mov	r17, r23
     5f0:	04 2f       	mov	r16, r20
     5f2:	f5 2e       	mov	r15, r21
     5f4:	c2 2f       	mov	r28, r18
	ili9341_writecommand8(0x2A);
     5f6:	8a e2       	ldi	r24, 0x2A	; 42
     5f8:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ili9341_writecommand8>
	ili9341_writedata8(x1>>8);
     5fc:	8d 2d       	mov	r24, r13
     5fe:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(x1);
     602:	8e 2d       	mov	r24, r14
     604:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(x2>>8);
     608:	8f 2d       	mov	r24, r15
     60a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(x2);
     60e:	80 2f       	mov	r24, r16
     610:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>

	ili9341_writecommand8(0x2B);
     614:	8b e2       	ldi	r24, 0x2B	; 43
     616:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ili9341_writecommand8>
	ili9341_writedata8(y1>>8);
     61a:	81 2f       	mov	r24, r17
     61c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(y1);
     620:	8d 2f       	mov	r24, r29
     622:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(y2);
     626:	8c 2f       	mov	r24, r28
     628:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(y2);
     62c:	8c 2f       	mov	r24, r28
     62e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>

	ili9341_writecommand8(0x2C);//meory write
     632:	8c e2       	ldi	r24, 0x2C	; 44
     634:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ili9341_writecommand8>
}
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	1f 91       	pop	r17
     63e:	0f 91       	pop	r16
     640:	ff 90       	pop	r15
     642:	ef 90       	pop	r14
     644:	df 90       	pop	r13
     646:	08 95       	ret

00000648 <ili9341_hard_reset>:


void ili9341_hard_reset(void)//hard reset display
{
	rstport |=(1<<rst);//pull high if low previously
     648:	97 9a       	sbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     64a:	2f ef       	ldi	r18, 0xFF	; 255
     64c:	83 ec       	ldi	r24, 0xC3	; 195
     64e:	99 e0       	ldi	r25, 0x09	; 9
     650:	21 50       	subi	r18, 0x01	; 1
     652:	80 40       	sbci	r24, 0x00	; 0
     654:	90 40       	sbci	r25, 0x00	; 0
     656:	e1 f7       	brne	.-8      	; 0x650 <ili9341_hard_reset+0x8>
     658:	00 c0       	rjmp	.+0      	; 0x65a <ili9341_hard_reset+0x12>
     65a:	00 00       	nop
	_delay_ms(200);
	rstport &=~(1<<rst);//low for reset
     65c:	97 98       	cbi	0x12, 7	; 18
     65e:	2f ef       	ldi	r18, 0xFF	; 255
     660:	83 ec       	ldi	r24, 0xC3	; 195
     662:	99 e0       	ldi	r25, 0x09	; 9
     664:	21 50       	subi	r18, 0x01	; 1
     666:	80 40       	sbci	r24, 0x00	; 0
     668:	90 40       	sbci	r25, 0x00	; 0
     66a:	e1 f7       	brne	.-8      	; 0x664 <ili9341_hard_reset+0x1c>
     66c:	00 c0       	rjmp	.+0      	; 0x66e <ili9341_hard_reset+0x26>
     66e:	00 00       	nop
	_delay_ms(200);
	rstport |=(1<<rst);//again pull high for normal operation
     670:	97 9a       	sbi	0x12, 7	; 18
     672:	2f ef       	ldi	r18, 0xFF	; 255
     674:	83 ec       	ldi	r24, 0xC3	; 195
     676:	99 e0       	ldi	r25, 0x09	; 9
     678:	21 50       	subi	r18, 0x01	; 1
     67a:	80 40       	sbci	r24, 0x00	; 0
     67c:	90 40       	sbci	r25, 0x00	; 0
     67e:	e1 f7       	brne	.-8      	; 0x678 <ili9341_hard_reset+0x30>
     680:	00 c0       	rjmp	.+0      	; 0x682 <ili9341_hard_reset+0x3a>
     682:	00 00       	nop
     684:	08 95       	ret

00000686 <ili9341_init>:
}


void ili9341_init(void)//set up display using predefined command sequence
{
	ili9341_hard_init();
     686:	0e 94 c7 02 	call	0x58e	; 0x58e <ili9341_hard_init>
	ili9341_spi_init();
     68a:	0e 94 cc 02 	call	0x598	; 0x598 <ili9341_spi_init>
	ili9341_hard_reset();
     68e:	0e 94 24 03 	call	0x648	; 0x648 <ili9341_hard_reset>
	ili9341_writecommand8(0x01);//soft reset
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ili9341_writecommand8>
     698:	2f ef       	ldi	r18, 0xFF	; 255
     69a:	83 ed       	ldi	r24, 0xD3	; 211
     69c:	90 e3       	ldi	r25, 0x30	; 48
     69e:	21 50       	subi	r18, 0x01	; 1
     6a0:	80 40       	sbci	r24, 0x00	; 0
     6a2:	90 40       	sbci	r25, 0x00	; 0
     6a4:	e1 f7       	brne	.-8      	; 0x69e <ili9341_init+0x18>
     6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <ili9341_init+0x22>
     6a8:	00 00       	nop
	_delay_ms(1000);
	//power control A
	ili9341_writecommand8(0xCB);
     6aa:	8b ec       	ldi	r24, 0xCB	; 203
     6ac:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ili9341_writecommand8>
	ili9341_writedata8(0x39);
     6b0:	89 e3       	ldi	r24, 0x39	; 57
     6b2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x2C);
     6b6:	8c e2       	ldi	r24, 0x2C	; 44
     6b8:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x00);
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x34);
     6c2:	84 e3       	ldi	r24, 0x34	; 52
     6c4:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x02);
     6c8:	82 e0       	ldi	r24, 0x02	; 2
     6ca:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>

	//power control B
	ili9341_writecommand8(0xCF);
     6ce:	8f ec       	ldi	r24, 0xCF	; 207
     6d0:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ili9341_writecommand8>
	ili9341_writedata8(0x00);
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0xC1);
     6da:	81 ec       	ldi	r24, 0xC1	; 193
     6dc:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x30);
     6e0:	80 e3       	ldi	r24, 0x30	; 48
     6e2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>

	//driver timing control A
	ili9341_writecommand8(0xE8);
     6e6:	88 ee       	ldi	r24, 0xE8	; 232
     6e8:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ili9341_writecommand8>
	ili9341_writedata8(0x85);
     6ec:	85 e8       	ldi	r24, 0x85	; 133
     6ee:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x00);
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x78);
     6f8:	88 e7       	ldi	r24, 0x78	; 120
     6fa:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>

	//driver timing control B
	ili9341_writecommand8(0xEA);
     6fe:	8a ee       	ldi	r24, 0xEA	; 234
     700:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ili9341_writecommand8>
	ili9341_writedata8(0x00);
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x00);
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>

	//power on sequence control
	ili9341_writecommand8(0xED);
     710:	8d ee       	ldi	r24, 0xED	; 237
     712:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ili9341_writecommand8>
	ili9341_writedata8(0x64);
     716:	84 e6       	ldi	r24, 0x64	; 100
     718:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x03);
     71c:	83 e0       	ldi	r24, 0x03	; 3
     71e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x12);
     722:	82 e1       	ldi	r24, 0x12	; 18
     724:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x81);
     728:	81 e8       	ldi	r24, 0x81	; 129
     72a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>

	//pump ratio control
	ili9341_writecommand8(0xF7);
     72e:	87 ef       	ldi	r24, 0xF7	; 247
     730:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ili9341_writecommand8>
	ili9341_writedata8(0x20);
     734:	80 e2       	ldi	r24, 0x20	; 32
     736:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>

	//power control,VRH[5:0]
	ili9341_writecommand8(0xC0);
     73a:	80 ec       	ldi	r24, 0xC0	; 192
     73c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ili9341_writecommand8>
	ili9341_writedata8(0x23);
     740:	83 e2       	ldi	r24, 0x23	; 35
     742:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>

	//Power control,SAP[2:0];BT[3:0]
	ili9341_writecommand8(0xC1);
     746:	81 ec       	ldi	r24, 0xC1	; 193
     748:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ili9341_writecommand8>
	ili9341_writedata8(0x10);
     74c:	80 e1       	ldi	r24, 0x10	; 16
     74e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>

	//vcm control
	ili9341_writecommand8(0xC5);
     752:	85 ec       	ldi	r24, 0xC5	; 197
     754:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ili9341_writecommand8>
	ili9341_writedata8(0x3E);
     758:	8e e3       	ldi	r24, 0x3E	; 62
     75a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x28);
     75e:	88 e2       	ldi	r24, 0x28	; 40
     760:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>

	//vcm control 2
	ili9341_writecommand8(0xC7);
     764:	87 ec       	ldi	r24, 0xC7	; 199
     766:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ili9341_writecommand8>
	ili9341_writedata8(0x86);
     76a:	86 e8       	ldi	r24, 0x86	; 134
     76c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>

	//memory access control
	ili9341_writecommand8(0x36);
     770:	86 e3       	ldi	r24, 0x36	; 54
     772:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ili9341_writecommand8>
	ili9341_writedata8(0x48);
     776:	88 e4       	ldi	r24, 0x48	; 72
     778:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>

	//pixel format
	ili9341_writecommand8(0x3A);
     77c:	8a e3       	ldi	r24, 0x3A	; 58
     77e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ili9341_writecommand8>
	ili9341_writedata8(0x55);
     782:	85 e5       	ldi	r24, 0x55	; 85
     784:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>

	//frameration control,normal mode full colours
	ili9341_writecommand8(0xB1);
     788:	81 eb       	ldi	r24, 0xB1	; 177
     78a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ili9341_writecommand8>
	ili9341_writedata8(0x00);
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x18);
     794:	88 e1       	ldi	r24, 0x18	; 24
     796:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>

	//display function control
	ili9341_writecommand8(0xB6);
     79a:	86 eb       	ldi	r24, 0xB6	; 182
     79c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ili9341_writecommand8>
	ili9341_writedata8(0x08);
     7a0:	88 e0       	ldi	r24, 0x08	; 8
     7a2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x82);
     7a6:	82 e8       	ldi	r24, 0x82	; 130
     7a8:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x27);
     7ac:	87 e2       	ldi	r24, 0x27	; 39
     7ae:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>

	//3gamma function disable
	ili9341_writecommand8(0xF2);
     7b2:	82 ef       	ldi	r24, 0xF2	; 242
     7b4:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ili9341_writecommand8>
	ili9341_writedata8(0x00);
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>

	//gamma curve selected
	ili9341_writecommand8(0x26);
     7be:	86 e2       	ldi	r24, 0x26	; 38
     7c0:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ili9341_writecommand8>
	ili9341_writedata8(0x01);
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>

	//set positive gamma correction
	ili9341_writecommand8(0xE0);
     7ca:	80 ee       	ldi	r24, 0xE0	; 224
     7cc:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ili9341_writecommand8>
	ili9341_writedata8(0x0F);
     7d0:	8f e0       	ldi	r24, 0x0F	; 15
     7d2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x31);
     7d6:	81 e3       	ldi	r24, 0x31	; 49
     7d8:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x2B);
     7dc:	8b e2       	ldi	r24, 0x2B	; 43
     7de:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x0C);
     7e2:	8c e0       	ldi	r24, 0x0C	; 12
     7e4:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x0E);
     7e8:	8e e0       	ldi	r24, 0x0E	; 14
     7ea:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x08);
     7ee:	88 e0       	ldi	r24, 0x08	; 8
     7f0:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x4E);
     7f4:	8e e4       	ldi	r24, 0x4E	; 78
     7f6:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0xF1);
     7fa:	81 ef       	ldi	r24, 0xF1	; 241
     7fc:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x37);
     800:	87 e3       	ldi	r24, 0x37	; 55
     802:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x07);
     806:	87 e0       	ldi	r24, 0x07	; 7
     808:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x10);
     80c:	80 e1       	ldi	r24, 0x10	; 16
     80e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x03);
     812:	83 e0       	ldi	r24, 0x03	; 3
     814:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x0E);
     818:	8e e0       	ldi	r24, 0x0E	; 14
     81a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x09);
     81e:	89 e0       	ldi	r24, 0x09	; 9
     820:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x00);
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>

	//set negative gamma correction
	ili9341_writecommand8(0xE1);
     82a:	81 ee       	ldi	r24, 0xE1	; 225
     82c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ili9341_writecommand8>
	ili9341_writedata8(0x00);
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x0E);
     836:	8e e0       	ldi	r24, 0x0E	; 14
     838:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x14);
     83c:	84 e1       	ldi	r24, 0x14	; 20
     83e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x03);
     842:	83 e0       	ldi	r24, 0x03	; 3
     844:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x11);
     848:	81 e1       	ldi	r24, 0x11	; 17
     84a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x07);
     84e:	87 e0       	ldi	r24, 0x07	; 7
     850:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x31);
     854:	81 e3       	ldi	r24, 0x31	; 49
     856:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0xC1);
     85a:	81 ec       	ldi	r24, 0xC1	; 193
     85c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x48);
     860:	88 e4       	ldi	r24, 0x48	; 72
     862:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x08);
     866:	88 e0       	ldi	r24, 0x08	; 8
     868:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x0F);
     86c:	8f e0       	ldi	r24, 0x0F	; 15
     86e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x0C);
     872:	8c e0       	ldi	r24, 0x0C	; 12
     874:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x31);
     878:	81 e3       	ldi	r24, 0x31	; 49
     87a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x36);
     87e:	86 e3       	ldi	r24, 0x36	; 54
     880:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(0x0F);
     884:	8f e0       	ldi	r24, 0x0F	; 15
     886:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>

	//exit sleep
	ili9341_writecommand8(0x11);
     88a:	81 e1       	ldi	r24, 0x11	; 17
     88c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ili9341_writecommand8>
     890:	2f ef       	ldi	r18, 0xFF	; 255
     892:	8b ed       	ldi	r24, 0xDB	; 219
     894:	95 e0       	ldi	r25, 0x05	; 5
     896:	21 50       	subi	r18, 0x01	; 1
     898:	80 40       	sbci	r24, 0x00	; 0
     89a:	90 40       	sbci	r25, 0x00	; 0
     89c:	e1 f7       	brne	.-8      	; 0x896 <ili9341_init+0x210>
     89e:	00 c0       	rjmp	.+0      	; 0x8a0 <ili9341_init+0x21a>
     8a0:	00 00       	nop
	_delay_ms(120);
	//display on
	ili9341_writecommand8(0x29);
     8a2:	89 e2       	ldi	r24, 0x29	; 41
     8a4:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ili9341_writecommand8>
     8a8:	08 95       	ret

000008aa <ili9341_pushcolour>:

}

//set colour for drawing
void ili9341_pushcolour(uint16_t colour)
{
     8aa:	cf 93       	push	r28
     8ac:	c8 2f       	mov	r28, r24
	ili9341_writedata8(colour>>8);
     8ae:	89 2f       	mov	r24, r25
     8b0:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
	ili9341_writedata8(colour);
     8b4:	8c 2f       	mov	r24, r28
     8b6:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
}
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <ili9341_clear>:


//clear lcd and fill with colour
void ili9341_clear(uint16_t colour)
{
     8be:	cf 92       	push	r12
     8c0:	df 92       	push	r13
     8c2:	ef 92       	push	r14
     8c4:	ff 92       	push	r15
     8c6:	0f 93       	push	r16
     8c8:	1f 93       	push	r17
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	8c 01       	movw	r16, r24
	uint16_t i,j;
	ili9341_setaddress(0,0,LCD_W-1,LCD_H-1);
     8d0:	20 91 6e 00 	lds	r18, 0x006E
     8d4:	30 91 6f 00 	lds	r19, 0x006F
     8d8:	40 91 70 00 	lds	r20, 0x0070
     8dc:	50 91 71 00 	lds	r21, 0x0071
     8e0:	21 50       	subi	r18, 0x01	; 1
     8e2:	31 09       	sbc	r19, r1
     8e4:	41 50       	subi	r20, 0x01	; 1
     8e6:	51 09       	sbc	r21, r1
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	0e 94 ed 02 	call	0x5da	; 0x5da <ili9341_setaddress>

	for(i=0;i<LCD_W;i++)
     8f4:	80 91 70 00 	lds	r24, 0x0070
     8f8:	90 91 71 00 	lds	r25, 0x0071
     8fc:	89 2b       	or	r24, r25
     8fe:	19 f1       	breq	.+70     	; 0x946 <ili9341_clear+0x88>
     900:	e1 2c       	mov	r14, r1
     902:	f1 2c       	mov	r15, r1
	{
		for(j=0;j<LCD_H;j++)
     904:	c1 2c       	mov	r12, r1
     906:	d1 2c       	mov	r13, r1
     908:	15 c0       	rjmp	.+42     	; 0x934 <ili9341_clear+0x76>
		{
			ili9341_pushcolour(colour);
     90a:	c8 01       	movw	r24, r16
     90c:	0e 94 55 04 	call	0x8aa	; 0x8aa <ili9341_pushcolour>
	uint16_t i,j;
	ili9341_setaddress(0,0,LCD_W-1,LCD_H-1);

	for(i=0;i<LCD_W;i++)
	{
		for(j=0;j<LCD_H;j++)
     910:	21 96       	adiw	r28, 0x01	; 1
     912:	20 91 6e 00 	lds	r18, 0x006E
     916:	30 91 6f 00 	lds	r19, 0x006F
     91a:	c2 17       	cp	r28, r18
     91c:	d3 07       	cpc	r29, r19
     91e:	a8 f3       	brcs	.-22     	; 0x90a <ili9341_clear+0x4c>
void ili9341_clear(uint16_t colour)
{
	uint16_t i,j;
	ili9341_setaddress(0,0,LCD_W-1,LCD_H-1);

	for(i=0;i<LCD_W;i++)
     920:	8f ef       	ldi	r24, 0xFF	; 255
     922:	e8 1a       	sub	r14, r24
     924:	f8 0a       	sbc	r15, r24
     926:	80 91 70 00 	lds	r24, 0x0070
     92a:	90 91 71 00 	lds	r25, 0x0071
     92e:	e8 16       	cp	r14, r24
     930:	f9 06       	cpc	r15, r25
     932:	48 f4       	brcc	.+18     	; 0x946 <ili9341_clear+0x88>
	{
		for(j=0;j<LCD_H;j++)
     934:	80 91 6e 00 	lds	r24, 0x006E
     938:	90 91 6f 00 	lds	r25, 0x006F
     93c:	89 2b       	or	r24, r25
     93e:	81 f3       	breq	.-32     	; 0x920 <ili9341_clear+0x62>
     940:	cc 2d       	mov	r28, r12
     942:	dd 2d       	mov	r29, r13
     944:	e2 cf       	rjmp	.-60     	; 0x90a <ili9341_clear+0x4c>
		{
			ili9341_pushcolour(colour);
		}
	}

}
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	df 90       	pop	r13
     954:	cf 90       	pop	r12
     956:	08 95       	ret

00000958 <ili9341_drawpixel>:



//draw pixel
void ili9341_drawpixel(uint16_t x3,uint16_t y3,uint16_t colour1) //pixels will always be counted from right side.x is representing LCD width which will always be less tha 240.Y is representing LCD height which will always be less than 320
{
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	ea 01       	movw	r28, r20
	if((x3 < 0) ||(x3 >=LCD_W) || (y3 < 0) || (y3 >=LCD_H)) return;
     95e:	20 91 70 00 	lds	r18, 0x0070
     962:	30 91 71 00 	lds	r19, 0x0071
     966:	82 17       	cp	r24, r18
     968:	93 07       	cpc	r25, r19
     96a:	90 f4       	brcc	.+36     	; 0x990 <ili9341_drawpixel+0x38>
     96c:	20 91 6e 00 	lds	r18, 0x006E
     970:	30 91 6f 00 	lds	r19, 0x006F
     974:	62 17       	cp	r22, r18
     976:	73 07       	cpc	r23, r19
     978:	58 f4       	brcc	.+22     	; 0x990 <ili9341_drawpixel+0x38>

	ili9341_setaddress(x3,y3,x3+1,y3+1);
     97a:	9b 01       	movw	r18, r22
     97c:	2f 5f       	subi	r18, 0xFF	; 255
     97e:	3f 4f       	sbci	r19, 0xFF	; 255
     980:	ac 01       	movw	r20, r24
     982:	4f 5f       	subi	r20, 0xFF	; 255
     984:	5f 4f       	sbci	r21, 0xFF	; 255
     986:	0e 94 ed 02 	call	0x5da	; 0x5da <ili9341_setaddress>

	ili9341_pushcolour(colour1);
     98a:	ce 01       	movw	r24, r28
     98c:	0e 94 55 04 	call	0x8aa	; 0x8aa <ili9341_pushcolour>
}
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	08 95       	ret

00000996 <ili9341_fillrect>:
}


//draw colour filled rectangle
void ili9341_fillrect(uint16_t x,uint16_t y,uint16_t w,uint16_t h,uint16_t colour)
{
     996:	af 92       	push	r10
     998:	bf 92       	push	r11
     99a:	cf 92       	push	r12
     99c:	df 92       	push	r13
     99e:	ef 92       	push	r14
     9a0:	ff 92       	push	r15
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	6a 01       	movw	r12, r20
     9ac:	79 01       	movw	r14, r18
	if((x >=LCD_W) || (y >=LCD_H)) return;
     9ae:	20 91 70 00 	lds	r18, 0x0070
     9b2:	30 91 71 00 	lds	r19, 0x0071
     9b6:	82 17       	cp	r24, r18
     9b8:	93 07       	cpc	r25, r19
     9ba:	08 f0       	brcs	.+2      	; 0x9be <ili9341_fillrect+0x28>
     9bc:	4f c0       	rjmp	.+158    	; 0xa5c <ili9341_fillrect+0xc6>
     9be:	20 91 6e 00 	lds	r18, 0x006E
     9c2:	30 91 6f 00 	lds	r19, 0x006F
     9c6:	62 17       	cp	r22, r18
     9c8:	73 07       	cpc	r23, r19
     9ca:	08 f0       	brcs	.+2      	; 0x9ce <ili9341_fillrect+0x38>
     9cc:	47 c0       	rjmp	.+142    	; 0xa5c <ili9341_fillrect+0xc6>
	if((x+w-1)>=LCD_W)
     9ce:	20 91 70 00 	lds	r18, 0x0070
     9d2:	30 91 71 00 	lds	r19, 0x0071
     9d6:	41 50       	subi	r20, 0x01	; 1
     9d8:	51 09       	sbc	r21, r1
     9da:	48 0f       	add	r20, r24
     9dc:	59 1f       	adc	r21, r25
     9de:	42 17       	cp	r20, r18
     9e0:	53 07       	cpc	r21, r19
     9e2:	30 f0       	brcs	.+12     	; 0x9f0 <ili9341_fillrect+0x5a>
	w=LCD_W-x;
     9e4:	c0 90 70 00 	lds	r12, 0x0070
     9e8:	d0 90 71 00 	lds	r13, 0x0071
     9ec:	c8 1a       	sub	r12, r24
     9ee:	d9 0a       	sbc	r13, r25
	if((y+h-1)>=LCD_H)
     9f0:	20 91 6e 00 	lds	r18, 0x006E
     9f4:	30 91 6f 00 	lds	r19, 0x006F
     9f8:	a7 01       	movw	r20, r14
     9fa:	41 50       	subi	r20, 0x01	; 1
     9fc:	51 09       	sbc	r21, r1
     9fe:	46 0f       	add	r20, r22
     a00:	57 1f       	adc	r21, r23
     a02:	42 17       	cp	r20, r18
     a04:	53 07       	cpc	r21, r19
     a06:	30 f0       	brcs	.+12     	; 0xa14 <ili9341_fillrect+0x7e>
	h=LCD_H-y;
     a08:	e0 90 6e 00 	lds	r14, 0x006E
     a0c:	f0 90 6f 00 	lds	r15, 0x006F
     a10:	e6 1a       	sub	r14, r22
     a12:	f7 0a       	sbc	r15, r23

	ili9341_setaddress(x, y, x+w-1, y+h-1);
     a14:	9b 01       	movw	r18, r22
     a16:	21 50       	subi	r18, 0x01	; 1
     a18:	31 09       	sbc	r19, r1
     a1a:	2e 0d       	add	r18, r14
     a1c:	3f 1d       	adc	r19, r15
     a1e:	ac 01       	movw	r20, r24
     a20:	41 50       	subi	r20, 0x01	; 1
     a22:	51 09       	sbc	r21, r1
     a24:	4c 0d       	add	r20, r12
     a26:	5d 1d       	adc	r21, r13
     a28:	0e 94 ed 02 	call	0x5da	; 0x5da <ili9341_setaddress>

	for(y=h; y>0; y--)
     a2c:	e1 14       	cp	r14, r1
     a2e:	f1 04       	cpc	r15, r1
     a30:	a9 f0       	breq	.+42     	; 0xa5c <ili9341_fillrect+0xc6>
	{
		for(x=w; x>0; x--)
     a32:	ac 2c       	mov	r10, r12
     a34:	bd 2c       	mov	r11, r13
     a36:	0c c0       	rjmp	.+24     	; 0xa50 <ili9341_fillrect+0xba>
		{
			ili9341_pushcolour(colour);
     a38:	c8 01       	movw	r24, r16
     a3a:	0e 94 55 04 	call	0x8aa	; 0x8aa <ili9341_pushcolour>

	ili9341_setaddress(x, y, x+w-1, y+h-1);

	for(y=h; y>0; y--)
	{
		for(x=w; x>0; x--)
     a3e:	21 97       	sbiw	r28, 0x01	; 1
     a40:	20 97       	sbiw	r28, 0x00	; 0
     a42:	d1 f7       	brne	.-12     	; 0xa38 <ili9341_fillrect+0xa2>
	if((y+h-1)>=LCD_H)
	h=LCD_H-y;

	ili9341_setaddress(x, y, x+w-1, y+h-1);

	for(y=h; y>0; y--)
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	e8 1a       	sub	r14, r24
     a48:	f1 08       	sbc	r15, r1
     a4a:	e1 14       	cp	r14, r1
     a4c:	f1 04       	cpc	r15, r1
     a4e:	31 f0       	breq	.+12     	; 0xa5c <ili9341_fillrect+0xc6>
	{
		for(x=w; x>0; x--)
     a50:	c1 14       	cp	r12, r1
     a52:	d1 04       	cpc	r13, r1
     a54:	b9 f3       	breq	.-18     	; 0xa44 <ili9341_fillrect+0xae>
     a56:	ca 2d       	mov	r28, r10
     a58:	db 2d       	mov	r29, r11
     a5a:	ee cf       	rjmp	.-36     	; 0xa38 <ili9341_fillrect+0xa2>
		{
			ili9341_pushcolour(colour);
		}
	}
}
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	1f 91       	pop	r17
     a62:	0f 91       	pop	r16
     a64:	ff 90       	pop	r15
     a66:	ef 90       	pop	r14
     a68:	df 90       	pop	r13
     a6a:	cf 90       	pop	r12
     a6c:	bf 90       	pop	r11
     a6e:	af 90       	pop	r10
     a70:	08 95       	ret

00000a72 <ili9341_setRotation>:
//rotate screen at desired orientation
void ili9341_setRotation(uint8_t m)
{
     a72:	cf 93       	push	r28
     a74:	c8 2f       	mov	r28, r24
	uint8_t rotation;
	ili9341_writecommand8(0x36);
     a76:	86 e3       	ldi	r24, 0x36	; 54
     a78:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ili9341_writecommand8>
	rotation=m%4;
     a7c:	8c 2f       	mov	r24, r28
     a7e:	83 70       	andi	r24, 0x03	; 3
	switch (rotation)
     a80:	81 30       	cpi	r24, 0x01	; 1
     a82:	b1 f0       	breq	.+44     	; 0xab0 <ili9341_setRotation+0x3e>
     a84:	28 f0       	brcs	.+10     	; 0xa90 <ili9341_setRotation+0x1e>
     a86:	82 30       	cpi	r24, 0x02	; 2
     a88:	19 f1       	breq	.+70     	; 0xad0 <ili9341_setRotation+0x5e>
     a8a:	83 30       	cpi	r24, 0x03	; 3
     a8c:	89 f1       	breq	.+98     	; 0xaf0 <ili9341_setRotation+0x7e>
     a8e:	3f c0       	rjmp	.+126    	; 0xb0e <ili9341_setRotation+0x9c>
	{
		case 0:
		ili9341_writedata8(0x40|0x08);
     a90:	88 e4       	ldi	r24, 0x48	; 72
     a92:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
		LCD_W = 240;
     a96:	80 ef       	ldi	r24, 0xF0	; 240
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	90 93 71 00 	sts	0x0071, r25
     a9e:	80 93 70 00 	sts	0x0070, r24
		LCD_H = 320;
     aa2:	80 e4       	ldi	r24, 0x40	; 64
     aa4:	91 e0       	ldi	r25, 0x01	; 1
     aa6:	90 93 6f 00 	sts	0x006F, r25
     aaa:	80 93 6e 00 	sts	0x006E, r24
		break;
     aae:	2f c0       	rjmp	.+94     	; 0xb0e <ili9341_setRotation+0x9c>
		case 1:
		ili9341_writedata8(0x20|0x08);
     ab0:	88 e2       	ldi	r24, 0x28	; 40
     ab2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
		LCD_W  = 320;
     ab6:	80 e4       	ldi	r24, 0x40	; 64
     ab8:	91 e0       	ldi	r25, 0x01	; 1
     aba:	90 93 71 00 	sts	0x0071, r25
     abe:	80 93 70 00 	sts	0x0070, r24
		LCD_H = 240;
     ac2:	80 ef       	ldi	r24, 0xF0	; 240
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	90 93 6f 00 	sts	0x006F, r25
     aca:	80 93 6e 00 	sts	0x006E, r24
		break;
     ace:	1f c0       	rjmp	.+62     	; 0xb0e <ili9341_setRotation+0x9c>
		case 2:
		ili9341_writedata8(0x80|0x08);
     ad0:	88 e8       	ldi	r24, 0x88	; 136
     ad2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
		LCD_W  = 240;
     ad6:	80 ef       	ldi	r24, 0xF0	; 240
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	90 93 71 00 	sts	0x0071, r25
     ade:	80 93 70 00 	sts	0x0070, r24
		LCD_H = 320;
     ae2:	80 e4       	ldi	r24, 0x40	; 64
     ae4:	91 e0       	ldi	r25, 0x01	; 1
     ae6:	90 93 6f 00 	sts	0x006F, r25
     aea:	80 93 6e 00 	sts	0x006E, r24
		break;
     aee:	0f c0       	rjmp	.+30     	; 0xb0e <ili9341_setRotation+0x9c>
		case 3:
		ili9341_writedata8(0x40|0x80|0x20|0x08);
     af0:	88 ee       	ldi	r24, 0xE8	; 232
     af2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ili9341_writedata8>
		LCD_W  = 320;
     af6:	80 e4       	ldi	r24, 0x40	; 64
     af8:	91 e0       	ldi	r25, 0x01	; 1
     afa:	90 93 71 00 	sts	0x0071, r25
     afe:	80 93 70 00 	sts	0x0070, r24
		LCD_H = 240;
     b02:	80 ef       	ldi	r24, 0xF0	; 240
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	90 93 6f 00 	sts	0x006F, r25
     b0a:	80 93 6e 00 	sts	0x006E, r24
		break;
	}
     b0e:	cf 91       	pop	r28
     b10:	08 95       	ret

00000b12 <backuplocationvset>:



void backuplocationvset(void)//backing up vset data start location to print next vset data in exact location
{
	vsetx=cursor_x;
     b12:	80 91 c6 00 	lds	r24, 0x00C6
     b16:	90 91 c7 00 	lds	r25, 0x00C7
     b1a:	90 93 c1 00 	sts	0x00C1, r25
     b1e:	80 93 c0 00 	sts	0x00C0, r24
	vsety=cursor_y;
     b22:	80 91 b4 00 	lds	r24, 0x00B4
     b26:	90 91 b5 00 	lds	r25, 0x00B5
     b2a:	90 93 bf 00 	sts	0x00BF, r25
     b2e:	80 93 be 00 	sts	0x00BE, r24
     b32:	08 95       	ret

00000b34 <backuplocationvactual>:
}


void backuplocationvactual(void)//backing up vactual data start location to print next vactual data in exact location
{
	vactualx=cursor_x;
     b34:	80 91 c6 00 	lds	r24, 0x00C6
     b38:	90 91 c7 00 	lds	r25, 0x00C7
     b3c:	90 93 bb 00 	sts	0x00BB, r25
     b40:	80 93 ba 00 	sts	0x00BA, r24
	vactualy=cursor_y;
     b44:	80 91 b4 00 	lds	r24, 0x00B4
     b48:	90 91 b5 00 	lds	r25, 0x00B5
     b4c:	90 93 c3 00 	sts	0x00C3, r25
     b50:	80 93 c2 00 	sts	0x00C2, r24
     b54:	08 95       	ret

00000b56 <backuplocationiset>:
}

void backuplocationiset(void)//backing up iset data start location to print next iset data in exact location
{
	isetx=cursor_x;
     b56:	80 91 c6 00 	lds	r24, 0x00C6
     b5a:	90 91 c7 00 	lds	r25, 0x00C7
     b5e:	90 93 bd 00 	sts	0x00BD, r25
     b62:	80 93 bc 00 	sts	0x00BC, r24
	isety=cursor_y;
     b66:	80 91 b4 00 	lds	r24, 0x00B4
     b6a:	90 91 b5 00 	lds	r25, 0x00B5
     b6e:	90 93 ca 00 	sts	0x00CA, r25
     b72:	80 93 c9 00 	sts	0x00C9, r24
     b76:	08 95       	ret

00000b78 <backuplocationiactual>:
}


void backuplocationiactual(void)//backing up iactual data start location to print next iactual data in exact location
{
	iactualx=cursor_x;
     b78:	80 91 c6 00 	lds	r24, 0x00C6
     b7c:	90 91 c7 00 	lds	r25, 0x00C7
     b80:	90 93 b7 00 	sts	0x00B7, r25
     b84:	80 93 b6 00 	sts	0x00B6, r24
	iactualy=cursor_y;
     b88:	80 91 b4 00 	lds	r24, 0x00B4
     b8c:	90 91 b5 00 	lds	r25, 0x00B5
     b90:	90 93 b9 00 	sts	0x00B9, r25
     b94:	80 93 b8 00 	sts	0x00B8, r24
     b98:	08 95       	ret

00000b9a <ili9341_drawchar>:
};

//extern uint16_t LCD_W,LCD_H;

void ili9341_drawchar(int16_t x, int16_t y, unsigned char c,uint16_t color, uint16_t bg, uint8_t size) //draw a char like a,b or 1,2
{
     b9a:	2f 92       	push	r2
     b9c:	3f 92       	push	r3
     b9e:	4f 92       	push	r4
     ba0:	5f 92       	push	r5
     ba2:	6f 92       	push	r6
     ba4:	7f 92       	push	r7
     ba6:	8f 92       	push	r8
     ba8:	9f 92       	push	r9
     baa:	af 92       	push	r10
     bac:	bf 92       	push	r11
     bae:	cf 92       	push	r12
     bb0:	df 92       	push	r13
     bb2:	ef 92       	push	r14
     bb4:	ff 92       	push	r15
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
     bc2:	2a 97       	sbiw	r28, 0x0a	; 10
     bc4:	0f b6       	in	r0, 0x3f	; 63
     bc6:	f8 94       	cli
     bc8:	de bf       	out	0x3e, r29	; 62
     bca:	0f be       	out	0x3f, r0	; 63
     bcc:	cd bf       	out	0x3d, r28	; 61
     bce:	39 01       	movw	r6, r18
     bd0:	1a 83       	std	Y+2, r17	; 0x02
     bd2:	09 83       	std	Y+1, r16	; 0x01

	if((x >=LCD_W)            || // Clip right
     bd4:	fc 01       	movw	r30, r24
     bd6:	20 91 70 00 	lds	r18, 0x0070
     bda:	30 91 71 00 	lds	r19, 0x0071
     bde:	82 17       	cp	r24, r18
     be0:	93 07       	cpc	r25, r19
     be2:	08 f0       	brcs	.+2      	; 0xbe6 <ili9341_drawchar+0x4c>
     be4:	a6 c0       	rjmp	.+332    	; 0xd32 <ili9341_drawchar+0x198>
	(y >=LCD_H)           || // Clip bottom
     be6:	16 2f       	mov	r17, r22
     be8:	57 2f       	mov	r21, r23
     bea:	20 91 6e 00 	lds	r18, 0x006E
     bee:	30 91 6f 00 	lds	r19, 0x006F
//extern uint16_t LCD_W,LCD_H;

void ili9341_drawchar(int16_t x, int16_t y, unsigned char c,uint16_t color, uint16_t bg, uint8_t size) //draw a char like a,b or 1,2
{

	if((x >=LCD_W)            || // Clip right
     bf2:	62 17       	cp	r22, r18
     bf4:	73 07       	cpc	r23, r19
     bf6:	08 f0       	brcs	.+2      	; 0xbfa <ili9341_drawchar+0x60>
     bf8:	9c c0       	rjmp	.+312    	; 0xd32 <ili9341_drawchar+0x198>
	(y >=LCD_H)           || // Clip bottom
	((x + 6 * size - 1) < 0) || // Clip left
     bfa:	2e 2d       	mov	r18, r14
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	d9 01       	movw	r26, r18
     c00:	aa 0f       	add	r26, r26
     c02:	bb 1f       	adc	r27, r27
     c04:	a2 0f       	add	r26, r18
     c06:	b3 1f       	adc	r27, r19
     c08:	aa 0f       	add	r26, r26
     c0a:	bb 1f       	adc	r27, r27
     c0c:	a8 0f       	add	r26, r24
     c0e:	b9 1f       	adc	r27, r25
     c10:	11 97       	sbiw	r26, 0x01	; 1

void ili9341_drawchar(int16_t x, int16_t y, unsigned char c,uint16_t color, uint16_t bg, uint8_t size) //draw a char like a,b or 1,2
{

	if((x >=LCD_W)            || // Clip right
	(y >=LCD_H)           || // Clip bottom
     c12:	bb 23       	and	r27, r27
     c14:	0c f4       	brge	.+2      	; 0xc18 <ili9341_drawchar+0x7e>
     c16:	8d c0       	rjmp	.+282    	; 0xd32 <ili9341_drawchar+0x198>
	((x + 6 * size - 1) < 0) || // Clip left
	((y + 8 * size - 1) < 0))   // Clip top
     c18:	22 0f       	add	r18, r18
     c1a:	33 1f       	adc	r19, r19
     c1c:	22 0f       	add	r18, r18
     c1e:	33 1f       	adc	r19, r19
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	62 0f       	add	r22, r18
     c26:	73 1f       	adc	r23, r19
     c28:	61 50       	subi	r22, 0x01	; 1
     c2a:	71 09       	sbc	r23, r1
void ili9341_drawchar(int16_t x, int16_t y, unsigned char c,uint16_t color, uint16_t bg, uint8_t size) //draw a char like a,b or 1,2
{

	if((x >=LCD_W)            || // Clip right
	(y >=LCD_H)           || // Clip bottom
	((x + 6 * size - 1) < 0) || // Clip left
     c2c:	77 23       	and	r23, r23
     c2e:	0c f4       	brge	.+2      	; 0xc32 <ili9341_drawchar+0x98>
     c30:	80 c0       	rjmp	.+256    	; 0xd32 <ili9341_drawchar+0x198>
	for (int8_t i=0; i<6; i++ ) {
		uint8_t line;
		if (i == 5)
		line = 0x0;
		else
		line = pgm_read_byte(font+(c*5)+i);
     c32:	24 2f       	mov	r18, r20
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	b9 01       	movw	r22, r18
     c38:	66 0f       	add	r22, r22
     c3a:	77 1f       	adc	r23, r23
     c3c:	66 0f       	add	r22, r22
     c3e:	77 1f       	adc	r23, r23
     c40:	26 0f       	add	r18, r22
     c42:	37 1f       	adc	r19, r23
     c44:	8e 2c       	mov	r8, r14
     c46:	91 2c       	mov	r9, r1
     c48:	9c 83       	std	Y+4, r25	; 0x04
     c4a:	8b 83       	std	Y+3, r24	; 0x03
     c4c:	2c 01       	movw	r4, r24
     c4e:	21 2c       	mov	r2, r1
     c50:	2c 5a       	subi	r18, 0xAC	; 172
     c52:	3f 4f       	sbci	r19, 0xFF	; 255
     c54:	c9 01       	movw	r24, r18
     c56:	8e 1b       	sub	r24, r30
     c58:	9f 0b       	sbc	r25, r31
     c5a:	98 87       	std	Y+8, r25	; 0x08
     c5c:	8f 83       	std	Y+7, r24	; 0x07
     c5e:	5d 83       	std	Y+5, r21	; 0x05
				} else if (bg != color) {
				if (size == 1) // default size
				ili9341_drawpixel(x+i, y+j, bg);
				else
				{  // big size
					ili9341_fillrect(x+i*size, y+j*size, size, size, bg);
     c60:	54 01       	movw	r10, r8
     c62:	e9 86       	std	Y+9, r14	; 0x09
     c64:	e1 2e       	mov	r14, r17
	((x + 6 * size - 1) < 0) || // Clip left
	((y + 8 * size - 1) < 0))   // Clip top
	return;
	for (int8_t i=0; i<6; i++ ) {
		uint8_t line;
		if (i == 5)
     c66:	95 e0       	ldi	r25, 0x05	; 5
     c68:	29 16       	cp	r2, r25
     c6a:	09 f4       	brne	.+2      	; 0xc6e <ili9341_drawchar+0xd4>
     c6c:	51 c0       	rjmp	.+162    	; 0xd10 <ili9341_drawchar+0x176>
     c6e:	ef 81       	ldd	r30, Y+7	; 0x07
     c70:	f8 85       	ldd	r31, Y+8	; 0x08
     c72:	ab 81       	ldd	r26, Y+3	; 0x03
     c74:	bc 81       	ldd	r27, Y+4	; 0x04
     c76:	ea 0f       	add	r30, r26
     c78:	fb 1f       	adc	r31, r27
		line = 0x0;
		else
		line = pgm_read_byte(font+(c*5)+i);
     c7a:	f4 90       	lpm	r15, Z
     c7c:	4a c0       	rjmp	.+148    	; 0xd12 <ili9341_drawchar+0x178>
		for (int8_t j = 0; j<8; j++) {
			if (line & 0x1) {
     c7e:	ba 85       	ldd	r27, Y+10	; 0x0a
     c80:	b0 ff       	sbrs	r27, 0
     c82:	12 c0       	rjmp	.+36     	; 0xca8 <ili9341_drawchar+0x10e>
				if (size == 1) // default size
     c84:	e9 85       	ldd	r30, Y+9	; 0x09
     c86:	e1 30       	cpi	r30, 0x01	; 1
     c88:	39 f4       	brne	.+14     	; 0xc98 <ili9341_drawchar+0xfe>
				ili9341_drawpixel(x+i, y+j, color);
     c8a:	a3 01       	movw	r20, r6
     c8c:	b6 01       	movw	r22, r12
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
     c90:	9c 81       	ldd	r25, Y+4	; 0x04
     c92:	0e 94 ac 04 	call	0x958	; 0x958 <ili9341_drawpixel>
     c96:	20 c0       	rjmp	.+64     	; 0xcd8 <ili9341_drawchar+0x13e>
				else {  // big size
					ili9341_fillrect(x+(i*size), y+(j*size), size, size, color);
     c98:	83 01       	movw	r16, r6
     c9a:	92 01       	movw	r18, r4
     c9c:	a2 01       	movw	r20, r4
     c9e:	b7 01       	movw	r22, r14
     ca0:	c5 01       	movw	r24, r10
     ca2:	0e 94 cb 04 	call	0x996	; 0x996 <ili9341_fillrect>
     ca6:	18 c0       	rjmp	.+48     	; 0xcd8 <ili9341_drawchar+0x13e>
				}
				} else if (bg != color) {
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	9a 81       	ldd	r25, Y+2	; 0x02
     cac:	86 15       	cp	r24, r6
     cae:	97 05       	cpc	r25, r7
     cb0:	99 f0       	breq	.+38     	; 0xcd8 <ili9341_drawchar+0x13e>
				if (size == 1) // default size
     cb2:	99 85       	ldd	r25, Y+9	; 0x09
     cb4:	91 30       	cpi	r25, 0x01	; 1
     cb6:	41 f4       	brne	.+16     	; 0xcc8 <ili9341_drawchar+0x12e>
				ili9341_drawpixel(x+i, y+j, bg);
     cb8:	49 81       	ldd	r20, Y+1	; 0x01
     cba:	5a 81       	ldd	r21, Y+2	; 0x02
     cbc:	b6 01       	movw	r22, r12
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	9c 81       	ldd	r25, Y+4	; 0x04
     cc2:	0e 94 ac 04 	call	0x958	; 0x958 <ili9341_drawpixel>
     cc6:	08 c0       	rjmp	.+16     	; 0xcd8 <ili9341_drawchar+0x13e>
				else
				{  // big size
					ili9341_fillrect(x+i*size, y+j*size, size, size, bg);
     cc8:	09 81       	ldd	r16, Y+1	; 0x01
     cca:	1a 81       	ldd	r17, Y+2	; 0x02
     ccc:	92 01       	movw	r18, r4
     cce:	a2 01       	movw	r20, r4
     cd0:	b7 01       	movw	r22, r14
     cd2:	c5 01       	movw	r24, r10
     cd4:	0e 94 cb 04 	call	0x996	; 0x996 <ili9341_fillrect>
				}
			}
			line >>= 1;
     cd8:	aa 85       	ldd	r26, Y+10	; 0x0a
     cda:	a6 95       	lsr	r26
     cdc:	aa 87       	std	Y+10, r26	; 0x0a
     cde:	3a 94       	dec	r3
     ce0:	e8 0c       	add	r14, r8
     ce2:	f9 1c       	adc	r15, r9
     ce4:	bf ef       	ldi	r27, 0xFF	; 255
     ce6:	cb 1a       	sub	r12, r27
     ce8:	db 0a       	sbc	r13, r27
		uint8_t line;
		if (i == 5)
		line = 0x0;
		else
		line = pgm_read_byte(font+(c*5)+i);
		for (int8_t j = 0; j<8; j++) {
     cea:	31 10       	cpse	r3, r1
     cec:	c8 cf       	rjmp	.-112    	; 0xc7e <ili9341_drawchar+0xe4>
     cee:	c2 01       	movw	r24, r4
     cf0:	25 01       	movw	r4, r10
     cf2:	e2 2c       	mov	r14, r2
     cf4:	2e 80       	ldd	r2, Y+6	; 0x06
     cf6:	5c 01       	movw	r10, r24
	if((x >=LCD_W)            || // Clip right
	(y >=LCD_H)           || // Clip bottom
	((x + 6 * size - 1) < 0) || // Clip left
	((y + 8 * size - 1) < 0))   // Clip top
	return;
	for (int8_t i=0; i<6; i++ ) {
     cf8:	23 94       	inc	r2
     cfa:	48 0c       	add	r4, r8
     cfc:	59 1c       	adc	r5, r9
     cfe:	eb 81       	ldd	r30, Y+3	; 0x03
     d00:	fc 81       	ldd	r31, Y+4	; 0x04
     d02:	31 96       	adiw	r30, 0x01	; 1
     d04:	fc 83       	std	Y+4, r31	; 0x04
     d06:	eb 83       	std	Y+3, r30	; 0x03
     d08:	f6 e0       	ldi	r31, 0x06	; 6
     d0a:	2f 12       	cpse	r2, r31
     d0c:	ac cf       	rjmp	.-168    	; 0xc66 <ili9341_drawchar+0xcc>
     d0e:	11 c0       	rjmp	.+34     	; 0xd32 <ili9341_drawchar+0x198>
		uint8_t line;
		if (i == 5)
		line = 0x0;
     d10:	f1 2c       	mov	r15, r1
		else
		line = pgm_read_byte(font+(c*5)+i);
     d12:	ce 2c       	mov	r12, r14
     d14:	dd 80       	ldd	r13, Y+5	; 0x05
     d16:	0e 2d       	mov	r16, r14
     d18:	1d 2d       	mov	r17, r13
     d1a:	68 94       	set
     d1c:	33 24       	eor	r3, r3
     d1e:	33 f8       	bld	r3, 3
     d20:	2e 82       	std	Y+6, r2	; 0x06
     d22:	c5 01       	movw	r24, r10
     d24:	52 01       	movw	r10, r4
     d26:	2e 2c       	mov	r2, r14
     d28:	98 01       	movw	r18, r16
     d2a:	fa 86       	std	Y+10, r15	; 0x0a
     d2c:	79 01       	movw	r14, r18
     d2e:	2c 01       	movw	r4, r24
     d30:	a6 cf       	rjmp	.-180    	; 0xc7e <ili9341_drawchar+0xe4>
				}
			}
			line >>= 1;
		}
	}
}
     d32:	2a 96       	adiw	r28, 0x0a	; 10
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	cd bf       	out	0x3d, r28	; 61
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	1f 91       	pop	r17
     d44:	0f 91       	pop	r16
     d46:	ff 90       	pop	r15
     d48:	ef 90       	pop	r14
     d4a:	df 90       	pop	r13
     d4c:	cf 90       	pop	r12
     d4e:	bf 90       	pop	r11
     d50:	af 90       	pop	r10
     d52:	9f 90       	pop	r9
     d54:	8f 90       	pop	r8
     d56:	7f 90       	pop	r7
     d58:	6f 90       	pop	r6
     d5a:	5f 90       	pop	r5
     d5c:	4f 90       	pop	r4
     d5e:	3f 90       	pop	r3
     d60:	2f 90       	pop	r2
     d62:	08 95       	ret

00000d64 <ili9341_write>:
	if(s>8) return;
	textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
}

void ili9341_write(uint8_t c)//write a character at setted coordinates after setting location and colour
{
     d64:	ef 92       	push	r14
     d66:	0f 93       	push	r16
     d68:	1f 93       	push	r17
	if (c == '\n') {
     d6a:	8a 30       	cpi	r24, 0x0A	; 10
     d6c:	a1 f4       	brne	.+40     	; 0xd96 <ili9341_write+0x32>
		cursor_y += textsize*8;
     d6e:	20 91 c8 00 	lds	r18, 0x00C8
     d72:	80 91 b4 00 	lds	r24, 0x00B4
     d76:	90 91 b5 00 	lds	r25, 0x00B5
     d7a:	38 e0       	ldi	r19, 0x08	; 8
     d7c:	23 9f       	mul	r18, r19
     d7e:	80 0d       	add	r24, r0
     d80:	91 1d       	adc	r25, r1
     d82:	11 24       	eor	r1, r1
     d84:	90 93 b5 00 	sts	0x00B5, r25
     d88:	80 93 b4 00 	sts	0x00B4, r24
		cursor_x  = 0;
     d8c:	10 92 c7 00 	sts	0x00C7, r1
     d90:	10 92 c6 00 	sts	0x00C6, r1
     d94:	2c c0       	rjmp	.+88     	; 0xdee <ili9341_write+0x8a>
		} else if (c == '\r') {
     d96:	8d 30       	cpi	r24, 0x0D	; 13
     d98:	51 f1       	breq	.+84     	; 0xdee <ili9341_write+0x8a>
		// skip em
	}
	else
	{
		ili9341_drawchar(cursor_x, cursor_y, c, textcolour, textbgcolour, textsize);
     d9a:	e0 90 c8 00 	lds	r14, 0x00C8
     d9e:	00 91 b2 00 	lds	r16, 0x00B2
     da2:	10 91 b3 00 	lds	r17, 0x00B3
     da6:	20 91 c4 00 	lds	r18, 0x00C4
     daa:	30 91 c5 00 	lds	r19, 0x00C5
     dae:	60 91 b4 00 	lds	r22, 0x00B4
     db2:	70 91 b5 00 	lds	r23, 0x00B5
     db6:	e0 91 c6 00 	lds	r30, 0x00C6
     dba:	f0 91 c7 00 	lds	r31, 0x00C7
     dbe:	48 2f       	mov	r20, r24
     dc0:	cf 01       	movw	r24, r30
     dc2:	0e 94 cd 05 	call	0xb9a	; 0xb9a <ili9341_drawchar>
		cursor_x += textsize*6;
     dc6:	80 91 c8 00 	lds	r24, 0x00C8
     dca:	20 91 c6 00 	lds	r18, 0x00C6
     dce:	30 91 c7 00 	lds	r19, 0x00C7
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	ac 01       	movw	r20, r24
     dd6:	44 0f       	add	r20, r20
     dd8:	55 1f       	adc	r21, r21
     dda:	84 0f       	add	r24, r20
     ddc:	95 1f       	adc	r25, r21
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	82 0f       	add	r24, r18
     de4:	93 1f       	adc	r25, r19
     de6:	90 93 c7 00 	sts	0x00C7, r25
     dea:	80 93 c6 00 	sts	0x00C6, r24
	}
}
     dee:	1f 91       	pop	r17
     df0:	0f 91       	pop	r16
     df2:	ef 90       	pop	r14
     df4:	08 95       	ret

00000df6 <ili9341_putchar_printf>:

static FILE mydata = FDEV_SETUP_STREAM(ili9341_putchar_printf, NULL, _FDEV_SETUP_WRITE);//mydata declaration and converting it into stream

int16_t ili9341_putchar_printf(char var, FILE *stream)//this function will be called whenever printf is used
{
	ili9341_write(var);
     df6:	0e 94 b2 06 	call	0xd64	; 0xd64 <ili9341_write>
}
     dfa:	08 95       	ret

00000dfc <display_init>:
}


void display_init(void)//display initial data regarding my power supply
{
	stdout = & mydata;//it is used for printf function and must be declared locally
     dfc:	80 e6       	ldi	r24, 0x60	; 96
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	90 93 ce 00 	sts	0x00CE, r25
     e04:	80 93 cd 00 	sts	0x00CD, r24
}


void ili9341_setcursor(uint16_t x,uint16_t y)//set cursor at desired location to print data
{
	cursor_x=x;
     e08:	84 e0       	ldi	r24, 0x04	; 4
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	90 93 c7 00 	sts	0x00C7, r25
     e10:	80 93 c6 00 	sts	0x00C6, r24
	cursor_y=y;
     e14:	90 93 b5 00 	sts	0x00B5, r25
     e18:	80 93 b4 00 	sts	0x00B4, r24
     e1c:	8f e3       	ldi	r24, 0x3F	; 63
     e1e:	9f e1       	ldi	r25, 0x1F	; 31
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	f1 f7       	brne	.-4      	; 0xe20 <display_init+0x24>
     e24:	00 c0       	rjmp	.+0      	; 0xe26 <display_init+0x2a>
     e26:	00 00       	nop
}

void ili9341_settextcolour(uint16_t x,uint16_t y)//set text colour and text background colour
{
	textcolour=x;
     e28:	80 ee       	ldi	r24, 0xE0	; 224
     e2a:	97 e0       	ldi	r25, 0x07	; 7
     e2c:	90 93 c5 00 	sts	0x00C5, r25
     e30:	80 93 c4 00 	sts	0x00C4, r24
	textbgcolour=y;
     e34:	10 92 b3 00 	sts	0x00B3, r1
     e38:	10 92 b2 00 	sts	0x00B2, r1
     e3c:	8f e3       	ldi	r24, 0x3F	; 63
     e3e:	9f e1       	ldi	r25, 0x1F	; 31
     e40:	01 97       	sbiw	r24, 0x01	; 1
     e42:	f1 f7       	brne	.-4      	; 0xe40 <display_init+0x44>
     e44:	00 c0       	rjmp	.+0      	; 0xe46 <display_init+0x4a>
     e46:	00 00       	nop
}

void ili9341_settextsize(uint8_t s)
{
	if(s>8) return;
	textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
     e48:	82 e0       	ldi	r24, 0x02	; 2
     e4a:	80 93 c8 00 	sts	0x00C8, r24
     e4e:	8f e3       	ldi	r24, 0x3F	; 63
     e50:	9f e1       	ldi	r25, 0x1F	; 31
     e52:	01 97       	sbiw	r24, 0x01	; 1
     e54:	f1 f7       	brne	.-4      	; 0xe52 <display_init+0x56>
     e56:	00 c0       	rjmp	.+0      	; 0xe58 <display_init+0x5c>
     e58:	00 00       	nop
	_delay_ms(2);
	ili9341_settextcolour(GREEN,BLACK);
	_delay_ms(2);
	ili9341_settextsize(2);
	_delay_ms(2);
	printf("mode - ");
     e5a:	82 e7       	ldi	r24, 0x72	; 114
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	9f 93       	push	r25
     e60:	8f 93       	push	r24
     e62:	0e 94 49 0a 	call	0x1492	; 0x1492 <printf>
     e66:	8f e3       	ldi	r24, 0x3F	; 63
     e68:	9f e1       	ldi	r25, 0x1F	; 31
     e6a:	01 97       	sbiw	r24, 0x01	; 1
     e6c:	f1 f7       	brne	.-4      	; 0xe6a <display_init+0x6e>
     e6e:	00 c0       	rjmp	.+0      	; 0xe70 <display_init+0x74>
     e70:	00 00       	nop
	cursor_y=y;
}

void ili9341_settextcolour(uint16_t x,uint16_t y)//set text colour and text background colour
{
	textcolour=x;
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	98 ef       	ldi	r25, 0xF8	; 248
     e76:	90 93 c5 00 	sts	0x00C5, r25
     e7a:	80 93 c4 00 	sts	0x00C4, r24
	textbgcolour=y;
     e7e:	10 92 b3 00 	sts	0x00B3, r1
     e82:	10 92 b2 00 	sts	0x00B2, r1
     e86:	8f e3       	ldi	r24, 0x3F	; 63
     e88:	9f e1       	ldi	r25, 0x1F	; 31
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	f1 f7       	brne	.-4      	; 0xe8a <display_init+0x8e>
     e8e:	00 c0       	rjmp	.+0      	; 0xe90 <display_init+0x94>
     e90:	00 00       	nop
}

void ili9341_settextsize(uint8_t s)
{
	if(s>8) return;
	textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
     e92:	82 e0       	ldi	r24, 0x02	; 2
     e94:	80 93 c8 00 	sts	0x00C8, r24
     e98:	8f e3       	ldi	r24, 0x3F	; 63
     e9a:	9f e1       	ldi	r25, 0x1F	; 31
     e9c:	01 97       	sbiw	r24, 0x01	; 1
     e9e:	f1 f7       	brne	.-4      	; 0xe9c <display_init+0xa0>
     ea0:	00 c0       	rjmp	.+0      	; 0xea2 <display_init+0xa6>
     ea2:	00 00       	nop
	_delay_ms(2);
	ili9341_settextcolour(RED,BLACK);
	_delay_ms(2);
	ili9341_settextsize(2);
	_delay_ms(2);
	printf("constant voltage");
     ea4:	8a e7       	ldi	r24, 0x7A	; 122
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	9f 93       	push	r25
     eaa:	8f 93       	push	r24
     eac:	0e 94 49 0a 	call	0x1492	; 0x1492 <printf>
     eb0:	8f e3       	ldi	r24, 0x3F	; 63
     eb2:	9f e1       	ldi	r25, 0x1F	; 31
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	f1 f7       	brne	.-4      	; 0xeb4 <display_init+0xb8>
     eb8:	00 c0       	rjmp	.+0      	; 0xeba <display_init+0xbe>
     eba:	00 00       	nop
}


void ili9341_setcursor(uint16_t x,uint16_t y)//set cursor at desired location to print data
{
	cursor_x=x;
     ebc:	84 e0       	ldi	r24, 0x04	; 4
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	90 93 c7 00 	sts	0x00C7, r25
     ec4:	80 93 c6 00 	sts	0x00C6, r24
	cursor_y=y;
     ec8:	88 e2       	ldi	r24, 0x28	; 40
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	90 93 b5 00 	sts	0x00B5, r25
     ed0:	80 93 b4 00 	sts	0x00B4, r24
     ed4:	8f e3       	ldi	r24, 0x3F	; 63
     ed6:	9f e1       	ldi	r25, 0x1F	; 31
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	f1 f7       	brne	.-4      	; 0xed8 <display_init+0xdc>
     edc:	00 c0       	rjmp	.+0      	; 0xede <display_init+0xe2>
     ede:	00 00       	nop
}

void ili9341_settextcolour(uint16_t x,uint16_t y)//set text colour and text background colour
{
	textcolour=x;
     ee0:	8f ef       	ldi	r24, 0xFF	; 255
     ee2:	97 e0       	ldi	r25, 0x07	; 7
     ee4:	90 93 c5 00 	sts	0x00C5, r25
     ee8:	80 93 c4 00 	sts	0x00C4, r24
	textbgcolour=y;
     eec:	10 92 b3 00 	sts	0x00B3, r1
     ef0:	10 92 b2 00 	sts	0x00B2, r1
     ef4:	8f e3       	ldi	r24, 0x3F	; 63
     ef6:	9f e1       	ldi	r25, 0x1F	; 31
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	f1 f7       	brne	.-4      	; 0xef8 <display_init+0xfc>
     efc:	00 c0       	rjmp	.+0      	; 0xefe <display_init+0x102>
     efe:	00 00       	nop
}

void ili9341_settextsize(uint8_t s)
{
	if(s>8) return;
	textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
     f00:	84 e0       	ldi	r24, 0x04	; 4
     f02:	80 93 c8 00 	sts	0x00C8, r24
     f06:	8f e3       	ldi	r24, 0x3F	; 63
     f08:	9f e1       	ldi	r25, 0x1F	; 31
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <display_init+0x10e>
     f0e:	00 c0       	rjmp	.+0      	; 0xf10 <display_init+0x114>
     f10:	00 00       	nop
	_delay_ms(2);
	ili9341_settextcolour(CYAN,BLACK);
	_delay_ms(2);
	ili9341_settextsize(4);
	_delay_ms(2);
	ili9341_write('V');
     f12:	86 e5       	ldi	r24, 0x56	; 86
     f14:	0e 94 b2 06 	call	0xd64	; 0xd64 <ili9341_write>
     f18:	8f e3       	ldi	r24, 0x3F	; 63
     f1a:	9f e1       	ldi	r25, 0x1F	; 31
     f1c:	01 97       	sbiw	r24, 0x01	; 1
     f1e:	f1 f7       	brne	.-4      	; 0xf1c <display_init+0x120>
     f20:	00 c0       	rjmp	.+0      	; 0xf22 <display_init+0x126>
     f22:	00 00       	nop
	_delay_ms(2);
	cursor_y=cursor_y+6;
     f24:	80 91 b4 00 	lds	r24, 0x00B4
     f28:	90 91 b5 00 	lds	r25, 0x00B5
     f2c:	06 96       	adiw	r24, 0x06	; 6
     f2e:	90 93 b5 00 	sts	0x00B5, r25
     f32:	80 93 b4 00 	sts	0x00B4, r24
}

void ili9341_settextsize(uint8_t s)
{
	if(s>8) return;
	textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
     f36:	83 e0       	ldi	r24, 0x03	; 3
     f38:	80 93 c8 00 	sts	0x00C8, r24
     f3c:	8f e3       	ldi	r24, 0x3F	; 63
     f3e:	9f e1       	ldi	r25, 0x1F	; 31
     f40:	01 97       	sbiw	r24, 0x01	; 1
     f42:	f1 f7       	brne	.-4      	; 0xf40 <display_init+0x144>
     f44:	00 c0       	rjmp	.+0      	; 0xf46 <display_init+0x14a>
     f46:	00 00       	nop
	ili9341_write('V');
	_delay_ms(2);
	cursor_y=cursor_y+6;
	ili9341_settextsize(3);
	_delay_ms(2);
	printf("set\n");
     f48:	8b e8       	ldi	r24, 0x8B	; 139
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <puts>
     f50:	8f e3       	ldi	r24, 0x3F	; 63
     f52:	9f e1       	ldi	r25, 0x1F	; 31
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	f1 f7       	brne	.-4      	; 0xf54 <display_init+0x158>
     f58:	00 c0       	rjmp	.+0      	; 0xf5a <display_init+0x15e>
     f5a:	00 00       	nop
	_delay_ms(2);
	cursor_y=cursor_y+12;
     f5c:	80 91 b4 00 	lds	r24, 0x00B4
     f60:	90 91 b5 00 	lds	r25, 0x00B5
     f64:	0c 96       	adiw	r24, 0x0c	; 12
     f66:	90 93 b5 00 	sts	0x00B5, r25
     f6a:	80 93 b4 00 	sts	0x00B4, r24
	backuplocationvset();
     f6e:	0e 94 89 05 	call	0xb12	; 0xb12 <backuplocationvset>
	printf("00.00v");
     f72:	8f e8       	ldi	r24, 0x8F	; 143
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	9f 93       	push	r25
     f78:	8f 93       	push	r24
     f7a:	0e 94 49 0a 	call	0x1492	; 0x1492 <printf>
     f7e:	8f e3       	ldi	r24, 0x3F	; 63
     f80:	9f e1       	ldi	r25, 0x1F	; 31
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	f1 f7       	brne	.-4      	; 0xf82 <display_init+0x186>
     f86:	00 c0       	rjmp	.+0      	; 0xf88 <display_init+0x18c>
     f88:	00 00       	nop
}


void ili9341_setcursor(uint16_t x,uint16_t y)//set cursor at desired location to print data
{
	cursor_x=x;
     f8a:	84 e0       	ldi	r24, 0x04	; 4
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	90 93 c7 00 	sts	0x00C7, r25
     f92:	80 93 c6 00 	sts	0x00C6, r24
	cursor_y=y;
     f96:	88 e7       	ldi	r24, 0x78	; 120
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	90 93 b5 00 	sts	0x00B5, r25
     f9e:	80 93 b4 00 	sts	0x00B4, r24
     fa2:	8f e3       	ldi	r24, 0x3F	; 63
     fa4:	9f e1       	ldi	r25, 0x1F	; 31
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	f1 f7       	brne	.-4      	; 0xfa6 <display_init+0x1aa>
     faa:	00 c0       	rjmp	.+0      	; 0xfac <display_init+0x1b0>
     fac:	00 00       	nop
}

void ili9341_settextsize(uint8_t s)
{
	if(s>8) return;
	textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
     fae:	84 e0       	ldi	r24, 0x04	; 4
     fb0:	80 93 c8 00 	sts	0x00C8, r24
     fb4:	8f e3       	ldi	r24, 0x3F	; 63
     fb6:	9f e1       	ldi	r25, 0x1F	; 31
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	f1 f7       	brne	.-4      	; 0xfb8 <display_init+0x1bc>
     fbc:	00 c0       	rjmp	.+0      	; 0xfbe <display_init+0x1c2>
     fbe:	00 00       	nop
	_delay_ms(2);
	ili9341_setcursor(4,120);
	_delay_ms(2);
	ili9341_settextsize(4);
	_delay_ms(2);
	ili9341_write('V');
     fc0:	86 e5       	ldi	r24, 0x56	; 86
     fc2:	0e 94 b2 06 	call	0xd64	; 0xd64 <ili9341_write>
     fc6:	8f e3       	ldi	r24, 0x3F	; 63
     fc8:	9f e1       	ldi	r25, 0x1F	; 31
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	f1 f7       	brne	.-4      	; 0xfca <display_init+0x1ce>
     fce:	00 c0       	rjmp	.+0      	; 0xfd0 <display_init+0x1d4>
     fd0:	00 00       	nop
	_delay_ms(2);
	cursor_y=cursor_y+6;
     fd2:	80 91 b4 00 	lds	r24, 0x00B4
     fd6:	90 91 b5 00 	lds	r25, 0x00B5
     fda:	06 96       	adiw	r24, 0x06	; 6
     fdc:	90 93 b5 00 	sts	0x00B5, r25
     fe0:	80 93 b4 00 	sts	0x00B4, r24
}

void ili9341_settextsize(uint8_t s)
{
	if(s>8) return;
	textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
     fe4:	83 e0       	ldi	r24, 0x03	; 3
     fe6:	80 93 c8 00 	sts	0x00C8, r24
     fea:	8f e3       	ldi	r24, 0x3F	; 63
     fec:	9f e1       	ldi	r25, 0x1F	; 31
     fee:	01 97       	sbiw	r24, 0x01	; 1
     ff0:	f1 f7       	brne	.-4      	; 0xfee <display_init+0x1f2>
     ff2:	00 c0       	rjmp	.+0      	; 0xff4 <display_init+0x1f8>
     ff4:	00 00       	nop
	ili9341_write('V');
	_delay_ms(2);
	cursor_y=cursor_y+6;
	ili9341_settextsize(3);
	_delay_ms(2);
	printf("actual\n\n");
     ff6:	86 e9       	ldi	r24, 0x96	; 150
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <puts>
     ffe:	8f e3       	ldi	r24, 0x3F	; 63
    1000:	9f e1       	ldi	r25, 0x1F	; 31
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	f1 f7       	brne	.-4      	; 0x1002 <display_init+0x206>
    1006:	00 c0       	rjmp	.+0      	; 0x1008 <display_init+0x20c>
    1008:	00 00       	nop
	_delay_ms(2);
	backuplocationvactual();
    100a:	0e 94 9a 05 	call	0xb34	; 0xb34 <backuplocationvactual>
}

void ili9341_settextsize(uint8_t s)
{
	if(s>8) return;
	textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    100e:	85 e0       	ldi	r24, 0x05	; 5
    1010:	80 93 c8 00 	sts	0x00C8, r24
	_delay_ms(2);
	printf("actual\n\n");
	_delay_ms(2);
	backuplocationvactual();
	ili9341_settextsize(5);
	printf("00.00");
    1014:	8e e9       	ldi	r24, 0x9E	; 158
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	9f 93       	push	r25
    101a:	8f 93       	push	r24
    101c:	0e 94 49 0a 	call	0x1492	; 0x1492 <printf>
    1020:	8f e3       	ldi	r24, 0x3F	; 63
    1022:	9f e1       	ldi	r25, 0x1F	; 31
    1024:	01 97       	sbiw	r24, 0x01	; 1
    1026:	f1 f7       	brne	.-4      	; 0x1024 <display_init+0x228>
    1028:	00 c0       	rjmp	.+0      	; 0x102a <display_init+0x22e>
    102a:	00 00       	nop
}


void ili9341_setcursor(uint16_t x,uint16_t y)//set cursor at desired location to print data
{
	cursor_x=x;
    102c:	84 ea       	ldi	r24, 0xA4	; 164
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	90 93 c7 00 	sts	0x00C7, r25
    1034:	80 93 c6 00 	sts	0x00C6, r24
	cursor_y=y;
    1038:	88 e2       	ldi	r24, 0x28	; 40
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	90 93 b5 00 	sts	0x00B5, r25
    1040:	80 93 b4 00 	sts	0x00B4, r24
    1044:	8f e3       	ldi	r24, 0x3F	; 63
    1046:	9f e1       	ldi	r25, 0x1F	; 31
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <display_init+0x24c>
    104c:	00 c0       	rjmp	.+0      	; 0x104e <display_init+0x252>
    104e:	00 00       	nop
}

void ili9341_settextcolour(uint16_t x,uint16_t y)//set text colour and text background colour
{
	textcolour=x;
    1050:	80 ee       	ldi	r24, 0xE0	; 224
    1052:	9f ef       	ldi	r25, 0xFF	; 255
    1054:	90 93 c5 00 	sts	0x00C5, r25
    1058:	80 93 c4 00 	sts	0x00C4, r24
	textbgcolour=y;
    105c:	10 92 b3 00 	sts	0x00B3, r1
    1060:	10 92 b2 00 	sts	0x00B2, r1
    1064:	8f e3       	ldi	r24, 0x3F	; 63
    1066:	9f e1       	ldi	r25, 0x1F	; 31
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	f1 f7       	brne	.-4      	; 0x1068 <display_init+0x26c>
    106c:	00 c0       	rjmp	.+0      	; 0x106e <display_init+0x272>
    106e:	00 00       	nop
}

void ili9341_settextsize(uint8_t s)
{
	if(s>8) return;
	textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    1070:	84 e0       	ldi	r24, 0x04	; 4
    1072:	80 93 c8 00 	sts	0x00C8, r24
    1076:	8f e3       	ldi	r24, 0x3F	; 63
    1078:	9f e1       	ldi	r25, 0x1F	; 31
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	f1 f7       	brne	.-4      	; 0x107a <display_init+0x27e>
    107e:	00 c0       	rjmp	.+0      	; 0x1080 <display_init+0x284>
    1080:	00 00       	nop
	_delay_ms(2);
	ili9341_settextcolour(YELLOW,BLACK);
	_delay_ms(2);
	ili9341_settextsize(4);
	_delay_ms(2);
	ili9341_write('I');
    1082:	89 e4       	ldi	r24, 0x49	; 73
    1084:	0e 94 b2 06 	call	0xd64	; 0xd64 <ili9341_write>
    1088:	8f e3       	ldi	r24, 0x3F	; 63
    108a:	9f e1       	ldi	r25, 0x1F	; 31
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	f1 f7       	brne	.-4      	; 0x108c <display_init+0x290>
    1090:	00 c0       	rjmp	.+0      	; 0x1092 <display_init+0x296>
    1092:	00 00       	nop
	_delay_ms(2);
	cursor_y=cursor_y+6;
    1094:	80 91 b4 00 	lds	r24, 0x00B4
    1098:	90 91 b5 00 	lds	r25, 0x00B5
    109c:	06 96       	adiw	r24, 0x06	; 6
    109e:	90 93 b5 00 	sts	0x00B5, r25
    10a2:	80 93 b4 00 	sts	0x00B4, r24
}

void ili9341_settextsize(uint8_t s)
{
	if(s>8) return;
	textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    10a6:	83 e0       	ldi	r24, 0x03	; 3
    10a8:	80 93 c8 00 	sts	0x00C8, r24
    10ac:	8f e3       	ldi	r24, 0x3F	; 63
    10ae:	9f e1       	ldi	r25, 0x1F	; 31
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <display_init+0x2b4>
    10b4:	00 c0       	rjmp	.+0      	; 0x10b6 <display_init+0x2ba>
    10b6:	00 00       	nop
	ili9341_write('I');
	_delay_ms(2);
	cursor_y=cursor_y+6;
	ili9341_settextsize(3);
	_delay_ms(2);
	printf("set");
    10b8:	8b e8       	ldi	r24, 0x8B	; 139
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	9f 93       	push	r25
    10be:	8f 93       	push	r24
    10c0:	0e 94 49 0a 	call	0x1492	; 0x1492 <printf>
    10c4:	8f e3       	ldi	r24, 0x3F	; 63
    10c6:	9f e1       	ldi	r25, 0x1F	; 31
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	f1 f7       	brne	.-4      	; 0x10c8 <display_init+0x2cc>
    10cc:	00 c0       	rjmp	.+0      	; 0x10ce <display_init+0x2d2>
    10ce:	00 00       	nop
	_delay_ms(2);
	cursor_x=164;
    10d0:	84 ea       	ldi	r24, 0xA4	; 164
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	90 93 c7 00 	sts	0x00C7, r25
    10d8:	80 93 c6 00 	sts	0x00C6, r24
	cursor_y=(cursor_y+36);
    10dc:	80 91 b4 00 	lds	r24, 0x00B4
    10e0:	90 91 b5 00 	lds	r25, 0x00B5
    10e4:	84 96       	adiw	r24, 0x24	; 36
    10e6:	90 93 b5 00 	sts	0x00B5, r25
    10ea:	80 93 b4 00 	sts	0x00B4, r24
	backuplocationiset();
    10ee:	0e 94 ab 05 	call	0xb56	; 0xb56 <backuplocationiset>
}

void ili9341_settextsize(uint8_t s)
{
	if(s>8) return;
	textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    10f2:	83 e0       	ldi	r24, 0x03	; 3
    10f4:	80 93 c8 00 	sts	0x00C8, r24
	_delay_ms(2);
	cursor_x=164;
	cursor_y=(cursor_y+36);
	backuplocationiset();
	ili9341_settextsize(3);
	printf("00.00a");
    10f8:	84 ea       	ldi	r24, 0xA4	; 164
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	9f 93       	push	r25
    10fe:	8f 93       	push	r24
    1100:	0e 94 49 0a 	call	0x1492	; 0x1492 <printf>
    1104:	8f e3       	ldi	r24, 0x3F	; 63
    1106:	9f e1       	ldi	r25, 0x1F	; 31
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	f1 f7       	brne	.-4      	; 0x1108 <display_init+0x30c>
    110c:	00 c0       	rjmp	.+0      	; 0x110e <display_init+0x312>
    110e:	00 00       	nop
}


void ili9341_setcursor(uint16_t x,uint16_t y)//set cursor at desired location to print data
{
	cursor_x=x;
    1110:	84 ea       	ldi	r24, 0xA4	; 164
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	90 93 c7 00 	sts	0x00C7, r25
    1118:	80 93 c6 00 	sts	0x00C6, r24
	cursor_y=y;
    111c:	88 e7       	ldi	r24, 0x78	; 120
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	90 93 b5 00 	sts	0x00B5, r25
    1124:	80 93 b4 00 	sts	0x00B4, r24
    1128:	8f e3       	ldi	r24, 0x3F	; 63
    112a:	9f e1       	ldi	r25, 0x1F	; 31
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	f1 f7       	brne	.-4      	; 0x112c <display_init+0x330>
    1130:	00 c0       	rjmp	.+0      	; 0x1132 <display_init+0x336>
    1132:	00 00       	nop
}

void ili9341_settextsize(uint8_t s)
{
	if(s>8) return;
	textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    1134:	84 e0       	ldi	r24, 0x04	; 4
    1136:	80 93 c8 00 	sts	0x00C8, r24
    113a:	8f e3       	ldi	r24, 0x3F	; 63
    113c:	9f e1       	ldi	r25, 0x1F	; 31
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	f1 f7       	brne	.-4      	; 0x113e <display_init+0x342>
    1142:	00 c0       	rjmp	.+0      	; 0x1144 <display_init+0x348>
    1144:	00 00       	nop
	_delay_ms(2);
	ili9341_setcursor(164,120);
	_delay_ms(2);
	ili9341_settextsize(4);
	_delay_ms(2);
	ili9341_write('I');
    1146:	89 e4       	ldi	r24, 0x49	; 73
    1148:	0e 94 b2 06 	call	0xd64	; 0xd64 <ili9341_write>
    114c:	8f e3       	ldi	r24, 0x3F	; 63
    114e:	9f e1       	ldi	r25, 0x1F	; 31
    1150:	01 97       	sbiw	r24, 0x01	; 1
    1152:	f1 f7       	brne	.-4      	; 0x1150 <display_init+0x354>
    1154:	00 c0       	rjmp	.+0      	; 0x1156 <display_init+0x35a>
    1156:	00 00       	nop
	_delay_ms(2);
	cursor_y=cursor_y+6;
    1158:	80 91 b4 00 	lds	r24, 0x00B4
    115c:	90 91 b5 00 	lds	r25, 0x00B5
    1160:	06 96       	adiw	r24, 0x06	; 6
    1162:	90 93 b5 00 	sts	0x00B5, r25
    1166:	80 93 b4 00 	sts	0x00B4, r24
}

void ili9341_settextsize(uint8_t s)
{
	if(s>8) return;
	textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    116a:	83 e0       	ldi	r24, 0x03	; 3
    116c:	80 93 c8 00 	sts	0x00C8, r24
    1170:	8f e3       	ldi	r24, 0x3F	; 63
    1172:	9f e1       	ldi	r25, 0x1F	; 31
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	f1 f7       	brne	.-4      	; 0x1174 <display_init+0x378>
    1178:	00 c0       	rjmp	.+0      	; 0x117a <display_init+0x37e>
    117a:	00 00       	nop
	ili9341_write('I');
	_delay_ms(2);
	cursor_y=cursor_y+6;
	ili9341_settextsize(3);
	_delay_ms(2);
	printf("actual");
    117c:	8b ea       	ldi	r24, 0xAB	; 171
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	9f 93       	push	r25
    1182:	8f 93       	push	r24
    1184:	0e 94 49 0a 	call	0x1492	; 0x1492 <printf>
    1188:	8f e3       	ldi	r24, 0x3F	; 63
    118a:	9f e1       	ldi	r25, 0x1F	; 31
    118c:	01 97       	sbiw	r24, 0x01	; 1
    118e:	f1 f7       	brne	.-4      	; 0x118c <display_init+0x390>
    1190:	00 c0       	rjmp	.+0      	; 0x1192 <display_init+0x396>
    1192:	00 00       	nop
	_delay_ms(2);
	cursor_x=164;
    1194:	84 ea       	ldi	r24, 0xA4	; 164
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	90 93 c7 00 	sts	0x00C7, r25
    119c:	80 93 c6 00 	sts	0x00C6, r24
	backuplocationiactual();
    11a0:	0e 94 bc 05 	call	0xb78	; 0xb78 <backuplocationiactual>
	cursor_y=cursor_y+48;
    11a4:	80 91 b4 00 	lds	r24, 0x00B4
    11a8:	90 91 b5 00 	lds	r25, 0x00B5
    11ac:	c0 96       	adiw	r24, 0x30	; 48
    11ae:	90 93 b5 00 	sts	0x00B5, r25
    11b2:	80 93 b4 00 	sts	0x00B4, r24
}

void ili9341_settextsize(uint8_t s)
{
	if(s>8) return;
	textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    11b6:	85 e0       	ldi	r24, 0x05	; 5
    11b8:	80 93 c8 00 	sts	0x00C8, r24
	_delay_ms(2);
	cursor_x=164;
	backuplocationiactual();
	cursor_y=cursor_y+48;
	ili9341_settextsize(5);
	printf("00.00");
    11bc:	8e e9       	ldi	r24, 0x9E	; 158
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	9f 93       	push	r25
    11c2:	8f 93       	push	r24
    11c4:	0e 94 49 0a 	call	0x1492	; 0x1492 <printf>
    11c8:	9f ef       	ldi	r25, 0xFF	; 255
    11ca:	27 ea       	ldi	r18, 0xA7	; 167
    11cc:	81 e6       	ldi	r24, 0x61	; 97
    11ce:	91 50       	subi	r25, 0x01	; 1
    11d0:	20 40       	sbci	r18, 0x00	; 0
    11d2:	80 40       	sbci	r24, 0x00	; 0
    11d4:	e1 f7       	brne	.-8      	; 0x11ce <display_init+0x3d2>
    11d6:	00 c0       	rjmp	.+0      	; 0x11d8 <display_init+0x3dc>
    11d8:	00 00       	nop
    11da:	8d b7       	in	r24, 0x3d	; 61
    11dc:	9e b7       	in	r25, 0x3e	; 62
    11de:	40 96       	adiw	r24, 0x10	; 16
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	f8 94       	cli
    11e4:	9e bf       	out	0x3e, r25	; 62
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	8d bf       	out	0x3d, r24	; 61
    11ea:	08 95       	ret

000011ec <main>:
//static FILE mydata = FDEV_SETUP_STREAM(ili9341_putchar_printf, NULL, _FDEV_SETUP_WRITE);


int main(void)
{
	stdout = & mydata;
    11ec:	80 e6       	ldi	r24, 0x60	; 96
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	90 93 ce 00 	sts	0x00CE, r25
    11f4:	80 93 cd 00 	sts	0x00CD, r24
	ili9341_init();//initial driver setup to drive ili9341
    11f8:	0e 94 43 03 	call	0x686	; 0x686 <ili9341_init>
	ili9341_clear(BLACK);//fill screen with black colour
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	0e 94 5f 04 	call	0x8be	; 0x8be <ili9341_clear>
    1204:	2f ef       	ldi	r18, 0xFF	; 255
    1206:	83 ed       	ldi	r24, 0xD3	; 211
    1208:	90 e3       	ldi	r25, 0x30	; 48
    120a:	21 50       	subi	r18, 0x01	; 1
    120c:	80 40       	sbci	r24, 0x00	; 0
    120e:	90 40       	sbci	r25, 0x00	; 0
    1210:	e1 f7       	brne	.-8      	; 0x120a <main+0x1e>
    1212:	00 c0       	rjmp	.+0      	; 0x1214 <main+0x28>
    1214:	00 00       	nop
	_delay_ms(1000);
	ili9341_setRotation(3);//rotate screen
    1216:	83 e0       	ldi	r24, 0x03	; 3
    1218:	0e 94 39 05 	call	0xa72	; 0xa72 <ili9341_setRotation>
    121c:	8f e3       	ldi	r24, 0x3F	; 63
    121e:	9f e1       	ldi	r25, 0x1F	; 31
    1220:	01 97       	sbiw	r24, 0x01	; 1
    1222:	f1 f7       	brne	.-4      	; 0x1220 <main+0x34>
    1224:	00 c0       	rjmp	.+0      	; 0x1226 <main+0x3a>
    1226:	00 00       	nop
	_delay_ms(2);

	display_init();//display initial data
    1228:	0e 94 fe 06 	call	0xdfc	; 0xdfc <display_init>
	cursor_y=y;
}

void ili9341_settextcolour(uint16_t x,uint16_t y)//set text colour and text background colour
{
	textcolour=x;
    122c:	cf ef       	ldi	r28, 0xFF	; 255
    122e:	d7 e0       	ldi	r29, 0x07	; 7
}

void ili9341_settextsize(uint8_t s)
{
	if(s>8) return;
	textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    1230:	03 e0       	ldi	r16, 0x03	; 3
    1232:	15 e0       	ldi	r17, 0x05	; 5
	cursor_y=y;
}

void ili9341_settextcolour(uint16_t x,uint16_t y)//set text colour and text background colour
{
	textcolour=x;
    1234:	d0 93 c5 00 	sts	0x00C5, r29
    1238:	c0 93 c4 00 	sts	0x00C4, r28
	textbgcolour=y;
    123c:	10 92 b3 00 	sts	0x00B3, r1
    1240:	10 92 b2 00 	sts	0x00B2, r1

	while(1)
	{
		ili9341_settextcolour(CYAN,BLACK);

		ili9341_setcursor(vsetx,vsety);
    1244:	80 91 be 00 	lds	r24, 0x00BE
    1248:	90 91 bf 00 	lds	r25, 0x00BF
    124c:	20 91 c0 00 	lds	r18, 0x00C0
    1250:	30 91 c1 00 	lds	r19, 0x00C1
}


void ili9341_setcursor(uint16_t x,uint16_t y)//set cursor at desired location to print data
{
	cursor_x=x;
    1254:	30 93 c7 00 	sts	0x00C7, r19
    1258:	20 93 c6 00 	sts	0x00C6, r18
	cursor_y=y;
    125c:	90 93 b5 00 	sts	0x00B5, r25
    1260:	80 93 b4 00 	sts	0x00B4, r24
    1264:	8f e3       	ldi	r24, 0x3F	; 63
    1266:	9f e1       	ldi	r25, 0x1F	; 31
    1268:	01 97       	sbiw	r24, 0x01	; 1
    126a:	f1 f7       	brne	.-4      	; 0x1268 <main+0x7c>
    126c:	00 c0       	rjmp	.+0      	; 0x126e <main+0x82>
    126e:	00 00       	nop
}

void ili9341_settextsize(uint8_t s)
{
	if(s>8) return;
	textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    1270:	00 93 c8 00 	sts	0x00C8, r16
		_delay_ms(2);
		ili9341_settextsize(3);
		ili9341_write('1');
    1274:	81 e3       	ldi	r24, 0x31	; 49
    1276:	0e 94 b2 06 	call	0xd64	; 0xd64 <ili9341_write>
    127a:	8f e3       	ldi	r24, 0x3F	; 63
    127c:	9f e1       	ldi	r25, 0x1F	; 31
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	f1 f7       	brne	.-4      	; 0x127e <main+0x92>
    1282:	00 c0       	rjmp	.+0      	; 0x1284 <main+0x98>
    1284:	00 00       	nop
		_delay_ms(2);
		ili9341_write('0');
    1286:	80 e3       	ldi	r24, 0x30	; 48
    1288:	0e 94 b2 06 	call	0xd64	; 0xd64 <ili9341_write>
    128c:	8f e3       	ldi	r24, 0x3F	; 63
    128e:	9f e1       	ldi	r25, 0x1F	; 31
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	f1 f7       	brne	.-4      	; 0x1290 <main+0xa4>
    1294:	00 c0       	rjmp	.+0      	; 0x1296 <main+0xaa>
    1296:	00 00       	nop
		_delay_ms(2);
		ili9341_write('.');
    1298:	8e e2       	ldi	r24, 0x2E	; 46
    129a:	0e 94 b2 06 	call	0xd64	; 0xd64 <ili9341_write>
    129e:	8f e3       	ldi	r24, 0x3F	; 63
    12a0:	9f e1       	ldi	r25, 0x1F	; 31
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	f1 f7       	brne	.-4      	; 0x12a2 <main+0xb6>
    12a6:	00 c0       	rjmp	.+0      	; 0x12a8 <main+0xbc>
    12a8:	00 00       	nop
		_delay_ms(2);
		ili9341_write('2');
    12aa:	82 e3       	ldi	r24, 0x32	; 50
    12ac:	0e 94 b2 06 	call	0xd64	; 0xd64 <ili9341_write>
    12b0:	8f e3       	ldi	r24, 0x3F	; 63
    12b2:	9f e1       	ldi	r25, 0x1F	; 31
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	f1 f7       	brne	.-4      	; 0x12b4 <main+0xc8>
    12b8:	00 c0       	rjmp	.+0      	; 0x12ba <main+0xce>
    12ba:	00 00       	nop
		_delay_ms(2);
		ili9341_write('3');
    12bc:	83 e3       	ldi	r24, 0x33	; 51
    12be:	0e 94 b2 06 	call	0xd64	; 0xd64 <ili9341_write>
    12c2:	8f e3       	ldi	r24, 0x3F	; 63
    12c4:	9f e1       	ldi	r25, 0x1F	; 31
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	f1 f7       	brne	.-4      	; 0x12c6 <main+0xda>
    12ca:	00 c0       	rjmp	.+0      	; 0x12cc <main+0xe0>
    12cc:	00 00       	nop
		_delay_ms(2);



		ili9341_setcursor(vactualx,vactualy);
    12ce:	80 91 c2 00 	lds	r24, 0x00C2
    12d2:	90 91 c3 00 	lds	r25, 0x00C3
    12d6:	20 91 ba 00 	lds	r18, 0x00BA
    12da:	30 91 bb 00 	lds	r19, 0x00BB
}


void ili9341_setcursor(uint16_t x,uint16_t y)//set cursor at desired location to print data
{
	cursor_x=x;
    12de:	30 93 c7 00 	sts	0x00C7, r19
    12e2:	20 93 c6 00 	sts	0x00C6, r18
	cursor_y=y;
    12e6:	90 93 b5 00 	sts	0x00B5, r25
    12ea:	80 93 b4 00 	sts	0x00B4, r24
    12ee:	8f e3       	ldi	r24, 0x3F	; 63
    12f0:	9f e1       	ldi	r25, 0x1F	; 31
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	f1 f7       	brne	.-4      	; 0x12f2 <main+0x106>
    12f6:	00 c0       	rjmp	.+0      	; 0x12f8 <main+0x10c>
    12f8:	00 00       	nop
}

void ili9341_settextsize(uint8_t s)
{
	if(s>8) return;
	textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    12fa:	10 93 c8 00 	sts	0x00C8, r17
		_delay_ms(2);
		ili9341_settextsize(5);
		ili9341_write('1');
    12fe:	81 e3       	ldi	r24, 0x31	; 49
    1300:	0e 94 b2 06 	call	0xd64	; 0xd64 <ili9341_write>
    1304:	8f e3       	ldi	r24, 0x3F	; 63
    1306:	9f e1       	ldi	r25, 0x1F	; 31
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	f1 f7       	brne	.-4      	; 0x1308 <main+0x11c>
    130c:	00 c0       	rjmp	.+0      	; 0x130e <main+0x122>
    130e:	00 00       	nop
		_delay_ms(2);
		ili9341_write('0');
    1310:	80 e3       	ldi	r24, 0x30	; 48
    1312:	0e 94 b2 06 	call	0xd64	; 0xd64 <ili9341_write>
    1316:	8f e3       	ldi	r24, 0x3F	; 63
    1318:	9f e1       	ldi	r25, 0x1F	; 31
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	f1 f7       	brne	.-4      	; 0x131a <main+0x12e>
    131e:	00 c0       	rjmp	.+0      	; 0x1320 <main+0x134>
    1320:	00 00       	nop
		_delay_ms(2);
		ili9341_write('.');
    1322:	8e e2       	ldi	r24, 0x2E	; 46
    1324:	0e 94 b2 06 	call	0xd64	; 0xd64 <ili9341_write>
    1328:	8f e3       	ldi	r24, 0x3F	; 63
    132a:	9f e1       	ldi	r25, 0x1F	; 31
    132c:	01 97       	sbiw	r24, 0x01	; 1
    132e:	f1 f7       	brne	.-4      	; 0x132c <main+0x140>
    1330:	00 c0       	rjmp	.+0      	; 0x1332 <main+0x146>
    1332:	00 00       	nop
		_delay_ms(2);
		ili9341_write('2');
    1334:	82 e3       	ldi	r24, 0x32	; 50
    1336:	0e 94 b2 06 	call	0xd64	; 0xd64 <ili9341_write>
    133a:	8f e3       	ldi	r24, 0x3F	; 63
    133c:	9f e1       	ldi	r25, 0x1F	; 31
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	f1 f7       	brne	.-4      	; 0x133e <main+0x152>
    1342:	00 c0       	rjmp	.+0      	; 0x1344 <main+0x158>
    1344:	00 00       	nop
		_delay_ms(2);
		ili9341_write('3');
    1346:	83 e3       	ldi	r24, 0x33	; 51
    1348:	0e 94 b2 06 	call	0xd64	; 0xd64 <ili9341_write>
    134c:	8f e3       	ldi	r24, 0x3F	; 63
    134e:	9f e1       	ldi	r25, 0x1F	; 31
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	f1 f7       	brne	.-4      	; 0x1350 <main+0x164>
    1354:	00 c0       	rjmp	.+0      	; 0x1356 <main+0x16a>
    1356:	00 00       	nop
    1358:	9f ef       	ldi	r25, 0xFF	; 255
    135a:	27 ea       	ldi	r18, 0xA7	; 167
    135c:	81 e6       	ldi	r24, 0x61	; 97
    135e:	91 50       	subi	r25, 0x01	; 1
    1360:	20 40       	sbci	r18, 0x00	; 0
    1362:	80 40       	sbci	r24, 0x00	; 0
    1364:	e1 f7       	brne	.-8      	; 0x135e <main+0x172>
    1366:	00 c0       	rjmp	.+0      	; 0x1368 <main+0x17c>
    1368:	00 00       	nop
		_delay_ms(2);

		_delay_ms(2000);

		ili9341_setcursor(vsetx,vsety);
    136a:	80 91 be 00 	lds	r24, 0x00BE
    136e:	90 91 bf 00 	lds	r25, 0x00BF
    1372:	20 91 c0 00 	lds	r18, 0x00C0
    1376:	30 91 c1 00 	lds	r19, 0x00C1
}


void ili9341_setcursor(uint16_t x,uint16_t y)//set cursor at desired location to print data
{
	cursor_x=x;
    137a:	30 93 c7 00 	sts	0x00C7, r19
    137e:	20 93 c6 00 	sts	0x00C6, r18
	cursor_y=y;
    1382:	90 93 b5 00 	sts	0x00B5, r25
    1386:	80 93 b4 00 	sts	0x00B4, r24
    138a:	8f e3       	ldi	r24, 0x3F	; 63
    138c:	9f e1       	ldi	r25, 0x1F	; 31
    138e:	01 97       	sbiw	r24, 0x01	; 1
    1390:	f1 f7       	brne	.-4      	; 0x138e <main+0x1a2>
    1392:	00 c0       	rjmp	.+0      	; 0x1394 <main+0x1a8>
    1394:	00 00       	nop
}

void ili9341_settextsize(uint8_t s)
{
	if(s>8) return;
	textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    1396:	00 93 c8 00 	sts	0x00C8, r16
		_delay_ms(2);
		ili9341_settextsize(3);
		ili9341_write('9');
    139a:	89 e3       	ldi	r24, 0x39	; 57
    139c:	0e 94 b2 06 	call	0xd64	; 0xd64 <ili9341_write>
    13a0:	8f e3       	ldi	r24, 0x3F	; 63
    13a2:	9f e1       	ldi	r25, 0x1F	; 31
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	f1 f7       	brne	.-4      	; 0x13a4 <main+0x1b8>
    13a8:	00 c0       	rjmp	.+0      	; 0x13aa <main+0x1be>
    13aa:	00 00       	nop
		_delay_ms(2);
		ili9341_write('0');
    13ac:	80 e3       	ldi	r24, 0x30	; 48
    13ae:	0e 94 b2 06 	call	0xd64	; 0xd64 <ili9341_write>
    13b2:	8f e3       	ldi	r24, 0x3F	; 63
    13b4:	9f e1       	ldi	r25, 0x1F	; 31
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	f1 f7       	brne	.-4      	; 0x13b6 <main+0x1ca>
    13ba:	00 c0       	rjmp	.+0      	; 0x13bc <main+0x1d0>
    13bc:	00 00       	nop
		_delay_ms(2);
		ili9341_write('.');
    13be:	8e e2       	ldi	r24, 0x2E	; 46
    13c0:	0e 94 b2 06 	call	0xd64	; 0xd64 <ili9341_write>
    13c4:	8f e3       	ldi	r24, 0x3F	; 63
    13c6:	9f e1       	ldi	r25, 0x1F	; 31
    13c8:	01 97       	sbiw	r24, 0x01	; 1
    13ca:	f1 f7       	brne	.-4      	; 0x13c8 <main+0x1dc>
    13cc:	00 c0       	rjmp	.+0      	; 0x13ce <main+0x1e2>
    13ce:	00 00       	nop
		_delay_ms(2);
		ili9341_write('4');
    13d0:	84 e3       	ldi	r24, 0x34	; 52
    13d2:	0e 94 b2 06 	call	0xd64	; 0xd64 <ili9341_write>
    13d6:	8f e3       	ldi	r24, 0x3F	; 63
    13d8:	9f e1       	ldi	r25, 0x1F	; 31
    13da:	01 97       	sbiw	r24, 0x01	; 1
    13dc:	f1 f7       	brne	.-4      	; 0x13da <main+0x1ee>
    13de:	00 c0       	rjmp	.+0      	; 0x13e0 <main+0x1f4>
    13e0:	00 00       	nop
		_delay_ms(2);
		ili9341_write('5');
    13e2:	85 e3       	ldi	r24, 0x35	; 53
    13e4:	0e 94 b2 06 	call	0xd64	; 0xd64 <ili9341_write>
    13e8:	8f e3       	ldi	r24, 0x3F	; 63
    13ea:	9f e1       	ldi	r25, 0x1F	; 31
    13ec:	01 97       	sbiw	r24, 0x01	; 1
    13ee:	f1 f7       	brne	.-4      	; 0x13ec <main+0x200>
    13f0:	00 c0       	rjmp	.+0      	; 0x13f2 <main+0x206>
    13f2:	00 00       	nop
		_delay_ms(2);



		ili9341_setcursor(vactualx,vactualy);
    13f4:	80 91 c2 00 	lds	r24, 0x00C2
    13f8:	90 91 c3 00 	lds	r25, 0x00C3
    13fc:	20 91 ba 00 	lds	r18, 0x00BA
    1400:	30 91 bb 00 	lds	r19, 0x00BB
}


void ili9341_setcursor(uint16_t x,uint16_t y)//set cursor at desired location to print data
{
	cursor_x=x;
    1404:	30 93 c7 00 	sts	0x00C7, r19
    1408:	20 93 c6 00 	sts	0x00C6, r18
	cursor_y=y;
    140c:	90 93 b5 00 	sts	0x00B5, r25
    1410:	80 93 b4 00 	sts	0x00B4, r24
    1414:	8f e3       	ldi	r24, 0x3F	; 63
    1416:	9f e1       	ldi	r25, 0x1F	; 31
    1418:	01 97       	sbiw	r24, 0x01	; 1
    141a:	f1 f7       	brne	.-4      	; 0x1418 <main+0x22c>
    141c:	00 c0       	rjmp	.+0      	; 0x141e <main+0x232>
    141e:	00 00       	nop
}

void ili9341_settextsize(uint8_t s)
{
	if(s>8) return;
	textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    1420:	10 93 c8 00 	sts	0x00C8, r17
		_delay_ms(2);
		ili9341_settextsize(5);
		ili9341_write('9');
    1424:	89 e3       	ldi	r24, 0x39	; 57
    1426:	0e 94 b2 06 	call	0xd64	; 0xd64 <ili9341_write>
    142a:	8f e3       	ldi	r24, 0x3F	; 63
    142c:	9f e1       	ldi	r25, 0x1F	; 31
    142e:	01 97       	sbiw	r24, 0x01	; 1
    1430:	f1 f7       	brne	.-4      	; 0x142e <main+0x242>
    1432:	00 c0       	rjmp	.+0      	; 0x1434 <main+0x248>
    1434:	00 00       	nop
		_delay_ms(2);
		ili9341_write('0');
    1436:	80 e3       	ldi	r24, 0x30	; 48
    1438:	0e 94 b2 06 	call	0xd64	; 0xd64 <ili9341_write>
    143c:	8f e3       	ldi	r24, 0x3F	; 63
    143e:	9f e1       	ldi	r25, 0x1F	; 31
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	f1 f7       	brne	.-4      	; 0x1440 <main+0x254>
    1444:	00 c0       	rjmp	.+0      	; 0x1446 <main+0x25a>
    1446:	00 00       	nop
		_delay_ms(2);
		ili9341_write('.');
    1448:	8e e2       	ldi	r24, 0x2E	; 46
    144a:	0e 94 b2 06 	call	0xd64	; 0xd64 <ili9341_write>
    144e:	8f e3       	ldi	r24, 0x3F	; 63
    1450:	9f e1       	ldi	r25, 0x1F	; 31
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	f1 f7       	brne	.-4      	; 0x1452 <main+0x266>
    1456:	00 c0       	rjmp	.+0      	; 0x1458 <main+0x26c>
    1458:	00 00       	nop
		_delay_ms(2);
		ili9341_write('4');
    145a:	84 e3       	ldi	r24, 0x34	; 52
    145c:	0e 94 b2 06 	call	0xd64	; 0xd64 <ili9341_write>
    1460:	8f e3       	ldi	r24, 0x3F	; 63
    1462:	9f e1       	ldi	r25, 0x1F	; 31
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	f1 f7       	brne	.-4      	; 0x1464 <main+0x278>
    1468:	00 c0       	rjmp	.+0      	; 0x146a <main+0x27e>
    146a:	00 00       	nop
		_delay_ms(2);
		ili9341_write('5');
    146c:	85 e3       	ldi	r24, 0x35	; 53
    146e:	0e 94 b2 06 	call	0xd64	; 0xd64 <ili9341_write>
    1472:	8f e3       	ldi	r24, 0x3F	; 63
    1474:	9f e1       	ldi	r25, 0x1F	; 31
    1476:	01 97       	sbiw	r24, 0x01	; 1
    1478:	f1 f7       	brne	.-4      	; 0x1476 <main+0x28a>
    147a:	00 c0       	rjmp	.+0      	; 0x147c <main+0x290>
    147c:	00 00       	nop
    147e:	9f ef       	ldi	r25, 0xFF	; 255
    1480:	27 ea       	ldi	r18, 0xA7	; 167
    1482:	81 e6       	ldi	r24, 0x61	; 97
    1484:	91 50       	subi	r25, 0x01	; 1
    1486:	20 40       	sbci	r18, 0x00	; 0
    1488:	80 40       	sbci	r24, 0x00	; 0
    148a:	e1 f7       	brne	.-8      	; 0x1484 <main+0x298>
    148c:	00 c0       	rjmp	.+0      	; 0x148e <main+0x2a2>
    148e:	00 00       	nop
    1490:	d1 ce       	rjmp	.-606    	; 0x1234 <main+0x48>

00001492 <printf>:
    1492:	a0 e0       	ldi	r26, 0x00	; 0
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	ef e4       	ldi	r30, 0x4F	; 79
    1498:	fa e0       	ldi	r31, 0x0A	; 10
    149a:	0c 94 12 0d 	jmp	0x1a24	; 0x1a24 <__prologue_saves__+0x20>
    149e:	fe 01       	movw	r30, r28
    14a0:	35 96       	adiw	r30, 0x05	; 5
    14a2:	61 91       	ld	r22, Z+
    14a4:	71 91       	ld	r23, Z+
    14a6:	af 01       	movw	r20, r30
    14a8:	80 91 cd 00 	lds	r24, 0x00CD
    14ac:	90 91 ce 00 	lds	r25, 0x00CE
    14b0:	0e 94 8a 0a 	call	0x1514	; 0x1514 <vfprintf>
    14b4:	e2 e0       	ldi	r30, 0x02	; 2
    14b6:	0c 94 2e 0d 	jmp	0x1a5c	; 0x1a5c <__epilogue_restores__+0x20>

000014ba <puts>:
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	e0 91 cd 00 	lds	r30, 0x00CD
    14c6:	f0 91 ce 00 	lds	r31, 0x00CE
    14ca:	23 81       	ldd	r18, Z+3	; 0x03
    14cc:	21 ff       	sbrs	r18, 1
    14ce:	1b c0       	rjmp	.+54     	; 0x1506 <puts+0x4c>
    14d0:	ec 01       	movw	r28, r24
    14d2:	00 e0       	ldi	r16, 0x00	; 0
    14d4:	10 e0       	ldi	r17, 0x00	; 0
    14d6:	89 91       	ld	r24, Y+
    14d8:	60 91 cd 00 	lds	r22, 0x00CD
    14dc:	70 91 ce 00 	lds	r23, 0x00CE
    14e0:	db 01       	movw	r26, r22
    14e2:	18 96       	adiw	r26, 0x08	; 8
    14e4:	ed 91       	ld	r30, X+
    14e6:	fc 91       	ld	r31, X
    14e8:	19 97       	sbiw	r26, 0x09	; 9
    14ea:	88 23       	and	r24, r24
    14ec:	31 f0       	breq	.+12     	; 0x14fa <puts+0x40>
    14ee:	09 95       	icall
    14f0:	89 2b       	or	r24, r25
    14f2:	89 f3       	breq	.-30     	; 0x14d6 <puts+0x1c>
    14f4:	0f ef       	ldi	r16, 0xFF	; 255
    14f6:	1f ef       	ldi	r17, 0xFF	; 255
    14f8:	ee cf       	rjmp	.-36     	; 0x14d6 <puts+0x1c>
    14fa:	8a e0       	ldi	r24, 0x0A	; 10
    14fc:	09 95       	icall
    14fe:	89 2b       	or	r24, r25
    1500:	11 f4       	brne	.+4      	; 0x1506 <puts+0x4c>
    1502:	c8 01       	movw	r24, r16
    1504:	02 c0       	rjmp	.+4      	; 0x150a <puts+0x50>
    1506:	8f ef       	ldi	r24, 0xFF	; 255
    1508:	9f ef       	ldi	r25, 0xFF	; 255
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	1f 91       	pop	r17
    1510:	0f 91       	pop	r16
    1512:	08 95       	ret

00001514 <vfprintf>:
    1514:	ac e0       	ldi	r26, 0x0C	; 12
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e0 e9       	ldi	r30, 0x90	; 144
    151a:	fa e0       	ldi	r31, 0x0A	; 10
    151c:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__prologue_saves__>
    1520:	7c 01       	movw	r14, r24
    1522:	6b 01       	movw	r12, r22
    1524:	8a 01       	movw	r16, r20
    1526:	fc 01       	movw	r30, r24
    1528:	17 82       	std	Z+7, r1	; 0x07
    152a:	16 82       	std	Z+6, r1	; 0x06
    152c:	83 81       	ldd	r24, Z+3	; 0x03
    152e:	81 ff       	sbrs	r24, 1
    1530:	bd c1       	rjmp	.+890    	; 0x18ac <vfprintf+0x398>
    1532:	ce 01       	movw	r24, r28
    1534:	01 96       	adiw	r24, 0x01	; 1
    1536:	4c 01       	movw	r8, r24
    1538:	f7 01       	movw	r30, r14
    153a:	93 81       	ldd	r25, Z+3	; 0x03
    153c:	f6 01       	movw	r30, r12
    153e:	93 fd       	sbrc	r25, 3
    1540:	85 91       	lpm	r24, Z+
    1542:	93 ff       	sbrs	r25, 3
    1544:	81 91       	ld	r24, Z+
    1546:	6f 01       	movw	r12, r30
    1548:	88 23       	and	r24, r24
    154a:	09 f4       	brne	.+2      	; 0x154e <vfprintf+0x3a>
    154c:	ab c1       	rjmp	.+854    	; 0x18a4 <vfprintf+0x390>
    154e:	85 32       	cpi	r24, 0x25	; 37
    1550:	39 f4       	brne	.+14     	; 0x1560 <vfprintf+0x4c>
    1552:	93 fd       	sbrc	r25, 3
    1554:	85 91       	lpm	r24, Z+
    1556:	93 ff       	sbrs	r25, 3
    1558:	81 91       	ld	r24, Z+
    155a:	6f 01       	movw	r12, r30
    155c:	85 32       	cpi	r24, 0x25	; 37
    155e:	29 f4       	brne	.+10     	; 0x156a <vfprintf+0x56>
    1560:	b7 01       	movw	r22, r14
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <fputc>
    1568:	e7 cf       	rjmp	.-50     	; 0x1538 <vfprintf+0x24>
    156a:	51 2c       	mov	r5, r1
    156c:	31 2c       	mov	r3, r1
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	20 32       	cpi	r18, 0x20	; 32
    1572:	a0 f4       	brcc	.+40     	; 0x159c <vfprintf+0x88>
    1574:	8b 32       	cpi	r24, 0x2B	; 43
    1576:	69 f0       	breq	.+26     	; 0x1592 <vfprintf+0x7e>
    1578:	30 f4       	brcc	.+12     	; 0x1586 <vfprintf+0x72>
    157a:	80 32       	cpi	r24, 0x20	; 32
    157c:	59 f0       	breq	.+22     	; 0x1594 <vfprintf+0x80>
    157e:	83 32       	cpi	r24, 0x23	; 35
    1580:	69 f4       	brne	.+26     	; 0x159c <vfprintf+0x88>
    1582:	20 61       	ori	r18, 0x10	; 16
    1584:	2c c0       	rjmp	.+88     	; 0x15de <vfprintf+0xca>
    1586:	8d 32       	cpi	r24, 0x2D	; 45
    1588:	39 f0       	breq	.+14     	; 0x1598 <vfprintf+0x84>
    158a:	80 33       	cpi	r24, 0x30	; 48
    158c:	39 f4       	brne	.+14     	; 0x159c <vfprintf+0x88>
    158e:	21 60       	ori	r18, 0x01	; 1
    1590:	26 c0       	rjmp	.+76     	; 0x15de <vfprintf+0xca>
    1592:	22 60       	ori	r18, 0x02	; 2
    1594:	24 60       	ori	r18, 0x04	; 4
    1596:	23 c0       	rjmp	.+70     	; 0x15de <vfprintf+0xca>
    1598:	28 60       	ori	r18, 0x08	; 8
    159a:	21 c0       	rjmp	.+66     	; 0x15de <vfprintf+0xca>
    159c:	27 fd       	sbrc	r18, 7
    159e:	27 c0       	rjmp	.+78     	; 0x15ee <vfprintf+0xda>
    15a0:	30 ed       	ldi	r19, 0xD0	; 208
    15a2:	38 0f       	add	r19, r24
    15a4:	3a 30       	cpi	r19, 0x0A	; 10
    15a6:	78 f4       	brcc	.+30     	; 0x15c6 <vfprintf+0xb2>
    15a8:	26 ff       	sbrs	r18, 6
    15aa:	06 c0       	rjmp	.+12     	; 0x15b8 <vfprintf+0xa4>
    15ac:	fa e0       	ldi	r31, 0x0A	; 10
    15ae:	5f 9e       	mul	r5, r31
    15b0:	30 0d       	add	r19, r0
    15b2:	11 24       	eor	r1, r1
    15b4:	53 2e       	mov	r5, r19
    15b6:	13 c0       	rjmp	.+38     	; 0x15de <vfprintf+0xca>
    15b8:	8a e0       	ldi	r24, 0x0A	; 10
    15ba:	38 9e       	mul	r3, r24
    15bc:	30 0d       	add	r19, r0
    15be:	11 24       	eor	r1, r1
    15c0:	33 2e       	mov	r3, r19
    15c2:	20 62       	ori	r18, 0x20	; 32
    15c4:	0c c0       	rjmp	.+24     	; 0x15de <vfprintf+0xca>
    15c6:	8e 32       	cpi	r24, 0x2E	; 46
    15c8:	21 f4       	brne	.+8      	; 0x15d2 <vfprintf+0xbe>
    15ca:	26 fd       	sbrc	r18, 6
    15cc:	6b c1       	rjmp	.+726    	; 0x18a4 <vfprintf+0x390>
    15ce:	20 64       	ori	r18, 0x40	; 64
    15d0:	06 c0       	rjmp	.+12     	; 0x15de <vfprintf+0xca>
    15d2:	8c 36       	cpi	r24, 0x6C	; 108
    15d4:	11 f4       	brne	.+4      	; 0x15da <vfprintf+0xc6>
    15d6:	20 68       	ori	r18, 0x80	; 128
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <vfprintf+0xca>
    15da:	88 36       	cpi	r24, 0x68	; 104
    15dc:	41 f4       	brne	.+16     	; 0x15ee <vfprintf+0xda>
    15de:	f6 01       	movw	r30, r12
    15e0:	93 fd       	sbrc	r25, 3
    15e2:	85 91       	lpm	r24, Z+
    15e4:	93 ff       	sbrs	r25, 3
    15e6:	81 91       	ld	r24, Z+
    15e8:	6f 01       	movw	r12, r30
    15ea:	81 11       	cpse	r24, r1
    15ec:	c1 cf       	rjmp	.-126    	; 0x1570 <vfprintf+0x5c>
    15ee:	98 2f       	mov	r25, r24
    15f0:	9f 7d       	andi	r25, 0xDF	; 223
    15f2:	95 54       	subi	r25, 0x45	; 69
    15f4:	93 30       	cpi	r25, 0x03	; 3
    15f6:	28 f4       	brcc	.+10     	; 0x1602 <vfprintf+0xee>
    15f8:	0c 5f       	subi	r16, 0xFC	; 252
    15fa:	1f 4f       	sbci	r17, 0xFF	; 255
    15fc:	ff e3       	ldi	r31, 0x3F	; 63
    15fe:	f9 83       	std	Y+1, r31	; 0x01
    1600:	0d c0       	rjmp	.+26     	; 0x161c <vfprintf+0x108>
    1602:	83 36       	cpi	r24, 0x63	; 99
    1604:	31 f0       	breq	.+12     	; 0x1612 <vfprintf+0xfe>
    1606:	83 37       	cpi	r24, 0x73	; 115
    1608:	71 f0       	breq	.+28     	; 0x1626 <vfprintf+0x112>
    160a:	83 35       	cpi	r24, 0x53	; 83
    160c:	09 f0       	breq	.+2      	; 0x1610 <vfprintf+0xfc>
    160e:	5b c0       	rjmp	.+182    	; 0x16c6 <vfprintf+0x1b2>
    1610:	22 c0       	rjmp	.+68     	; 0x1656 <vfprintf+0x142>
    1612:	f8 01       	movw	r30, r16
    1614:	80 81       	ld	r24, Z
    1616:	89 83       	std	Y+1, r24	; 0x01
    1618:	0e 5f       	subi	r16, 0xFE	; 254
    161a:	1f 4f       	sbci	r17, 0xFF	; 255
    161c:	44 24       	eor	r4, r4
    161e:	43 94       	inc	r4
    1620:	51 2c       	mov	r5, r1
    1622:	54 01       	movw	r10, r8
    1624:	15 c0       	rjmp	.+42     	; 0x1650 <vfprintf+0x13c>
    1626:	38 01       	movw	r6, r16
    1628:	f2 e0       	ldi	r31, 0x02	; 2
    162a:	6f 0e       	add	r6, r31
    162c:	71 1c       	adc	r7, r1
    162e:	f8 01       	movw	r30, r16
    1630:	a0 80       	ld	r10, Z
    1632:	b1 80       	ldd	r11, Z+1	; 0x01
    1634:	26 ff       	sbrs	r18, 6
    1636:	03 c0       	rjmp	.+6      	; 0x163e <vfprintf+0x12a>
    1638:	65 2d       	mov	r22, r5
    163a:	70 e0       	ldi	r23, 0x00	; 0
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <vfprintf+0x12e>
    163e:	6f ef       	ldi	r22, 0xFF	; 255
    1640:	7f ef       	ldi	r23, 0xFF	; 255
    1642:	c5 01       	movw	r24, r10
    1644:	2c 87       	std	Y+12, r18	; 0x0c
    1646:	0e 94 67 0c 	call	0x18ce	; 0x18ce <strnlen>
    164a:	2c 01       	movw	r4, r24
    164c:	83 01       	movw	r16, r6
    164e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1650:	2f 77       	andi	r18, 0x7F	; 127
    1652:	22 2e       	mov	r2, r18
    1654:	17 c0       	rjmp	.+46     	; 0x1684 <vfprintf+0x170>
    1656:	38 01       	movw	r6, r16
    1658:	f2 e0       	ldi	r31, 0x02	; 2
    165a:	6f 0e       	add	r6, r31
    165c:	71 1c       	adc	r7, r1
    165e:	f8 01       	movw	r30, r16
    1660:	a0 80       	ld	r10, Z
    1662:	b1 80       	ldd	r11, Z+1	; 0x01
    1664:	26 ff       	sbrs	r18, 6
    1666:	03 c0       	rjmp	.+6      	; 0x166e <vfprintf+0x15a>
    1668:	65 2d       	mov	r22, r5
    166a:	70 e0       	ldi	r23, 0x00	; 0
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <vfprintf+0x15e>
    166e:	6f ef       	ldi	r22, 0xFF	; 255
    1670:	7f ef       	ldi	r23, 0xFF	; 255
    1672:	c5 01       	movw	r24, r10
    1674:	2c 87       	std	Y+12, r18	; 0x0c
    1676:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <strnlen_P>
    167a:	2c 01       	movw	r4, r24
    167c:	2c 85       	ldd	r18, Y+12	; 0x0c
    167e:	20 68       	ori	r18, 0x80	; 128
    1680:	22 2e       	mov	r2, r18
    1682:	83 01       	movw	r16, r6
    1684:	23 fc       	sbrc	r2, 3
    1686:	1b c0       	rjmp	.+54     	; 0x16be <vfprintf+0x1aa>
    1688:	83 2d       	mov	r24, r3
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	48 16       	cp	r4, r24
    168e:	59 06       	cpc	r5, r25
    1690:	b0 f4       	brcc	.+44     	; 0x16be <vfprintf+0x1aa>
    1692:	b7 01       	movw	r22, r14
    1694:	80 e2       	ldi	r24, 0x20	; 32
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <fputc>
    169c:	3a 94       	dec	r3
    169e:	f4 cf       	rjmp	.-24     	; 0x1688 <vfprintf+0x174>
    16a0:	f5 01       	movw	r30, r10
    16a2:	27 fc       	sbrc	r2, 7
    16a4:	85 91       	lpm	r24, Z+
    16a6:	27 fe       	sbrs	r2, 7
    16a8:	81 91       	ld	r24, Z+
    16aa:	5f 01       	movw	r10, r30
    16ac:	b7 01       	movw	r22, r14
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <fputc>
    16b4:	31 10       	cpse	r3, r1
    16b6:	3a 94       	dec	r3
    16b8:	f1 e0       	ldi	r31, 0x01	; 1
    16ba:	4f 1a       	sub	r4, r31
    16bc:	51 08       	sbc	r5, r1
    16be:	41 14       	cp	r4, r1
    16c0:	51 04       	cpc	r5, r1
    16c2:	71 f7       	brne	.-36     	; 0x16a0 <vfprintf+0x18c>
    16c4:	e5 c0       	rjmp	.+458    	; 0x1890 <vfprintf+0x37c>
    16c6:	84 36       	cpi	r24, 0x64	; 100
    16c8:	11 f0       	breq	.+4      	; 0x16ce <vfprintf+0x1ba>
    16ca:	89 36       	cpi	r24, 0x69	; 105
    16cc:	39 f5       	brne	.+78     	; 0x171c <vfprintf+0x208>
    16ce:	f8 01       	movw	r30, r16
    16d0:	27 ff       	sbrs	r18, 7
    16d2:	07 c0       	rjmp	.+14     	; 0x16e2 <vfprintf+0x1ce>
    16d4:	60 81       	ld	r22, Z
    16d6:	71 81       	ldd	r23, Z+1	; 0x01
    16d8:	82 81       	ldd	r24, Z+2	; 0x02
    16da:	93 81       	ldd	r25, Z+3	; 0x03
    16dc:	0c 5f       	subi	r16, 0xFC	; 252
    16de:	1f 4f       	sbci	r17, 0xFF	; 255
    16e0:	08 c0       	rjmp	.+16     	; 0x16f2 <vfprintf+0x1de>
    16e2:	60 81       	ld	r22, Z
    16e4:	71 81       	ldd	r23, Z+1	; 0x01
    16e6:	88 27       	eor	r24, r24
    16e8:	77 fd       	sbrc	r23, 7
    16ea:	80 95       	com	r24
    16ec:	98 2f       	mov	r25, r24
    16ee:	0e 5f       	subi	r16, 0xFE	; 254
    16f0:	1f 4f       	sbci	r17, 0xFF	; 255
    16f2:	2f 76       	andi	r18, 0x6F	; 111
    16f4:	b2 2e       	mov	r11, r18
    16f6:	97 ff       	sbrs	r25, 7
    16f8:	09 c0       	rjmp	.+18     	; 0x170c <vfprintf+0x1f8>
    16fa:	90 95       	com	r25
    16fc:	80 95       	com	r24
    16fe:	70 95       	com	r23
    1700:	61 95       	neg	r22
    1702:	7f 4f       	sbci	r23, 0xFF	; 255
    1704:	8f 4f       	sbci	r24, 0xFF	; 255
    1706:	9f 4f       	sbci	r25, 0xFF	; 255
    1708:	20 68       	ori	r18, 0x80	; 128
    170a:	b2 2e       	mov	r11, r18
    170c:	2a e0       	ldi	r18, 0x0A	; 10
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	a4 01       	movw	r20, r8
    1712:	0e 94 a4 0c 	call	0x1948	; 0x1948 <__ultoa_invert>
    1716:	a8 2e       	mov	r10, r24
    1718:	a8 18       	sub	r10, r8
    171a:	44 c0       	rjmp	.+136    	; 0x17a4 <vfprintf+0x290>
    171c:	85 37       	cpi	r24, 0x75	; 117
    171e:	29 f4       	brne	.+10     	; 0x172a <vfprintf+0x216>
    1720:	2f 7e       	andi	r18, 0xEF	; 239
    1722:	b2 2e       	mov	r11, r18
    1724:	2a e0       	ldi	r18, 0x0A	; 10
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	25 c0       	rjmp	.+74     	; 0x1774 <vfprintf+0x260>
    172a:	f2 2f       	mov	r31, r18
    172c:	f9 7f       	andi	r31, 0xF9	; 249
    172e:	bf 2e       	mov	r11, r31
    1730:	8f 36       	cpi	r24, 0x6F	; 111
    1732:	c1 f0       	breq	.+48     	; 0x1764 <vfprintf+0x250>
    1734:	18 f4       	brcc	.+6      	; 0x173c <vfprintf+0x228>
    1736:	88 35       	cpi	r24, 0x58	; 88
    1738:	79 f0       	breq	.+30     	; 0x1758 <vfprintf+0x244>
    173a:	b4 c0       	rjmp	.+360    	; 0x18a4 <vfprintf+0x390>
    173c:	80 37       	cpi	r24, 0x70	; 112
    173e:	19 f0       	breq	.+6      	; 0x1746 <vfprintf+0x232>
    1740:	88 37       	cpi	r24, 0x78	; 120
    1742:	21 f0       	breq	.+8      	; 0x174c <vfprintf+0x238>
    1744:	af c0       	rjmp	.+350    	; 0x18a4 <vfprintf+0x390>
    1746:	2f 2f       	mov	r18, r31
    1748:	20 61       	ori	r18, 0x10	; 16
    174a:	b2 2e       	mov	r11, r18
    174c:	b4 fe       	sbrs	r11, 4
    174e:	0d c0       	rjmp	.+26     	; 0x176a <vfprintf+0x256>
    1750:	8b 2d       	mov	r24, r11
    1752:	84 60       	ori	r24, 0x04	; 4
    1754:	b8 2e       	mov	r11, r24
    1756:	09 c0       	rjmp	.+18     	; 0x176a <vfprintf+0x256>
    1758:	24 ff       	sbrs	r18, 4
    175a:	0a c0       	rjmp	.+20     	; 0x1770 <vfprintf+0x25c>
    175c:	9f 2f       	mov	r25, r31
    175e:	96 60       	ori	r25, 0x06	; 6
    1760:	b9 2e       	mov	r11, r25
    1762:	06 c0       	rjmp	.+12     	; 0x1770 <vfprintf+0x25c>
    1764:	28 e0       	ldi	r18, 0x08	; 8
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	05 c0       	rjmp	.+10     	; 0x1774 <vfprintf+0x260>
    176a:	20 e1       	ldi	r18, 0x10	; 16
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <vfprintf+0x260>
    1770:	20 e1       	ldi	r18, 0x10	; 16
    1772:	32 e0       	ldi	r19, 0x02	; 2
    1774:	f8 01       	movw	r30, r16
    1776:	b7 fe       	sbrs	r11, 7
    1778:	07 c0       	rjmp	.+14     	; 0x1788 <vfprintf+0x274>
    177a:	60 81       	ld	r22, Z
    177c:	71 81       	ldd	r23, Z+1	; 0x01
    177e:	82 81       	ldd	r24, Z+2	; 0x02
    1780:	93 81       	ldd	r25, Z+3	; 0x03
    1782:	0c 5f       	subi	r16, 0xFC	; 252
    1784:	1f 4f       	sbci	r17, 0xFF	; 255
    1786:	06 c0       	rjmp	.+12     	; 0x1794 <vfprintf+0x280>
    1788:	60 81       	ld	r22, Z
    178a:	71 81       	ldd	r23, Z+1	; 0x01
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	0e 5f       	subi	r16, 0xFE	; 254
    1792:	1f 4f       	sbci	r17, 0xFF	; 255
    1794:	a4 01       	movw	r20, r8
    1796:	0e 94 a4 0c 	call	0x1948	; 0x1948 <__ultoa_invert>
    179a:	a8 2e       	mov	r10, r24
    179c:	a8 18       	sub	r10, r8
    179e:	fb 2d       	mov	r31, r11
    17a0:	ff 77       	andi	r31, 0x7F	; 127
    17a2:	bf 2e       	mov	r11, r31
    17a4:	b6 fe       	sbrs	r11, 6
    17a6:	0b c0       	rjmp	.+22     	; 0x17be <vfprintf+0x2aa>
    17a8:	2b 2d       	mov	r18, r11
    17aa:	2e 7f       	andi	r18, 0xFE	; 254
    17ac:	a5 14       	cp	r10, r5
    17ae:	50 f4       	brcc	.+20     	; 0x17c4 <vfprintf+0x2b0>
    17b0:	b4 fe       	sbrs	r11, 4
    17b2:	0a c0       	rjmp	.+20     	; 0x17c8 <vfprintf+0x2b4>
    17b4:	b2 fc       	sbrc	r11, 2
    17b6:	08 c0       	rjmp	.+16     	; 0x17c8 <vfprintf+0x2b4>
    17b8:	2b 2d       	mov	r18, r11
    17ba:	2e 7e       	andi	r18, 0xEE	; 238
    17bc:	05 c0       	rjmp	.+10     	; 0x17c8 <vfprintf+0x2b4>
    17be:	7a 2c       	mov	r7, r10
    17c0:	2b 2d       	mov	r18, r11
    17c2:	03 c0       	rjmp	.+6      	; 0x17ca <vfprintf+0x2b6>
    17c4:	7a 2c       	mov	r7, r10
    17c6:	01 c0       	rjmp	.+2      	; 0x17ca <vfprintf+0x2b6>
    17c8:	75 2c       	mov	r7, r5
    17ca:	24 ff       	sbrs	r18, 4
    17cc:	0d c0       	rjmp	.+26     	; 0x17e8 <vfprintf+0x2d4>
    17ce:	fe 01       	movw	r30, r28
    17d0:	ea 0d       	add	r30, r10
    17d2:	f1 1d       	adc	r31, r1
    17d4:	80 81       	ld	r24, Z
    17d6:	80 33       	cpi	r24, 0x30	; 48
    17d8:	11 f4       	brne	.+4      	; 0x17de <vfprintf+0x2ca>
    17da:	29 7e       	andi	r18, 0xE9	; 233
    17dc:	09 c0       	rjmp	.+18     	; 0x17f0 <vfprintf+0x2dc>
    17de:	22 ff       	sbrs	r18, 2
    17e0:	06 c0       	rjmp	.+12     	; 0x17ee <vfprintf+0x2da>
    17e2:	73 94       	inc	r7
    17e4:	73 94       	inc	r7
    17e6:	04 c0       	rjmp	.+8      	; 0x17f0 <vfprintf+0x2dc>
    17e8:	82 2f       	mov	r24, r18
    17ea:	86 78       	andi	r24, 0x86	; 134
    17ec:	09 f0       	breq	.+2      	; 0x17f0 <vfprintf+0x2dc>
    17ee:	73 94       	inc	r7
    17f0:	23 fd       	sbrc	r18, 3
    17f2:	13 c0       	rjmp	.+38     	; 0x181a <vfprintf+0x306>
    17f4:	20 ff       	sbrs	r18, 0
    17f6:	06 c0       	rjmp	.+12     	; 0x1804 <vfprintf+0x2f0>
    17f8:	5a 2c       	mov	r5, r10
    17fa:	73 14       	cp	r7, r3
    17fc:	18 f4       	brcc	.+6      	; 0x1804 <vfprintf+0x2f0>
    17fe:	53 0c       	add	r5, r3
    1800:	57 18       	sub	r5, r7
    1802:	73 2c       	mov	r7, r3
    1804:	73 14       	cp	r7, r3
    1806:	68 f4       	brcc	.+26     	; 0x1822 <vfprintf+0x30e>
    1808:	b7 01       	movw	r22, r14
    180a:	80 e2       	ldi	r24, 0x20	; 32
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	2c 87       	std	Y+12, r18	; 0x0c
    1810:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <fputc>
    1814:	73 94       	inc	r7
    1816:	2c 85       	ldd	r18, Y+12	; 0x0c
    1818:	f5 cf       	rjmp	.-22     	; 0x1804 <vfprintf+0x2f0>
    181a:	73 14       	cp	r7, r3
    181c:	10 f4       	brcc	.+4      	; 0x1822 <vfprintf+0x30e>
    181e:	37 18       	sub	r3, r7
    1820:	01 c0       	rjmp	.+2      	; 0x1824 <vfprintf+0x310>
    1822:	31 2c       	mov	r3, r1
    1824:	24 ff       	sbrs	r18, 4
    1826:	12 c0       	rjmp	.+36     	; 0x184c <vfprintf+0x338>
    1828:	b7 01       	movw	r22, r14
    182a:	80 e3       	ldi	r24, 0x30	; 48
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	2c 87       	std	Y+12, r18	; 0x0c
    1830:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <fputc>
    1834:	2c 85       	ldd	r18, Y+12	; 0x0c
    1836:	22 ff       	sbrs	r18, 2
    1838:	17 c0       	rjmp	.+46     	; 0x1868 <vfprintf+0x354>
    183a:	21 ff       	sbrs	r18, 1
    183c:	03 c0       	rjmp	.+6      	; 0x1844 <vfprintf+0x330>
    183e:	88 e5       	ldi	r24, 0x58	; 88
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <vfprintf+0x334>
    1844:	88 e7       	ldi	r24, 0x78	; 120
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	b7 01       	movw	r22, r14
    184a:	0c c0       	rjmp	.+24     	; 0x1864 <vfprintf+0x350>
    184c:	82 2f       	mov	r24, r18
    184e:	86 78       	andi	r24, 0x86	; 134
    1850:	59 f0       	breq	.+22     	; 0x1868 <vfprintf+0x354>
    1852:	21 fd       	sbrc	r18, 1
    1854:	02 c0       	rjmp	.+4      	; 0x185a <vfprintf+0x346>
    1856:	80 e2       	ldi	r24, 0x20	; 32
    1858:	01 c0       	rjmp	.+2      	; 0x185c <vfprintf+0x348>
    185a:	8b e2       	ldi	r24, 0x2B	; 43
    185c:	27 fd       	sbrc	r18, 7
    185e:	8d e2       	ldi	r24, 0x2D	; 45
    1860:	b7 01       	movw	r22, r14
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <fputc>
    1868:	a5 14       	cp	r10, r5
    186a:	38 f4       	brcc	.+14     	; 0x187a <vfprintf+0x366>
    186c:	b7 01       	movw	r22, r14
    186e:	80 e3       	ldi	r24, 0x30	; 48
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <fputc>
    1876:	5a 94       	dec	r5
    1878:	f7 cf       	rjmp	.-18     	; 0x1868 <vfprintf+0x354>
    187a:	aa 94       	dec	r10
    187c:	f4 01       	movw	r30, r8
    187e:	ea 0d       	add	r30, r10
    1880:	f1 1d       	adc	r31, r1
    1882:	80 81       	ld	r24, Z
    1884:	b7 01       	movw	r22, r14
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <fputc>
    188c:	a1 10       	cpse	r10, r1
    188e:	f5 cf       	rjmp	.-22     	; 0x187a <vfprintf+0x366>
    1890:	33 20       	and	r3, r3
    1892:	09 f4       	brne	.+2      	; 0x1896 <vfprintf+0x382>
    1894:	51 ce       	rjmp	.-862    	; 0x1538 <vfprintf+0x24>
    1896:	b7 01       	movw	r22, r14
    1898:	80 e2       	ldi	r24, 0x20	; 32
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <fputc>
    18a0:	3a 94       	dec	r3
    18a2:	f6 cf       	rjmp	.-20     	; 0x1890 <vfprintf+0x37c>
    18a4:	f7 01       	movw	r30, r14
    18a6:	86 81       	ldd	r24, Z+6	; 0x06
    18a8:	97 81       	ldd	r25, Z+7	; 0x07
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <vfprintf+0x39c>
    18ac:	8f ef       	ldi	r24, 0xFF	; 255
    18ae:	9f ef       	ldi	r25, 0xFF	; 255
    18b0:	2c 96       	adiw	r28, 0x0c	; 12
    18b2:	e2 e1       	ldi	r30, 0x12	; 18
    18b4:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__epilogue_restores__>

000018b8 <strnlen_P>:
    18b8:	fc 01       	movw	r30, r24
    18ba:	05 90       	lpm	r0, Z+
    18bc:	61 50       	subi	r22, 0x01	; 1
    18be:	70 40       	sbci	r23, 0x00	; 0
    18c0:	01 10       	cpse	r0, r1
    18c2:	d8 f7       	brcc	.-10     	; 0x18ba <strnlen_P+0x2>
    18c4:	80 95       	com	r24
    18c6:	90 95       	com	r25
    18c8:	8e 0f       	add	r24, r30
    18ca:	9f 1f       	adc	r25, r31
    18cc:	08 95       	ret

000018ce <strnlen>:
    18ce:	fc 01       	movw	r30, r24
    18d0:	61 50       	subi	r22, 0x01	; 1
    18d2:	70 40       	sbci	r23, 0x00	; 0
    18d4:	01 90       	ld	r0, Z+
    18d6:	01 10       	cpse	r0, r1
    18d8:	d8 f7       	brcc	.-10     	; 0x18d0 <strnlen+0x2>
    18da:	80 95       	com	r24
    18dc:	90 95       	com	r25
    18de:	8e 0f       	add	r24, r30
    18e0:	9f 1f       	adc	r25, r31
    18e2:	08 95       	ret

000018e4 <fputc>:
    18e4:	0f 93       	push	r16
    18e6:	1f 93       	push	r17
    18e8:	cf 93       	push	r28
    18ea:	df 93       	push	r29
    18ec:	18 2f       	mov	r17, r24
    18ee:	09 2f       	mov	r16, r25
    18f0:	eb 01       	movw	r28, r22
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	81 fd       	sbrc	r24, 1
    18f6:	03 c0       	rjmp	.+6      	; 0x18fe <fputc+0x1a>
    18f8:	8f ef       	ldi	r24, 0xFF	; 255
    18fa:	9f ef       	ldi	r25, 0xFF	; 255
    18fc:	20 c0       	rjmp	.+64     	; 0x193e <fputc+0x5a>
    18fe:	82 ff       	sbrs	r24, 2
    1900:	10 c0       	rjmp	.+32     	; 0x1922 <fputc+0x3e>
    1902:	4e 81       	ldd	r20, Y+6	; 0x06
    1904:	5f 81       	ldd	r21, Y+7	; 0x07
    1906:	2c 81       	ldd	r18, Y+4	; 0x04
    1908:	3d 81       	ldd	r19, Y+5	; 0x05
    190a:	42 17       	cp	r20, r18
    190c:	53 07       	cpc	r21, r19
    190e:	7c f4       	brge	.+30     	; 0x192e <fputc+0x4a>
    1910:	e8 81       	ld	r30, Y
    1912:	f9 81       	ldd	r31, Y+1	; 0x01
    1914:	9f 01       	movw	r18, r30
    1916:	2f 5f       	subi	r18, 0xFF	; 255
    1918:	3f 4f       	sbci	r19, 0xFF	; 255
    191a:	39 83       	std	Y+1, r19	; 0x01
    191c:	28 83       	st	Y, r18
    191e:	10 83       	st	Z, r17
    1920:	06 c0       	rjmp	.+12     	; 0x192e <fputc+0x4a>
    1922:	e8 85       	ldd	r30, Y+8	; 0x08
    1924:	f9 85       	ldd	r31, Y+9	; 0x09
    1926:	81 2f       	mov	r24, r17
    1928:	09 95       	icall
    192a:	89 2b       	or	r24, r25
    192c:	29 f7       	brne	.-54     	; 0x18f8 <fputc+0x14>
    192e:	2e 81       	ldd	r18, Y+6	; 0x06
    1930:	3f 81       	ldd	r19, Y+7	; 0x07
    1932:	2f 5f       	subi	r18, 0xFF	; 255
    1934:	3f 4f       	sbci	r19, 0xFF	; 255
    1936:	3f 83       	std	Y+7, r19	; 0x07
    1938:	2e 83       	std	Y+6, r18	; 0x06
    193a:	81 2f       	mov	r24, r17
    193c:	90 2f       	mov	r25, r16
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	1f 91       	pop	r17
    1944:	0f 91       	pop	r16
    1946:	08 95       	ret

00001948 <__ultoa_invert>:
    1948:	fa 01       	movw	r30, r20
    194a:	aa 27       	eor	r26, r26
    194c:	28 30       	cpi	r18, 0x08	; 8
    194e:	51 f1       	breq	.+84     	; 0x19a4 <__ultoa_invert+0x5c>
    1950:	20 31       	cpi	r18, 0x10	; 16
    1952:	81 f1       	breq	.+96     	; 0x19b4 <__ultoa_invert+0x6c>
    1954:	e8 94       	clt
    1956:	6f 93       	push	r22
    1958:	6e 7f       	andi	r22, 0xFE	; 254
    195a:	6e 5f       	subi	r22, 0xFE	; 254
    195c:	7f 4f       	sbci	r23, 0xFF	; 255
    195e:	8f 4f       	sbci	r24, 0xFF	; 255
    1960:	9f 4f       	sbci	r25, 0xFF	; 255
    1962:	af 4f       	sbci	r26, 0xFF	; 255
    1964:	b1 e0       	ldi	r27, 0x01	; 1
    1966:	3e d0       	rcall	.+124    	; 0x19e4 <__ultoa_invert+0x9c>
    1968:	b4 e0       	ldi	r27, 0x04	; 4
    196a:	3c d0       	rcall	.+120    	; 0x19e4 <__ultoa_invert+0x9c>
    196c:	67 0f       	add	r22, r23
    196e:	78 1f       	adc	r23, r24
    1970:	89 1f       	adc	r24, r25
    1972:	9a 1f       	adc	r25, r26
    1974:	a1 1d       	adc	r26, r1
    1976:	68 0f       	add	r22, r24
    1978:	79 1f       	adc	r23, r25
    197a:	8a 1f       	adc	r24, r26
    197c:	91 1d       	adc	r25, r1
    197e:	a1 1d       	adc	r26, r1
    1980:	6a 0f       	add	r22, r26
    1982:	71 1d       	adc	r23, r1
    1984:	81 1d       	adc	r24, r1
    1986:	91 1d       	adc	r25, r1
    1988:	a1 1d       	adc	r26, r1
    198a:	20 d0       	rcall	.+64     	; 0x19cc <__ultoa_invert+0x84>
    198c:	09 f4       	brne	.+2      	; 0x1990 <__ultoa_invert+0x48>
    198e:	68 94       	set
    1990:	3f 91       	pop	r19
    1992:	2a e0       	ldi	r18, 0x0A	; 10
    1994:	26 9f       	mul	r18, r22
    1996:	11 24       	eor	r1, r1
    1998:	30 19       	sub	r19, r0
    199a:	30 5d       	subi	r19, 0xD0	; 208
    199c:	31 93       	st	Z+, r19
    199e:	de f6       	brtc	.-74     	; 0x1956 <__ultoa_invert+0xe>
    19a0:	cf 01       	movw	r24, r30
    19a2:	08 95       	ret
    19a4:	46 2f       	mov	r20, r22
    19a6:	47 70       	andi	r20, 0x07	; 7
    19a8:	40 5d       	subi	r20, 0xD0	; 208
    19aa:	41 93       	st	Z+, r20
    19ac:	b3 e0       	ldi	r27, 0x03	; 3
    19ae:	0f d0       	rcall	.+30     	; 0x19ce <__ultoa_invert+0x86>
    19b0:	c9 f7       	brne	.-14     	; 0x19a4 <__ultoa_invert+0x5c>
    19b2:	f6 cf       	rjmp	.-20     	; 0x19a0 <__ultoa_invert+0x58>
    19b4:	46 2f       	mov	r20, r22
    19b6:	4f 70       	andi	r20, 0x0F	; 15
    19b8:	40 5d       	subi	r20, 0xD0	; 208
    19ba:	4a 33       	cpi	r20, 0x3A	; 58
    19bc:	18 f0       	brcs	.+6      	; 0x19c4 <__ultoa_invert+0x7c>
    19be:	49 5d       	subi	r20, 0xD9	; 217
    19c0:	31 fd       	sbrc	r19, 1
    19c2:	40 52       	subi	r20, 0x20	; 32
    19c4:	41 93       	st	Z+, r20
    19c6:	02 d0       	rcall	.+4      	; 0x19cc <__ultoa_invert+0x84>
    19c8:	a9 f7       	brne	.-22     	; 0x19b4 <__ultoa_invert+0x6c>
    19ca:	ea cf       	rjmp	.-44     	; 0x19a0 <__ultoa_invert+0x58>
    19cc:	b4 e0       	ldi	r27, 0x04	; 4
    19ce:	a6 95       	lsr	r26
    19d0:	97 95       	ror	r25
    19d2:	87 95       	ror	r24
    19d4:	77 95       	ror	r23
    19d6:	67 95       	ror	r22
    19d8:	ba 95       	dec	r27
    19da:	c9 f7       	brne	.-14     	; 0x19ce <__ultoa_invert+0x86>
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	61 05       	cpc	r22, r1
    19e0:	71 05       	cpc	r23, r1
    19e2:	08 95       	ret
    19e4:	9b 01       	movw	r18, r22
    19e6:	ac 01       	movw	r20, r24
    19e8:	0a 2e       	mov	r0, r26
    19ea:	06 94       	lsr	r0
    19ec:	57 95       	ror	r21
    19ee:	47 95       	ror	r20
    19f0:	37 95       	ror	r19
    19f2:	27 95       	ror	r18
    19f4:	ba 95       	dec	r27
    19f6:	c9 f7       	brne	.-14     	; 0x19ea <__ultoa_invert+0xa2>
    19f8:	62 0f       	add	r22, r18
    19fa:	73 1f       	adc	r23, r19
    19fc:	84 1f       	adc	r24, r20
    19fe:	95 1f       	adc	r25, r21
    1a00:	a0 1d       	adc	r26, r0
    1a02:	08 95       	ret

00001a04 <__prologue_saves__>:
    1a04:	2f 92       	push	r2
    1a06:	3f 92       	push	r3
    1a08:	4f 92       	push	r4
    1a0a:	5f 92       	push	r5
    1a0c:	6f 92       	push	r6
    1a0e:	7f 92       	push	r7
    1a10:	8f 92       	push	r8
    1a12:	9f 92       	push	r9
    1a14:	af 92       	push	r10
    1a16:	bf 92       	push	r11
    1a18:	cf 92       	push	r12
    1a1a:	df 92       	push	r13
    1a1c:	ef 92       	push	r14
    1a1e:	ff 92       	push	r15
    1a20:	0f 93       	push	r16
    1a22:	1f 93       	push	r17
    1a24:	cf 93       	push	r28
    1a26:	df 93       	push	r29
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
    1a2c:	ca 1b       	sub	r28, r26
    1a2e:	db 0b       	sbc	r29, r27
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	f8 94       	cli
    1a34:	de bf       	out	0x3e, r29	; 62
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	cd bf       	out	0x3d, r28	; 61
    1a3a:	09 94       	ijmp

00001a3c <__epilogue_restores__>:
    1a3c:	2a 88       	ldd	r2, Y+18	; 0x12
    1a3e:	39 88       	ldd	r3, Y+17	; 0x11
    1a40:	48 88       	ldd	r4, Y+16	; 0x10
    1a42:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a44:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a46:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a48:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a4a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a4c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a4e:	b9 84       	ldd	r11, Y+9	; 0x09
    1a50:	c8 84       	ldd	r12, Y+8	; 0x08
    1a52:	df 80       	ldd	r13, Y+7	; 0x07
    1a54:	ee 80       	ldd	r14, Y+6	; 0x06
    1a56:	fd 80       	ldd	r15, Y+5	; 0x05
    1a58:	0c 81       	ldd	r16, Y+4	; 0x04
    1a5a:	1b 81       	ldd	r17, Y+3	; 0x03
    1a5c:	aa 81       	ldd	r26, Y+2	; 0x02
    1a5e:	b9 81       	ldd	r27, Y+1	; 0x01
    1a60:	ce 0f       	add	r28, r30
    1a62:	d1 1d       	adc	r29, r1
    1a64:	0f b6       	in	r0, 0x3f	; 63
    1a66:	f8 94       	cli
    1a68:	de bf       	out	0x3e, r29	; 62
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	cd bf       	out	0x3d, r28	; 61
    1a6e:	ed 01       	movw	r28, r26
    1a70:	08 95       	ret

00001a72 <_exit>:
    1a72:	f8 94       	cli

00001a74 <__stop_program>:
    1a74:	ff cf       	rjmp	.-2      	; 0x1a74 <__stop_program>
