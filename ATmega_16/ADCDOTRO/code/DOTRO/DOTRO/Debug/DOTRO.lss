
DOTRO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000920  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000252  00800060  00000920  00000994  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00000be6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000068  00000000  00000000  00000c42  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000764  00000000  00000000  00000caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000023f  00000000  00000000  0000140e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000028e  00000000  00000000  0000164d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000012c  00000000  00000000  000018dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001d6  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000466  00000000  00000000  00001bde  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000058  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3b       	cpi	r26, 0xB2	; 178
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a2 eb       	ldi	r26, 0xB2	; 178
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3b       	cpi	r26, 0xB2	; 178
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <main>
  8a:	0c 94 8e 04 	jmp	0x91c	; 0x91c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_write>:
	,{255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 249, 240, 245, 255, 248, 250, 248, 248, 249, 254, 224, 199, 205, 204, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 204, 205, 198, 240, 254, 249, 249, 248, 249, 252, 255, 244, 240, 249, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}
	,{}							
*/};
void lcd_write(int cd, char byte)//SPI 4Line
{
	clrb(LCD_PORT,CS);
  92:	94 98       	cbi	0x12, 4	; 18
	if(cd)
  94:	89 2b       	or	r24, r25
  96:	11 f0       	breq	.+4      	; 0x9c <lcd_write+0xa>
	setb(LCD_PORT,AO);
  98:	96 9a       	sbi	0x12, 6	; 18
  9a:	13 c0       	rjmp	.+38     	; 0xc2 <lcd_write+0x30>
	else
	clrb(LCD_PORT,AO);
  9c:	96 98       	cbi	0x12, 6	; 18
  9e:	11 c0       	rjmp	.+34     	; 0xc2 <lcd_write+0x30>
	for(int h=0;h<8;h++)
	{
		if(!(byte&0x80))
  a0:	66 23       	and	r22, r22
  a2:	14 f0       	brlt	.+4      	; 0xa8 <lcd_write+0x16>
		clrb(LCD_PORT,SDA);
  a4:	95 98       	cbi	0x12, 5	; 18
  a6:	01 c0       	rjmp	.+2      	; 0xaa <lcd_write+0x18>
		else
		setb(LCD_PORT,SDA);
  a8:	95 9a       	sbi	0x12, 5	; 18
		clrb(LCD_PORT,SCK);
  aa:	97 98       	cbi	0x12, 7	; 18
		setb(LCD_PORT,SCK);
  ac:	97 9a       	sbi	0x12, 7	; 18
		byte<<=1;
  ae:	66 0f       	add	r22, r22
  b0:	01 97       	sbiw	r24, 0x01	; 1
	clrb(LCD_PORT,CS);
	if(cd)
	setb(LCD_PORT,AO);
	else
	clrb(LCD_PORT,AO);
	for(int h=0;h<8;h++)
  b2:	00 97       	sbiw	r24, 0x00	; 0
  b4:	a9 f7       	brne	.-22     	; 0xa0 <lcd_write+0xe>
		setb(LCD_PORT,SDA);
		clrb(LCD_PORT,SCK);
		setb(LCD_PORT,SCK);
		byte<<=1;
	}
	daobit(LCD_PORT,AO);
  b6:	92 b3       	in	r25, 0x12	; 18
  b8:	80 e4       	ldi	r24, 0x40	; 64
  ba:	89 27       	eor	r24, r25
  bc:	82 bb       	out	0x12, r24	; 18
	clrb(LCD_PORT,CS);
  be:	94 98       	cbi	0x12, 4	; 18
  c0:	08 95       	ret
	,{255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 159, 159, 159, 30, 60, 253, 250, 114, 245, 165, 171, 171, 87, 87, 47, 175, 175, 87, 87, 87, 171, 171, 165, 117, 114, 248, 253, 60, 158, 159, 159, 159, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}
	,{255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 249, 240, 245, 255, 248, 250, 248, 248, 249, 254, 224, 199, 205, 204, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 204, 205, 198, 240, 254, 249, 249, 248, 249, 252, 255, 244, 240, 249, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}
	,{}							
*/};
void lcd_write(int cd, char byte)//SPI 4Line
{
  c2:	88 e0       	ldi	r24, 0x08	; 8
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	ec cf       	rjmp	.-40     	; 0xa0 <lcd_write+0xe>

000000c8 <move_LCD>:
	}
	daobit(LCD_PORT,AO);
	clrb(LCD_PORT,CS);
}
void move_LCD(unsigned char x, unsigned char y)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	d8 2f       	mov	r29, r24
	y--;
  ce:	61 50       	subi	r22, 0x01	; 1
	x--;
	y=y*6;//Graphic Mode thi xoa dong nay di, Text thi de lai
  d0:	c6 2f       	mov	r28, r22
  d2:	cc 0f       	add	r28, r28
  d4:	c6 0f       	add	r28, r22
  d6:	cc 0f       	add	r28, r28
	lcd_write(0,(y&0x0f));
  d8:	6c 2f       	mov	r22, r28
  da:	6f 70       	andi	r22, 0x0F	; 15
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
	lcd_write(0,((y>>4)&0x07)|0x10);
  e4:	6c 2f       	mov	r22, r28
  e6:	62 95       	swap	r22
  e8:	6f 70       	andi	r22, 0x0F	; 15
  ea:	67 70       	andi	r22, 0x07	; 7
  ec:	60 61       	ori	r22, 0x10	; 16
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
	clrb(LCD_PORT,CS);
}
void move_LCD(unsigned char x, unsigned char y)
{
	y--;
	x--;
  f6:	6f ef       	ldi	r22, 0xFF	; 255
  f8:	6d 0f       	add	r22, r29
	y=y*6;//Graphic Mode thi xoa dong nay di, Text thi de lai
	lcd_write(0,(y&0x0f));
	lcd_write(0,((y>>4)&0x07)|0x10);
	lcd_write(0,(x&0x0f)|0xb0);
  fa:	6f 70       	andi	r22, 0x0F	; 15
  fc:	60 6b       	ori	r22, 0xB0	; 176
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <clr_LCD>:
void clr_LCD()
{
 10c:	ff 92       	push	r15
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	11 e0       	ldi	r17, 0x01	; 1
	for(int u=0;u<8;u++)
	{
		move_LCD(u+1,1);
 118:	0f 2e       	mov	r0, r31
 11a:	f2 e8       	ldi	r31, 0x82	; 130
 11c:	ff 2e       	mov	r15, r31
 11e:	f0 2d       	mov	r31, r0
 120:	00 e0       	ldi	r16, 0x00	; 0
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	81 2f       	mov	r24, r17
 126:	0e 94 64 00 	call	0xc8	; 0xc8 <move_LCD>
 12a:	cf 2d       	mov	r28, r15
 12c:	d0 2f       	mov	r29, r16
		for(int w=0;w<130;w++)
		{
			lcd_write(1,0);
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
 138:	21 97       	sbiw	r28, 0x01	; 1
void clr_LCD()
{
	for(int u=0;u<8;u++)
	{
		move_LCD(u+1,1);
		for(int w=0;w<130;w++)
 13a:	20 97       	sbiw	r28, 0x00	; 0
 13c:	c1 f7       	brne	.-16     	; 0x12e <clr_LCD+0x22>
 13e:	1f 5f       	subi	r17, 0xFF	; 255
	lcd_write(0,((y>>4)&0x07)|0x10);
	lcd_write(0,(x&0x0f)|0xb0);
}
void clr_LCD()
{
	for(int u=0;u<8;u++)
 140:	19 30       	cpi	r17, 0x09	; 9
 142:	79 f7       	brne	.-34     	; 0x122 <clr_LCD+0x16>
		for(int w=0;w<130;w++)
		{
			lcd_write(1,0);
		}
	}
	move_LCD(1,1);
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	0e 94 64 00 	call	0xc8	; 0xc8 <move_LCD>
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	1f 91       	pop	r17
 152:	0f 91       	pop	r16
 154:	ff 90       	pop	r15
 156:	08 95       	ret

00000158 <lcd_putchar>:
void lcd_putchar(char dat)
{
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
	if((dat >= 0x20) && (dat <= 0x7f))
 160:	80 52       	subi	r24, 0x20	; 32
 162:	80 36       	cpi	r24, 0x60	; 96
 164:	c0 f4       	brcc	.+48     	; 0x196 <lcd_putchar+0x3e>
	{
		dat=dat-32;
		for(int v=0;v<6;v++)
		lcd_write(1, font[dat][v]);
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	8c 01       	movw	r16, r24
 16a:	00 0f       	add	r16, r16
 16c:	11 1f       	adc	r17, r17
 16e:	80 0f       	add	r24, r16
 170:	91 1f       	adc	r25, r17
 172:	8c 01       	movw	r16, r24
 174:	00 0f       	add	r16, r16
 176:	11 1f       	adc	r17, r17
 178:	00 5a       	subi	r16, 0xA0	; 160
 17a:	1f 4f       	sbci	r17, 0xFF	; 255
 17c:	c0 e0       	ldi	r28, 0x00	; 0
 17e:	d0 e0       	ldi	r29, 0x00	; 0
 180:	f8 01       	movw	r30, r16
 182:	61 91       	ld	r22, Z+
 184:	8f 01       	movw	r16, r30
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
void lcd_putchar(char dat)
{
	if((dat >= 0x20) && (dat <= 0x7f))
	{
		dat=dat-32;
		for(int v=0;v<6;v++)
 18e:	21 96       	adiw	r28, 0x01	; 1
 190:	c6 30       	cpi	r28, 0x06	; 6
 192:	d1 05       	cpc	r29, r1
 194:	a9 f7       	brne	.-22     	; 0x180 <lcd_putchar+0x28>
		lcd_write(1, font[dat][v]);
	}
}
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	1f 91       	pop	r17
 19c:	0f 91       	pop	r16
 19e:	08 95       	ret

000001a0 <print_LCD>:
void print_LCD(char *s)
{
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	ec 01       	movw	r28, r24
	while(*s)
 1a6:	88 81       	ld	r24, Y
 1a8:	88 23       	and	r24, r24
 1aa:	31 f0       	breq	.+12     	; 0x1b8 <print_LCD+0x18>
 1ac:	21 96       	adiw	r28, 0x01	; 1
	lcd_putchar(*s++);
 1ae:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_putchar>
		lcd_write(1, font[dat][v]);
	}
}
void print_LCD(char *s)
{
	while(*s)
 1b2:	89 91       	ld	r24, Y+
 1b4:	81 11       	cpse	r24, r1
 1b6:	fb cf       	rjmp	.-10     	; 0x1ae <print_LCD+0xe>
	lcd_putchar(*s++);
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <init_LCD>:
void init_LCD()//Khoi tao GLCD
{
	LCD_DDR=0xFF;
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	81 bb       	out	0x11, r24	; 17
	lcd_write(0,0xE2); //Reset
 1c2:	62 ee       	ldi	r22, 0xE2	; 226
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1cc:	2f ef       	ldi	r18, 0xFF	; 255
 1ce:	80 e7       	ldi	r24, 0x70	; 112
 1d0:	92 e0       	ldi	r25, 0x02	; 2
 1d2:	21 50       	subi	r18, 0x01	; 1
 1d4:	80 40       	sbci	r24, 0x00	; 0
 1d6:	90 40       	sbci	r25, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <init_LCD+0x14>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <init_LCD+0x1e>
 1dc:	00 00       	nop
	_delay_ms(100);	   //Delay 100ms
	lcd_write(0,0xAF); //Display ON, 0xAE - OFF
 1de:	6f ea       	ldi	r22, 0xAF	; 175
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
	lcd_write(0,0x2F); //Power control
 1e8:	6f e2       	ldi	r22, 0x2F	; 47
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
	clr_LCD(); //Xoa man hinh
 1f2:	0e 94 86 00 	call	0x10c	; 0x10c <clr_LCD>
 1f6:	08 95       	ret

000001f8 <vietso_LCD>:
}
void vietso_LCD(int num)
{
 1f8:	0f 93       	push	r16
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	00 d0       	rcall	.+0      	; 0x202 <vietso_LCD+0xa>
 202:	00 d0       	rcall	.+0      	; 0x204 <vietso_LCD+0xc>
 204:	1f 92       	push	r1
 206:	cd b7       	in	r28, 0x3d	; 61
 208:	de b7       	in	r29, 0x3e	; 62
	char dis[5];
	sprintf(dis, "%i", num);
 20a:	9f 93       	push	r25
 20c:	8f 93       	push	r24
 20e:	80 ea       	ldi	r24, 0xA0	; 160
 210:	92 e0       	ldi	r25, 0x02	; 2
 212:	9f 93       	push	r25
 214:	8f 93       	push	r24
 216:	8e 01       	movw	r16, r28
 218:	0f 5f       	subi	r16, 0xFF	; 255
 21a:	1f 4f       	sbci	r17, 0xFF	; 255
 21c:	1f 93       	push	r17
 21e:	0f 93       	push	r16
 220:	0e 94 bd 01 	call	0x37a	; 0x37a <sprintf>
	print_LCD(dis);
 224:	c8 01       	movw	r24, r16
 226:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <print_LCD>
 22a:	0f 90       	pop	r0
 22c:	0f 90       	pop	r0
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
}
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	0f 90       	pop	r0
 23e:	0f 90       	pop	r0
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	08 95       	ret

0000024a <mabat>:
#define daobit(thanhghi,bit) thanhghi=(thanhghi^(1<<bit))
#include "E:\AVR\Header\myLCD_HP.h"
int so[]={'0','1','2','3','4','5','6','7','8','9'};
void mabat(int bin)
{
	if (bin==0)
 24a:	00 97       	sbiw	r24, 0x00	; 0
 24c:	31 f4       	brne	.+12     	; 0x25a <mabat+0x10>
	{
		clrb(ADMUX,MUX0);
 24e:	38 98       	cbi	0x07, 0	; 7
		clrb(ADMUX,MUX1);
 250:	39 98       	cbi	0x07, 1	; 7
		clrb(ADMUX,MUX2);
 252:	3a 98       	cbi	0x07, 2	; 7
		clrb(ADMUX,MUX3);
 254:	3b 98       	cbi	0x07, 3	; 7
		clrb(ADMUX,MUX4);
 256:	3c 98       	cbi	0x07, 4	; 7
 258:	08 95       	ret
	}
	else if (bin==1)
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	91 05       	cpc	r25, r1
 25e:	31 f4       	brne	.+12     	; 0x26c <mabat+0x22>
	{
		setb(ADMUX,MUX0);
 260:	38 9a       	sbi	0x07, 0	; 7
		clrb(ADMUX,MUX1);
 262:	39 98       	cbi	0x07, 1	; 7
		clrb(ADMUX,MUX2);
 264:	3a 98       	cbi	0x07, 2	; 7
		clrb(ADMUX,MUX3);
 266:	3b 98       	cbi	0x07, 3	; 7
		clrb(ADMUX,MUX4);
 268:	3c 98       	cbi	0x07, 4	; 7
 26a:	08 95       	ret
	}
	else if (bin==2)
 26c:	82 30       	cpi	r24, 0x02	; 2
 26e:	91 05       	cpc	r25, r1
 270:	31 f4       	brne	.+12     	; 0x27e <mabat+0x34>
	{
		clrb(ADMUX,MUX0);
 272:	38 98       	cbi	0x07, 0	; 7
		setb(ADMUX,MUX1);
 274:	39 9a       	sbi	0x07, 1	; 7
		clrb(ADMUX,MUX2);
 276:	3a 98       	cbi	0x07, 2	; 7
		clrb(ADMUX,MUX3);
 278:	3b 98       	cbi	0x07, 3	; 7
		clrb(ADMUX,MUX4);
 27a:	3c 98       	cbi	0x07, 4	; 7
 27c:	08 95       	ret
	}
	else if (bin==3)
 27e:	83 30       	cpi	r24, 0x03	; 3
 280:	91 05       	cpc	r25, r1
 282:	31 f4       	brne	.+12     	; 0x290 <mabat+0x46>
	{
		setb(ADMUX,MUX0);
 284:	38 9a       	sbi	0x07, 0	; 7
		setb(ADMUX,MUX1);
 286:	39 9a       	sbi	0x07, 1	; 7
		clrb(ADMUX,MUX2);
 288:	3a 98       	cbi	0x07, 2	; 7
		clrb(ADMUX,MUX3);
 28a:	3b 98       	cbi	0x07, 3	; 7
		clrb(ADMUX,MUX4);
 28c:	3c 98       	cbi	0x07, 4	; 7
 28e:	08 95       	ret
	}
	else if (bin==4)
 290:	84 30       	cpi	r24, 0x04	; 4
 292:	91 05       	cpc	r25, r1
 294:	31 f4       	brne	.+12     	; 0x2a2 <mabat+0x58>
	{
		clrb(ADMUX,MUX0);
 296:	38 98       	cbi	0x07, 0	; 7
		clrb(ADMUX,MUX1);
 298:	39 98       	cbi	0x07, 1	; 7
		setb(ADMUX,MUX2);
 29a:	3a 9a       	sbi	0x07, 2	; 7
		clrb(ADMUX,MUX3);
 29c:	3b 98       	cbi	0x07, 3	; 7
		clrb(ADMUX,MUX4);
 29e:	3c 98       	cbi	0x07, 4	; 7
 2a0:	08 95       	ret
	}
	else if (bin==5)
 2a2:	85 30       	cpi	r24, 0x05	; 5
 2a4:	91 05       	cpc	r25, r1
 2a6:	31 f4       	brne	.+12     	; 0x2b4 <mabat+0x6a>
	{
		setb(ADMUX,MUX0);
 2a8:	38 9a       	sbi	0x07, 0	; 7
		clrb(ADMUX,MUX1);
 2aa:	39 98       	cbi	0x07, 1	; 7
		setb(ADMUX,MUX2);
 2ac:	3a 9a       	sbi	0x07, 2	; 7
		clrb(ADMUX,MUX3);
 2ae:	3b 98       	cbi	0x07, 3	; 7
		clrb(ADMUX,MUX4);
 2b0:	3c 98       	cbi	0x07, 4	; 7
 2b2:	08 95       	ret
	}
	else if (bin==6)
 2b4:	86 30       	cpi	r24, 0x06	; 6
 2b6:	91 05       	cpc	r25, r1
 2b8:	31 f4       	brne	.+12     	; 0x2c6 <mabat+0x7c>
	{
		clrb(ADMUX,MUX0);
 2ba:	38 98       	cbi	0x07, 0	; 7
		setb(ADMUX,MUX1);
 2bc:	39 9a       	sbi	0x07, 1	; 7
		setb(ADMUX,MUX2);
 2be:	3a 9a       	sbi	0x07, 2	; 7
		clrb(ADMUX,MUX3);
 2c0:	3b 98       	cbi	0x07, 3	; 7
		clrb(ADMUX,MUX4);
 2c2:	3c 98       	cbi	0x07, 4	; 7
 2c4:	08 95       	ret
	}
	else if (bin==7)
 2c6:	07 97       	sbiw	r24, 0x07	; 7
 2c8:	29 f4       	brne	.+10     	; 0x2d4 <mabat+0x8a>
	{
		setb(ADMUX,MUX0);
 2ca:	38 9a       	sbi	0x07, 0	; 7
		setb(ADMUX,MUX1);
 2cc:	39 9a       	sbi	0x07, 1	; 7
		setb(ADMUX,MUX2);
 2ce:	3a 9a       	sbi	0x07, 2	; 7
		clrb(ADMUX,MUX3);
 2d0:	3b 98       	cbi	0x07, 3	; 7
		clrb(ADMUX,MUX4);
 2d2:	3c 98       	cbi	0x07, 4	; 7
 2d4:	08 95       	ret

000002d6 <main>:
	}
}
int main(void)
{
	DDRC=0xff;
 2d6:	8f ef       	ldi	r24, 0xFF	; 255
 2d8:	84 bb       	out	0x14, r24	; 20
	DDRD=0xff;
 2da:	81 bb       	out	0x11, r24	; 17
	init_LCD();
 2dc:	0e 94 df 00 	call	0x1be	; 0x1be <init_LCD>
    clr_LCD();
 2e0:	0e 94 86 00 	call	0x10c	; 0x10c <clr_LCD>
	setb(ADMUX,REFS0);
 2e4:	3e 9a       	sbi	0x07, 6	; 7
    //setb(ADMUX,MUX0);
    setb(ADCSRA,ADPS2);
 2e6:	32 9a       	sbi	0x06, 2	; 6
    setb(ADCSRA,ADEN);
 2e8:	37 9a       	sbi	0x06, 7	; 6
	while(1)
    {
		//home_LCD();
		long gtadc;
		float r;
		mabat(0);
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 25 01 	call	0x24a	; 0x24a <mabat>
		setb(ADCSRA,ADSC);
 2f2:	36 9a       	sbi	0x06, 6	; 6
		while(inbit(ADCSRA,ADIF)==0);
 2f4:	34 9b       	sbis	0x06, 4	; 6
 2f6:	fe cf       	rjmp	.-4      	; 0x2f4 <main+0x1e>
		gtadc=ADCW;
 2f8:	c4 b1       	in	r28, 0x04	; 4
 2fa:	d5 b1       	in	r29, 0x05	; 5
		r=385*gtadc/(1023-gtadc);
		move_LCD(1,1);
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 64 00 	call	0xc8	; 0xc8 <move_LCD>
		print_LCD("X=");
 304:	83 ea       	ldi	r24, 0xA3	; 163
 306:	92 e0       	ldi	r25, 0x02	; 2
 308:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <print_LCD>
		vietso_LCD(gtadc);
 30c:	ce 01       	movw	r24, r28
 30e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <vietso_LCD>
 312:	8f e1       	ldi	r24, 0x1F	; 31
 314:	9e e4       	ldi	r25, 0x4E	; 78
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <main+0x40>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <main+0x46>
 31c:	00 00       	nop
		_delay_ms(10);
		mabat(1);
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 25 01 	call	0x24a	; 0x24a <mabat>
		setb(ADCSRA,ADSC);
 326:	36 9a       	sbi	0x06, 6	; 6
		while(inbit(ADCSRA,ADIF)==0);
 328:	34 9b       	sbis	0x06, 4	; 6
 32a:	fe cf       	rjmp	.-4      	; 0x328 <main+0x52>
		gtadc=ADCW;
 32c:	c4 b1       	in	r28, 0x04	; 4
 32e:	d5 b1       	in	r29, 0x05	; 5
		r=385*gtadc/(1023-gtadc);
		
		move_LCD(2,1);
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	0e 94 64 00 	call	0xc8	; 0xc8 <move_LCD>
		print_LCD("Y=");
 338:	86 ea       	ldi	r24, 0xA6	; 166
 33a:	92 e0       	ldi	r25, 0x02	; 2
 33c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <print_LCD>
		vietso_LCD(gtadc);
 340:	ce 01       	movw	r24, r28
 342:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <vietso_LCD>
 346:	9f ef       	ldi	r25, 0xFF	; 255
 348:	21 ee       	ldi	r18, 0xE1	; 225
 34a:	84 e0       	ldi	r24, 0x04	; 4
 34c:	91 50       	subi	r25, 0x01	; 1
 34e:	20 40       	sbci	r18, 0x00	; 0
 350:	80 40       	sbci	r24, 0x00	; 0
 352:	e1 f7       	brne	.-8      	; 0x34c <main+0x76>
 354:	00 c0       	rjmp	.+0      	; 0x356 <main+0x80>
 356:	00 00       	nop
		_delay_ms(200);
		move_LCD(1,1);
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	0e 94 64 00 	call	0xc8	; 0xc8 <move_LCD>
		print_LCD("       ");
 360:	89 ea       	ldi	r24, 0xA9	; 169
 362:	92 e0       	ldi	r25, 0x02	; 2
 364:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <print_LCD>
		move_LCD(2,1);
 368:	61 e0       	ldi	r22, 0x01	; 1
 36a:	82 e0       	ldi	r24, 0x02	; 2
 36c:	0e 94 64 00 	call	0xc8	; 0xc8 <move_LCD>
		print_LCD("       ");
 370:	89 ea       	ldi	r24, 0xA9	; 169
 372:	92 e0       	ldi	r25, 0x02	; 2
 374:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <print_LCD>
		
    }
 378:	b8 cf       	rjmp	.-144    	; 0x2ea <main+0x14>

0000037a <sprintf>:
 37a:	ae e0       	ldi	r26, 0x0E	; 14
 37c:	b0 e0       	ldi	r27, 0x00	; 0
 37e:	e3 ec       	ldi	r30, 0xC3	; 195
 380:	f1 e0       	ldi	r31, 0x01	; 1
 382:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__prologue_saves__+0x1c>
 386:	0d 89       	ldd	r16, Y+21	; 0x15
 388:	1e 89       	ldd	r17, Y+22	; 0x16
 38a:	86 e0       	ldi	r24, 0x06	; 6
 38c:	8c 83       	std	Y+4, r24	; 0x04
 38e:	1a 83       	std	Y+2, r17	; 0x02
 390:	09 83       	std	Y+1, r16	; 0x01
 392:	8f ef       	ldi	r24, 0xFF	; 255
 394:	9f e7       	ldi	r25, 0x7F	; 127
 396:	9e 83       	std	Y+6, r25	; 0x06
 398:	8d 83       	std	Y+5, r24	; 0x05
 39a:	ae 01       	movw	r20, r28
 39c:	47 5e       	subi	r20, 0xE7	; 231
 39e:	5f 4f       	sbci	r21, 0xFF	; 255
 3a0:	6f 89       	ldd	r22, Y+23	; 0x17
 3a2:	78 8d       	ldd	r23, Y+24	; 0x18
 3a4:	ce 01       	movw	r24, r28
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	0e 94 df 01 	call	0x3be	; 0x3be <vfprintf>
 3ac:	ef 81       	ldd	r30, Y+7	; 0x07
 3ae:	f8 85       	ldd	r31, Y+8	; 0x08
 3b0:	e0 0f       	add	r30, r16
 3b2:	f1 1f       	adc	r31, r17
 3b4:	10 82       	st	Z, r1
 3b6:	2e 96       	adiw	r28, 0x0e	; 14
 3b8:	e4 e0       	ldi	r30, 0x04	; 4
 3ba:	0c 94 81 04 	jmp	0x902	; 0x902 <__epilogue_restores__+0x1c>

000003be <vfprintf>:
 3be:	ac e0       	ldi	r26, 0x0C	; 12
 3c0:	b0 e0       	ldi	r27, 0x00	; 0
 3c2:	e5 ee       	ldi	r30, 0xE5	; 229
 3c4:	f1 e0       	ldi	r31, 0x01	; 1
 3c6:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__prologue_saves__>
 3ca:	7c 01       	movw	r14, r24
 3cc:	6b 01       	movw	r12, r22
 3ce:	8a 01       	movw	r16, r20
 3d0:	fc 01       	movw	r30, r24
 3d2:	17 82       	std	Z+7, r1	; 0x07
 3d4:	16 82       	std	Z+6, r1	; 0x06
 3d6:	83 81       	ldd	r24, Z+3	; 0x03
 3d8:	81 ff       	sbrs	r24, 1
 3da:	bd c1       	rjmp	.+890    	; 0x756 <__stack+0x2f7>
 3dc:	ce 01       	movw	r24, r28
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	4c 01       	movw	r8, r24
 3e2:	f7 01       	movw	r30, r14
 3e4:	93 81       	ldd	r25, Z+3	; 0x03
 3e6:	f6 01       	movw	r30, r12
 3e8:	93 fd       	sbrc	r25, 3
 3ea:	85 91       	lpm	r24, Z+
 3ec:	93 ff       	sbrs	r25, 3
 3ee:	81 91       	ld	r24, Z+
 3f0:	6f 01       	movw	r12, r30
 3f2:	88 23       	and	r24, r24
 3f4:	09 f4       	brne	.+2      	; 0x3f8 <vfprintf+0x3a>
 3f6:	ab c1       	rjmp	.+854    	; 0x74e <__stack+0x2ef>
 3f8:	85 32       	cpi	r24, 0x25	; 37
 3fa:	39 f4       	brne	.+14     	; 0x40a <vfprintf+0x4c>
 3fc:	93 fd       	sbrc	r25, 3
 3fe:	85 91       	lpm	r24, Z+
 400:	93 ff       	sbrs	r25, 3
 402:	81 91       	ld	r24, Z+
 404:	6f 01       	movw	r12, r30
 406:	85 32       	cpi	r24, 0x25	; 37
 408:	29 f4       	brne	.+10     	; 0x414 <vfprintf+0x56>
 40a:	b7 01       	movw	r22, r14
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	0e 94 c7 03 	call	0x78e	; 0x78e <fputc>
 412:	e7 cf       	rjmp	.-50     	; 0x3e2 <vfprintf+0x24>
 414:	51 2c       	mov	r5, r1
 416:	31 2c       	mov	r3, r1
 418:	20 e0       	ldi	r18, 0x00	; 0
 41a:	20 32       	cpi	r18, 0x20	; 32
 41c:	a0 f4       	brcc	.+40     	; 0x446 <vfprintf+0x88>
 41e:	8b 32       	cpi	r24, 0x2B	; 43
 420:	69 f0       	breq	.+26     	; 0x43c <vfprintf+0x7e>
 422:	30 f4       	brcc	.+12     	; 0x430 <vfprintf+0x72>
 424:	80 32       	cpi	r24, 0x20	; 32
 426:	59 f0       	breq	.+22     	; 0x43e <vfprintf+0x80>
 428:	83 32       	cpi	r24, 0x23	; 35
 42a:	69 f4       	brne	.+26     	; 0x446 <vfprintf+0x88>
 42c:	20 61       	ori	r18, 0x10	; 16
 42e:	2c c0       	rjmp	.+88     	; 0x488 <__stack+0x29>
 430:	8d 32       	cpi	r24, 0x2D	; 45
 432:	39 f0       	breq	.+14     	; 0x442 <vfprintf+0x84>
 434:	80 33       	cpi	r24, 0x30	; 48
 436:	39 f4       	brne	.+14     	; 0x446 <vfprintf+0x88>
 438:	21 60       	ori	r18, 0x01	; 1
 43a:	26 c0       	rjmp	.+76     	; 0x488 <__stack+0x29>
 43c:	22 60       	ori	r18, 0x02	; 2
 43e:	24 60       	ori	r18, 0x04	; 4
 440:	23 c0       	rjmp	.+70     	; 0x488 <__stack+0x29>
 442:	28 60       	ori	r18, 0x08	; 8
 444:	21 c0       	rjmp	.+66     	; 0x488 <__stack+0x29>
 446:	27 fd       	sbrc	r18, 7
 448:	27 c0       	rjmp	.+78     	; 0x498 <__stack+0x39>
 44a:	30 ed       	ldi	r19, 0xD0	; 208
 44c:	38 0f       	add	r19, r24
 44e:	3a 30       	cpi	r19, 0x0A	; 10
 450:	78 f4       	brcc	.+30     	; 0x470 <__stack+0x11>
 452:	26 ff       	sbrs	r18, 6
 454:	06 c0       	rjmp	.+12     	; 0x462 <__stack+0x3>
 456:	fa e0       	ldi	r31, 0x0A	; 10
 458:	5f 9e       	mul	r5, r31
 45a:	30 0d       	add	r19, r0
 45c:	11 24       	eor	r1, r1
 45e:	53 2e       	mov	r5, r19
 460:	13 c0       	rjmp	.+38     	; 0x488 <__stack+0x29>
 462:	8a e0       	ldi	r24, 0x0A	; 10
 464:	38 9e       	mul	r3, r24
 466:	30 0d       	add	r19, r0
 468:	11 24       	eor	r1, r1
 46a:	33 2e       	mov	r3, r19
 46c:	20 62       	ori	r18, 0x20	; 32
 46e:	0c c0       	rjmp	.+24     	; 0x488 <__stack+0x29>
 470:	8e 32       	cpi	r24, 0x2E	; 46
 472:	21 f4       	brne	.+8      	; 0x47c <__stack+0x1d>
 474:	26 fd       	sbrc	r18, 6
 476:	6b c1       	rjmp	.+726    	; 0x74e <__stack+0x2ef>
 478:	20 64       	ori	r18, 0x40	; 64
 47a:	06 c0       	rjmp	.+12     	; 0x488 <__stack+0x29>
 47c:	8c 36       	cpi	r24, 0x6C	; 108
 47e:	11 f4       	brne	.+4      	; 0x484 <__stack+0x25>
 480:	20 68       	ori	r18, 0x80	; 128
 482:	02 c0       	rjmp	.+4      	; 0x488 <__stack+0x29>
 484:	88 36       	cpi	r24, 0x68	; 104
 486:	41 f4       	brne	.+16     	; 0x498 <__stack+0x39>
 488:	f6 01       	movw	r30, r12
 48a:	93 fd       	sbrc	r25, 3
 48c:	85 91       	lpm	r24, Z+
 48e:	93 ff       	sbrs	r25, 3
 490:	81 91       	ld	r24, Z+
 492:	6f 01       	movw	r12, r30
 494:	81 11       	cpse	r24, r1
 496:	c1 cf       	rjmp	.-126    	; 0x41a <vfprintf+0x5c>
 498:	98 2f       	mov	r25, r24
 49a:	9f 7d       	andi	r25, 0xDF	; 223
 49c:	95 54       	subi	r25, 0x45	; 69
 49e:	93 30       	cpi	r25, 0x03	; 3
 4a0:	28 f4       	brcc	.+10     	; 0x4ac <__stack+0x4d>
 4a2:	0c 5f       	subi	r16, 0xFC	; 252
 4a4:	1f 4f       	sbci	r17, 0xFF	; 255
 4a6:	ff e3       	ldi	r31, 0x3F	; 63
 4a8:	f9 83       	std	Y+1, r31	; 0x01
 4aa:	0d c0       	rjmp	.+26     	; 0x4c6 <__stack+0x67>
 4ac:	83 36       	cpi	r24, 0x63	; 99
 4ae:	31 f0       	breq	.+12     	; 0x4bc <__stack+0x5d>
 4b0:	83 37       	cpi	r24, 0x73	; 115
 4b2:	71 f0       	breq	.+28     	; 0x4d0 <__stack+0x71>
 4b4:	83 35       	cpi	r24, 0x53	; 83
 4b6:	09 f0       	breq	.+2      	; 0x4ba <__stack+0x5b>
 4b8:	5b c0       	rjmp	.+182    	; 0x570 <__stack+0x111>
 4ba:	22 c0       	rjmp	.+68     	; 0x500 <__stack+0xa1>
 4bc:	f8 01       	movw	r30, r16
 4be:	80 81       	ld	r24, Z
 4c0:	89 83       	std	Y+1, r24	; 0x01
 4c2:	0e 5f       	subi	r16, 0xFE	; 254
 4c4:	1f 4f       	sbci	r17, 0xFF	; 255
 4c6:	44 24       	eor	r4, r4
 4c8:	43 94       	inc	r4
 4ca:	51 2c       	mov	r5, r1
 4cc:	54 01       	movw	r10, r8
 4ce:	15 c0       	rjmp	.+42     	; 0x4fa <__stack+0x9b>
 4d0:	38 01       	movw	r6, r16
 4d2:	f2 e0       	ldi	r31, 0x02	; 2
 4d4:	6f 0e       	add	r6, r31
 4d6:	71 1c       	adc	r7, r1
 4d8:	f8 01       	movw	r30, r16
 4da:	a0 80       	ld	r10, Z
 4dc:	b1 80       	ldd	r11, Z+1	; 0x01
 4de:	26 ff       	sbrs	r18, 6
 4e0:	03 c0       	rjmp	.+6      	; 0x4e8 <__stack+0x89>
 4e2:	65 2d       	mov	r22, r5
 4e4:	70 e0       	ldi	r23, 0x00	; 0
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <__stack+0x8d>
 4e8:	6f ef       	ldi	r22, 0xFF	; 255
 4ea:	7f ef       	ldi	r23, 0xFF	; 255
 4ec:	c5 01       	movw	r24, r10
 4ee:	2c 87       	std	Y+12, r18	; 0x0c
 4f0:	0e 94 bc 03 	call	0x778	; 0x778 <strnlen>
 4f4:	2c 01       	movw	r4, r24
 4f6:	83 01       	movw	r16, r6
 4f8:	2c 85       	ldd	r18, Y+12	; 0x0c
 4fa:	2f 77       	andi	r18, 0x7F	; 127
 4fc:	22 2e       	mov	r2, r18
 4fe:	17 c0       	rjmp	.+46     	; 0x52e <__stack+0xcf>
 500:	38 01       	movw	r6, r16
 502:	f2 e0       	ldi	r31, 0x02	; 2
 504:	6f 0e       	add	r6, r31
 506:	71 1c       	adc	r7, r1
 508:	f8 01       	movw	r30, r16
 50a:	a0 80       	ld	r10, Z
 50c:	b1 80       	ldd	r11, Z+1	; 0x01
 50e:	26 ff       	sbrs	r18, 6
 510:	03 c0       	rjmp	.+6      	; 0x518 <__stack+0xb9>
 512:	65 2d       	mov	r22, r5
 514:	70 e0       	ldi	r23, 0x00	; 0
 516:	02 c0       	rjmp	.+4      	; 0x51c <__stack+0xbd>
 518:	6f ef       	ldi	r22, 0xFF	; 255
 51a:	7f ef       	ldi	r23, 0xFF	; 255
 51c:	c5 01       	movw	r24, r10
 51e:	2c 87       	std	Y+12, r18	; 0x0c
 520:	0e 94 b1 03 	call	0x762	; 0x762 <strnlen_P>
 524:	2c 01       	movw	r4, r24
 526:	2c 85       	ldd	r18, Y+12	; 0x0c
 528:	20 68       	ori	r18, 0x80	; 128
 52a:	22 2e       	mov	r2, r18
 52c:	83 01       	movw	r16, r6
 52e:	23 fc       	sbrc	r2, 3
 530:	1b c0       	rjmp	.+54     	; 0x568 <__stack+0x109>
 532:	83 2d       	mov	r24, r3
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	48 16       	cp	r4, r24
 538:	59 06       	cpc	r5, r25
 53a:	b0 f4       	brcc	.+44     	; 0x568 <__stack+0x109>
 53c:	b7 01       	movw	r22, r14
 53e:	80 e2       	ldi	r24, 0x20	; 32
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	0e 94 c7 03 	call	0x78e	; 0x78e <fputc>
 546:	3a 94       	dec	r3
 548:	f4 cf       	rjmp	.-24     	; 0x532 <__stack+0xd3>
 54a:	f5 01       	movw	r30, r10
 54c:	27 fc       	sbrc	r2, 7
 54e:	85 91       	lpm	r24, Z+
 550:	27 fe       	sbrs	r2, 7
 552:	81 91       	ld	r24, Z+
 554:	5f 01       	movw	r10, r30
 556:	b7 01       	movw	r22, r14
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	0e 94 c7 03 	call	0x78e	; 0x78e <fputc>
 55e:	31 10       	cpse	r3, r1
 560:	3a 94       	dec	r3
 562:	f1 e0       	ldi	r31, 0x01	; 1
 564:	4f 1a       	sub	r4, r31
 566:	51 08       	sbc	r5, r1
 568:	41 14       	cp	r4, r1
 56a:	51 04       	cpc	r5, r1
 56c:	71 f7       	brne	.-36     	; 0x54a <__stack+0xeb>
 56e:	e5 c0       	rjmp	.+458    	; 0x73a <__stack+0x2db>
 570:	84 36       	cpi	r24, 0x64	; 100
 572:	11 f0       	breq	.+4      	; 0x578 <__stack+0x119>
 574:	89 36       	cpi	r24, 0x69	; 105
 576:	39 f5       	brne	.+78     	; 0x5c6 <__stack+0x167>
 578:	f8 01       	movw	r30, r16
 57a:	27 ff       	sbrs	r18, 7
 57c:	07 c0       	rjmp	.+14     	; 0x58c <__stack+0x12d>
 57e:	60 81       	ld	r22, Z
 580:	71 81       	ldd	r23, Z+1	; 0x01
 582:	82 81       	ldd	r24, Z+2	; 0x02
 584:	93 81       	ldd	r25, Z+3	; 0x03
 586:	0c 5f       	subi	r16, 0xFC	; 252
 588:	1f 4f       	sbci	r17, 0xFF	; 255
 58a:	08 c0       	rjmp	.+16     	; 0x59c <__stack+0x13d>
 58c:	60 81       	ld	r22, Z
 58e:	71 81       	ldd	r23, Z+1	; 0x01
 590:	88 27       	eor	r24, r24
 592:	77 fd       	sbrc	r23, 7
 594:	80 95       	com	r24
 596:	98 2f       	mov	r25, r24
 598:	0e 5f       	subi	r16, 0xFE	; 254
 59a:	1f 4f       	sbci	r17, 0xFF	; 255
 59c:	2f 76       	andi	r18, 0x6F	; 111
 59e:	b2 2e       	mov	r11, r18
 5a0:	97 ff       	sbrs	r25, 7
 5a2:	09 c0       	rjmp	.+18     	; 0x5b6 <__stack+0x157>
 5a4:	90 95       	com	r25
 5a6:	80 95       	com	r24
 5a8:	70 95       	com	r23
 5aa:	61 95       	neg	r22
 5ac:	7f 4f       	sbci	r23, 0xFF	; 255
 5ae:	8f 4f       	sbci	r24, 0xFF	; 255
 5b0:	9f 4f       	sbci	r25, 0xFF	; 255
 5b2:	20 68       	ori	r18, 0x80	; 128
 5b4:	b2 2e       	mov	r11, r18
 5b6:	2a e0       	ldi	r18, 0x0A	; 10
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	a4 01       	movw	r20, r8
 5bc:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__ultoa_invert>
 5c0:	a8 2e       	mov	r10, r24
 5c2:	a8 18       	sub	r10, r8
 5c4:	44 c0       	rjmp	.+136    	; 0x64e <__stack+0x1ef>
 5c6:	85 37       	cpi	r24, 0x75	; 117
 5c8:	29 f4       	brne	.+10     	; 0x5d4 <__stack+0x175>
 5ca:	2f 7e       	andi	r18, 0xEF	; 239
 5cc:	b2 2e       	mov	r11, r18
 5ce:	2a e0       	ldi	r18, 0x0A	; 10
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	25 c0       	rjmp	.+74     	; 0x61e <__stack+0x1bf>
 5d4:	f2 2f       	mov	r31, r18
 5d6:	f9 7f       	andi	r31, 0xF9	; 249
 5d8:	bf 2e       	mov	r11, r31
 5da:	8f 36       	cpi	r24, 0x6F	; 111
 5dc:	c1 f0       	breq	.+48     	; 0x60e <__stack+0x1af>
 5de:	18 f4       	brcc	.+6      	; 0x5e6 <__stack+0x187>
 5e0:	88 35       	cpi	r24, 0x58	; 88
 5e2:	79 f0       	breq	.+30     	; 0x602 <__stack+0x1a3>
 5e4:	b4 c0       	rjmp	.+360    	; 0x74e <__stack+0x2ef>
 5e6:	80 37       	cpi	r24, 0x70	; 112
 5e8:	19 f0       	breq	.+6      	; 0x5f0 <__stack+0x191>
 5ea:	88 37       	cpi	r24, 0x78	; 120
 5ec:	21 f0       	breq	.+8      	; 0x5f6 <__stack+0x197>
 5ee:	af c0       	rjmp	.+350    	; 0x74e <__stack+0x2ef>
 5f0:	2f 2f       	mov	r18, r31
 5f2:	20 61       	ori	r18, 0x10	; 16
 5f4:	b2 2e       	mov	r11, r18
 5f6:	b4 fe       	sbrs	r11, 4
 5f8:	0d c0       	rjmp	.+26     	; 0x614 <__stack+0x1b5>
 5fa:	8b 2d       	mov	r24, r11
 5fc:	84 60       	ori	r24, 0x04	; 4
 5fe:	b8 2e       	mov	r11, r24
 600:	09 c0       	rjmp	.+18     	; 0x614 <__stack+0x1b5>
 602:	24 ff       	sbrs	r18, 4
 604:	0a c0       	rjmp	.+20     	; 0x61a <__stack+0x1bb>
 606:	9f 2f       	mov	r25, r31
 608:	96 60       	ori	r25, 0x06	; 6
 60a:	b9 2e       	mov	r11, r25
 60c:	06 c0       	rjmp	.+12     	; 0x61a <__stack+0x1bb>
 60e:	28 e0       	ldi	r18, 0x08	; 8
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	05 c0       	rjmp	.+10     	; 0x61e <__stack+0x1bf>
 614:	20 e1       	ldi	r18, 0x10	; 16
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	02 c0       	rjmp	.+4      	; 0x61e <__stack+0x1bf>
 61a:	20 e1       	ldi	r18, 0x10	; 16
 61c:	32 e0       	ldi	r19, 0x02	; 2
 61e:	f8 01       	movw	r30, r16
 620:	b7 fe       	sbrs	r11, 7
 622:	07 c0       	rjmp	.+14     	; 0x632 <__stack+0x1d3>
 624:	60 81       	ld	r22, Z
 626:	71 81       	ldd	r23, Z+1	; 0x01
 628:	82 81       	ldd	r24, Z+2	; 0x02
 62a:	93 81       	ldd	r25, Z+3	; 0x03
 62c:	0c 5f       	subi	r16, 0xFC	; 252
 62e:	1f 4f       	sbci	r17, 0xFF	; 255
 630:	06 c0       	rjmp	.+12     	; 0x63e <__stack+0x1df>
 632:	60 81       	ld	r22, Z
 634:	71 81       	ldd	r23, Z+1	; 0x01
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	0e 5f       	subi	r16, 0xFE	; 254
 63c:	1f 4f       	sbci	r17, 0xFF	; 255
 63e:	a4 01       	movw	r20, r8
 640:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__ultoa_invert>
 644:	a8 2e       	mov	r10, r24
 646:	a8 18       	sub	r10, r8
 648:	fb 2d       	mov	r31, r11
 64a:	ff 77       	andi	r31, 0x7F	; 127
 64c:	bf 2e       	mov	r11, r31
 64e:	b6 fe       	sbrs	r11, 6
 650:	0b c0       	rjmp	.+22     	; 0x668 <__stack+0x209>
 652:	2b 2d       	mov	r18, r11
 654:	2e 7f       	andi	r18, 0xFE	; 254
 656:	a5 14       	cp	r10, r5
 658:	50 f4       	brcc	.+20     	; 0x66e <__stack+0x20f>
 65a:	b4 fe       	sbrs	r11, 4
 65c:	0a c0       	rjmp	.+20     	; 0x672 <__stack+0x213>
 65e:	b2 fc       	sbrc	r11, 2
 660:	08 c0       	rjmp	.+16     	; 0x672 <__stack+0x213>
 662:	2b 2d       	mov	r18, r11
 664:	2e 7e       	andi	r18, 0xEE	; 238
 666:	05 c0       	rjmp	.+10     	; 0x672 <__stack+0x213>
 668:	7a 2c       	mov	r7, r10
 66a:	2b 2d       	mov	r18, r11
 66c:	03 c0       	rjmp	.+6      	; 0x674 <__stack+0x215>
 66e:	7a 2c       	mov	r7, r10
 670:	01 c0       	rjmp	.+2      	; 0x674 <__stack+0x215>
 672:	75 2c       	mov	r7, r5
 674:	24 ff       	sbrs	r18, 4
 676:	0d c0       	rjmp	.+26     	; 0x692 <__stack+0x233>
 678:	fe 01       	movw	r30, r28
 67a:	ea 0d       	add	r30, r10
 67c:	f1 1d       	adc	r31, r1
 67e:	80 81       	ld	r24, Z
 680:	80 33       	cpi	r24, 0x30	; 48
 682:	11 f4       	brne	.+4      	; 0x688 <__stack+0x229>
 684:	29 7e       	andi	r18, 0xE9	; 233
 686:	09 c0       	rjmp	.+18     	; 0x69a <__stack+0x23b>
 688:	22 ff       	sbrs	r18, 2
 68a:	06 c0       	rjmp	.+12     	; 0x698 <__stack+0x239>
 68c:	73 94       	inc	r7
 68e:	73 94       	inc	r7
 690:	04 c0       	rjmp	.+8      	; 0x69a <__stack+0x23b>
 692:	82 2f       	mov	r24, r18
 694:	86 78       	andi	r24, 0x86	; 134
 696:	09 f0       	breq	.+2      	; 0x69a <__stack+0x23b>
 698:	73 94       	inc	r7
 69a:	23 fd       	sbrc	r18, 3
 69c:	13 c0       	rjmp	.+38     	; 0x6c4 <__stack+0x265>
 69e:	20 ff       	sbrs	r18, 0
 6a0:	06 c0       	rjmp	.+12     	; 0x6ae <__stack+0x24f>
 6a2:	5a 2c       	mov	r5, r10
 6a4:	73 14       	cp	r7, r3
 6a6:	18 f4       	brcc	.+6      	; 0x6ae <__stack+0x24f>
 6a8:	53 0c       	add	r5, r3
 6aa:	57 18       	sub	r5, r7
 6ac:	73 2c       	mov	r7, r3
 6ae:	73 14       	cp	r7, r3
 6b0:	68 f4       	brcc	.+26     	; 0x6cc <__stack+0x26d>
 6b2:	b7 01       	movw	r22, r14
 6b4:	80 e2       	ldi	r24, 0x20	; 32
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	2c 87       	std	Y+12, r18	; 0x0c
 6ba:	0e 94 c7 03 	call	0x78e	; 0x78e <fputc>
 6be:	73 94       	inc	r7
 6c0:	2c 85       	ldd	r18, Y+12	; 0x0c
 6c2:	f5 cf       	rjmp	.-22     	; 0x6ae <__stack+0x24f>
 6c4:	73 14       	cp	r7, r3
 6c6:	10 f4       	brcc	.+4      	; 0x6cc <__stack+0x26d>
 6c8:	37 18       	sub	r3, r7
 6ca:	01 c0       	rjmp	.+2      	; 0x6ce <__stack+0x26f>
 6cc:	31 2c       	mov	r3, r1
 6ce:	24 ff       	sbrs	r18, 4
 6d0:	12 c0       	rjmp	.+36     	; 0x6f6 <__stack+0x297>
 6d2:	b7 01       	movw	r22, r14
 6d4:	80 e3       	ldi	r24, 0x30	; 48
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	2c 87       	std	Y+12, r18	; 0x0c
 6da:	0e 94 c7 03 	call	0x78e	; 0x78e <fputc>
 6de:	2c 85       	ldd	r18, Y+12	; 0x0c
 6e0:	22 ff       	sbrs	r18, 2
 6e2:	17 c0       	rjmp	.+46     	; 0x712 <__stack+0x2b3>
 6e4:	21 ff       	sbrs	r18, 1
 6e6:	03 c0       	rjmp	.+6      	; 0x6ee <__stack+0x28f>
 6e8:	88 e5       	ldi	r24, 0x58	; 88
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <__stack+0x293>
 6ee:	88 e7       	ldi	r24, 0x78	; 120
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	b7 01       	movw	r22, r14
 6f4:	0c c0       	rjmp	.+24     	; 0x70e <__stack+0x2af>
 6f6:	82 2f       	mov	r24, r18
 6f8:	86 78       	andi	r24, 0x86	; 134
 6fa:	59 f0       	breq	.+22     	; 0x712 <__stack+0x2b3>
 6fc:	21 fd       	sbrc	r18, 1
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <__stack+0x2a5>
 700:	80 e2       	ldi	r24, 0x20	; 32
 702:	01 c0       	rjmp	.+2      	; 0x706 <__stack+0x2a7>
 704:	8b e2       	ldi	r24, 0x2B	; 43
 706:	27 fd       	sbrc	r18, 7
 708:	8d e2       	ldi	r24, 0x2D	; 45
 70a:	b7 01       	movw	r22, r14
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	0e 94 c7 03 	call	0x78e	; 0x78e <fputc>
 712:	a5 14       	cp	r10, r5
 714:	38 f4       	brcc	.+14     	; 0x724 <__stack+0x2c5>
 716:	b7 01       	movw	r22, r14
 718:	80 e3       	ldi	r24, 0x30	; 48
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	0e 94 c7 03 	call	0x78e	; 0x78e <fputc>
 720:	5a 94       	dec	r5
 722:	f7 cf       	rjmp	.-18     	; 0x712 <__stack+0x2b3>
 724:	aa 94       	dec	r10
 726:	f4 01       	movw	r30, r8
 728:	ea 0d       	add	r30, r10
 72a:	f1 1d       	adc	r31, r1
 72c:	80 81       	ld	r24, Z
 72e:	b7 01       	movw	r22, r14
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	0e 94 c7 03 	call	0x78e	; 0x78e <fputc>
 736:	a1 10       	cpse	r10, r1
 738:	f5 cf       	rjmp	.-22     	; 0x724 <__stack+0x2c5>
 73a:	33 20       	and	r3, r3
 73c:	09 f4       	brne	.+2      	; 0x740 <__stack+0x2e1>
 73e:	51 ce       	rjmp	.-862    	; 0x3e2 <vfprintf+0x24>
 740:	b7 01       	movw	r22, r14
 742:	80 e2       	ldi	r24, 0x20	; 32
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	0e 94 c7 03 	call	0x78e	; 0x78e <fputc>
 74a:	3a 94       	dec	r3
 74c:	f6 cf       	rjmp	.-20     	; 0x73a <__stack+0x2db>
 74e:	f7 01       	movw	r30, r14
 750:	86 81       	ldd	r24, Z+6	; 0x06
 752:	97 81       	ldd	r25, Z+7	; 0x07
 754:	02 c0       	rjmp	.+4      	; 0x75a <__stack+0x2fb>
 756:	8f ef       	ldi	r24, 0xFF	; 255
 758:	9f ef       	ldi	r25, 0xFF	; 255
 75a:	2c 96       	adiw	r28, 0x0c	; 12
 75c:	e2 e1       	ldi	r30, 0x12	; 18
 75e:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <__epilogue_restores__>

00000762 <strnlen_P>:
 762:	fc 01       	movw	r30, r24
 764:	05 90       	lpm	r0, Z+
 766:	61 50       	subi	r22, 0x01	; 1
 768:	70 40       	sbci	r23, 0x00	; 0
 76a:	01 10       	cpse	r0, r1
 76c:	d8 f7       	brcc	.-10     	; 0x764 <strnlen_P+0x2>
 76e:	80 95       	com	r24
 770:	90 95       	com	r25
 772:	8e 0f       	add	r24, r30
 774:	9f 1f       	adc	r25, r31
 776:	08 95       	ret

00000778 <strnlen>:
 778:	fc 01       	movw	r30, r24
 77a:	61 50       	subi	r22, 0x01	; 1
 77c:	70 40       	sbci	r23, 0x00	; 0
 77e:	01 90       	ld	r0, Z+
 780:	01 10       	cpse	r0, r1
 782:	d8 f7       	brcc	.-10     	; 0x77a <strnlen+0x2>
 784:	80 95       	com	r24
 786:	90 95       	com	r25
 788:	8e 0f       	add	r24, r30
 78a:	9f 1f       	adc	r25, r31
 78c:	08 95       	ret

0000078e <fputc>:
 78e:	0f 93       	push	r16
 790:	1f 93       	push	r17
 792:	cf 93       	push	r28
 794:	df 93       	push	r29
 796:	18 2f       	mov	r17, r24
 798:	09 2f       	mov	r16, r25
 79a:	eb 01       	movw	r28, r22
 79c:	8b 81       	ldd	r24, Y+3	; 0x03
 79e:	81 fd       	sbrc	r24, 1
 7a0:	03 c0       	rjmp	.+6      	; 0x7a8 <fputc+0x1a>
 7a2:	8f ef       	ldi	r24, 0xFF	; 255
 7a4:	9f ef       	ldi	r25, 0xFF	; 255
 7a6:	20 c0       	rjmp	.+64     	; 0x7e8 <fputc+0x5a>
 7a8:	82 ff       	sbrs	r24, 2
 7aa:	10 c0       	rjmp	.+32     	; 0x7cc <fputc+0x3e>
 7ac:	4e 81       	ldd	r20, Y+6	; 0x06
 7ae:	5f 81       	ldd	r21, Y+7	; 0x07
 7b0:	2c 81       	ldd	r18, Y+4	; 0x04
 7b2:	3d 81       	ldd	r19, Y+5	; 0x05
 7b4:	42 17       	cp	r20, r18
 7b6:	53 07       	cpc	r21, r19
 7b8:	7c f4       	brge	.+30     	; 0x7d8 <fputc+0x4a>
 7ba:	e8 81       	ld	r30, Y
 7bc:	f9 81       	ldd	r31, Y+1	; 0x01
 7be:	9f 01       	movw	r18, r30
 7c0:	2f 5f       	subi	r18, 0xFF	; 255
 7c2:	3f 4f       	sbci	r19, 0xFF	; 255
 7c4:	39 83       	std	Y+1, r19	; 0x01
 7c6:	28 83       	st	Y, r18
 7c8:	10 83       	st	Z, r17
 7ca:	06 c0       	rjmp	.+12     	; 0x7d8 <fputc+0x4a>
 7cc:	e8 85       	ldd	r30, Y+8	; 0x08
 7ce:	f9 85       	ldd	r31, Y+9	; 0x09
 7d0:	81 2f       	mov	r24, r17
 7d2:	09 95       	icall
 7d4:	89 2b       	or	r24, r25
 7d6:	29 f7       	brne	.-54     	; 0x7a2 <fputc+0x14>
 7d8:	2e 81       	ldd	r18, Y+6	; 0x06
 7da:	3f 81       	ldd	r19, Y+7	; 0x07
 7dc:	2f 5f       	subi	r18, 0xFF	; 255
 7de:	3f 4f       	sbci	r19, 0xFF	; 255
 7e0:	3f 83       	std	Y+7, r19	; 0x07
 7e2:	2e 83       	std	Y+6, r18	; 0x06
 7e4:	81 2f       	mov	r24, r17
 7e6:	90 2f       	mov	r25, r16
 7e8:	df 91       	pop	r29
 7ea:	cf 91       	pop	r28
 7ec:	1f 91       	pop	r17
 7ee:	0f 91       	pop	r16
 7f0:	08 95       	ret

000007f2 <__ultoa_invert>:
 7f2:	fa 01       	movw	r30, r20
 7f4:	aa 27       	eor	r26, r26
 7f6:	28 30       	cpi	r18, 0x08	; 8
 7f8:	51 f1       	breq	.+84     	; 0x84e <__ultoa_invert+0x5c>
 7fa:	20 31       	cpi	r18, 0x10	; 16
 7fc:	81 f1       	breq	.+96     	; 0x85e <__ultoa_invert+0x6c>
 7fe:	e8 94       	clt
 800:	6f 93       	push	r22
 802:	6e 7f       	andi	r22, 0xFE	; 254
 804:	6e 5f       	subi	r22, 0xFE	; 254
 806:	7f 4f       	sbci	r23, 0xFF	; 255
 808:	8f 4f       	sbci	r24, 0xFF	; 255
 80a:	9f 4f       	sbci	r25, 0xFF	; 255
 80c:	af 4f       	sbci	r26, 0xFF	; 255
 80e:	b1 e0       	ldi	r27, 0x01	; 1
 810:	3e d0       	rcall	.+124    	; 0x88e <__ultoa_invert+0x9c>
 812:	b4 e0       	ldi	r27, 0x04	; 4
 814:	3c d0       	rcall	.+120    	; 0x88e <__ultoa_invert+0x9c>
 816:	67 0f       	add	r22, r23
 818:	78 1f       	adc	r23, r24
 81a:	89 1f       	adc	r24, r25
 81c:	9a 1f       	adc	r25, r26
 81e:	a1 1d       	adc	r26, r1
 820:	68 0f       	add	r22, r24
 822:	79 1f       	adc	r23, r25
 824:	8a 1f       	adc	r24, r26
 826:	91 1d       	adc	r25, r1
 828:	a1 1d       	adc	r26, r1
 82a:	6a 0f       	add	r22, r26
 82c:	71 1d       	adc	r23, r1
 82e:	81 1d       	adc	r24, r1
 830:	91 1d       	adc	r25, r1
 832:	a1 1d       	adc	r26, r1
 834:	20 d0       	rcall	.+64     	; 0x876 <__ultoa_invert+0x84>
 836:	09 f4       	brne	.+2      	; 0x83a <__ultoa_invert+0x48>
 838:	68 94       	set
 83a:	3f 91       	pop	r19
 83c:	2a e0       	ldi	r18, 0x0A	; 10
 83e:	26 9f       	mul	r18, r22
 840:	11 24       	eor	r1, r1
 842:	30 19       	sub	r19, r0
 844:	30 5d       	subi	r19, 0xD0	; 208
 846:	31 93       	st	Z+, r19
 848:	de f6       	brtc	.-74     	; 0x800 <__ultoa_invert+0xe>
 84a:	cf 01       	movw	r24, r30
 84c:	08 95       	ret
 84e:	46 2f       	mov	r20, r22
 850:	47 70       	andi	r20, 0x07	; 7
 852:	40 5d       	subi	r20, 0xD0	; 208
 854:	41 93       	st	Z+, r20
 856:	b3 e0       	ldi	r27, 0x03	; 3
 858:	0f d0       	rcall	.+30     	; 0x878 <__ultoa_invert+0x86>
 85a:	c9 f7       	brne	.-14     	; 0x84e <__ultoa_invert+0x5c>
 85c:	f6 cf       	rjmp	.-20     	; 0x84a <__ultoa_invert+0x58>
 85e:	46 2f       	mov	r20, r22
 860:	4f 70       	andi	r20, 0x0F	; 15
 862:	40 5d       	subi	r20, 0xD0	; 208
 864:	4a 33       	cpi	r20, 0x3A	; 58
 866:	18 f0       	brcs	.+6      	; 0x86e <__ultoa_invert+0x7c>
 868:	49 5d       	subi	r20, 0xD9	; 217
 86a:	31 fd       	sbrc	r19, 1
 86c:	40 52       	subi	r20, 0x20	; 32
 86e:	41 93       	st	Z+, r20
 870:	02 d0       	rcall	.+4      	; 0x876 <__ultoa_invert+0x84>
 872:	a9 f7       	brne	.-22     	; 0x85e <__ultoa_invert+0x6c>
 874:	ea cf       	rjmp	.-44     	; 0x84a <__ultoa_invert+0x58>
 876:	b4 e0       	ldi	r27, 0x04	; 4
 878:	a6 95       	lsr	r26
 87a:	97 95       	ror	r25
 87c:	87 95       	ror	r24
 87e:	77 95       	ror	r23
 880:	67 95       	ror	r22
 882:	ba 95       	dec	r27
 884:	c9 f7       	brne	.-14     	; 0x878 <__ultoa_invert+0x86>
 886:	00 97       	sbiw	r24, 0x00	; 0
 888:	61 05       	cpc	r22, r1
 88a:	71 05       	cpc	r23, r1
 88c:	08 95       	ret
 88e:	9b 01       	movw	r18, r22
 890:	ac 01       	movw	r20, r24
 892:	0a 2e       	mov	r0, r26
 894:	06 94       	lsr	r0
 896:	57 95       	ror	r21
 898:	47 95       	ror	r20
 89a:	37 95       	ror	r19
 89c:	27 95       	ror	r18
 89e:	ba 95       	dec	r27
 8a0:	c9 f7       	brne	.-14     	; 0x894 <__ultoa_invert+0xa2>
 8a2:	62 0f       	add	r22, r18
 8a4:	73 1f       	adc	r23, r19
 8a6:	84 1f       	adc	r24, r20
 8a8:	95 1f       	adc	r25, r21
 8aa:	a0 1d       	adc	r26, r0
 8ac:	08 95       	ret

000008ae <__prologue_saves__>:
 8ae:	2f 92       	push	r2
 8b0:	3f 92       	push	r3
 8b2:	4f 92       	push	r4
 8b4:	5f 92       	push	r5
 8b6:	6f 92       	push	r6
 8b8:	7f 92       	push	r7
 8ba:	8f 92       	push	r8
 8bc:	9f 92       	push	r9
 8be:	af 92       	push	r10
 8c0:	bf 92       	push	r11
 8c2:	cf 92       	push	r12
 8c4:	df 92       	push	r13
 8c6:	ef 92       	push	r14
 8c8:	ff 92       	push	r15
 8ca:	0f 93       	push	r16
 8cc:	1f 93       	push	r17
 8ce:	cf 93       	push	r28
 8d0:	df 93       	push	r29
 8d2:	cd b7       	in	r28, 0x3d	; 61
 8d4:	de b7       	in	r29, 0x3e	; 62
 8d6:	ca 1b       	sub	r28, r26
 8d8:	db 0b       	sbc	r29, r27
 8da:	0f b6       	in	r0, 0x3f	; 63
 8dc:	f8 94       	cli
 8de:	de bf       	out	0x3e, r29	; 62
 8e0:	0f be       	out	0x3f, r0	; 63
 8e2:	cd bf       	out	0x3d, r28	; 61
 8e4:	09 94       	ijmp

000008e6 <__epilogue_restores__>:
 8e6:	2a 88       	ldd	r2, Y+18	; 0x12
 8e8:	39 88       	ldd	r3, Y+17	; 0x11
 8ea:	48 88       	ldd	r4, Y+16	; 0x10
 8ec:	5f 84       	ldd	r5, Y+15	; 0x0f
 8ee:	6e 84       	ldd	r6, Y+14	; 0x0e
 8f0:	7d 84       	ldd	r7, Y+13	; 0x0d
 8f2:	8c 84       	ldd	r8, Y+12	; 0x0c
 8f4:	9b 84       	ldd	r9, Y+11	; 0x0b
 8f6:	aa 84       	ldd	r10, Y+10	; 0x0a
 8f8:	b9 84       	ldd	r11, Y+9	; 0x09
 8fa:	c8 84       	ldd	r12, Y+8	; 0x08
 8fc:	df 80       	ldd	r13, Y+7	; 0x07
 8fe:	ee 80       	ldd	r14, Y+6	; 0x06
 900:	fd 80       	ldd	r15, Y+5	; 0x05
 902:	0c 81       	ldd	r16, Y+4	; 0x04
 904:	1b 81       	ldd	r17, Y+3	; 0x03
 906:	aa 81       	ldd	r26, Y+2	; 0x02
 908:	b9 81       	ldd	r27, Y+1	; 0x01
 90a:	ce 0f       	add	r28, r30
 90c:	d1 1d       	adc	r29, r1
 90e:	0f b6       	in	r0, 0x3f	; 63
 910:	f8 94       	cli
 912:	de bf       	out	0x3e, r29	; 62
 914:	0f be       	out	0x3f, r0	; 63
 916:	cd bf       	out	0x3d, r28	; 61
 918:	ed 01       	movw	r28, r26
 91a:	08 95       	ret

0000091c <_exit>:
 91c:	f8 94       	cli

0000091e <__stop_program>:
 91e:	ff cf       	rjmp	.-2      	; 0x91e <__stop_program>
