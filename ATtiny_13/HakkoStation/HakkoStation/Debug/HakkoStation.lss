
HakkoStation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000003e2  00000476  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006a  0080006a  00000480  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000436  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000170  00000000  00000000  00000926  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001a1  00000000  00000000  00000a96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00000c38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000018a  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002bc  00000000  00000000  00000e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001116  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	e2 ee       	ldi	r30, 0xE2	; 226
  24:	f3 e0       	ldi	r31, 0x03	; 3
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	aa 36       	cpi	r26, 0x6A	; 106
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	aa e6       	ldi	r26, 0x6A	; 106
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ac 36       	cpi	r26, 0x6C	; 108
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	90 d0       	rcall	.+288    	; 0x164 <main>
  44:	cc c1       	rjmp	.+920    	; 0x3de <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <read_ADC>:
int read_ADC(int adc_channel)//chuong trinh con doc ADC theo tung channel
{
  48:	22 e3       	ldi	r18, 0x32	; 50
  4a:	30 e0       	ldi	r19, 0x00	; 0
	for (int x = 0;x < 50;x++)
	{
		ADMUX=adc_channel;
  4c:	87 b9       	out	0x07, r24	; 7
		ADCSRA|=(1<<ADSC); 					//bat dau chuyen doi
  4e:	36 9a       	sbi	0x06, 6	; 6
		while(inbit(ADCSRA,ADIF)==0); //cho den khi nao bit ADIF==1
  50:	34 9b       	sbis	0x06, 4	; 6
  52:	fe cf       	rjmp	.-4      	; 0x50 <read_ADC+0x8>
  54:	21 50       	subi	r18, 0x01	; 1
  56:	31 09       	sbc	r19, r1
int read_ADC(int adc_channel)//chuong trinh con doc ADC theo tung channel
{
	for (int x = 0;x < 50;x++)
  58:	21 15       	cp	r18, r1
  5a:	31 05       	cpc	r19, r1
  5c:	b9 f7       	brne	.-18     	; 0x4c <read_ADC+0x4>
	{
		ADMUX=adc_channel;
		ADCSRA|=(1<<ADSC); 					//bat dau chuyen doi
		while(inbit(ADCSRA,ADIF)==0); //cho den khi nao bit ADIF==1
	}
	return ADC;
  5e:	84 b1       	in	r24, 0x04	; 4
  60:	95 b1       	in	r25, 0x05	; 5
}
  62:	08 95       	ret

00000064 <init_ADC>:
void init_ADC()
{
	setb(ADMUX,REFS0);
  64:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA|=(1<<ADEN);
  66:	37 9a       	sbi	0x06, 7	; 6
  68:	08 95       	ret

0000006a <xuatled>:

//char codeseg[] = {3,2,1,0};
unsigned char code[] = {0xD7, 0x14, 0xCD, 0x5D, 0x1E, 0x5B, 0xDB, 0x15, 0xDF, 0x5F};
unsigned char up = 0,down = 0;
void xuatled(char led, char data)
{
  6a:	20 e0       	ldi	r18, 0x00	; 0
  6c:	30 e0       	ldi	r19, 0x00	; 0
			else
			setb(PORTB, DATA);
		}
		else if (i > 9)
		{
			if((data<<(i-10))&0x80)
  6e:	70 e0       	ldi	r23, 0x00	; 0
	for(char i = 0;i < 18;i++)//18bit data
	{
		clrb(PORTB, CLK);
		if(i < 4)
		{
			if(i == 4 - led)
  70:	44 e0       	ldi	r20, 0x04	; 4
  72:	50 e0       	ldi	r21, 0x00	; 0
  74:	48 1b       	sub	r20, r24
  76:	51 09       	sbc	r21, r1
unsigned char up = 0,down = 0;
void xuatled(char led, char data)
{
	for(char i = 0;i < 18;i++)//18bit data
	{
		clrb(PORTB, CLK);
  78:	c0 98       	cbi	0x18, 0	; 24
		if(i < 4)
  7a:	24 30       	cpi	r18, 0x04	; 4
  7c:	38 f4       	brcc	.+14     	; 0x8c <xuatled+0x22>
		{
			if(i == 4 - led)
  7e:	24 17       	cp	r18, r20
  80:	35 07       	cpc	r19, r21
  82:	11 f4       	brne	.+4      	; 0x88 <xuatled+0x1e>
			clrb(PORTB, DATA);
  84:	c1 98       	cbi	0x18, 1	; 24
  86:	11 c0       	rjmp	.+34     	; 0xaa <__stack+0xb>
			else
			setb(PORTB, DATA);
  88:	c1 9a       	sbi	0x18, 1	; 24
  8a:	0f c0       	rjmp	.+30     	; 0xaa <__stack+0xb>
		}
		else if (i > 9)
  8c:	2a 30       	cpi	r18, 0x0A	; 10
  8e:	68 f0       	brcs	.+26     	; 0xaa <__stack+0xb>
  90:	c9 01       	movw	r24, r18
  92:	0a 97       	sbiw	r24, 0x0a	; 10
		{
			if((data<<(i-10))&0x80)
  94:	fb 01       	movw	r30, r22
  96:	02 c0       	rjmp	.+4      	; 0x9c <xuatled+0x32>
  98:	ee 0f       	add	r30, r30
  9a:	ff 1f       	adc	r31, r31
  9c:	8a 95       	dec	r24
  9e:	e2 f7       	brpl	.-8      	; 0x98 <xuatled+0x2e>
  a0:	e7 ff       	sbrs	r30, 7
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__stack+0x9>
			setb(PORTB, DATA);
  a4:	c1 9a       	sbi	0x18, 1	; 24
  a6:	01 c0       	rjmp	.+2      	; 0xaa <__stack+0xb>
			else
			clrb(PORTB, DATA);
  a8:	c1 98       	cbi	0x18, 1	; 24
		}
		setb(PORTB, CLK);
  aa:	c0 9a       	sbi	0x18, 0	; 24
  ac:	2f 5f       	subi	r18, 0xFF	; 255
  ae:	3f 4f       	sbci	r19, 0xFF	; 255
//char codeseg[] = {3,2,1,0};
unsigned char code[] = {0xD7, 0x14, 0xCD, 0x5D, 0x1E, 0x5B, 0xDB, 0x15, 0xDF, 0x5F};
unsigned char up = 0,down = 0;
void xuatled(char led, char data)
{
	for(char i = 0;i < 18;i++)//18bit data
  b0:	22 31       	cpi	r18, 0x12	; 18
  b2:	31 05       	cpc	r19, r1
  b4:	09 f7       	brne	.-62     	; 0x78 <xuatled+0xe>
			clrb(PORTB, DATA);
		}
		setb(PORTB, CLK);
	}
	//latch data
	clrb(PORTB, DATA);
  b6:	c1 98       	cbi	0x18, 1	; 24
	setb(PORTB, DATA);
  b8:	c1 9a       	sbi	0x18, 1	; 24
	//send data to output
	clrb(PORTB, CLK);
  ba:	c0 98       	cbi	0x18, 0	; 24
	clrb(PORTB, DATA);
  bc:	c1 98       	cbi	0x18, 1	; 24
	setb(PORTB, DATA);
  be:	c1 9a       	sbi	0x18, 1	; 24
  c0:	08 95       	ret

000000c2 <vietso>:
}

void vietso(int num, int t)
{
  c2:	af 92       	push	r10
  c4:	bf 92       	push	r11
  c6:	cf 92       	push	r12
  c8:	df 92       	push	r13
  ca:	ef 92       	push	r14
  cc:	ff 92       	push	r15
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	fc 01       	movw	r30, r24
  d8:	8b 01       	movw	r16, r22
	for (int x = 0;x < t;x++)
  da:	16 16       	cp	r1, r22
  dc:	17 06       	cpc	r1, r23
  de:	bc f5       	brge	.+110    	; 0x14e <vietso+0x8c>
	{
		xuatled(1, code[(num/100)%10]);
  e0:	64 e6       	ldi	r22, 0x64	; 100
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	17 d1       	rcall	.+558    	; 0x314 <__divmodhi4>
  e6:	cb 01       	movw	r24, r22
  e8:	2a e0       	ldi	r18, 0x0A	; 10
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	b9 01       	movw	r22, r18
  ee:	12 d1       	rcall	.+548    	; 0x314 <__divmodhi4>
  f0:	5c 01       	movw	r10, r24
		xuatled(2, code[(num/10)%10] | up);
  f2:	cf 01       	movw	r24, r30
  f4:	b9 01       	movw	r22, r18
  f6:	0e d1       	rcall	.+540    	; 0x314 <__divmodhi4>
  f8:	fc 01       	movw	r30, r24
  fa:	cb 01       	movw	r24, r22
  fc:	b9 01       	movw	r22, r18
  fe:	0a d1       	rcall	.+532    	; 0x314 <__divmodhi4>
	setb(PORTB, DATA);
}

void vietso(int num, int t)
{
	for (int x = 0;x < t;x++)
 100:	c0 e0       	ldi	r28, 0x00	; 0
 102:	d0 e0       	ldi	r29, 0x00	; 0
	{
		xuatled(1, code[(num/100)%10]);
 104:	95 01       	movw	r18, r10
 106:	20 5a       	subi	r18, 0xA0	; 160
 108:	3f 4f       	sbci	r19, 0xFF	; 255
 10a:	59 01       	movw	r10, r18
		xuatled(2, code[(num/10)%10] | up);
 10c:	9c 01       	movw	r18, r24
 10e:	20 5a       	subi	r18, 0xA0	; 160
 110:	3f 4f       	sbci	r19, 0xFF	; 255
 112:	69 01       	movw	r12, r18
		xuatled(3, code[num%10] | down);
 114:	cf 01       	movw	r24, r30
 116:	80 5a       	subi	r24, 0xA0	; 160
 118:	9f 4f       	sbci	r25, 0xFF	; 255
 11a:	7c 01       	movw	r14, r24

void vietso(int num, int t)
{
	for (int x = 0;x < t;x++)
	{
		xuatled(1, code[(num/100)%10]);
 11c:	f5 01       	movw	r30, r10
 11e:	60 81       	ld	r22, Z
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	a3 df       	rcall	.-186    	; 0x6a <xuatled>
		xuatled(2, code[(num/10)%10] | up);
 124:	f6 01       	movw	r30, r12
 126:	60 81       	ld	r22, Z
 128:	80 91 6b 00 	lds	r24, 0x006B
 12c:	68 2b       	or	r22, r24
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	9c df       	rcall	.-200    	; 0x6a <xuatled>
		xuatled(3, code[num%10] | down);
 132:	f7 01       	movw	r30, r14
 134:	60 81       	ld	r22, Z
 136:	80 91 6a 00 	lds	r24, 0x006A
 13a:	68 2b       	or	r22, r24
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	95 df       	rcall	.-214    	; 0x6a <xuatled>
		xuatled(4, 0x0F);
 140:	6f e0       	ldi	r22, 0x0F	; 15
 142:	84 e0       	ldi	r24, 0x04	; 4
 144:	92 df       	rcall	.-220    	; 0x6a <xuatled>
	setb(PORTB, DATA);
}

void vietso(int num, int t)
{
	for (int x = 0;x < t;x++)
 146:	21 96       	adiw	r28, 0x01	; 1
 148:	c0 17       	cp	r28, r16
 14a:	d1 07       	cpc	r29, r17
 14c:	39 f7       	brne	.-50     	; 0x11c <vietso+0x5a>
		xuatled(1, code[(num/100)%10]);
		xuatled(2, code[(num/10)%10] | up);
		xuatled(3, code[num%10] | down);
		xuatled(4, 0x0F);
	}
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	ff 90       	pop	r15
 158:	ef 90       	pop	r14
 15a:	df 90       	pop	r13
 15c:	cf 90       	pop	r12
 15e:	bf 90       	pop	r11
 160:	af 90       	pop	r10
 162:	08 95       	ret

00000164 <main>:

int main(void)
{
	
	DDRB |= (1 << DATA)|(1 << CLK)|(1 << CONTROL);
 164:	87 b3       	in	r24, 0x17	; 23
 166:	83 61       	ori	r24, 0x13	; 19
 168:	87 bb       	out	0x17, r24	; 23
	HeaterOff();
 16a:	c4 9a       	sbi	0x18, 4	; 24
	init_ADC();
 16c:	7b df       	rcall	.-266    	; 0x64 <init_ADC>
	unsigned int t_AdjNew, t_AdjOld=0, t_Sensor=0;
	while(read_ADC(ADJUST) < 50)
 16e:	0c c0       	rjmp	.+24     	; 0x188 <main+0x24>
	{
		xuatled(1, 0x9E);
 170:	6e e9       	ldi	r22, 0x9E	; 158
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	7a df       	rcall	.-268    	; 0x6a <xuatled>
		xuatled(2, 0xCB);
 176:	6b ec       	ldi	r22, 0xCB	; 203
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	77 df       	rcall	.-274    	; 0x6a <xuatled>
		xuatled(3, 0x96);
 17c:	66 e9       	ldi	r22, 0x96	; 150
 17e:	83 e0       	ldi	r24, 0x03	; 3
 180:	74 df       	rcall	.-280    	; 0x6a <xuatled>
		xuatled(4, 0xD7);
 182:	67 ed       	ldi	r22, 0xD7	; 215
 184:	84 e0       	ldi	r24, 0x04	; 4
 186:	71 df       	rcall	.-286    	; 0x6a <xuatled>
	
	DDRB |= (1 << DATA)|(1 << CLK)|(1 << CONTROL);
	HeaterOff();
	init_ADC();
	unsigned int t_AdjNew, t_AdjOld=0, t_Sensor=0;
	while(read_ADC(ADJUST) < 50)
 188:	83 e0       	ldi	r24, 0x03	; 3
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	5d df       	rcall	.-326    	; 0x48 <read_ADC>
 18e:	c2 97       	sbiw	r24, 0x32	; 50
 190:	7c f3       	brlt	.-34     	; 0x170 <main+0xc>
 192:	c8 e8       	ldi	r28, 0x88	; 136
 194:	d3 e1       	ldi	r29, 0x13	; 19
		xuatled(3, 0x96);
		xuatled(4, 0xD7);
	}
	for (unsigned int x = 0;x < 5000;x++)
	{
		xuatled(1, 0x9E);
 196:	6e e9       	ldi	r22, 0x9E	; 158
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	67 df       	rcall	.-306    	; 0x6a <xuatled>
		xuatled(2, 0xCB);
 19c:	6b ec       	ldi	r22, 0xCB	; 203
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	64 df       	rcall	.-312    	; 0x6a <xuatled>
		xuatled(3, 0x96);
 1a2:	66 e9       	ldi	r22, 0x96	; 150
 1a4:	83 e0       	ldi	r24, 0x03	; 3
 1a6:	61 df       	rcall	.-318    	; 0x6a <xuatled>
		xuatled(4, 0xD7);
 1a8:	67 ed       	ldi	r22, 0xD7	; 215
 1aa:	84 e0       	ldi	r24, 0x04	; 4
 1ac:	5e df       	rcall	.-324    	; 0x6a <xuatled>
 1ae:	21 97       	sbiw	r28, 0x01	; 1
		xuatled(1, 0x9E);
		xuatled(2, 0xCB);
		xuatled(3, 0x96);
		xuatled(4, 0xD7);
	}
	for (unsigned int x = 0;x < 5000;x++)
 1b0:	20 97       	sbiw	r28, 0x00	; 0
 1b2:	89 f7       	brne	.-30     	; 0x196 <main+0x32>
 1b4:	c1 2c       	mov	r12, r1
 1b6:	d1 2c       	mov	r13, r1
 1b8:	c0 e0       	ldi	r28, 0x00	; 0
 1ba:	d0 e0       	ldi	r29, 0x00	; 0
		else
		{
			vietso(t_Sensor, 1000);
		}
		t_Sensor = read_ADC(SENSOR);
		t_Sensor=( (5*2200L*t_Sensor) / (11253 - t_Sensor))-245;
 1bc:	05 ef       	ldi	r16, 0xF5	; 245
 1be:	1b e2       	ldi	r17, 0x2B	; 43
			down=0x00;
		}
		else if (t_Sensor > t_AdjOld + 30)
		{
			HeaterOff();
			down = 0x20;
 1c0:	68 94       	set
 1c2:	bb 24       	eor	r11, r11
 1c4:	b5 f8       	bld	r11, 5
		xuatled(3, 0x96);
		xuatled(4, 0xD7);
	}
	while(1)
	{
		t_AdjNew = read_ADC(ADJUST) / 2 + 2;
 1c6:	83 e0       	ldi	r24, 0x03	; 3
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	3e df       	rcall	.-388    	; 0x48 <read_ADC>
 1cc:	99 23       	and	r25, r25
 1ce:	0c f4       	brge	.+2      	; 0x1d2 <main+0x6e>
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	7c 01       	movw	r14, r24
 1d4:	f5 94       	asr	r15
 1d6:	e7 94       	ror	r14
 1d8:	42 e0       	ldi	r20, 0x02	; 2
 1da:	e4 0e       	add	r14, r20
 1dc:	f1 1c       	adc	r15, r1
 1de:	37 01       	movw	r6, r14
		while (read_ADC(ADJUST) < 1)
 1e0:	09 c0       	rjmp	.+18     	; 0x1f4 <main+0x90>
		{
			//HeaterOff();
			//xuatled(1, 0x00);
			xuatled(2, 0xD7);
 1e2:	67 ed       	ldi	r22, 0xD7	; 215
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	41 df       	rcall	.-382    	; 0x6a <xuatled>
			xuatled(3, 0x8B);
 1e8:	6b e8       	ldi	r22, 0x8B	; 139
 1ea:	83 e0       	ldi	r24, 0x03	; 3
 1ec:	3e df       	rcall	.-388    	; 0x6a <xuatled>
			xuatled(4, 0x8B);
 1ee:	6b e8       	ldi	r22, 0x8B	; 139
 1f0:	84 e0       	ldi	r24, 0x04	; 4
 1f2:	3b df       	rcall	.-394    	; 0x6a <xuatled>
		xuatled(4, 0xD7);
	}
	while(1)
	{
		t_AdjNew = read_ADC(ADJUST) / 2 + 2;
		while (read_ADC(ADJUST) < 1)
 1f4:	83 e0       	ldi	r24, 0x03	; 3
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	27 df       	rcall	.-434    	; 0x48 <read_ADC>
 1fa:	18 16       	cp	r1, r24
 1fc:	19 06       	cpc	r1, r25
 1fe:	8c f7       	brge	.-30     	; 0x1e2 <main+0x7e>
			//xuatled(1, 0x00);
			xuatled(2, 0xD7);
			xuatled(3, 0x8B);
			xuatled(4, 0x8B);
		}
		if (t_AdjNew < t_AdjOld - 2 || t_AdjNew > t_AdjOld + 2)
 200:	ce 01       	movw	r24, r28
 202:	02 97       	sbiw	r24, 0x02	; 2
 204:	68 16       	cp	r6, r24
 206:	79 06       	cpc	r7, r25
 208:	20 f0       	brcs	.+8      	; 0x212 <main+0xae>
 20a:	04 96       	adiw	r24, 0x04	; 4
 20c:	86 15       	cp	r24, r6
 20e:	97 05       	cpc	r25, r7
 210:	30 f4       	brcc	.+12     	; 0x21e <main+0xba>
		{
			vietso(t_AdjNew, 600);
 212:	68 e5       	ldi	r22, 0x58	; 88
 214:	72 e0       	ldi	r23, 0x02	; 2
 216:	c7 01       	movw	r24, r14
 218:	54 df       	rcall	.-344    	; 0xc2 <vietso>
			t_AdjOld = t_AdjNew;
 21a:	e7 01       	movw	r28, r14
 21c:	04 c0       	rjmp	.+8      	; 0x226 <main+0xc2>
		}
		else
		{
			vietso(t_Sensor, 1000);
 21e:	68 ee       	ldi	r22, 0xE8	; 232
 220:	73 e0       	ldi	r23, 0x03	; 3
 222:	c6 01       	movw	r24, r12
 224:	4e df       	rcall	.-356    	; 0xc2 <vietso>
		}
		t_Sensor = read_ADC(SENSOR);
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e df       	rcall	.-484    	; 0x48 <read_ADC>
 22c:	9c 01       	movw	r18, r24
		t_Sensor=( (5*2200L*t_Sensor) / (11253 - t_Sensor))-245;
 22e:	ac 01       	movw	r20, r24
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	6a 01       	movw	r12, r20
 236:	7b 01       	movw	r14, r22
 238:	cc 0c       	add	r12, r12
 23a:	dd 1c       	adc	r13, r13
 23c:	ee 1c       	adc	r14, r14
 23e:	ff 1c       	adc	r15, r15
 240:	cc 0c       	add	r12, r12
 242:	dd 1c       	adc	r13, r13
 244:	ee 1c       	adc	r14, r14
 246:	ff 1c       	adc	r15, r15
 248:	cc 0c       	add	r12, r12
 24a:	dd 1c       	adc	r13, r13
 24c:	ee 1c       	adc	r14, r14
 24e:	ff 1c       	adc	r15, r15
 250:	cc 0c       	add	r12, r12
 252:	dd 1c       	adc	r13, r13
 254:	ee 1c       	adc	r14, r14
 256:	ff 1c       	adc	r15, r15
 258:	26 01       	movw	r4, r12
 25a:	37 01       	movw	r6, r14
 25c:	44 0c       	add	r4, r4
 25e:	55 1c       	adc	r5, r5
 260:	66 1c       	adc	r6, r6
 262:	77 1c       	adc	r7, r7
 264:	44 0c       	add	r4, r4
 266:	55 1c       	adc	r5, r5
 268:	66 1c       	adc	r6, r6
 26a:	77 1c       	adc	r7, r7
 26c:	c4 0c       	add	r12, r4
 26e:	d5 1c       	adc	r13, r5
 270:	e6 1c       	adc	r14, r6
 272:	f7 1c       	adc	r15, r7
 274:	c4 0e       	add	r12, r20
 276:	d5 1e       	adc	r13, r21
 278:	e6 1e       	adc	r14, r22
 27a:	f7 1e       	adc	r15, r23
 27c:	cc 0c       	add	r12, r12
 27e:	dd 1c       	adc	r13, r13
 280:	ee 1c       	adc	r14, r14
 282:	ff 1c       	adc	r15, r15
 284:	cc 0c       	add	r12, r12
 286:	dd 1c       	adc	r13, r13
 288:	ee 1c       	adc	r14, r14
 28a:	ff 1c       	adc	r15, r15
 28c:	cc 0c       	add	r12, r12
 28e:	dd 1c       	adc	r13, r13
 290:	ee 1c       	adc	r14, r14
 292:	ff 1c       	adc	r15, r15
 294:	c4 1a       	sub	r12, r20
 296:	d5 0a       	sbc	r13, r21
 298:	e6 0a       	sbc	r14, r22
 29a:	f7 0a       	sbc	r15, r23
 29c:	26 01       	movw	r4, r12
 29e:	37 01       	movw	r6, r14
 2a0:	44 0c       	add	r4, r4
 2a2:	55 1c       	adc	r5, r5
 2a4:	66 1c       	adc	r6, r6
 2a6:	77 1c       	adc	r7, r7
 2a8:	44 0c       	add	r4, r4
 2aa:	55 1c       	adc	r5, r5
 2ac:	66 1c       	adc	r6, r6
 2ae:	77 1c       	adc	r7, r7
 2b0:	44 0c       	add	r4, r4
 2b2:	55 1c       	adc	r5, r5
 2b4:	66 1c       	adc	r6, r6
 2b6:	77 1c       	adc	r7, r7
 2b8:	44 0c       	add	r4, r4
 2ba:	55 1c       	adc	r5, r5
 2bc:	66 1c       	adc	r6, r6
 2be:	77 1c       	adc	r7, r7
 2c0:	c4 0c       	add	r12, r4
 2c2:	d5 1c       	adc	r13, r5
 2c4:	e6 1c       	adc	r14, r6
 2c6:	f7 1c       	adc	r15, r7
 2c8:	cb 01       	movw	r24, r22
 2ca:	ba 01       	movw	r22, r20
 2cc:	6c 0d       	add	r22, r12
 2ce:	7d 1d       	adc	r23, r13
 2d0:	8e 1d       	adc	r24, r14
 2d2:	9f 1d       	adc	r25, r15
 2d4:	a8 01       	movw	r20, r16
 2d6:	42 1b       	sub	r20, r18
 2d8:	53 0b       	sbc	r21, r19
 2da:	9a 01       	movw	r18, r20
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	2c d0       	rcall	.+88     	; 0x33a <__divmodsi4>
 2e2:	69 01       	movw	r12, r18
 2e4:	85 ef       	ldi	r24, 0xF5	; 245
 2e6:	c8 1a       	sub	r12, r24
 2e8:	d1 08       	sbc	r13, r1
		if (t_Sensor < t_AdjOld)
 2ea:	cc 16       	cp	r12, r28
 2ec:	dd 06       	cpc	r13, r29
 2ee:	30 f4       	brcc	.+12     	; 0x2fc <main+0x198>
		{
			HeaterOn();
 2f0:	c4 98       	cbi	0x18, 4	; 24
			up = 0x20;
 2f2:	b0 92 6b 00 	sts	0x006B, r11
			down=0x00;
 2f6:	10 92 6a 00 	sts	0x006A, r1
 2fa:	65 cf       	rjmp	.-310    	; 0x1c6 <main+0x62>
		}
		else if (t_Sensor > t_AdjOld + 30)
 2fc:	ce 01       	movw	r24, r28
 2fe:	4e 96       	adiw	r24, 0x1e	; 30
 300:	8c 15       	cp	r24, r12
 302:	9d 05       	cpc	r25, r13
 304:	08 f0       	brcs	.+2      	; 0x308 <main+0x1a4>
 306:	5f cf       	rjmp	.-322    	; 0x1c6 <main+0x62>
		{
			HeaterOff();
 308:	c4 9a       	sbi	0x18, 4	; 24
			down = 0x20;
 30a:	b0 92 6a 00 	sts	0x006A, r11
			up = 0x00;
 30e:	10 92 6b 00 	sts	0x006B, r1
 312:	59 cf       	rjmp	.-334    	; 0x1c6 <main+0x62>

00000314 <__divmodhi4>:
 314:	97 fb       	bst	r25, 7
 316:	07 2e       	mov	r0, r23
 318:	16 f4       	brtc	.+4      	; 0x31e <__divmodhi4+0xa>
 31a:	00 94       	com	r0
 31c:	06 d0       	rcall	.+12     	; 0x32a <__divmodhi4_neg1>
 31e:	77 fd       	sbrc	r23, 7
 320:	08 d0       	rcall	.+16     	; 0x332 <__divmodhi4_neg2>
 322:	27 d0       	rcall	.+78     	; 0x372 <__udivmodhi4>
 324:	07 fc       	sbrc	r0, 7
 326:	05 d0       	rcall	.+10     	; 0x332 <__divmodhi4_neg2>
 328:	3e f4       	brtc	.+14     	; 0x338 <__divmodhi4_exit>

0000032a <__divmodhi4_neg1>:
 32a:	90 95       	com	r25
 32c:	81 95       	neg	r24
 32e:	9f 4f       	sbci	r25, 0xFF	; 255
 330:	08 95       	ret

00000332 <__divmodhi4_neg2>:
 332:	70 95       	com	r23
 334:	61 95       	neg	r22
 336:	7f 4f       	sbci	r23, 0xFF	; 255

00000338 <__divmodhi4_exit>:
 338:	08 95       	ret

0000033a <__divmodsi4>:
 33a:	05 2e       	mov	r0, r21
 33c:	97 fb       	bst	r25, 7
 33e:	16 f4       	brtc	.+4      	; 0x344 <__divmodsi4+0xa>
 340:	00 94       	com	r0
 342:	0f d0       	rcall	.+30     	; 0x362 <__negsi2>
 344:	57 fd       	sbrc	r21, 7
 346:	05 d0       	rcall	.+10     	; 0x352 <__divmodsi4_neg2>
 348:	28 d0       	rcall	.+80     	; 0x39a <__udivmodsi4>
 34a:	07 fc       	sbrc	r0, 7
 34c:	02 d0       	rcall	.+4      	; 0x352 <__divmodsi4_neg2>
 34e:	46 f4       	brtc	.+16     	; 0x360 <__divmodsi4_exit>
 350:	08 c0       	rjmp	.+16     	; 0x362 <__negsi2>

00000352 <__divmodsi4_neg2>:
 352:	50 95       	com	r21
 354:	40 95       	com	r20
 356:	30 95       	com	r19
 358:	21 95       	neg	r18
 35a:	3f 4f       	sbci	r19, 0xFF	; 255
 35c:	4f 4f       	sbci	r20, 0xFF	; 255
 35e:	5f 4f       	sbci	r21, 0xFF	; 255

00000360 <__divmodsi4_exit>:
 360:	08 95       	ret

00000362 <__negsi2>:
 362:	90 95       	com	r25
 364:	80 95       	com	r24
 366:	70 95       	com	r23
 368:	61 95       	neg	r22
 36a:	7f 4f       	sbci	r23, 0xFF	; 255
 36c:	8f 4f       	sbci	r24, 0xFF	; 255
 36e:	9f 4f       	sbci	r25, 0xFF	; 255
 370:	08 95       	ret

00000372 <__udivmodhi4>:
 372:	aa 1b       	sub	r26, r26
 374:	bb 1b       	sub	r27, r27
 376:	51 e1       	ldi	r21, 0x11	; 17
 378:	07 c0       	rjmp	.+14     	; 0x388 <__udivmodhi4_ep>

0000037a <__udivmodhi4_loop>:
 37a:	aa 1f       	adc	r26, r26
 37c:	bb 1f       	adc	r27, r27
 37e:	a6 17       	cp	r26, r22
 380:	b7 07       	cpc	r27, r23
 382:	10 f0       	brcs	.+4      	; 0x388 <__udivmodhi4_ep>
 384:	a6 1b       	sub	r26, r22
 386:	b7 0b       	sbc	r27, r23

00000388 <__udivmodhi4_ep>:
 388:	88 1f       	adc	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	5a 95       	dec	r21
 38e:	a9 f7       	brne	.-22     	; 0x37a <__udivmodhi4_loop>
 390:	80 95       	com	r24
 392:	90 95       	com	r25
 394:	bc 01       	movw	r22, r24
 396:	cd 01       	movw	r24, r26
 398:	08 95       	ret

0000039a <__udivmodsi4>:
 39a:	a1 e2       	ldi	r26, 0x21	; 33
 39c:	1a 2e       	mov	r1, r26
 39e:	aa 1b       	sub	r26, r26
 3a0:	bb 1b       	sub	r27, r27
 3a2:	fd 01       	movw	r30, r26
 3a4:	0d c0       	rjmp	.+26     	; 0x3c0 <__udivmodsi4_ep>

000003a6 <__udivmodsi4_loop>:
 3a6:	aa 1f       	adc	r26, r26
 3a8:	bb 1f       	adc	r27, r27
 3aa:	ee 1f       	adc	r30, r30
 3ac:	ff 1f       	adc	r31, r31
 3ae:	a2 17       	cp	r26, r18
 3b0:	b3 07       	cpc	r27, r19
 3b2:	e4 07       	cpc	r30, r20
 3b4:	f5 07       	cpc	r31, r21
 3b6:	20 f0       	brcs	.+8      	; 0x3c0 <__udivmodsi4_ep>
 3b8:	a2 1b       	sub	r26, r18
 3ba:	b3 0b       	sbc	r27, r19
 3bc:	e4 0b       	sbc	r30, r20
 3be:	f5 0b       	sbc	r31, r21

000003c0 <__udivmodsi4_ep>:
 3c0:	66 1f       	adc	r22, r22
 3c2:	77 1f       	adc	r23, r23
 3c4:	88 1f       	adc	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	1a 94       	dec	r1
 3ca:	69 f7       	brne	.-38     	; 0x3a6 <__udivmodsi4_loop>
 3cc:	60 95       	com	r22
 3ce:	70 95       	com	r23
 3d0:	80 95       	com	r24
 3d2:	90 95       	com	r25
 3d4:	9b 01       	movw	r18, r22
 3d6:	ac 01       	movw	r20, r24
 3d8:	bd 01       	movw	r22, r26
 3da:	cf 01       	movw	r24, r30
 3dc:	08 95       	ret

000003de <_exit>:
 3de:	f8 94       	cli

000003e0 <__stop_program>:
 3e0:	ff cf       	rjmp	.-2      	; 0x3e0 <__stop_program>
