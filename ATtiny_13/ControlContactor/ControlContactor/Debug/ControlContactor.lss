
ControlContactor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000110  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000492  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000039e  00000000  00000000  000005fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000240  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000282  00000000  00000000  00000c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00000e82  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000f5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	02 d0       	rcall	.+4      	; 0x22 <main>
  1e:	34 c0       	rjmp	.+104    	; 0x88 <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <main>:
#define PIN_RELAY_WHITE		3
#define PIN_RELAY_RED		4

int main(void)
{
	setb(PORTB, PIN_RF_WHITE);
  22:	c1 9a       	sbi	0x18, 1	; 24
	setb(PORTB, PIN_RF_RED);
  24:	c0 9a       	sbi	0x18, 0	; 24
	
	clrb(DDRB, PIN_RF_WHITE);
  26:	b9 98       	cbi	0x17, 1	; 23
	clrb(DDRB, PIN_RF_RED);
  28:	b8 98       	cbi	0x17, 0	; 23
	setb(DDRB, PIN_RELAY_WHITE);
  2a:	bb 9a       	sbi	0x17, 3	; 23
	setb(DDRB, PIN_RELAY_RED);
  2c:	bc 9a       	sbi	0x17, 4	; 23
	
	/* Replace with your application code */
	while (1)
	{
		if (inbit(PINB, PIN_RF_WHITE))
  2e:	b1 9b       	sbis	0x16, 1	; 22
  30:	14 c0       	rjmp	.+40     	; 0x5a <__SREG__+0x1b>
		{
			setb(PORTB, PIN_RELAY_WHITE);
  32:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  34:	2f ef       	ldi	r18, 0xFF	; 255
  36:	83 ed       	ldi	r24, 0xD3	; 211
  38:	90 e3       	ldi	r25, 0x30	; 48
  3a:	21 50       	subi	r18, 0x01	; 1
  3c:	80 40       	sbci	r24, 0x00	; 0
  3e:	90 40       	sbci	r25, 0x00	; 0
  40:	e1 f7       	brne	.-8      	; 0x3a <main+0x18>
  42:	00 c0       	rjmp	.+0      	; 0x44 <__SREG__+0x5>
  44:	00 00       	nop
			_delay_ms(1000);
			clrb(PORTB, PIN_RELAY_WHITE);
  46:	c3 98       	cbi	0x18, 3	; 24
  48:	2f ef       	ldi	r18, 0xFF	; 255
  4a:	83 ed       	ldi	r24, 0xD3	; 211
  4c:	90 e3       	ldi	r25, 0x30	; 48
  4e:	21 50       	subi	r18, 0x01	; 1
  50:	80 40       	sbci	r24, 0x00	; 0
  52:	90 40       	sbci	r25, 0x00	; 0
  54:	e1 f7       	brne	.-8      	; 0x4e <__SREG__+0xf>
  56:	00 c0       	rjmp	.+0      	; 0x58 <__SREG__+0x19>
  58:	00 00       	nop
			_delay_ms(1000);
		}
		if (inbit(PINB, PIN_RF_RED))
  5a:	b0 9b       	sbis	0x16, 0	; 22
  5c:	e8 cf       	rjmp	.-48     	; 0x2e <main+0xc>
		{
			setb(PORTB, PIN_RELAY_RED);
  5e:	c4 9a       	sbi	0x18, 4	; 24
  60:	2f ef       	ldi	r18, 0xFF	; 255
  62:	83 ed       	ldi	r24, 0xD3	; 211
  64:	90 e3       	ldi	r25, 0x30	; 48
  66:	21 50       	subi	r18, 0x01	; 1
  68:	80 40       	sbci	r24, 0x00	; 0
  6a:	90 40       	sbci	r25, 0x00	; 0
  6c:	e1 f7       	brne	.-8      	; 0x66 <__SREG__+0x27>
  6e:	00 c0       	rjmp	.+0      	; 0x70 <__SREG__+0x31>
  70:	00 00       	nop
			_delay_ms(1000);
			clrb(PORTB, PIN_RELAY_RED);
  72:	c4 98       	cbi	0x18, 4	; 24
  74:	2f ef       	ldi	r18, 0xFF	; 255
  76:	83 ed       	ldi	r24, 0xD3	; 211
  78:	90 e3       	ldi	r25, 0x30	; 48
  7a:	21 50       	subi	r18, 0x01	; 1
  7c:	80 40       	sbci	r24, 0x00	; 0
  7e:	90 40       	sbci	r25, 0x00	; 0
  80:	e1 f7       	brne	.-8      	; 0x7a <__SREG__+0x3b>
  82:	00 c0       	rjmp	.+0      	; 0x84 <__SREG__+0x45>
  84:	00 00       	nop
  86:	d3 cf       	rjmp	.-90     	; 0x2e <main+0xc>

00000088 <_exit>:
  88:	f8 94       	cli

0000008a <__stop_program>:
  8a:	ff cf       	rjmp	.-2      	; 0x8a <__stop_program>
