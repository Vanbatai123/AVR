
USB_COMPORT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000a7a  00000b0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001d8  0080006c  0080006c  00000b1a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b1a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000b88  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000185f  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb6  00000000  00000000  000024bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000128c  00000000  00000000  00003075  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00004304  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000086c  00000000  00000000  00004474  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e49  00000000  00000000  00004ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00005b29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	58 c0       	rjmp	.+176    	; 0xb2 <__ctors_end>
   2:	8c c0       	rjmp	.+280    	; 0x11c <__vector_1>
   4:	71 c0       	rjmp	.+226    	; 0xe8 <__bad_interrupt>
   6:	70 c0       	rjmp	.+224    	; 0xe8 <__bad_interrupt>
   8:	6f c0       	rjmp	.+222    	; 0xe8 <__bad_interrupt>
   a:	6e c0       	rjmp	.+220    	; 0xe8 <__bad_interrupt>
   c:	6d c0       	rjmp	.+218    	; 0xe8 <__bad_interrupt>
   e:	6c c0       	rjmp	.+216    	; 0xe8 <__bad_interrupt>
  10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
  12:	6a c0       	rjmp	.+212    	; 0xe8 <__bad_interrupt>
  14:	69 c0       	rjmp	.+210    	; 0xe8 <__bad_interrupt>
  16:	68 c0       	rjmp	.+208    	; 0xe8 <__bad_interrupt>
  18:	67 c0       	rjmp	.+206    	; 0xe8 <__bad_interrupt>
  1a:	66 c0       	rjmp	.+204    	; 0xe8 <__bad_interrupt>
  1c:	65 c0       	rjmp	.+202    	; 0xe8 <__bad_interrupt>
  1e:	64 c0       	rjmp	.+200    	; 0xe8 <__bad_interrupt>
  20:	63 c0       	rjmp	.+198    	; 0xe8 <__bad_interrupt>
  22:	62 c0       	rjmp	.+196    	; 0xe8 <__bad_interrupt>
  24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>

00000026 <__trampolines_end>:
  26:	09 02       	muls	r16, r25
  28:	43 00       	.word	0x0043	; ????
  2a:	02 01       	movw	r0, r4
  2c:	00 80       	ld	r0, Z
  2e:	32 09       	sbc	r19, r2
  30:	04 00       	.word	0x0004	; ????
  32:	00 01       	movw	r0, r0
  34:	02 02       	muls	r16, r18
  36:	01 00       	.word	0x0001	; ????
  38:	05 24       	eor	r0, r5
  3a:	00 10       	cpse	r0, r0
  3c:	01 04       	cpc	r0, r1
  3e:	24 02       	muls	r18, r20
  40:	02 05       	cpc	r16, r2
  42:	24 06       	cpc	r2, r20
  44:	00 01       	movw	r0, r0
  46:	05 24       	eor	r0, r5
  48:	01 03       	mulsu	r16, r17
  4a:	01 07       	cpc	r16, r17
  4c:	05 83       	std	Z+5, r16	; 0x05
  4e:	03 08       	sbc	r0, r3
  50:	00 ff       	sbrs	r16, 0
  52:	09 04       	cpc	r0, r9
  54:	01 00       	.word	0x0001	; ????
  56:	02 0a       	sbc	r0, r18
  58:	00 00       	nop
  5a:	00 07       	cpc	r16, r16
  5c:	05 01       	movw	r0, r10
  5e:	02 08       	sbc	r0, r2
  60:	00 00       	nop
  62:	07 05       	cpc	r16, r7
  64:	81 02       	muls	r24, r17
  66:	08 00       	.word	0x0008	; ????
	...

00000069 <usbDescriptorDevice>:
  69:	12 01 10 01 02 00 00 08 c0 16 e1 05 00 01 01 02     ................
  79:	00 01                                               ..

0000007b <usbDescriptorStringDevice>:
  7b:	10 03 55 00 53 00 42 00 2d 00 32 00 33 00 32 00     ..U.S.B.-.2.3.2.

0000008b <usbDescriptorStringVendor>:
  8b:	22 03 77 00 77 00 77 00 2e 00 72 00 65 00 63 00     ".w.w.w...r.e.c.
  9b:	75 00 72 00 73 00 69 00 6f 00 6e 00 2e 00 6a 00     u.r.s.i.o.n...j.
  ab:	70 00                                               p.

000000ad <usbDescriptorString0>:
  ad:	04 03 09 04 00                                      .....

000000b2 <__ctors_end>:
  b2:	11 24       	eor	r1, r1
  b4:	1f be       	out	0x3f, r1	; 63
  b6:	cf e5       	ldi	r28, 0x5F	; 95
  b8:	d4 e0       	ldi	r29, 0x04	; 4
  ba:	de bf       	out	0x3e, r29	; 62
  bc:	cd bf       	out	0x3d, r28	; 61

000000be <__do_copy_data>:
  be:	10 e0       	ldi	r17, 0x00	; 0
  c0:	a0 e6       	ldi	r26, 0x60	; 96
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	ea e7       	ldi	r30, 0x7A	; 122
  c6:	fa e0       	ldi	r31, 0x0A	; 10
  c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x10>
  ca:	05 90       	lpm	r0, Z+
  cc:	0d 92       	st	X+, r0
  ce:	ac 36       	cpi	r26, 0x6C	; 108
  d0:	b1 07       	cpc	r27, r17
  d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0xc>

000000d4 <__do_clear_bss>:
  d4:	22 e0       	ldi	r18, 0x02	; 2
  d6:	ac e6       	ldi	r26, 0x6C	; 108
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
  dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
  de:	a4 34       	cpi	r26, 0x44	; 68
  e0:	b2 07       	cpc	r27, r18
  e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>
  e4:	02 d2       	rcall	.+1028   	; 0x4ea <main>
  e6:	c7 c4       	rjmp	.+2446   	; 0xa76 <_exit>

000000e8 <__bad_interrupt>:
  e8:	8b cf       	rjmp	.-234    	; 0x0 <__vectors>

000000ea <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
  ea:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
  ec:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
  ee:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
  f0:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
  f2:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
  f4:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
  f6:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
  f8:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
  fa:	09 c0       	rjmp	.+18     	; 0x10e <usbCrcLoopEntry>

000000fc <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
  fc:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
  fe:	82 27       	eor	r24, r18

00000100 <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 100:	97 95       	ror	r25
    ror     resCrcL
 102:	87 95       	ror	r24
    brcs    usbCrcNoXor
 104:	10 f0       	brcs	.+4      	; 0x10a <usbCrcNoXor>
    eor     resCrcL, polyL
 106:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 108:	95 27       	eor	r25, r21

0000010a <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 10a:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 10c:	c8 f3       	brcs	.-14     	; 0x100 <usbCrcBitLoop>

0000010e <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 10e:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 110:	a8 f3       	brcs	.-22     	; 0xfc <usbCrcByteLoop>

00000112 <usbCrcReady>:
usbCrcReady:
    ret
 112:	08 95       	ret

00000114 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 114:	ea df       	rcall	.-44     	; 0xea <usbCrc16>
    st      ptr+, resCrcL
 116:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 118:	9d 93       	st	X+, r25
    ret
 11a:	08 95       	ret

0000011c <__vector_1>:
; Numbers in brackets are clocks counted from center of last sync bit
; when instruction starts

USB_INTR_VECTOR:
;order of registers pushed: YL, SREG YH, [sofError], bitcnt, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-25] push only what is necessary to sync with edge ASAP
 11c:	cf 93       	push	r28
    in      YL, SREG            ;[-23]
 11e:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-22]
 120:	cf 93       	push	r28
    push    YH                  ;[-20]
 122:	df 93       	push	r29

00000124 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 124:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 126:	81 9b       	sbis	0x10, 1	; 16
    brne    waitForJ        ; just make sure we have ANY timeout
 128:	e9 f7       	brne	.-6      	; 0x124 <waitForJ>

0000012a <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-15]
 12a:	81 9b       	sbis	0x10, 1	; 16
    rjmp    foundK              ;[-14]
 12c:	0b c0       	rjmp	.+22     	; 0x144 <foundK>
    sbis    USBIN, USBMINUS
 12e:	81 9b       	sbis	0x10, 1	; 16
    rjmp    foundK
 130:	09 c0       	rjmp	.+18     	; 0x144 <foundK>
    sbis    USBIN, USBMINUS
 132:	81 9b       	sbis	0x10, 1	; 16
    rjmp    foundK
 134:	07 c0       	rjmp	.+14     	; 0x144 <foundK>
    sbis    USBIN, USBMINUS
 136:	81 9b       	sbis	0x10, 1	; 16
    rjmp    foundK
 138:	05 c0       	rjmp	.+10     	; 0x144 <foundK>
    sbis    USBIN, USBMINUS
 13a:	81 9b       	sbis	0x10, 1	; 16
    rjmp    foundK
 13c:	03 c0       	rjmp	.+6      	; 0x144 <foundK>
    sbis    USBIN, USBMINUS
 13e:	81 9b       	sbis	0x10, 1	; 16
    rjmp    foundK
 140:	01 c0       	rjmp	.+2      	; 0x144 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 142:	8e c0       	rjmp	.+284    	; 0x260 <sofError>

00000144 <foundK>:
foundK:                         ;[-12]
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 5 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    bitcnt              ;[-12]
 144:	6f 93       	push	r22
;   [---]                       ;[-11]
    lds     YL, usbInputBufOffset;[-10]
 146:	c0 91 1b 02 	lds	r28, 0x021B	; 0x80021b <usbInputBufOffset>
;   [---]                       ;[-9]
    clr     YH                  ;[-8]
 14a:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-7] [rx loop init]
 14c:	ce 5d       	subi	r28, 0xDE	; 222
    sbci    YH, hi8(-(usbRxBuf));[-6] [rx loop init]
 14e:	dd 4f       	sbci	r29, 0xFD	; 253
    push    shift               ;[-5]
 150:	2f 93       	push	r18
;   [---]                       ;[-4]
    ldi     bitcnt, 0x55        ;[-3] [rx loop init]
 152:	65 e5       	ldi	r22, 0x55	; 85
    sbis    USBIN, USBMINUS     ;[-2] we want two bits K (sample 2 cycles too early)
 154:	81 9b       	sbis	0x10, 1	; 16
    rjmp    haveTwoBitsK        ;[-1]
 156:	03 c0       	rjmp	.+6      	; 0x15e <haveTwoBitsK>
    pop     shift               ;[0] undo the push from before
 158:	2f 91       	pop	r18
    pop     bitcnt              ;[2] undo the push from before
 15a:	6f 91       	pop	r22
    rjmp    waitForK            ;[4] this was not the end of sync, retry
 15c:	e6 cf       	rjmp	.-52     	; 0x12a <waitForK>

0000015e <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:
    push    x1              ;[1]
 15e:	0f 93       	push	r16
    push    x2              ;[3]
 160:	1f 93       	push	r17
    push    x3              ;[5]
 162:	4f 93       	push	r20
    ldi     shift, 0        ;[7]
 164:	20 e0       	ldi	r18, 0x00	; 0
    ldi     x3, 1<<4        ;[8] [rx loop init] first sample is inverse bit, compensate that
 166:	40 e1       	ldi	r20, 0x10	; 16
    push    x4              ;[9] == leap
 168:	5f 93       	push	r21

    in      x1, USBIN       ;[11] <-- sample bit 0
 16a:	00 b3       	in	r16, 0x10	; 16
    andi    x1, USBMASK     ;[12]
 16c:	06 70       	andi	r16, 0x06	; 6
    bst     x1, USBMINUS    ;[13]
 16e:	01 fb       	bst	r16, 1
    bld     shift, 7        ;[14]
 170:	27 f9       	bld	r18, 7
    push    cnt             ;[15]
 172:	3f 93       	push	r19
    ldi     leap, 0         ;[17] [rx loop init]
 174:	50 e0       	ldi	r21, 0x00	; 0
    ldi     cnt, USB_BUFSIZE;[18] [rx loop init]
 176:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit1          ;[19] arrives at [21]
 178:	39 c0       	rjmp	.+114    	; 0x1ec <rxbit1>

0000017a <unstuff6>:

; duration of unstuffing code should be 10.66666667 cycles. We adjust "leap"
; accordingly to approximate this value in the long run.

unstuff6:
    andi    x2, USBMASK ;[03]
 17a:	16 70       	andi	r17, 0x06	; 6
    ori     x3, 1<<6    ;[04] will not be shifted any more
 17c:	40 64       	ori	r20, 0x40	; 64
    andi    shift, ~0x80;[05]
 17e:	2f 77       	andi	r18, 0x7F	; 127
    mov     x1, x2      ;[06] sampled bit 7 is actually re-sampled bit 6
 180:	01 2f       	mov	r16, r17
    subi    leap, -1    ;[07] total duration = 11 bits -> subtract 1/3
 182:	5f 5f       	subi	r21, 0xFF	; 255
    rjmp    didUnstuff6 ;[08]
 184:	1e c0       	rjmp	.+60     	; 0x1c2 <didUnstuff6>

00000186 <unstuff7>:

unstuff7:
    ori     x3, 1<<7    ;[09] will not be shifted any more
 186:	40 68       	ori	r20, 0x80	; 128
    in      x2, USBIN   ;[00] [10]  re-sample bit 7
 188:	10 b3       	in	r17, 0x10	; 16
    andi    x2, USBMASK ;[01]
 18a:	16 70       	andi	r17, 0x06	; 6
    andi    shift, ~0x80;[02]
 18c:	2f 77       	andi	r18, 0x7F	; 127
    subi    leap, 2     ;[03] total duration = 10 bits -> add 1/3
 18e:	52 50       	subi	r21, 0x02	; 2
    rjmp    didUnstuff7 ;[04]
 190:	1f c0       	rjmp	.+62     	; 0x1d0 <didUnstuff7>

00000192 <unstuffEven>:

unstuffEven:
    ori     x3, 1<<6    ;[09] will be shifted right 6 times for bit 0
 192:	40 64       	ori	r20, 0x40	; 64
    in      x1, USBIN   ;[00] [10]
 194:	00 b3       	in	r16, 0x10	; 16
    andi    shift, ~0x80;[01]
 196:	2f 77       	andi	r18, 0x7F	; 127
    andi    x1, USBMASK ;[02]
 198:	06 70       	andi	r16, 0x06	; 6
    breq    se0         ;[03]
 19a:	d1 f1       	breq	.+116    	; 0x210 <se0>
    subi    leap, -1    ;[04] total duration = 11 bits -> subtract 1/3
 19c:	5f 5f       	subi	r21, 0xFF	; 255
    nop2                ;[05]
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <unstuffEven+0xe>
    rjmp    didUnstuffE ;[06]
 1a0:	23 c0       	rjmp	.+70     	; 0x1e8 <didUnstuffE>

000001a2 <unstuffOdd>:

unstuffOdd:
    ori     x3, 1<<5    ;[09] will be shifted right 4 times for bit 1
 1a2:	40 62       	ori	r20, 0x20	; 32
    in      x2, USBIN   ;[00] [10]
 1a4:	10 b3       	in	r17, 0x10	; 16
    andi    shift, ~0x80;[01]
 1a6:	2f 77       	andi	r18, 0x7F	; 127
    andi    x2, USBMASK ;[02]
 1a8:	16 70       	andi	r17, 0x06	; 6
    breq    se0         ;[03]
 1aa:	91 f1       	breq	.+100    	; 0x210 <se0>
    subi    leap, -1    ;[04] total duration = 11 bits -> subtract 1/3
 1ac:	5f 5f       	subi	r21, 0xFF	; 255
    nop2                ;[05]
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <unstuffOdd+0xe>
    rjmp    didUnstuffO ;[06]
 1b0:	25 c0       	rjmp	.+74     	; 0x1fc <didUnstuffO>

000001b2 <rxByteLoop>:

rxByteLoop:
    andi    x1, USBMASK ;[03]
 1b2:	06 70       	andi	r16, 0x06	; 6
    eor     x2, x1      ;[04]
 1b4:	10 27       	eor	r17, r16
    subi    leap, 1     ;[05]
 1b6:	51 50       	subi	r21, 0x01	; 1
    brpl    skipLeap    ;[06]
 1b8:	12 f4       	brpl	.+4      	; 0x1be <skipLeap>
    subi    leap, -3    ;1 one leap cycle every 3rd byte -> 85 + 1/3 cycles per byte
 1ba:	5d 5f       	subi	r21, 0xFD	; 253
	...

000001be <skipLeap>:
    nop                 ;1
skipLeap:
    subi    x2, 1       ;[08]
 1be:	11 50       	subi	r17, 0x01	; 1
    ror     shift       ;[09]
 1c0:	27 95       	ror	r18

000001c2 <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0xfc ;[10]
 1c2:	2c 3f       	cpi	r18, 0xFC	; 252
    in      x2, USBIN   ;[00] [11] <-- sample bit 7
 1c4:	10 b3       	in	r17, 0x10	; 16
    brcc    unstuff6    ;[01]
 1c6:	c8 f6       	brcc	.-78     	; 0x17a <unstuff6>
    andi    x2, USBMASK ;[02]
 1c8:	16 70       	andi	r17, 0x06	; 6
    eor     x1, x2      ;[03]
 1ca:	01 27       	eor	r16, r17
    subi    x1, 1       ;[04]
 1cc:	01 50       	subi	r16, 0x01	; 1
    ror     shift       ;[05]
 1ce:	27 95       	ror	r18

000001d0 <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0xfc ;[06]
 1d0:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuff7    ;[07]
 1d2:	c8 f6       	brcc	.-78     	; 0x186 <unstuff7>
    eor     x3, shift   ;[08] reconstruct: x3 is 1 at bit locations we changed, 0 at others
 1d4:	42 27       	eor	r20, r18
    st      y+, x3      ;[09] store data
 1d6:	49 93       	st	Y+, r20

000001d8 <rxBitLoop>:
rxBitLoop:
    in      x1, USBIN   ;[00] [11] <-- sample bit 0/2/4
 1d8:	00 b3       	in	r16, 0x10	; 16
    andi    x1, USBMASK ;[01]
 1da:	06 70       	andi	r16, 0x06	; 6
    eor     x2, x1      ;[02]
 1dc:	10 27       	eor	r17, r16
    andi    x3, 0x3f    ;[03] topmost two bits reserved for 6 and 7
 1de:	4f 73       	andi	r20, 0x3F	; 63
    subi    x2, 1       ;[04]
 1e0:	11 50       	subi	r17, 0x01	; 1
    ror     shift       ;[05]
 1e2:	27 95       	ror	r18
    cpi     shift, 0xfc ;[06]
 1e4:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuffEven ;[07]
 1e6:	a8 f6       	brcc	.-86     	; 0x192 <unstuffEven>

000001e8 <didUnstuffE>:
didUnstuffE:
    lsr     x3          ;[08]
 1e8:	46 95       	lsr	r20
    lsr     x3          ;[09]
 1ea:	46 95       	lsr	r20

000001ec <rxbit1>:
rxbit1:
    in      x2, USBIN   ;[00] [10] <-- sample bit 1/3/5
 1ec:	10 b3       	in	r17, 0x10	; 16
    andi    x2, USBMASK ;[01]
 1ee:	16 70       	andi	r17, 0x06	; 6
    breq    se0         ;[02]
 1f0:	79 f0       	breq	.+30     	; 0x210 <se0>
    eor     x1, x2      ;[03]
 1f2:	01 27       	eor	r16, r17
    subi    x1, 1       ;[04]
 1f4:	01 50       	subi	r16, 0x01	; 1
    ror     shift       ;[05]
 1f6:	27 95       	ror	r18
    cpi     shift, 0xfc ;[06]
 1f8:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuffOdd  ;[07]
 1fa:	98 f6       	brcc	.-90     	; 0x1a2 <unstuffOdd>

000001fc <didUnstuffO>:
didUnstuffO:
    subi    bitcnt, 0xab;[08] == addi 0x55, 0x55 = 0x100/3
 1fc:	6b 5a       	subi	r22, 0xAB	; 171
    brcs    rxBitLoop   ;[09]
 1fe:	60 f3       	brcs	.-40     	; 0x1d8 <rxBitLoop>

    subi    cnt, 1      ;[10]
 200:	31 50       	subi	r19, 0x01	; 1
    in      x1, USBIN   ;[00] [11] <-- sample bit 6
 202:	00 b3       	in	r16, 0x10	; 16
    brcc    rxByteLoop  ;[01]
 204:	b0 f6       	brcc	.-84     	; 0x1b2 <rxByteLoop>
    rjmp    overflow
 206:	00 c0       	rjmp	.+0      	; 0x208 <overflow>

00000208 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 208:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 20a:	1a bf       	out	0x3a, r17	; 58

0000020c <ignorePacket>:
ignorePacket:
    clr     token
 20c:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 20e:	1c c0       	rjmp	.+56     	; 0x248 <storeTokenAndReturn>

00000210 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 210:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 212:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 214:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 216:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 218:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 21a:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
 21c:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 21e:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 220:	21 f1       	breq	.+72     	; 0x26a <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 222:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 224:	11 f1       	breq	.+68     	; 0x26a <handleData>
    lds     shift, usbDeviceAddr;[17]
 226:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <usbDeviceAddr>
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 22a:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 22c:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 22e:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 230:	ed cf       	rjmp	.-38     	; 0x20c <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 232:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 234:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 236:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 238:	69 f1       	breq	.+90     	; 0x294 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 23a:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 23c:	11 f0       	breq	.+4      	; 0x242 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 23e:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 240:	29 f7       	brne	.-54     	; 0x20c <ignorePacket>

00000242 <handleSetupOrOut>:
;Setup and Out are followed by a data packet two bit times (16 cycles) after
;the end of SE0. The sync code allows up to 40 cycles delay from the start of
;the sync pattern until the first bit is sampled. That's a total of 56 cycles.
handleSetupOrOut:               ;[32]
#if USB_CFG_IMPLEMENT_FN_WRITEOUT   /* if we have data for endpoint != 0, set usbCurrentTok to address */
    andi    x3, 0xf             ;[32]
 242:	4f 70       	andi	r20, 0x0F	; 15
    breq    storeTokenAndReturn ;[33]
 244:	09 f0       	breq	.+2      	; 0x248 <storeTokenAndReturn>
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
 246:	04 2f       	mov	r16, r20

00000248 <storeTokenAndReturn>:
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 248:	00 93 20 02 	sts	0x0220, r16	; 0x800220 <usbCurrentTok>

0000024c <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 24c:	3f 91       	pop	r19
 24e:	5f 91       	pop	r21
 250:	4f 91       	pop	r20
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	2f 91       	pop	r18
 258:	6f 91       	pop	r22
    USB_LOAD_PENDING(YL)        ;[49]
 25a:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 25c:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 25e:	62 cf       	rjmp	.-316    	; 0x124 <waitForJ>

00000260 <sofError>:
sofError:
    POP_RETI                    ;macro call
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	cf bf       	out	0x3f, r28	; 63
 266:	cf 91       	pop	r28
    reti
 268:	18 95       	reti

0000026a <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 26a:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <usbCurrentTok>
    tst     shift               ;[20]
 26e:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 270:	69 f3       	breq	.-38     	; 0x24c <doReturn>
    lds     x2, usbRxLen        ;[22]
 272:	10 91 1e 02 	lds	r17, 0x021E	; 0x80021e <usbRxLen>
    tst     x2                  ;[24]
 276:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 278:	e9 f5       	brne	.+122    	; 0x2f4 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 27a:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 27c:	ea f1       	brmi	.+122    	; 0x2f8 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 27e:	30 93 1e 02 	sts	0x021E, r19	; 0x80021e <usbRxLen>
    sts     usbRxToken, shift   ;[30]
 282:	20 93 1a 02 	sts	0x021A, r18	; 0x80021a <usbRxToken>
    lds     x2, usbInputBufOffset;[32] swap buffers
 286:	10 91 1b 02 	lds	r17, 0x021B	; 0x80021b <usbInputBufOffset>
    ldi     cnt, USB_BUFSIZE    ;[34]
 28a:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 28c:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 28e:	30 93 1b 02 	sts	0x021B, r19	; 0x80021b <usbInputBufOffset>
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 292:	32 c0       	rjmp	.+100    	; 0x2f8 <sendAckAndReti>

00000294 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 294:	00 91 1e 02 	lds	r16, 0x021E	; 0x80021e <usbRxLen>
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 298:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 29a:	64 f5       	brge	.+88     	; 0x2f4 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 29c:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 29e:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 2a0:	49 f4       	brne	.+18     	; 0x2b4 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 2a2:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <usbTxLen>
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 2a6:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 2a8:	28 c0       	rjmp	.+80     	; 0x2fa <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 2aa:	00 93 6b 00 	sts	0x006B, r16	; 0x80006b <usbTxLen>
    ldi     YL, lo8(usbTxBuf)   ;[43]
 2ae:	c2 e0       	ldi	r28, 0x02	; 2
    ldi     YH, hi8(usbTxBuf)   ;[44]
 2b0:	d2 e0       	ldi	r29, 0x02	; 2
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 2b2:	27 c0       	rjmp	.+78     	; 0x302 <usbSendAndReti>

000002b4 <handleIn1>:

#if !USB_CFG_SUPPRESS_INTR_CODE && USB_CFG_HAVE_INTRIN_ENDPOINT /* placed here due to relative jump range */
handleIn1:                      ;[38]
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
 2b4:	43 30       	cpi	r20, 0x03	; 3
    breq    handleIn3           ;[39]
 2b6:	49 f0       	breq	.+18     	; 0x2ca <handleIn3>
#endif
    lds     cnt, usbTxLen1      ;[40]
 2b8:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <usbTxStatus1>
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 2bc:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 2be:	1d c0       	rjmp	.+58     	; 0x2fa <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 2c0:	00 93 0d 02 	sts	0x020D, r16	; 0x80020d <usbTxStatus1>
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 2c4:	ce e0       	ldi	r28, 0x0E	; 14
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 2c6:	d2 e0       	ldi	r29, 0x02	; 2
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 2c8:	1c c0       	rjmp	.+56     	; 0x302 <usbSendAndReti>

000002ca <handleIn3>:

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
handleIn3:
    lds     cnt, usbTxLen3      ;[41]
 2ca:	30 91 38 02 	lds	r19, 0x0238	; 0x800238 <usbTxStatus3>
    sbrc    cnt, 4              ;[43]
 2ce:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[44] 49 + 16 = 65 until SOP
 2d0:	14 c0       	rjmp	.+40     	; 0x2fa <sendCntAndReti>
    sts     usbTxLen3, x1       ;[45] x1 == USBPID_NAK from above
 2d2:	00 93 38 02 	sts	0x0238, r16	; 0x800238 <usbTxStatus3>
    ldi     YL, lo8(usbTxBuf3)  ;[47]
 2d6:	c9 e3       	ldi	r28, 0x39	; 57
    ldi     YH, hi8(usbTxBuf3)  ;[48]
 2d8:	d2 e0       	ldi	r29, 0x02	; 2
    rjmp    usbSendAndReti      ;[49] 51 + 12 = 63 until SOP
 2da:	13 c0       	rjmp	.+38     	; 0x302 <usbSendAndReti>

000002dc <bitstuffN>:
; J = (D+ = 0), (D- = 1)
; K = (D+ = 1), (D- = 0)
; Spec allows 7.5 bit times from EOP to SOP for replies

bitstuffN:
    eor     x1, x4          ;[5]
 2dc:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6]
 2de:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[7]
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <bitstuffN+0x6>
    nop                     ;[9]
 2e2:	00 00       	nop
    out     USBOUT, x1      ;[10] <-- out
 2e4:	02 bb       	out	0x12, r16	; 18
    rjmp    didStuffN       ;[0]
 2e6:	1a c0       	rjmp	.+52     	; 0x31c <didStuffN>

000002e8 <bitstuff6>:
    
bitstuff6:
    eor     x1, x4          ;[5]
 2e8:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6] Carry is zero due to brcc
 2ea:	10 e0       	ldi	r17, 0x00	; 0
    rol     shift           ;[7] compensate for ror shift at branch destination
 2ec:	22 1f       	adc	r18, r18
    rjmp    didStuff6       ;[8]
 2ee:	1d c0       	rjmp	.+58     	; 0x32a <didStuff6>

000002f0 <bitstuff7>:

bitstuff7:
    ldi     x2, 0           ;[2] Carry is zero due to brcc
 2f0:	10 e0       	ldi	r17, 0x00	; 0
    rjmp    didStuff7       ;[3]
 2f2:	21 c0       	rjmp	.+66     	; 0x336 <didStuff7>

000002f4 <sendNakAndReti>:


sendNakAndReti:
    ldi     x3, USBPID_NAK  ;[-18]
 2f4:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    sendX3AndReti   ;[-17]
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <sendX3AndReti>

000002f8 <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
 2f8:	32 ed       	ldi	r19, 0xD2	; 210

000002fa <sendCntAndReti>:
sendCntAndReti:
    mov     x3, cnt         ;[-16]
 2fa:	43 2f       	mov	r20, r19

000002fc <sendX3AndReti>:
sendX3AndReti:
    ldi     YL, 20          ;[-15] x3==r20 address is 20
 2fc:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0           ;[-14]
 2fe:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
 300:	32 e0       	ldi	r19, 0x02	; 2

00000302 <usbSendAndReti>:
;uses: x1...x4, btcnt, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
;We don't match the transfer rate exactly (don't insert leap cycles every third
;byte) because the spec demands only 1.5% precision anyway.
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
 302:	11 b3       	in	r17, 0x11	; 17
    ori     x2, USBMASK     ;[-11]
 304:	16 60       	ori	r17, 0x06	; 6
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 306:	91 9a       	sbi	0x12, 1	; 18
    in      x1, USBOUT      ;[-8] port mirror for tx loop
 308:	02 b3       	in	r16, 0x12	; 18
    out     USBDDR, x2      ;[-7] <- acquire bus
 30a:	11 bb       	out	0x11, r17	; 17
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
 30c:	56 e0       	ldi	r21, 0x06	; 6
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
 30e:	20 e8       	ldi	r18, 0x80	; 128

00000310 <txByteLoop>:
txByteLoop:
    ldi     bitcnt, 0x35    ;[-4] [6] binary 0011 0101
 310:	65 e3       	ldi	r22, 0x35	; 53

00000312 <txBitLoop>:
txBitLoop:
    sbrs    shift, 0        ;[-3] [7]
 312:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[-2] [8]
 314:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[-1] [9] <-- out N
 316:	02 bb       	out	0x12, r16	; 18
    ror     shift           ;[0] [10]
 318:	27 95       	ror	r18
    ror     x2              ;[1]
 31a:	17 95       	ror	r17

0000031c <didStuffN>:
didStuffN:
    cpi     x2, 0xfc        ;[2]
 31c:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[3]
 31e:	f0 f6       	brcc	.-68     	; 0x2dc <bitstuffN>
    lsr     bitcnt          ;[4]
 320:	66 95       	lsr	r22
    brcc    txBitLoop       ;[5]
 322:	b8 f7       	brcc	.-18     	; 0x312 <txBitLoop>
    brne    txBitLoop       ;[6]
 324:	b1 f7       	brne	.-20     	; 0x312 <txBitLoop>

    sbrs    shift, 0        ;[7]
 326:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[8]
 328:	05 27       	eor	r16, r21

0000032a <didStuff6>:
didStuff6:
    out     USBOUT, x1      ;[-1] [9] <-- out 6
 32a:	02 bb       	out	0x12, r16	; 18
    ror     shift           ;[0] [10]
 32c:	27 95       	ror	r18
    ror     x2              ;[1]
 32e:	17 95       	ror	r17
    cpi     x2, 0xfc        ;[2]
 330:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff6       ;[3]
 332:	d0 f6       	brcc	.-76     	; 0x2e8 <bitstuff6>
    ror     shift           ;[4]
 334:	27 95       	ror	r18

00000336 <didStuff7>:
didStuff7:
    ror     x2              ;[5]
 336:	17 95       	ror	r17
    sbrs    x2, 7           ;[6]
 338:	17 ff       	sbrs	r17, 7
    eor     x1, x4          ;[7]
 33a:	05 27       	eor	r16, r21
    nop                     ;[8]
 33c:	00 00       	nop
    cpi     x2, 0xfc        ;[9]
 33e:	1c 3f       	cpi	r17, 0xFC	; 252
    out     USBOUT, x1      ;[-1][10] <-- out 7
 340:	02 bb       	out	0x12, r16	; 18
    brcc    bitstuff7       ;[0] [11]
 342:	b0 f6       	brcc	.-84     	; 0x2f0 <bitstuff7>
    ld      shift, y+       ;[1]
 344:	29 91       	ld	r18, Y+
    dec     cnt             ;[3]
 346:	3a 95       	dec	r19
    brne    txByteLoop      ;[4]
 348:	19 f7       	brne	.-58     	; 0x310 <txByteLoop>
;make SE0:
    cbr     x1, USBMASK     ;[5] prepare SE0 [spec says EOP may be 21 to 25 cycles]
 34a:	09 7f       	andi	r16, 0xF9	; 249
    lds     x2, usbNewDeviceAddr;[6]
 34c:	10 91 1f 02 	lds	r17, 0x021F	; 0x80021f <usbNewDeviceAddr>
    lsl     x2              ;[8] we compare with left shifted address
 350:	11 0f       	add	r17, r17
    subi    YL, 20 + 2      ;[9] Only assign address on data packets, not ACK/NAK in x3
 352:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0           ;[10]
 354:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1      ;[11] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
 356:	02 bb       	out	0x12, r16	; 18
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign  ;[0]
 358:	11 f0       	breq	.+4      	; 0x35e <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
 35a:	10 93 19 02 	sts	0x0219, r17	; 0x800219 <usbDeviceAddr>

0000035e <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[2] int0 occurred during TX -- clear pending flag
 35e:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)   ;[3]
 360:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE     ;[4]
 362:	02 60       	ori	r16, 0x02	; 2
    in      x2, USBDDR      ;[5]
 364:	11 b3       	in	r17, 0x11	; 17
    cbr     x2, USBMASK     ;[6] set both pins to input
 366:	19 7f       	andi	r17, 0xF9	; 249
    mov     x3, x1          ;[7]
 368:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[8] configure no pullup on both pins
 36a:	49 7f       	andi	r20, 0xF9	; 249
    ldi     x4, 4           ;[9]
 36c:	54 e0       	ldi	r21, 0x04	; 4

0000036e <se0Delay>:
se0Delay:
    dec     x4              ;[10] [13] [16] [19]
 36e:	5a 95       	dec	r21
    brne    se0Delay        ;[11] [14] [17] [20]
 370:	f1 f7       	brne	.-4      	; 0x36e <se0Delay>
    out     USBOUT, x1      ;[21] <-- out J (idle) -- end of SE0 (EOP signal)
 372:	02 bb       	out	0x12, r16	; 18
    out     USBDDR, x2      ;[22] <-- release bus now
 374:	11 bb       	out	0x11, r17	; 17
    out     USBOUT, x3      ;[23] <-- ensure no pull-up resistors are active
 376:	42 bb       	out	0x12, r20	; 18
    rjmp    doReturn
 378:	69 cf       	rjmp	.-302    	; 0x24c <doReturn>

0000037a <resetUart>:

static uchar        stopbit, parity, databit;
static usbDWord_t   baud;

static void resetUart(void)
{
 37a:	0f 93       	push	r16

    uartInit(baud.dword, parity, stopbit, databit);
 37c:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <__data_end>
 380:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <__data_end+0x1>
 384:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end+0x2>
 388:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__data_end+0x3>
 38c:	00 91 70 00 	lds	r16, 0x0070	; 0x800070 <databit>
 390:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <stopbit>
 394:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <parity>
 398:	f6 d0       	rcall	.+492    	; 0x586 <uartInit>
    irptr    = 0;
 39a:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <irptr>
    iwptr    = 0;
 39e:	10 92 fe 00 	sts	0x00FE, r1	; 0x8000fe <iwptr>
    urptr    = 0;
 3a2:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <urptr>
    uwptr    = 0;
 3a6:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <uwptr>
}
 3aa:	0f 91       	pop	r16
 3ac:	08 95       	ret

000003ae <usbFunctionDescriptor>:


uchar usbFunctionDescriptor(usbRequest_t *rq)
{

    if(rq->wValue.bytes[1] == USBDESCR_DEVICE){
 3ae:	fc 01       	movw	r30, r24
 3b0:	83 81       	ldd	r24, Z+3	; 0x03
 3b2:	81 30       	cpi	r24, 0x01	; 1
 3b4:	41 f4       	brne	.+16     	; 0x3c6 <usbFunctionDescriptor+0x18>
        usbMsgPtr = (uchar *)usbDescriptorDevice;
 3b6:	e9 e6       	ldi	r30, 0x69	; 105
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	f0 93 1d 02 	sts	0x021D, r31	; 0x80021d <usbMsgPtr+0x1>
 3be:	e0 93 1c 02 	sts	0x021C, r30	; 0x80021c <usbMsgPtr>
        return usbDescriptorDevice[0];
 3c2:	80 81       	ld	r24, Z
 3c4:	08 95       	ret
    }else{  /* must be config descriptor */
        usbMsgPtr = (uchar *)configDescrCDC;
 3c6:	86 e2       	ldi	r24, 0x26	; 38
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <usbMsgPtr+0x1>
 3ce:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <usbMsgPtr>
        return sizeof(configDescrCDC);
 3d2:	83 e4       	ldi	r24, 0x43	; 67
    }
}
 3d4:	08 95       	ret

000003d6 <usbFunctionSetup>:
/* ------------------------------------------------------------------------- */
/* ----------------------------- USB interface ----------------------------- */
/* ------------------------------------------------------------------------- */

uchar usbFunctionSetup(uchar data[8])
{
 3d6:	fc 01       	movw	r30, r24
usbRequest_t    *rq = (void *)data;

    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
 3d8:	90 81       	ld	r25, Z
 3da:	90 76       	andi	r25, 0x60	; 96
 3dc:	90 32       	cpi	r25, 0x20	; 32
 3de:	f9 f4       	brne	.+62     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>

        if( rq->bRequest==GET_LINE_CODING || rq->bRequest==SET_LINE_CODING ){
 3e0:	81 81       	ldd	r24, Z+1	; 0x01
 3e2:	90 ee       	ldi	r25, 0xE0	; 224
 3e4:	98 0f       	add	r25, r24
 3e6:	92 30       	cpi	r25, 0x02	; 2
 3e8:	e0 f0       	brcs	.+56     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
            return 0xff;
        /*    GET_LINE_CODING -> usbFunctionRead()    */
        /*    SET_LINE_CODING -> usbFunctionWrite()    */
        }
        if(rq->bRequest == SET_CONTROL_LINE_STATE){
 3ea:	82 32       	cpi	r24, 0x22	; 34
 3ec:	81 f4       	brne	.+32     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
            UART_CTRL_PORT	= (UART_CTRL_PORT&~(1<<UART_CTRL_DTR))|((rq->wValue.word&1)<<UART_CTRL_DTR);
 3ee:	85 b3       	in	r24, 0x15	; 21
 3f0:	92 81       	ldd	r25, Z+2	; 0x02
 3f2:	91 70       	andi	r25, 0x01	; 1
 3f4:	99 0f       	add	r25, r25
 3f6:	99 0f       	add	r25, r25
 3f8:	99 0f       	add	r25, r25
 3fa:	87 7f       	andi	r24, 0xF7	; 247
 3fc:	89 2b       	or	r24, r25
 3fe:	85 bb       	out	0x15, r24	; 21

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
            /* Report serial state (carrier detect). On several Unix platforms,
             * tty devices can only be opened when carrier detect is set.
             */
            if( intr3Status==0 )
 400:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <intr3Status>
 404:	81 11       	cpse	r24, r1
 406:	03 c0       	rjmp	.+6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
                intr3Status = 2;
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <intr3Status>
#endif
        }
#if 1
        /*  Prepare bulk-in endpoint to respond to early termination   */
        if((rq->bmRequestType & USBRQ_DIR_MASK) == USBRQ_DIR_HOST_TO_DEVICE)
 40e:	80 81       	ld	r24, Z
 410:	88 23       	and	r24, r24
 412:	4c f0       	brlt	.+18     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
            sendEmptyFrame  = 1;
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <sendEmptyFrame>
#endif
    }

    return 0;
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	08 95       	ret
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	08 95       	ret
usbRequest_t    *rq = (void *)data;

    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */

        if( rq->bRequest==GET_LINE_CODING || rq->bRequest==SET_LINE_CODING ){
            return 0xff;
 422:	8f ef       	ldi	r24, 0xFF	; 255
 424:	08 95       	ret
        if((rq->bmRequestType & USBRQ_DIR_MASK) == USBRQ_DIR_HOST_TO_DEVICE)
            sendEmptyFrame  = 1;
#endif
    }

    return 0;
 426:	80 e0       	ldi	r24, 0x00	; 0
}
 428:	08 95       	ret

0000042a <usbFunctionRead>:
/*---------------------------------------------------------------------------*/
/* usbFunctionRead                                                          */
/*---------------------------------------------------------------------------*/

uchar usbFunctionRead( uchar *data, uchar len )
{
 42a:	fc 01       	movw	r30, r24

    data[0] = baud.bytes[0];
 42c:	ac e6       	ldi	r26, 0x6C	; 108
 42e:	b0 e0       	ldi	r27, 0x00	; 0
 430:	8c 91       	ld	r24, X
 432:	80 83       	st	Z, r24
    data[1] = baud.bytes[1];
 434:	11 96       	adiw	r26, 0x01	; 1
 436:	8c 91       	ld	r24, X
 438:	11 97       	sbiw	r26, 0x01	; 1
 43a:	81 83       	std	Z+1, r24	; 0x01
    data[2] = baud.bytes[2];
 43c:	12 96       	adiw	r26, 0x02	; 2
 43e:	8c 91       	ld	r24, X
 440:	12 97       	sbiw	r26, 0x02	; 2
 442:	82 83       	std	Z+2, r24	; 0x02
    data[3] = baud.bytes[3];
 444:	13 96       	adiw	r26, 0x03	; 3
 446:	8c 91       	ld	r24, X
 448:	83 83       	std	Z+3, r24	; 0x03
    data[4] = stopbit;
 44a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <stopbit>
 44e:	84 83       	std	Z+4, r24	; 0x04
    data[5] = parity;
 450:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <parity>
 454:	85 83       	std	Z+5, r24	; 0x05
    data[6] = databit;
 456:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <databit>
 45a:	86 83       	std	Z+6, r24	; 0x06

    return 7;
}
 45c:	87 e0       	ldi	r24, 0x07	; 7
 45e:	08 95       	ret

00000460 <usbFunctionWrite>:
/*---------------------------------------------------------------------------*/
/* usbFunctionWrite                                                          */
/*---------------------------------------------------------------------------*/

uchar usbFunctionWrite( uchar *data, uchar len )
{
 460:	fc 01       	movw	r30, r24

    /*    SET_LINE_CODING    */
    baud.bytes[0] = data[0];
 462:	ac e6       	ldi	r26, 0x6C	; 108
 464:	b0 e0       	ldi	r27, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	8c 93       	st	X, r24
    baud.bytes[1] = data[1];
 46a:	81 81       	ldd	r24, Z+1	; 0x01
 46c:	11 96       	adiw	r26, 0x01	; 1
 46e:	8c 93       	st	X, r24
 470:	11 97       	sbiw	r26, 0x01	; 1
    baud.bytes[2] = data[2];
 472:	82 81       	ldd	r24, Z+2	; 0x02
 474:	12 96       	adiw	r26, 0x02	; 2
 476:	8c 93       	st	X, r24
 478:	12 97       	sbiw	r26, 0x02	; 2
    baud.bytes[3] = data[3];
 47a:	83 81       	ldd	r24, Z+3	; 0x03
 47c:	13 96       	adiw	r26, 0x03	; 3
 47e:	8c 93       	st	X, r24

    stopbit    = data[4];
 480:	84 81       	ldd	r24, Z+4	; 0x04
 482:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <stopbit>
    parity     = data[5];
 486:	95 81       	ldd	r25, Z+5	; 0x05
 488:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <parity>
    databit    = data[6];
 48c:	26 81       	ldd	r18, Z+6	; 0x06
 48e:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <databit>

    if( parity>2 )
 492:	93 30       	cpi	r25, 0x03	; 3
 494:	10 f0       	brcs	.+4      	; 0x49a <usbFunctionWrite+0x3a>
        parity    = 0;
 496:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <parity>
    if( stopbit==1 )
 49a:	81 30       	cpi	r24, 0x01	; 1
 49c:	11 f4       	brne	.+4      	; 0x4a2 <usbFunctionWrite+0x42>
        stopbit    = 0;
 49e:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <stopbit>

    resetUart();
 4a2:	6b df       	rcall	.-298    	; 0x37a <resetUart>

    return 1;
}
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	08 95       	ret

000004a8 <usbFunctionWriteOut>:


void usbFunctionWriteOut( uchar *data, uchar len )
{
 4a8:	dc 01       	movw	r26, r24

    /*  usb -> rs232c:  transmit char    */
    for( ; len; len-- ) {
 4aa:	66 23       	and	r22, r22
 4ac:	91 f0       	breq	.+36     	; 0x4d2 <usbFunctionWriteOut+0x2a>
        uchar   uwnxt;

        uwnxt = (uwptr+1) & TX_MASK;
        if( uwnxt!=irptr ) {
 4ae:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <irptr>

    /*  usb -> rs232c:  transmit char    */
    for( ; len; len-- ) {
        uchar   uwnxt;

        uwnxt = (uwptr+1) & TX_MASK;
 4b2:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <uwptr>
 4b6:	91 e0       	ldi	r25, 0x01	; 1
 4b8:	9e 0f       	add	r25, r30
        if( uwnxt!=irptr ) {
 4ba:	92 17       	cp	r25, r18
 4bc:	41 f0       	breq	.+16     	; 0x4ce <usbFunctionWriteOut+0x26>
            tx_buf[uwptr] = *data++;
 4be:	8c 91       	ld	r24, X
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	e1 50       	subi	r30, 0x01	; 1
 4c4:	ff 4f       	sbci	r31, 0xFF	; 255
 4c6:	80 83       	st	Z, r24
            uwptr = uwnxt;
 4c8:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <uwptr>
    for( ; len; len-- ) {
        uchar   uwnxt;

        uwnxt = (uwptr+1) & TX_MASK;
        if( uwnxt!=irptr ) {
            tx_buf[uwptr] = *data++;
 4cc:	11 96       	adiw	r26, 0x01	; 1

void usbFunctionWriteOut( uchar *data, uchar len )
{

    /*  usb -> rs232c:  transmit char    */
    for( ; len; len-- ) {
 4ce:	61 50       	subi	r22, 0x01	; 1
 4d0:	81 f7       	brne	.-32     	; 0x4b2 <usbFunctionWriteOut+0xa>
            uwptr = uwnxt;
        }
    }

    /*  postpone receiving next data    */
    if( uartTxBytesFree()<=HW_CDC_BULK_OUT_SIZE )
 4d2:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <irptr>
 4d6:	81 50       	subi	r24, 0x01	; 1
 4d8:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <uwptr>
 4dc:	89 1b       	sub	r24, r25
 4de:	89 30       	cpi	r24, 0x09	; 9
 4e0:	18 f4       	brcc	.+6      	; 0x4e8 <usbFunctionWriteOut+0x40>
        usbDisableAllRequests();
 4e2:	8f ef       	ldi	r24, 0xFF	; 255
 4e4:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <usbRxLen>
 4e8:	08 95       	ret

000004ea <main>:
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
 4ea:	9e e0       	ldi	r25, 0x0E	; 14
 4ec:	88 e1       	ldi	r24, 0x18	; 24
 4ee:	0f b6       	in	r0, 0x3f	; 63
 4f0:	f8 94       	cli
 4f2:	a8 95       	wdr
 4f4:	81 bd       	out	0x21, r24	; 33
 4f6:	0f be       	out	0x3f, r0	; 63
 4f8:	91 bd       	out	0x21, r25	; 33

static void hardwareInit(void)
{

    /* activate pull-ups except on USB lines */
    USB_CFG_IOPORT   = (uchar)~((1<<USB_CFG_DMINUS_BIT)|(1<<USB_CFG_DPLUS_BIT));
 4fa:	89 ef       	ldi	r24, 0xF9	; 249
 4fc:	82 bb       	out	0x12, r24	; 18
    /* all pins input except USB (-> USB reset) */
#ifdef USB_CFG_PULLUP_IOPORT    /* use usbDeviceConnect()/usbDeviceDisconnect() if available */
    USBDDR    = 0;    /* we do RESET by deactivating pullup */
    usbDeviceDisconnect();
#else
    USBDDR    = (1<<USB_CFG_DMINUS_BIT)|(1<<USB_CFG_DPLUS_BIT);
 4fe:	86 e0       	ldi	r24, 0x06	; 6
 500:	81 bb       	out	0x11, r24	; 17
#endif

    /* 250 ms disconnect */
    wdt_reset();
 502:	a8 95       	wdr
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 504:	2f ef       	ldi	r18, 0xFF	; 255
 506:	84 e3       	ldi	r24, 0x34	; 52
 508:	9c e0       	ldi	r25, 0x0C	; 12
 50a:	21 50       	subi	r18, 0x01	; 1
 50c:	80 40       	sbci	r24, 0x00	; 0
 50e:	90 40       	sbci	r25, 0x00	; 0
 510:	e1 f7       	brne	.-8      	; 0x50a <main+0x20>
 512:	00 c0       	rjmp	.+0      	; 0x514 <main+0x2a>
 514:	00 00       	nop
    _delay_ms(250);

#ifdef USB_CFG_PULLUP_IOPORT
    usbDeviceConnect();
#else
    USBDDR    = 0;      /*  remove USB reset condition */
 516:	11 ba       	out	0x11, r1	; 17
#endif

    /*    USART configuration    */
    baud.dword  = UART_DEFAULT_BPS;
 518:	80 e8       	ldi	r24, 0x80	; 128
 51a:	95 e2       	ldi	r25, 0x25	; 37
 51c:	a0 e0       	ldi	r26, 0x00	; 0
 51e:	b0 e0       	ldi	r27, 0x00	; 0
 520:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
 524:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__data_end+0x1>
 528:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <__data_end+0x2>
 52c:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <__data_end+0x3>
    stopbit = 0;
 530:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <stopbit>
    parity  = 0;
 534:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <parity>
    databit = 8;
 538:	88 e0       	ldi	r24, 0x08	; 8
 53a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <databit>
    resetUart();
 53e:	1d df       	rcall	.-454    	; 0x37a <resetUart>
{

    wdt_enable(WDTO_1S);
    odDebugInit();
    hardwareInit();
    usbInit();
 540:	65 d2       	rcall	.+1226   	; 0xa0c <usbInit>

    intr3Status = 0;
 542:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <intr3Status>
    sendEmptyFrame  = 0;
 546:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <sendEmptyFrame>

    sei();
 54a:	78 94       	sei
        usbPoll();
        uartPoll();

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
        /* We need to report rx and tx carrier after open attempt */
        if(intr3Status != 0 && usbInterruptIsReady3()){
 54c:	c8 e3       	ldi	r28, 0x38	; 56
 54e:	d2 e0       	ldi	r29, 0x02	; 2
    intr3Status = 0;
    sendEmptyFrame  = 0;

    sei();
    for(;;){    /* main event loop */
        wdt_reset();
 550:	a8 95       	wdr
        usbPoll();
 552:	20 d1       	rcall	.+576    	; 0x794 <usbPoll>
        uartPoll();
 554:	5d d0       	rcall	.+186    	; 0x610 <uartPoll>

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
        /* We need to report rx and tx carrier after open attempt */
        if(intr3Status != 0 && usbInterruptIsReady3()){
 556:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <intr3Status>
 55a:	88 23       	and	r24, r24
 55c:	c9 f3       	breq	.-14     	; 0x550 <main+0x66>
 55e:	98 81       	ld	r25, Y
 560:	94 ff       	sbrs	r25, 4
 562:	f6 cf       	rjmp	.-20     	; 0x550 <main+0x66>
            static uchar serialStateNotification[10] = {0xa1, 0x20, 0, 0, 0, 0, 2, 0, 3, 0};

            if(intr3Status == 2){
 564:	82 30       	cpi	r24, 0x02	; 2
 566:	29 f4       	brne	.+10     	; 0x572 <main+0x88>
                usbSetInterrupt3(serialStateNotification, 8);
 568:	68 e0       	ldi	r22, 0x08	; 8
 56a:	80 e6       	ldi	r24, 0x60	; 96
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e d1       	rcall	.+540    	; 0x78c <usbSetInterrupt3>
 570:	04 c0       	rjmp	.+8      	; 0x57a <main+0x90>
            }else{
                usbSetInterrupt3(serialStateNotification+8, 2);
 572:	62 e0       	ldi	r22, 0x02	; 2
 574:	88 e6       	ldi	r24, 0x68	; 104
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	09 d1       	rcall	.+530    	; 0x78c <usbSetInterrupt3>
            }
            intr3Status--;
 57a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <intr3Status>
 57e:	81 50       	subi	r24, 0x01	; 1
 580:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <intr3Status>
 584:	e5 cf       	rjmp	.-54     	; 0x550 <main+0x66>

00000586 <uartInit>:
uchar    urptr, uwptr, irptr, iwptr;
uchar    rx_buf[RX_SIZE+HW_CDC_BULK_IN_SIZE], tx_buf[TX_SIZE];


void uartInit(ulong baudrate, uchar parity, uchar stopbits, uchar databits)
{
 586:	cf 92       	push	r12
 588:	df 92       	push	r13
 58a:	ef 92       	push	r14
 58c:	ff 92       	push	r15
 58e:	0f 93       	push	r16
 590:	1f 93       	push	r17
 592:	cf 93       	push	r28
 594:	6b 01       	movw	r12, r22
 596:	7c 01       	movw	r14, r24
 598:	14 2f       	mov	r17, r20
 59a:	c2 2f       	mov	r28, r18
usbDWord_t   br;

    br.dword = ((F_CPU>>3)+(baudrate>>1)) / baudrate - 1;
 59c:	dc 01       	movw	r26, r24
 59e:	cb 01       	movw	r24, r22
 5a0:	b6 95       	lsr	r27
 5a2:	a7 95       	ror	r26
 5a4:	97 95       	ror	r25
 5a6:	87 95       	ror	r24
 5a8:	bc 01       	movw	r22, r24
 5aa:	cd 01       	movw	r24, r26
 5ac:	60 58       	subi	r22, 0x80	; 128
 5ae:	7b 47       	sbci	r23, 0x7B	; 123
 5b0:	81 4e       	sbci	r24, 0xE1	; 225
 5b2:	9f 4f       	sbci	r25, 0xFF	; 255
 5b4:	a7 01       	movw	r20, r14
 5b6:	96 01       	movw	r18, r12
 5b8:	3c d2       	rcall	.+1144   	; 0xa32 <__udivmodsi4>
 5ba:	da 01       	movw	r26, r20
 5bc:	c9 01       	movw	r24, r18
 5be:	01 97       	sbiw	r24, 0x01	; 1
 5c0:	a1 09       	sbc	r26, r1
 5c2:	b1 09       	sbc	r27, r1
	UCSR0A  |= (1<<U2X0);
 5c4:	59 9a       	sbi	0x0b, 1	; 11

#if DEBUG_LEVEL < 1
    /*    USART configuration    */
    UCSR0B  = 0;
 5c6:	1a b8       	out	0x0a, r1	; 10
    UCSR0C  = URSEL_MASK | ((parity==1? 3:parity)<<UPM00) | ((stopbits>>1)<<USBS0) | ((databits-5)<<UCSZ00);
 5c8:	11 30       	cpi	r17, 0x01	; 1
 5ca:	31 f0       	breq	.+12     	; 0x5d8 <uartInit+0x52>
 5cc:	20 e1       	ldi	r18, 0x10	; 16
 5ce:	12 9f       	mul	r17, r18
 5d0:	a0 01       	movw	r20, r0
 5d2:	11 24       	eor	r1, r1
 5d4:	40 68       	ori	r20, 0x80	; 128
 5d6:	01 c0       	rjmp	.+2      	; 0x5da <uartInit+0x54>
 5d8:	40 eb       	ldi	r20, 0xB0	; 176
 5da:	c6 95       	lsr	r28
 5dc:	cc 0f       	add	r28, r28
 5de:	cc 0f       	add	r28, r28
 5e0:	cc 0f       	add	r28, r28
 5e2:	10 e0       	ldi	r17, 0x00	; 0
 5e4:	05 50       	subi	r16, 0x05	; 5
 5e6:	11 09       	sbc	r17, r1
 5e8:	00 0f       	add	r16, r16
 5ea:	11 1f       	adc	r17, r17
 5ec:	0c 2b       	or	r16, r28
 5ee:	04 2b       	or	r16, r20
 5f0:	00 bd       	out	0x20, r16	; 32
    UBRR0L  = br.bytes[0];
 5f2:	89 b9       	out	0x09, r24	; 9
    UBRR0H  = br.bytes[1];
 5f4:	90 bd       	out	0x20, r25	; 32
#else
    DBG1(0xf0, br.bytes, 2);
#endif /* DEBUG_LEVEL */

    UCSR0B  = (1<<RXEN0) | (1<<TXEN0);
 5f6:	88 e1       	ldi	r24, 0x18	; 24
 5f8:	8a b9       	out	0x0a, r24	; 10

	UART_CTRL_DDR	= (1<<UART_CTRL_DTR) | (1<<UART_CTRL_RTS);
 5fa:	84 bb       	out	0x14, r24	; 20
	UART_CTRL_PORT	= 0xff;
 5fc:	8f ef       	ldi	r24, 0xFF	; 255
 5fe:	85 bb       	out	0x15, r24	; 21
#ifdef UART_INVERT
	DDRB	|= (1<<PB1)|(1<<PB0);
	PCMSK1	|= (1<<PCINT9)|(1<<PCINT8);
	PCICR	|= (1<<PCIE1);
#endif
}
 600:	cf 91       	pop	r28
 602:	1f 91       	pop	r17
 604:	0f 91       	pop	r16
 606:	ff 90       	pop	r15
 608:	ef 90       	pop	r14
 60a:	df 90       	pop	r13
 60c:	cf 90       	pop	r12
 60e:	08 95       	ret

00000610 <uartPoll>:

void uartPoll(void)
{
 610:	cf 93       	push	r28
 612:	df 93       	push	r29
	uchar		next;

	/*  device => RS-232C  */
	while( (UCSR0A&(1<<UDRE0)) && uwptr!=irptr && (UART_CTRL_PIN&(1<<UART_CTRL_CTS)) ) {
 614:	16 c0       	rjmp	.+44     	; 0x642 <uartPoll+0x32>
        UDR0    = tx_buf[irptr];
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	e1 50       	subi	r30, 0x01	; 1
 61a:	ff 4f       	sbci	r31, 0xFF	; 255
 61c:	80 81       	ld	r24, Z
 61e:	8c b9       	out	0x0c, r24	; 12
        irptr   = (irptr+1) & TX_MASK;
 620:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <irptr>
 624:	8f 5f       	subi	r24, 0xFF	; 255
 626:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <irptr>

        if( usbAllRequestsAreDisabled() && uartTxBytesFree()>HW_CDC_BULK_OUT_SIZE ) {
 62a:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <usbRxLen>
 62e:	99 23       	and	r25, r25
 630:	44 f4       	brge	.+16     	; 0x642 <uartPoll+0x32>
 632:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <uwptr>
 636:	89 1b       	sub	r24, r25
 638:	81 50       	subi	r24, 0x01	; 1
 63a:	89 30       	cpi	r24, 0x09	; 9
 63c:	10 f0       	brcs	.+4      	; 0x642 <uartPoll+0x32>
            usbEnableAllRequests();
 63e:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <usbRxLen>
void uartPoll(void)
{
	uchar		next;

	/*  device => RS-232C  */
	while( (UCSR0A&(1<<UDRE0)) && uwptr!=irptr && (UART_CTRL_PIN&(1<<UART_CTRL_CTS)) ) {
 642:	5d 9b       	sbis	0x0b, 5	; 11
 644:	06 c0       	rjmp	.+12     	; 0x652 <uartPoll+0x42>
 646:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <irptr>
 64a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <uwptr>
 64e:	8e 13       	cpse	r24, r30
 650:	03 c0       	rjmp	.+6      	; 0x658 <uartPoll+0x48>
    }

	/*  device <= RS-232C  */
	while( UCSR0A&(1<<RXC0) ) {
	    next = (iwptr+1) & RX_MASK;
		if( next!=urptr ) {
 652:	20 91 ff 01 	lds	r18, 0x01FF	; 0x8001ff <urptr>
 656:	12 c0       	rjmp	.+36     	; 0x67c <uartPoll+0x6c>
void uartPoll(void)
{
	uchar		next;

	/*  device => RS-232C  */
	while( (UCSR0A&(1<<UDRE0)) && uwptr!=irptr && (UART_CTRL_PIN&(1<<UART_CTRL_CTS)) ) {
 658:	9d 99       	sbic	0x13, 5	; 19
 65a:	dd cf       	rjmp	.-70     	; 0x616 <uartPoll+0x6>
 65c:	fa cf       	rjmp	.-12     	; 0x652 <uartPoll+0x42>
    }

	/*  device <= RS-232C  */
	while( UCSR0A&(1<<RXC0) ) {
	    next = (iwptr+1) & RX_MASK;
		if( next!=urptr ) {
 65e:	92 17       	cp	r25, r18
 660:	59 f0       	breq	.+22     	; 0x678 <uartPoll+0x68>
	        uchar   status, data;

	        status  = UCSR0A;
 662:	8b b1       	in	r24, 0x0b	; 11
	        data    = UDR0;
 664:	3c b1       	in	r19, 0x0c	; 12
	        status  &= (1<<FE0) | (1<<DOR0) | (1<<UPE0);
	        if(status == 0) { /* no receiver error occurred */
 666:	8c 71       	andi	r24, 0x1C	; 28
 668:	71 f4       	brne	.+28     	; 0x686 <uartPoll+0x76>
	            rx_buf[iwptr] = data;
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	ea 58       	subi	r30, 0x8A	; 138
 66e:	ff 4f       	sbci	r31, 0xFF	; 255
 670:	30 83       	st	Z, r19
	            iwptr = next;
 672:	90 93 fe 00 	sts	0x00FE, r25	; 0x8000fe <iwptr>
 676:	02 c0       	rjmp	.+4      	; 0x67c <uartPoll+0x6c>
	        }
		}
		else {
			UART_CTRL_PORT	&= ~(1<<UART_CTRL_RTS);
 678:	ac 98       	cbi	0x15, 4	; 21
			break;
 67a:	07 c0       	rjmp	.+14     	; 0x68a <uartPoll+0x7a>
        }
    }

	/*  device <= RS-232C  */
	while( UCSR0A&(1<<RXC0) ) {
	    next = (iwptr+1) & RX_MASK;
 67c:	e0 91 fe 00 	lds	r30, 0x00FE	; 0x8000fe <iwptr>
 680:	91 e0       	ldi	r25, 0x01	; 1
 682:	9e 0f       	add	r25, r30
 684:	9f 77       	andi	r25, 0x7F	; 127
            usbEnableAllRequests();
        }
    }

	/*  device <= RS-232C  */
	while( UCSR0A&(1<<RXC0) ) {
 686:	5f 99       	sbic	0x0b, 7	; 11
 688:	ea cf       	rjmp	.-44     	; 0x65e <uartPoll+0x4e>
			break;
		}
    }

	/*  USB <= device  */
    if( usbInterruptIsReady() && (iwptr!=urptr || sendEmptyFrame) ) {
 68a:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <usbTxStatus1>
 68e:	84 ff       	sbrs	r24, 4
 690:	50 c0       	rjmp	.+160    	; 0x732 <uartPoll+0x122>
 692:	c0 91 fe 00 	lds	r28, 0x00FE	; 0x8000fe <iwptr>
 696:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <urptr>
 69a:	c8 13       	cpse	r28, r24
 69c:	05 c0       	rjmp	.+10     	; 0x6a8 <uartPoll+0x98>
 69e:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <sendEmptyFrame>
 6a2:	91 11       	cpse	r25, r1
 6a4:	3d c0       	rjmp	.+122    	; 0x720 <uartPoll+0x110>
 6a6:	45 c0       	rjmp	.+138    	; 0x732 <uartPoll+0x122>
        uchar   bytesRead, i;

        bytesRead = (iwptr-urptr) & RX_MASK;
 6a8:	c8 1b       	sub	r28, r24
 6aa:	cf 77       	andi	r28, 0x7F	; 127
 6ac:	c9 30       	cpi	r28, 0x09	; 9
 6ae:	08 f0       	brcs	.+2      	; 0x6b2 <uartPoll+0xa2>
 6b0:	c8 e0       	ldi	r28, 0x08	; 8
        if(bytesRead>HW_CDC_BULK_IN_SIZE)
            bytesRead = HW_CDC_BULK_IN_SIZE;
		next	= urptr + bytesRead;
 6b2:	dc 2f       	mov	r29, r28
 6b4:	d8 0f       	add	r29, r24
		if( next>=RX_SIZE ) {
 6b6:	82 f4       	brpl	.+32     	; 0x6d8 <uartPoll+0xc8>
			next &= RX_MASK;
 6b8:	df 77       	andi	r29, 0x7F	; 127
			for( i=0; i<next; i++ )
 6ba:	71 f0       	breq	.+28     	; 0x6d8 <uartPoll+0xc8>
 6bc:	e6 e7       	ldi	r30, 0x76	; 118
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	a6 ef       	ldi	r26, 0xF6	; 246
 6c2:	b0 e0       	ldi	r27, 0x00	; 0
 6c4:	2f ef       	ldi	r18, 0xFF	; 255
 6c6:	2d 0f       	add	r18, r29
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	29 58       	subi	r18, 0x89	; 137
 6cc:	3f 4f       	sbci	r19, 0xFF	; 255
				rx_buf[RX_SIZE+i]	= rx_buf[i];
 6ce:	91 91       	ld	r25, Z+
 6d0:	9d 93       	st	X+, r25
        if(bytesRead>HW_CDC_BULK_IN_SIZE)
            bytesRead = HW_CDC_BULK_IN_SIZE;
		next	= urptr + bytesRead;
		if( next>=RX_SIZE ) {
			next &= RX_MASK;
			for( i=0; i<next; i++ )
 6d2:	e2 17       	cp	r30, r18
 6d4:	f3 07       	cpc	r31, r19
 6d6:	d9 f7       	brne	.-10     	; 0x6ce <uartPoll+0xbe>
				rx_buf[RX_SIZE+i]	= rx_buf[i];
		}
        usbSetInterrupt(rx_buf+urptr, bytesRead);
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	6c 2f       	mov	r22, r28
 6dc:	8a 58       	subi	r24, 0x8A	; 138
 6de:	9f 4f       	sbci	r25, 0xFF	; 255
 6e0:	51 d0       	rcall	.+162    	; 0x784 <usbSetInterrupt>
        urptr   = next;
 6e2:	d0 93 ff 01 	sts	0x01FF, r29	; 0x8001ff <urptr>
		if( bytesRead )
 6e6:	cc 23       	and	r28, r28
 6e8:	61 f0       	breq	.+24     	; 0x702 <uartPoll+0xf2>
			UART_CTRL_PORT	|= (1<<UART_CTRL_RTS);
 6ea:	ac 9a       	sbi	0x15, 4	; 21

        /* send an empty block after last data block to indicate transfer end */
        sendEmptyFrame = (bytesRead==HW_CDC_BULK_IN_SIZE && iwptr==urptr)? 1:0;
 6ec:	c8 30       	cpi	r28, 0x08	; 8
 6ee:	59 f4       	brne	.+22     	; 0x706 <uartPoll+0xf6>
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	20 91 fe 00 	lds	r18, 0x00FE	; 0x8000fe <iwptr>
 6f6:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <urptr>
 6fa:	29 17       	cp	r18, r25
 6fc:	29 f0       	breq	.+10     	; 0x708 <uartPoll+0xf8>
 6fe:	80 e0       	ldi	r24, 0x00	; 0
 700:	03 c0       	rjmp	.+6      	; 0x708 <uartPoll+0xf8>
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	01 c0       	rjmp	.+2      	; 0x708 <uartPoll+0xf8>
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <sendEmptyFrame>
    }
}
 70c:	12 c0       	rjmp	.+36     	; 0x732 <uartPoll+0x122>
		if( next>=RX_SIZE ) {
			next &= RX_MASK;
			for( i=0; i<next; i++ )
				rx_buf[RX_SIZE+i]	= rx_buf[i];
		}
        usbSetInterrupt(rx_buf+urptr, bytesRead);
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	6c 2f       	mov	r22, r28
 712:	8a 58       	subi	r24, 0x8A	; 138
 714:	9f 4f       	sbci	r25, 0xFF	; 255
 716:	36 d0       	rcall	.+108    	; 0x784 <usbSetInterrupt>
        urptr   = next;
 718:	d0 93 ff 01 	sts	0x01FF, r29	; 0x8001ff <urptr>
		if( bytesRead )
			UART_CTRL_PORT	|= (1<<UART_CTRL_RTS);

        /* send an empty block after last data block to indicate transfer end */
        sendEmptyFrame = (bytesRead==HW_CDC_BULK_IN_SIZE && iwptr==urptr)? 1:0;
 71c:	80 e0       	ldi	r24, 0x00	; 0
 71e:	f4 cf       	rjmp	.-24     	; 0x708 <uartPoll+0xf8>

	/*  USB <= device  */
    if( usbInterruptIsReady() && (iwptr!=urptr || sendEmptyFrame) ) {
        uchar   bytesRead, i;

        bytesRead = (iwptr-urptr) & RX_MASK;
 720:	c8 1b       	sub	r28, r24
 722:	cf 77       	andi	r28, 0x7F	; 127
 724:	c9 30       	cpi	r28, 0x09	; 9
 726:	08 f0       	brcs	.+2      	; 0x72a <uartPoll+0x11a>
 728:	c8 e0       	ldi	r28, 0x08	; 8
        if(bytesRead>HW_CDC_BULK_IN_SIZE)
            bytesRead = HW_CDC_BULK_IN_SIZE;
		next	= urptr + bytesRead;
 72a:	d8 2f       	mov	r29, r24
 72c:	dc 0f       	add	r29, r28
		if( next>=RX_SIZE ) {
 72e:	7a f7       	brpl	.-34     	; 0x70e <uartPoll+0xfe>
 730:	c3 cf       	rjmp	.-122    	; 0x6b8 <uartPoll+0xa8>
			UART_CTRL_PORT	|= (1<<UART_CTRL_RTS);

        /* send an empty block after last data block to indicate transfer end */
        sendEmptyFrame = (bytesRead==HW_CDC_BULK_IN_SIZE && iwptr==urptr)? 1:0;
    }
}
 732:	df 91       	pop	r29
 734:	cf 91       	pop	r28
 736:	08 95       	ret

00000738 <usbGenericSetInterrupt>:
/* ------------------------------------------------------------------------- */

#if !USB_CFG_SUPPRESS_INTR_CODE
#if USB_CFG_HAVE_INTRIN_ENDPOINT
static void usbGenericSetInterrupt(uchar *data, uchar len, usbTxStatus_t *txStatus)
{
 738:	0f 93       	push	r16
 73a:	1f 93       	push	r17
 73c:	cf 93       	push	r28
 73e:	c6 2f       	mov	r28, r22
 740:	8a 01       	movw	r16, r20

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 742:	fa 01       	movw	r30, r20
 744:	20 81       	ld	r18, Z
 746:	24 ff       	sbrs	r18, 4
 748:	05 c0       	rjmp	.+10     	; 0x754 <usbGenericSetInterrupt+0x1c>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 74a:	31 81       	ldd	r19, Z+1	; 0x01
 74c:	28 e8       	ldi	r18, 0x88	; 136
 74e:	23 27       	eor	r18, r19
 750:	21 83       	std	Z+1, r18	; 0x01
 752:	03 c0       	rjmp	.+6      	; 0x75a <usbGenericSetInterrupt+0x22>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 754:	2a e5       	ldi	r18, 0x5A	; 90
 756:	fa 01       	movw	r30, r20
 758:	20 83       	st	Z, r18
 75a:	e8 2f       	mov	r30, r24
 75c:	f9 2f       	mov	r31, r25
    }
    p = txStatus->buffer + 1;
 75e:	a8 01       	movw	r20, r16
 760:	4e 5f       	subi	r20, 0xFE	; 254
 762:	5f 4f       	sbci	r21, 0xFF	; 255
 764:	da 01       	movw	r26, r20
    i = len;
 766:	9c 2f       	mov	r25, r28
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 768:	21 91       	ld	r18, Z+
 76a:	2d 93       	st	X+, r18
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 76c:	91 50       	subi	r25, 0x01	; 1
 76e:	e1 f7       	brne	.-8      	; 0x768 <usbGenericSetInterrupt+0x30>
    usbCrc16Append(&txStatus->buffer[1], len);
 770:	6c 2f       	mov	r22, r28
 772:	ca 01       	movw	r24, r20
 774:	cf dc       	rcall	.-1634   	; 0x114 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 776:	cc 5f       	subi	r28, 0xFC	; 252
 778:	f8 01       	movw	r30, r16
 77a:	c0 83       	st	Z, r28
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}
 77c:	cf 91       	pop	r28
 77e:	1f 91       	pop	r17
 780:	0f 91       	pop	r16
 782:	08 95       	ret

00000784 <usbSetInterrupt>:

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
 784:	4d e0       	ldi	r20, 0x0D	; 13
 786:	52 e0       	ldi	r21, 0x02	; 2
 788:	d7 df       	rcall	.-82     	; 0x738 <usbGenericSetInterrupt>
 78a:	08 95       	ret

0000078c <usbSetInterrupt3>:
#endif

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
USB_PUBLIC void usbSetInterrupt3(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus3);
 78c:	48 e3       	ldi	r20, 0x38	; 56
 78e:	52 e0       	ldi	r21, 0x02	; 2
 790:	d3 df       	rcall	.-90     	; 0x738 <usbGenericSetInterrupt>
 792:	08 95       	ret

00000794 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 794:	cf 93       	push	r28
 796:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 798:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <usbRxLen>
 79c:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
 79e:	0a f4       	brpl	.+2      	; 0x7a2 <usbPoll+0xe>
 7a0:	c0 c0       	rjmp	.+384    	; 0x922 <usbPoll+0x18e>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 7a2:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <usbInputBufOffset>
 7a6:	8c e0       	ldi	r24, 0x0C	; 12
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	82 1b       	sub	r24, r18
 7ac:	91 09       	sbc	r25, r1
 7ae:	ec 01       	movw	r28, r24
 7b0:	ce 5d       	subi	r28, 0xDE	; 222
 7b2:	dd 4f       	sbci	r29, 0xFD	; 253
 * 0...0x0f for OUT on endpoint X
 */
    DBG2(0x10 + (usbRxToken & 0xf), data, len + 2); /* SETUP=1d, SETUP-DATA=11, OUTx=1x */
    USB_RX_USER_HOOK(data, len)
#if USB_CFG_IMPLEMENT_FN_WRITEOUT
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
 7b4:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <usbRxToken>
 7b8:	80 31       	cpi	r24, 0x10	; 16
 7ba:	18 f4       	brcc	.+6      	; 0x7c2 <usbPoll+0x2e>
        usbFunctionWriteOut(data, len);
 7bc:	ce 01       	movw	r24, r28
 7be:	74 de       	rcall	.-792    	; 0x4a8 <usbFunctionWriteOut>
 7c0:	aa c0       	rjmp	.+340    	; 0x916 <usbPoll+0x182>
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 7c2:	8d 32       	cpi	r24, 0x2D	; 45
 7c4:	09 f0       	breq	.+2      	; 0x7c8 <usbPoll+0x34>
 7c6:	98 c0       	rjmp	.+304    	; 0x8f8 <usbPoll+0x164>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 7c8:	68 30       	cpi	r22, 0x08	; 8
 7ca:	09 f0       	breq	.+2      	; 0x7ce <usbPoll+0x3a>
 7cc:	a4 c0       	rjmp	.+328    	; 0x916 <usbPoll+0x182>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 7ce:	83 ec       	ldi	r24, 0xC3	; 195
 7d0:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <usbTxBuf>
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 7d4:	8a e5       	ldi	r24, 0x5A	; 90
 7d6:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <usbTxLen>
        usbMsgFlags = 0;
 7da:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <usbMsgFlags>
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 7de:	88 81       	ld	r24, Y
 7e0:	80 76       	andi	r24, 0x60	; 96
 7e2:	19 f0       	breq	.+6      	; 0x7ea <usbPoll+0x56>
            replyLen = usbFunctionSetup(data);
 7e4:	ce 01       	movw	r24, r28
 7e6:	f7 dd       	rcall	.-1042   	; 0x3d6 <usbFunctionSetup>
 7e8:	73 c0       	rjmp	.+230    	; 0x8d0 <usbPoll+0x13c>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 7ea:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 7ec:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <usbTxBuf+0x9>
    SWITCH_START(rq->bRequest)
 7f0:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 7f2:	81 11       	cpse	r24, r1
 7f4:	06 c0       	rjmp	.+12     	; 0x802 <usbPoll+0x6e>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 7f6:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <usbTxBuf+0xa>
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
 7fa:	2b e0       	ldi	r18, 0x0B	; 11
 7fc:	32 e0       	ldi	r19, 0x02	; 2
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
 7fe:	82 e0       	ldi	r24, 0x02	; 2
 800:	63 c0       	rjmp	.+198    	; 0x8c8 <usbPoll+0x134>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 802:	85 30       	cpi	r24, 0x05	; 5
 804:	31 f4       	brne	.+12     	; 0x812 <usbPoll+0x7e>
        usbNewDeviceAddr = value;
 806:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <usbNewDeviceAddr>
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
 80a:	2b e0       	ldi	r18, 0x0B	; 11
 80c:	32 e0       	ldi	r19, 0x02	; 2
 80e:	80 e0       	ldi	r24, 0x00	; 0
 810:	5b c0       	rjmp	.+182    	; 0x8c8 <usbPoll+0x134>
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 812:	86 30       	cpi	r24, 0x06	; 6
 814:	b9 f5       	brne	.+110    	; 0x884 <usbPoll+0xf0>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 816:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 818:	81 30       	cpi	r24, 0x01	; 1
 81a:	41 f4       	brne	.+16     	; 0x82c <usbPoll+0x98>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 81c:	89 e6       	ldi	r24, 0x69	; 105
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <usbMsgPtr+0x1>
 824:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <usbMsgPtr>
 828:	82 e1       	ldi	r24, 0x12	; 18
 82a:	28 c0       	rjmp	.+80     	; 0x87c <usbPoll+0xe8>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 82c:	82 30       	cpi	r24, 0x02	; 2
 82e:	19 f4       	brne	.+6      	; 0x836 <usbPoll+0xa2>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 830:	ce 01       	movw	r24, r28
 832:	bd dd       	rcall	.-1158   	; 0x3ae <usbFunctionDescriptor>
 834:	23 c0       	rjmp	.+70     	; 0x87c <usbPoll+0xe8>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 836:	83 30       	cpi	r24, 0x03	; 3
 838:	f1 f4       	brne	.+60     	; 0x876 <usbPoll+0xe2>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
 83a:	91 11       	cpse	r25, r1
 83c:	08 c0       	rjmp	.+16     	; 0x84e <usbPoll+0xba>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 83e:	8d ea       	ldi	r24, 0xAD	; 173
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <usbMsgPtr+0x1>
 846:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <usbMsgPtr>
 84a:	84 e0       	ldi	r24, 0x04	; 4
 84c:	17 c0       	rjmp	.+46     	; 0x87c <usbPoll+0xe8>
        SWITCH_CASE(1)
 84e:	91 30       	cpi	r25, 0x01	; 1
 850:	41 f4       	brne	.+16     	; 0x862 <usbPoll+0xce>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 852:	8b e8       	ldi	r24, 0x8B	; 139
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <usbMsgPtr+0x1>
 85a:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <usbMsgPtr>
 85e:	82 e2       	ldi	r24, 0x22	; 34
 860:	0d c0       	rjmp	.+26     	; 0x87c <usbPoll+0xe8>
        SWITCH_CASE(2)
 862:	92 30       	cpi	r25, 0x02	; 2
 864:	51 f4       	brne	.+20     	; 0x87a <usbPoll+0xe6>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 866:	8b e7       	ldi	r24, 0x7B	; 123
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <usbMsgPtr+0x1>
 86e:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <usbMsgPtr>
 872:	80 e1       	ldi	r24, 0x10	; 16
 874:	03 c0       	rjmp	.+6      	; 0x87c <usbPoll+0xe8>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 876:	80 e0       	ldi	r24, 0x00	; 0
 878:	01 c0       	rjmp	.+2      	; 0x87c <usbPoll+0xe8>
 87a:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 87c:	90 e4       	ldi	r25, 0x40	; 64
 87e:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <usbMsgFlags>
 882:	26 c0       	rjmp	.+76     	; 0x8d0 <usbPoll+0x13c>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 884:	88 30       	cpi	r24, 0x08	; 8
 886:	a9 f0       	breq	.+42     	; 0x8b2 <usbPoll+0x11e>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 888:	89 30       	cpi	r24, 0x09	; 9
 88a:	31 f4       	brne	.+12     	; 0x898 <usbPoll+0x104>
        usbConfiguration = value;
 88c:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <usbConfiguration>
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
 890:	2b e0       	ldi	r18, 0x0B	; 11
 892:	32 e0       	ldi	r19, 0x02	; 2
 894:	80 e0       	ldi	r24, 0x00	; 0
 896:	18 c0       	rjmp	.+48     	; 0x8c8 <usbPoll+0x134>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 898:	8a 30       	cpi	r24, 0x0A	; 10
 89a:	79 f0       	breq	.+30     	; 0x8ba <usbPoll+0x126>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 89c:	8b 30       	cpi	r24, 0x0B	; 11
 89e:	89 f4       	brne	.+34     	; 0x8c2 <usbPoll+0x12e>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 8a0:	8b e4       	ldi	r24, 0x4B	; 75
 8a2:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <usbTxStatus1+0x1>
#   if USB_CFG_HAVE_INTRIN_ENDPOINT3
    USB_SET_DATATOKEN3(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 8a6:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <usbTxStatus3+0x1>
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
 8aa:	2b e0       	ldi	r18, 0x0B	; 11
 8ac:	32 e0       	ldi	r19, 0x02	; 2
 8ae:	80 e0       	ldi	r24, 0x00	; 0
 8b0:	0b c0       	rjmp	.+22     	; 0x8c8 <usbPoll+0x134>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
 8b2:	21 e2       	ldi	r18, 0x21	; 33
 8b4:	32 e0       	ldi	r19, 0x02	; 2
        len = 1;
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	07 c0       	rjmp	.+14     	; 0x8c8 <usbPoll+0x134>
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
 8ba:	2b e0       	ldi	r18, 0x0B	; 11
 8bc:	32 e0       	ldi	r19, 0x02	; 2
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
 8be:	81 e0       	ldi	r24, 0x01	; 1
 8c0:	03 c0       	rjmp	.+6      	; 0x8c8 <usbPoll+0x134>
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
 8c2:	2b e0       	ldi	r18, 0x0B	; 11
 8c4:	32 e0       	ldi	r19, 0x02	; 2
 8c6:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
 8c8:	30 93 1d 02 	sts	0x021D, r19	; 0x80021d <usbMsgPtr+0x1>
 8cc:	20 93 1c 02 	sts	0x021C, r18	; 0x80021c <usbMsgPtr>
            replyLen = usbFunctionSetup(data);
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
 8d0:	8f 3f       	cpi	r24, 0xFF	; 255
 8d2:	41 f4       	brne	.+16     	; 0x8e4 <usbPoll+0x150>
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
 8d4:	98 81       	ld	r25, Y
 8d6:	99 23       	and	r25, r25
 8d8:	0c f4       	brge	.+2      	; 0x8dc <usbPoll+0x148>
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
 8da:	8e 81       	ldd	r24, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
 8dc:	90 e8       	ldi	r25, 0x80	; 128
 8de:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <usbMsgFlags>
 8e2:	07 c0       	rjmp	.+14     	; 0x8f2 <usbPoll+0x15e>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 8e4:	9f 81       	ldd	r25, Y+7	; 0x07
 8e6:	91 11       	cpse	r25, r1
 8e8:	04 c0       	rjmp	.+8      	; 0x8f2 <usbPoll+0x15e>
 8ea:	9e 81       	ldd	r25, Y+6	; 0x06
 8ec:	98 17       	cp	r25, r24
 8ee:	08 f4       	brcc	.+2      	; 0x8f2 <usbPoll+0x15e>
 8f0:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 8f2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <usbMsgLen>
 8f6:	0f c0       	rjmp	.+30     	; 0x916 <usbPoll+0x182>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 8f8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <usbMsgFlags>
 8fc:	88 23       	and	r24, r24
 8fe:	5c f4       	brge	.+22     	; 0x916 <usbPoll+0x182>
            uchar rval = usbFunctionWrite(data, len);
 900:	ce 01       	movw	r24, r28
 902:	ae dd       	rcall	.-1188   	; 0x460 <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
 904:	8f 3f       	cpi	r24, 0xFF	; 255
 906:	21 f4       	brne	.+8      	; 0x910 <usbPoll+0x17c>
                usbTxLen = USBPID_STALL;
 908:	8e e1       	ldi	r24, 0x1E	; 30
 90a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <usbTxLen>
 90e:	03 c0       	rjmp	.+6      	; 0x916 <usbPoll+0x182>
            }else if(rval != 0){    /* This was the final package */
 910:	81 11       	cpse	r24, r1
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
 912:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <usbMsgLen>
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
 916:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <usbRxLen>
 91a:	18 16       	cp	r1, r24
 91c:	14 f4       	brge	.+4      	; 0x922 <usbPoll+0x18e>
            usbRxLen = 0;
 91e:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <usbRxLen>
#else
        usbRxLen = 0;       /* mark rx buffer as available */
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 922:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <usbTxLen>
 926:	84 ff       	sbrs	r24, 4
 928:	5a c0       	rjmp	.+180    	; 0x9de <usbPoll+0x24a>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 92a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <usbMsgLen>
 92e:	8f 3f       	cpi	r24, 0xFF	; 255
 930:	09 f4       	brne	.+2      	; 0x934 <usbPoll+0x1a0>
 932:	55 c0       	rjmp	.+170    	; 0x9de <usbPoll+0x24a>
 934:	c8 2f       	mov	r28, r24
 936:	89 30       	cpi	r24, 0x09	; 9
 938:	08 f0       	brcs	.+2      	; 0x93c <usbPoll+0x1a8>
 93a:	c8 e0       	ldi	r28, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 93c:	8c 1b       	sub	r24, r28
 93e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <usbMsgLen>
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 942:	e2 e0       	ldi	r30, 0x02	; 2
 944:	f2 e0       	ldi	r31, 0x02	; 2
 946:	90 81       	ld	r25, Z
 948:	88 e8       	ldi	r24, 0x88	; 136
 94a:	89 27       	eor	r24, r25
 94c:	80 83       	st	Z, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 94e:	cc 23       	and	r28, r28
 950:	09 f4       	brne	.+2      	; 0x954 <usbPoll+0x1c0>
 952:	53 c0       	rjmp	.+166    	; 0x9fa <usbPoll+0x266>
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 954:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <usbMsgFlags>
 958:	88 23       	and	r24, r24
 95a:	34 f4       	brge	.+12     	; 0x968 <usbPoll+0x1d4>
            len = usbFunctionRead(data, len);
 95c:	6c 2f       	mov	r22, r28
 95e:	83 e0       	ldi	r24, 0x03	; 3
 960:	92 e0       	ldi	r25, 0x02	; 2
 962:	63 dd       	rcall	.-1338   	; 0x42a <usbFunctionRead>
 964:	c8 2f       	mov	r28, r24
 966:	28 c0       	rjmp	.+80     	; 0x9b8 <usbPoll+0x224>
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
 968:	20 91 1c 02 	lds	r18, 0x021C	; 0x80021c <usbMsgPtr>
 96c:	30 91 1d 02 	lds	r19, 0x021D	; 0x80021d <usbMsgPtr+0x1>
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 970:	86 ff       	sbrs	r24, 6
 972:	10 c0       	rjmp	.+32     	; 0x994 <usbPoll+0x200>
 974:	a3 e0       	ldi	r26, 0x03	; 3
 976:	b2 e0       	ldi	r27, 0x02	; 2
 978:	f9 01       	movw	r30, r18
 97a:	8c 2f       	mov	r24, r28
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 97c:	94 91       	lpm	r25, Z
                    *data++ = c;
 97e:	9d 93       	st	X+, r25
                    r++;
 980:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
 982:	81 50       	subi	r24, 0x01	; 1
 984:	d9 f7       	brne	.-10     	; 0x97c <usbPoll+0x1e8>
 986:	8f ef       	ldi	r24, 0xFF	; 255
 988:	8c 0f       	add	r24, r28
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	01 96       	adiw	r24, 0x01	; 1
 98e:	28 0f       	add	r18, r24
 990:	39 1f       	adc	r19, r25
 992:	0e c0       	rjmp	.+28     	; 0x9b0 <usbPoll+0x21c>
 994:	d9 01       	movw	r26, r18
 996:	e3 e0       	ldi	r30, 0x03	; 3
 998:	f2 e0       	ldi	r31, 0x02	; 2
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 99a:	8c 2f       	mov	r24, r28
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
 99c:	9d 91       	ld	r25, X+
 99e:	91 93       	st	Z+, r25
                }while(--i);
 9a0:	81 50       	subi	r24, 0x01	; 1
 9a2:	e1 f7       	brne	.-8      	; 0x99c <usbPoll+0x208>
 9a4:	8f ef       	ldi	r24, 0xFF	; 255
 9a6:	8c 0f       	add	r24, r28
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	01 96       	adiw	r24, 0x01	; 1
 9ac:	28 0f       	add	r18, r24
 9ae:	39 1f       	adc	r19, r25
            }
            usbMsgPtr = r;
 9b0:	30 93 1d 02 	sts	0x021D, r19	; 0x80021d <usbMsgPtr+0x1>
 9b4:	20 93 1c 02 	sts	0x021C, r18	; 0x80021c <usbMsgPtr>
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
 9b8:	c9 30       	cpi	r28, 0x09	; 9
 9ba:	58 f4       	brcc	.+22     	; 0x9d2 <usbPoll+0x23e>
        usbCrc16Append(&usbTxBuf[1], len);
 9bc:	6c 2f       	mov	r22, r28
 9be:	83 e0       	ldi	r24, 0x03	; 3
 9c0:	92 e0       	ldi	r25, 0x02	; 2
 9c2:	a8 db       	rcall	.-2224   	; 0x114 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 9c4:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 9c6:	cc 30       	cpi	r28, 0x0C	; 12
 9c8:	40 f4       	brcc	.+16     	; 0x9da <usbPoll+0x246>
            usbMsgLen = USB_NO_MSG;
 9ca:	8f ef       	ldi	r24, 0xFF	; 255
 9cc:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <usbMsgLen>
 9d0:	04 c0       	rjmp	.+8      	; 0x9da <usbPoll+0x246>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
 9d2:	8f ef       	ldi	r24, 0xFF	; 255
 9d4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <usbMsgLen>
        usbCrc16Append(&usbTxBuf[1], len);
        len += 4;           /* length including sync byte */
        if(len < 12)        /* a partial package identifies end of message */
            usbMsgLen = USB_NO_MSG;
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
 9d8:	ce e1       	ldi	r28, 0x1E	; 30
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 9da:	c0 93 6b 00 	sts	0x006B, r28	; 0x80006b <usbTxLen>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 9de:	80 b3       	in	r24, 0x10	; 16
        if(usbLineStatus != 0)  /* SE0 has ended */
 9e0:	86 70       	andi	r24, 0x06	; 6
 9e2:	89 f4       	brne	.+34     	; 0xa06 <usbPoll+0x272>
 9e4:	93 e1       	ldi	r25, 0x13	; 19
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 9e6:	80 b3       	in	r24, 0x10	; 16
        if(usbLineStatus != 0)  /* SE0 has ended */
 9e8:	86 70       	andi	r24, 0x06	; 6
 9ea:	69 f4       	brne	.+26     	; 0xa06 <usbPoll+0x272>
 9ec:	91 50       	subi	r25, 0x01	; 1
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 9ee:	d9 f7       	brne	.-10     	; 0x9e6 <usbPoll+0x252>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 9f0:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <usbNewDeviceAddr>
    usbDeviceAddr = 0;
 9f4:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <usbDeviceAddr>
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 9f8:	06 c0       	rjmp	.+12     	; 0xa06 <usbPoll+0x272>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 9fa:	60 e0       	ldi	r22, 0x00	; 0
 9fc:	83 e0       	ldi	r24, 0x03	; 3
 9fe:	92 e0       	ldi	r25, 0x02	; 2
 a00:	89 db       	rcall	.-2286   	; 0x114 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 a02:	c4 e0       	ldi	r28, 0x04	; 4
 a04:	e2 cf       	rjmp	.-60     	; 0x9ca <usbPoll+0x236>
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 a06:	df 91       	pop	r29
 a08:	cf 91       	pop	r28
 a0a:	08 95       	ret

00000a0c <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 a0c:	85 b7       	in	r24, 0x35	; 53
 a0e:	82 60       	ori	r24, 0x02	; 2
 a10:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 a12:	8b b7       	in	r24, 0x3b	; 59
 a14:	80 64       	ori	r24, 0x40	; 64
 a16:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 a18:	ad e0       	ldi	r26, 0x0D	; 13
 a1a:	b2 e0       	ldi	r27, 0x02	; 2
 a1c:	8b e4       	ldi	r24, 0x4B	; 75
 a1e:	11 96       	adiw	r26, 0x01	; 1
 a20:	8c 93       	st	X, r24
 a22:	11 97       	sbiw	r26, 0x01	; 1
#   if USB_CFG_HAVE_INTRIN_ENDPOINT3
    USB_SET_DATATOKEN3(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 a24:	e8 e3       	ldi	r30, 0x38	; 56
 a26:	f2 e0       	ldi	r31, 0x02	; 2
 a28:	81 83       	std	Z+1, r24	; 0x01
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 a2a:	8a e5       	ldi	r24, 0x5A	; 90
 a2c:	8c 93       	st	X, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
 a2e:	80 83       	st	Z, r24
 a30:	08 95       	ret

00000a32 <__udivmodsi4>:
 a32:	a1 e2       	ldi	r26, 0x21	; 33
 a34:	1a 2e       	mov	r1, r26
 a36:	aa 1b       	sub	r26, r26
 a38:	bb 1b       	sub	r27, r27
 a3a:	fd 01       	movw	r30, r26
 a3c:	0d c0       	rjmp	.+26     	; 0xa58 <__udivmodsi4_ep>

00000a3e <__udivmodsi4_loop>:
 a3e:	aa 1f       	adc	r26, r26
 a40:	bb 1f       	adc	r27, r27
 a42:	ee 1f       	adc	r30, r30
 a44:	ff 1f       	adc	r31, r31
 a46:	a2 17       	cp	r26, r18
 a48:	b3 07       	cpc	r27, r19
 a4a:	e4 07       	cpc	r30, r20
 a4c:	f5 07       	cpc	r31, r21
 a4e:	20 f0       	brcs	.+8      	; 0xa58 <__udivmodsi4_ep>
 a50:	a2 1b       	sub	r26, r18
 a52:	b3 0b       	sbc	r27, r19
 a54:	e4 0b       	sbc	r30, r20
 a56:	f5 0b       	sbc	r31, r21

00000a58 <__udivmodsi4_ep>:
 a58:	66 1f       	adc	r22, r22
 a5a:	77 1f       	adc	r23, r23
 a5c:	88 1f       	adc	r24, r24
 a5e:	99 1f       	adc	r25, r25
 a60:	1a 94       	dec	r1
 a62:	69 f7       	brne	.-38     	; 0xa3e <__udivmodsi4_loop>
 a64:	60 95       	com	r22
 a66:	70 95       	com	r23
 a68:	80 95       	com	r24
 a6a:	90 95       	com	r25
 a6c:	9b 01       	movw	r18, r22
 a6e:	ac 01       	movw	r20, r24
 a70:	bd 01       	movw	r22, r26
 a72:	cf 01       	movw	r24, r30
 a74:	08 95       	ret

00000a76 <_exit>:
 a76:	f8 94       	cli

00000a78 <__stop_program>:
 a78:	ff cf       	rjmp	.-2      	; 0xa78 <__stop_program>
