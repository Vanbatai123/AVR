
SoftwareUART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000039c  00000430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000039c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002e  00800106  00800106  00000436  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000436  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000468  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000be4  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084c  00000000  00000000  0000111c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004eb  00000000  00000000  00001968  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00001e54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052e  00000000  00000000  00001f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000028c  00000000  00000000  000024a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000272e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__ctors_end>
   4:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
   8:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
   c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  10:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  14:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  18:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  1c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  20:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  24:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  28:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  2c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  30:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  34:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  38:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_14>
  3c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  40:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  44:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  48:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  4c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  50:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  54:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  58:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  5c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  60:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  64:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	20 48       	sbci	r18, 0x80	; 128
  6a:	65 6c       	ori	r22, 0xC5	; 197
  6c:	6c 6f       	ori	r22, 0xFC	; 252
  6e:	20 00       	.word	0x0020	; ????

00000070 <pstring.1784>:
  70:	61 64 61 70 74 65 64 20 66 6f 72 20 41 74 6d 65     adapted for Atme
  80:	6c 20 41 56 52 20 61 6e 64 20 74 68 69 73 20 64     l AVR and this d
  90:	65 6d 6f 20 62 79 20 4d 61 72 74 69 6e 20 54 68     emo by Martin Th
  a0:	6f 6d 61 73 0d 0a 00                                omas...

000000a7 <__c.1788>:
  a7:	67 65 6e 65 72 69 63 20 73 6f 66 74 75 61 72 74     generic softuart
  b7:	20 64 72 69 76 65 72 20 63 6f 64 65 20 62 79 20      driver code by 
  c7:	43 6f 6c 69 6e 20 47 69 74 74 69 6e 73 0d 0a 00     Colin Gittins...

000000d7 <__c.1786>:
  d7:	0d 0a 53 6f 66 74 75 61 72 74 20 44 65 6d 6f 2d     ..Softuart Demo-
  e7:	41 70 70 6c 69 63 61 74 69 6f 6e 0d 0a 00 00        Application....

000000f6 <__ctors_end>:
  f6:	11 24       	eor	r1, r1
  f8:	1f be       	out	0x3f, r1	; 63
  fa:	cf ef       	ldi	r28, 0xFF	; 255
  fc:	d8 e0       	ldi	r29, 0x08	; 8
  fe:	de bf       	out	0x3e, r29	; 62
 100:	cd bf       	out	0x3d, r28	; 61

00000102 <__do_copy_data>:
 102:	11 e0       	ldi	r17, 0x01	; 1
 104:	a0 e0       	ldi	r26, 0x00	; 0
 106:	b1 e0       	ldi	r27, 0x01	; 1
 108:	ec e9       	ldi	r30, 0x9C	; 156
 10a:	f3 e0       	ldi	r31, 0x03	; 3
 10c:	02 c0       	rjmp	.+4      	; 0x112 <__do_copy_data+0x10>
 10e:	05 90       	lpm	r0, Z+
 110:	0d 92       	st	X+, r0
 112:	a6 30       	cpi	r26, 0x06	; 6
 114:	b1 07       	cpc	r27, r17
 116:	d9 f7       	brne	.-10     	; 0x10e <__do_copy_data+0xc>

00000118 <__do_clear_bss>:
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	a6 e0       	ldi	r26, 0x06	; 6
 11c:	b1 e0       	ldi	r27, 0x01	; 1
 11e:	01 c0       	rjmp	.+2      	; 0x122 <.do_clear_bss_start>

00000120 <.do_clear_bss_loop>:
 120:	1d 92       	st	X+, r1

00000122 <.do_clear_bss_start>:
 122:	a4 33       	cpi	r26, 0x34	; 52
 124:	b2 07       	cpc	r27, r18
 126:	e1 f7       	brne	.-8      	; 0x120 <.do_clear_bss_loop>
 128:	0e 94 9a 00 	call	0x134	; 0x134 <main>
 12c:	0c 94 cc 01 	jmp	0x398	; 0x398 <_exit>

00000130 <__bad_interrupt>:
 130:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000134 <main>:
#define CNTHALLO (unsigned int)(0xFFFF)
#else 
#define CNTHALLO (unsigned int)(0xFFFF/3)
#endif

	softuart_init();
 134:	0e 94 5d 01 	call	0x2ba	; 0x2ba <softuart_init>
	softuart_turn_rx_on(); /* redundant - on by default */
 138:	0e 94 75 01 	call	0x2ea	; 0x2ea <softuart_turn_rx_on>
	
	sei();
 13c:	78 94       	sei

	softuart_puts_P( "\r\nSoftuart Demo-Application\r\n" );    // "implicit" PSTR
 13e:	87 ed       	ldi	r24, 0xD7	; 215
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 ba 01 	call	0x374	; 0x374 <softuart_puts_p>
	softuart_puts_p( PSTR("generic softuart driver code by Colin Gittins\r\n") ); // explicit PSTR
 146:	87 ea       	ldi	r24, 0xA7	; 167
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 ba 01 	call	0x374	; 0x374 <softuart_puts_p>
	softuart_puts_p( pstring ); // pstring defined with PROGMEM
 14e:	80 e7       	ldi	r24, 0x70	; 112
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 ba 01 	call	0x374	; 0x374 <softuart_puts_p>
	softuart_puts( "--\r\n" );  // string "from RAM"
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0e 94 ab 01 	call	0x356	; 0x356 <softuart_puts>
}
#endif /* WITH_STDIO_DEMO */


int main(void)
{
 15e:	cf ef       	ldi	r28, 0xFF	; 255
 160:	df ef       	ldi	r29, 0xFF	; 255
	stdio_demo_func();
#endif
	
	for (;;) {
	
		if ( softuart_kbhit() ) {
 162:	0e 94 8c 01 	call	0x318	; 0x318 <softuart_kbhit>
 166:	88 23       	and	r24, r24
 168:	61 f0       	breq	.+24     	; 0x182 <main+0x4e>
			c = softuart_getchar();
 16a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <softuart_getchar>
 16e:	18 2f       	mov	r17, r24
			softuart_putchar( '[' );
 170:	8b e5       	ldi	r24, 0x5B	; 91
 172:	0e 94 95 01 	call	0x32a	; 0x32a <softuart_putchar>
			softuart_putchar( c );
 176:	81 2f       	mov	r24, r17
 178:	0e 94 95 01 	call	0x32a	; 0x32a <softuart_putchar>
			softuart_putchar( ']' );
 17c:	8d e5       	ldi	r24, 0x5D	; 93
 17e:	0e 94 95 01 	call	0x32a	; 0x32a <softuart_putchar>
 182:	21 97       	sbiw	r28, 0x01	; 1
		}

		cnt++;
		if (cnt == CNTHALLO) {
 184:	71 f7       	brne	.-36     	; 0x162 <main+0x2e>
			cnt = 0;
			softuart_puts_P( " Hello " );
 186:	88 e6       	ldi	r24, 0x68	; 104
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 ba 01 	call	0x374	; 0x374 <softuart_puts_p>
 18e:	e7 cf       	rjmp	.-50     	; 0x15e <main+0x2a>

00000190 <__vector_14>:
}
	
unsigned char softuart_transmit_busy( void ) 
{
	return ( flag_tx_busy == SU_TRUE ) ? 1 : 0;
}
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	ef 93       	push	r30
 1a0:	ff 93       	push	r31
 1a2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <flag_tx_busy>
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	29 f5       	brne	.+74     	; 0x1f4 <__vector_14+0x64>
 1aa:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <timer_tx_ctr>
 1ae:	81 50       	subi	r24, 0x01	; 1
 1b0:	f9 f4       	brne	.+62     	; 0x1f0 <__vector_14+0x60>
 1b2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <internal_tx_buffer>
 1b6:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <internal_tx_buffer+0x1>
 1ba:	80 ff       	sbrs	r24, 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__vector_14+0x32>
 1be:	59 9a       	sbi	0x0b, 1	; 11
 1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <__vector_14+0x34>
 1c2:	59 98       	cbi	0x0b, 1	; 11
 1c4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <internal_tx_buffer>
 1c8:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <internal_tx_buffer+0x1>
 1cc:	96 95       	lsr	r25
 1ce:	87 95       	ror	r24
 1d0:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <internal_tx_buffer+0x1>
 1d4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <internal_tx_buffer>
 1d8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <bits_left_in_tx>
 1dc:	81 50       	subi	r24, 0x01	; 1
 1de:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <bits_left_in_tx>
 1e2:	81 11       	cpse	r24, r1
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <__vector_14+0x5e>
 1e6:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <flag_tx_busy>
 1ea:	83 e0       	ldi	r24, 0x03	; 3
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <__vector_14+0x60>
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timer_tx_ctr>
 1f4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <flag_rx_off>
 1f8:	81 11       	cpse	r24, r1
 1fa:	56 c0       	rjmp	.+172    	; 0x2a8 <__vector_14+0x118>
 1fc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <flag_rx_waiting_for_stop_bit.1794>
 200:	88 23       	and	r24, r24
 202:	e9 f0       	breq	.+58     	; 0x23e <__vector_14+0xae>
 204:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <timer_rx_ctr.1796>
 208:	81 50       	subi	r24, 0x01	; 1
 20a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <timer_rx_ctr.1796>
 20e:	81 11       	cpse	r24, r1
 210:	4b c0       	rjmp	.+150    	; 0x2a8 <__vector_14+0x118>
 212:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <flag_rx_waiting_for_stop_bit.1794>
 216:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <flag_rx_ready>
 21a:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <qin>
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <internal_rx_buffer.1798>
 224:	ec 5e       	subi	r30, 0xEC	; 236
 226:	fe 4f       	sbci	r31, 0xFE	; 254
 228:	80 83       	st	Z, r24
 22a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <qin>
 22e:	8f 5f       	subi	r24, 0xFF	; 255
 230:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <qin>
 234:	80 32       	cpi	r24, 0x20	; 32
 236:	c0 f1       	brcs	.+112    	; 0x2a8 <__vector_14+0x118>
 238:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <qin>
 23c:	35 c0       	rjmp	.+106    	; 0x2a8 <__vector_14+0x118>
 23e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <flag_rx_ready>
 242:	81 11       	cpse	r24, r1
 244:	10 c0       	rjmp	.+32     	; 0x266 <__vector_14+0xd6>
 246:	48 99       	sbic	0x09, 0	; 9
 248:	2f c0       	rjmp	.+94     	; 0x2a8 <__vector_14+0x118>
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <flag_rx_ready>
 250:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <internal_rx_buffer.1798>
 254:	94 e0       	ldi	r25, 0x04	; 4
 256:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timer_rx_ctr.1796>
 25a:	98 e0       	ldi	r25, 0x08	; 8
 25c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <bits_left_in_rx.1797>
 260:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 264:	21 c0       	rjmp	.+66     	; 0x2a8 <__vector_14+0x118>
 266:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <timer_rx_ctr.1796>
 26a:	81 50       	subi	r24, 0x01	; 1
 26c:	d9 f4       	brne	.+54     	; 0x2a4 <__vector_14+0x114>
 26e:	48 9b       	sbis	0x09, 0	; 9
 270:	07 c0       	rjmp	.+14     	; 0x280 <__vector_14+0xf0>
 272:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <internal_rx_buffer.1798>
 276:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 27a:	89 2b       	or	r24, r25
 27c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <internal_rx_buffer.1798>
 280:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 284:	88 0f       	add	r24, r24
 286:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 28a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <bits_left_in_rx.1797>
 28e:	81 50       	subi	r24, 0x01	; 1
 290:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <bits_left_in_rx.1797>
 294:	81 11       	cpse	r24, r1
 296:	05 c0       	rjmp	.+10     	; 0x2a2 <__vector_14+0x112>
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <flag_rx_waiting_for_stop_bit.1794>
 29e:	83 e0       	ldi	r24, 0x03	; 3
 2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <__vector_14+0x114>
 2a2:	83 e0       	ldi	r24, 0x03	; 3
 2a4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <timer_rx_ctr.1796>
 2a8:	ff 91       	pop	r31
 2aa:	ef 91       	pop	r30
 2ac:	9f 91       	pop	r25
 2ae:	8f 91       	pop	r24
 2b0:	0f 90       	pop	r0
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	0f 90       	pop	r0
 2b6:	1f 90       	pop	r1
 2b8:	18 95       	reti

000002ba <softuart_init>:
 2ba:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <flag_tx_busy>
 2be:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <flag_rx_ready>
 2c2:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <flag_rx_off>
 2c6:	59 9a       	sbi	0x0b, 1	; 11
 2c8:	51 9a       	sbi	0x0a, 1	; 10
 2ca:	50 98       	cbi	0x0a, 0	; 10
 2cc:	9f b7       	in	r25, 0x3f	; 63
 2ce:	f8 94       	cli
 2d0:	8f e3       	ldi	r24, 0x3F	; 63
 2d2:	87 bd       	out	0x27, r24	; 39
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	84 bd       	out	0x24, r24	; 36
 2d8:	85 bd       	out	0x25, r24	; 37
 2da:	ee e6       	ldi	r30, 0x6E	; 110
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	82 60       	ori	r24, 0x02	; 2
 2e2:	80 83       	st	Z, r24
 2e4:	16 bc       	out	0x26, r1	; 38
 2e6:	9f bf       	out	0x3f, r25	; 63
 2e8:	08 95       	ret

000002ea <softuart_turn_rx_on>:
 2ea:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <flag_rx_off>
 2ee:	08 95       	ret

000002f0 <softuart_getchar>:
 2f0:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <qout>
 2f4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <qin>
 2f8:	98 17       	cp	r25, r24
 2fa:	e1 f3       	breq	.-8      	; 0x2f4 <softuart_getchar+0x4>
 2fc:	e9 2f       	mov	r30, r25
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	ec 5e       	subi	r30, 0xEC	; 236
 302:	fe 4f       	sbci	r31, 0xFE	; 254
 304:	80 81       	ld	r24, Z
 306:	9f 5f       	subi	r25, 0xFF	; 255
 308:	90 32       	cpi	r25, 0x20	; 32
 30a:	18 f4       	brcc	.+6      	; 0x312 <softuart_getchar+0x22>
 30c:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <qout>
 310:	08 95       	ret
 312:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <qout>
 316:	08 95       	ret

00000318 <softuart_kbhit>:
 318:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <qin>
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <qout>
 322:	29 13       	cpse	r18, r25
 324:	01 c0       	rjmp	.+2      	; 0x328 <softuart_kbhit+0x10>
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	08 95       	ret

0000032a <softuart_putchar>:

void softuart_putchar( const char ch )
{
	while ( flag_tx_busy == SU_TRUE ) {
 32a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <flag_tx_busy>
 32e:	91 30       	cpi	r25, 0x01	; 1
 330:	e1 f3       	breq	.-8      	; 0x32a <softuart_putchar>
		; // wait for transmitter ready
		  // add watchdog-reset here if needed;
	}

	// invoke_UART_transmit
	timer_tx_ctr       = 3;
 332:	93 e0       	ldi	r25, 0x03	; 3
 334:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <timer_tx_ctr>
	bits_left_in_tx    = TX_NUM_OF_BITS;
 338:	9a e0       	ldi	r25, 0x0A	; 10
 33a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <bits_left_in_tx>
	internal_tx_buffer = ( ch << 1 ) | 0x200;
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	92 60       	ori	r25, 0x02	; 2
 346:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <internal_tx_buffer+0x1>
 34a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <internal_tx_buffer>
	flag_tx_busy       = SU_TRUE;
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <flag_tx_busy>
 354:	08 95       	ret

00000356 <softuart_puts>:
}
	
void softuart_puts( const char *s )
{
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	ec 01       	movw	r28, r24
	while ( *s ) {
 35c:	88 81       	ld	r24, Y
 35e:	88 23       	and	r24, r24
 360:	31 f0       	breq	.+12     	; 0x36e <softuart_puts+0x18>
 362:	21 96       	adiw	r28, 0x01	; 1
		softuart_putchar( *s++ );
 364:	0e 94 95 01 	call	0x32a	; 0x32a <softuart_putchar>
	flag_tx_busy       = SU_TRUE;
}
	
void softuart_puts( const char *s )
{
	while ( *s ) {
 368:	89 91       	ld	r24, Y+
 36a:	81 11       	cpse	r24, r1
 36c:	fb cf       	rjmp	.-10     	; 0x364 <softuart_puts+0xe>
		softuart_putchar( *s++ );
	}
}
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	08 95       	ret

00000374 <softuart_puts_p>:
	
void softuart_puts_p( const char *prg_s )
{
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
	char c;

	while ( ( c = pgm_read_byte( prg_s++ ) ) ) {
 378:	ec 01       	movw	r28, r24
 37a:	21 96       	adiw	r28, 0x01	; 1
 37c:	fc 01       	movw	r30, r24
 37e:	84 91       	lpm	r24, Z
 380:	88 23       	and	r24, r24
 382:	39 f0       	breq	.+14     	; 0x392 <softuart_puts_p+0x1e>
		softuart_putchar(c);
 384:	0e 94 95 01 	call	0x32a	; 0x32a <softuart_putchar>
	
void softuart_puts_p( const char *prg_s )
{
	char c;

	while ( ( c = pgm_read_byte( prg_s++ ) ) ) {
 388:	fe 01       	movw	r30, r28
 38a:	84 91       	lpm	r24, Z
 38c:	21 96       	adiw	r28, 0x01	; 1
 38e:	81 11       	cpse	r24, r1
 390:	f9 cf       	rjmp	.-14     	; 0x384 <softuart_puts_p+0x10>
		softuart_putchar(c);
	}
}
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <_exit>:
 398:	f8 94       	cli

0000039a <__stop_program>:
 39a:	ff cf       	rjmp	.-2      	; 0x39a <__stop_program>
