
RFID_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a4a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00000a4a  00000abe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00000ae6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000b0  00000000  00000000  00000b42  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b02  00000000  00000000  00000bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002da  00000000  00000000  000016f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000370  00000000  00000000  000019ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000254  00000000  00000000  00001d40  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002f8  00000000  00000000  00001f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000b33  00000000  00000000  0000228c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a0  00000000  00000000  00002dbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea e4       	ldi	r30, 0x4A	; 74
  3a:	fa e0       	ldi	r31, 0x0A	; 10
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a8 38       	cpi	r26, 0x88	; 136
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a8 e8       	ldi	r26, 0x88	; 136
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a8 38       	cpi	r26, 0x88	; 136
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	00 d2       	rcall	.+1024   	; 0x45a <main>
  5a:	f5 c4       	rjmp	.+2538   	; 0xa46 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <putchar_UART>:
int data, dem;

void putchar_UART(int kitu)
{
	while (inbit(UCSRA,UDRE) == 0); //cho den khi bit UDRE=1 Neu = 1 thi viet code vao
  5e:	5d 9b       	sbis	0x0b, 5	; 11
  60:	fe cf       	rjmp	.-4      	; 0x5e <putchar_UART>
	UDR=kitu;
  62:	8c b9       	out	0x0c, r24	; 12
  64:	08 95       	ret

00000066 <print_UART>:
}
void print_UART(char* str)//******__HIEN THI CHUOI KI TU__*********************
{
  66:	cf 93       	push	r28
  68:	df 93       	push	r29
  6a:	ec 01       	movw	r28, r24
	int i;
	for (i=0; str[i]!=0; i++) 
  6c:	88 81       	ld	r24, Y
  6e:	88 23       	and	r24, r24
  70:	31 f0       	breq	.+12     	; 0x7e <print_UART+0x18>
  72:	21 96       	adiw	r28, 0x01	; 1
		putchar_UART(str[i]);
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	f3 df       	rcall	.-26     	; 0x5e <putchar_UART>
	UDR=kitu;
}
void print_UART(char* str)//******__HIEN THI CHUOI KI TU__*********************
{
	int i;
	for (i=0; str[i]!=0; i++) 
  78:	89 91       	ld	r24, Y+
  7a:	81 11       	cpse	r24, r1
  7c:	fb cf       	rjmp	.-10     	; 0x74 <print_UART+0xe>
		putchar_UART(str[i]);
}
  7e:	df 91       	pop	r29
  80:	cf 91       	pop	r28
  82:	08 95       	ret

00000084 <vietso_dec_UART>:
void vietso_dec_UART(long num)
{
  84:	0f 93       	push	r16
  86:	1f 93       	push	r17
  88:	cf 93       	push	r28
  8a:	df 93       	push	r29
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
  90:	2a 97       	sbiw	r28, 0x0a	; 10
  92:	0f b6       	in	r0, 0x3f	; 63
  94:	f8 94       	cli
  96:	de bf       	out	0x3e, r29	; 62
  98:	0f be       	out	0x3f, r0	; 63
  9a:	cd bf       	out	0x3d, r28	; 61
	char dis[10];
	sprintf(dis, "%li", num);
  9c:	9f 93       	push	r25
  9e:	8f 93       	push	r24
  a0:	7f 93       	push	r23
  a2:	6f 93       	push	r22
  a4:	80 e6       	ldi	r24, 0x60	; 96
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	9f 93       	push	r25
  aa:	8f 93       	push	r24
  ac:	8e 01       	movw	r16, r28
  ae:	0f 5f       	subi	r16, 0xFF	; 255
  b0:	1f 4f       	sbci	r17, 0xFF	; 255
  b2:	1f 93       	push	r17
  b4:	0f 93       	push	r16
  b6:	08 d2       	rcall	.+1040   	; 0x4c8 <sprintf>
	print_UART(dis);
  b8:	c8 01       	movw	r24, r16
  ba:	d5 df       	rcall	.-86     	; 0x66 <print_UART>
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	f8 94       	cli
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	cd bf       	out	0x3d, r28	; 61
}
  c6:	2a 96       	adiw	r28, 0x0a	; 10
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	cd bf       	out	0x3d, r28	; 61
  d2:	df 91       	pop	r29
  d4:	cf 91       	pop	r28
  d6:	1f 91       	pop	r17
  d8:	0f 91       	pop	r16
  da:	08 95       	ret

000000dc <vietso_hex_UART>:
		vietso_dec_UART(0);
		mask>>=1;
	}
}
void vietso_hex_UART(long num)
{
  dc:	0f 93       	push	r16
  de:	1f 93       	push	r17
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	2a 97       	sbiw	r28, 0x0a	; 10
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	f8 94       	cli
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	cd bf       	out	0x3d, r28	; 61
	char dis[10];
	sprintf(dis, "0x%lx", num);
  f4:	9f 93       	push	r25
  f6:	8f 93       	push	r24
  f8:	7f 93       	push	r23
  fa:	6f 93       	push	r22
  fc:	84 e6       	ldi	r24, 0x64	; 100
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	9f 93       	push	r25
 102:	8f 93       	push	r24
 104:	8e 01       	movw	r16, r28
 106:	0f 5f       	subi	r16, 0xFF	; 255
 108:	1f 4f       	sbci	r17, 0xFF	; 255
 10a:	1f 93       	push	r17
 10c:	0f 93       	push	r16
 10e:	dc d1       	rcall	.+952    	; 0x4c8 <sprintf>
	print_UART(dis);
 110:	c8 01       	movw	r24, r16
 112:	a9 df       	rcall	.-174    	; 0x66 <print_UART>
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	f8 94       	cli
 118:	de bf       	out	0x3e, r29	; 62
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	cd bf       	out	0x3d, r28	; 61
	
}
 11e:	2a 96       	adiw	r28, 0x0a	; 10
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	f8 94       	cli
 124:	de bf       	out	0x3e, r29	; 62
 126:	0f be       	out	0x3f, r0	; 63
 128:	cd bf       	out	0x3d, r28	; 61
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	1f 91       	pop	r17
 130:	0f 91       	pop	r16
 132:	08 95       	ret

00000134 <init_UART>:
	return ( UDR ); // return the byte
}
void init_UART()
{
	//UART
	UBRRH=0;		//set toc do truyen baud
 134:	10 bc       	out	0x20, r1	; 32
	UBRRL=51;
 136:	83 e3       	ldi	r24, 0x33	; 51
 138:	89 b9       	out	0x09, r24	; 9
	UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
 13a:	86 e8       	ldi	r24, 0x86	; 134
 13c:	80 bd       	out	0x20, r24	; 32
	UCSRB=(1<<TXEN)|(1<<RXEN)|(1<<RXCIE);
 13e:	88 e9       	ldi	r24, 0x98	; 152
 140:	8a b9       	out	0x0a, r24	; 10
 142:	08 95       	ret

00000144 <RFID_write>:

void RFID_write(uint8_t RegAddr,uint8_t Value)
{
	uint8_t i, Addr;
	//RFID_SCK = 0;
	clrb(RFID_PORT, RFID_SCK);
 144:	c5 98       	cbi	0x18, 5	; 24
	//RFID_NSS = 0;
	clrb(RFID_PORT, RFID_SS);
 146:	c2 98       	cbi	0x18, 2	; 24
	Addr = ((RegAddr<<1)&0x7E);
 148:	88 0f       	add	r24, r24
 14a:	8e 77       	andi	r24, 0x7E	; 126
 14c:	98 e0       	ldi	r25, 0x08	; 8

	for(i=8;i>0;i--)    // Truyen dia chi
	{
		//RFID_MOSI = ((Addr&0x80)==0x80);
		if ((Addr&0x80)==0x80)
 14e:	88 23       	and	r24, r24
 150:	14 f4       	brge	.+4      	; 0x156 <RFID_write+0x12>
		{
			setb(RFID_PORT, RFID_MOSI);
 152:	c3 9a       	sbi	0x18, 3	; 24
 154:	01 c0       	rjmp	.+2      	; 0x158 <RFID_write+0x14>
		}
		else
		{
			clrb(RFID_PORT, RFID_MOSI);
 156:	c3 98       	cbi	0x18, 3	; 24
		}
		//RFID_SCK = 1;
		setb(RFID_PORT, RFID_SCK);
 158:	c5 9a       	sbi	0x18, 5	; 24
		Addr <<= 1;
 15a:	88 0f       	add	r24, r24
		//RFID_SCK = 0;
		clrb(RFID_PORT, RFID_SCK);
 15c:	c5 98       	cbi	0x18, 5	; 24
 15e:	91 50       	subi	r25, 0x01	; 1
	clrb(RFID_PORT, RFID_SCK);
	//RFID_NSS = 0;
	clrb(RFID_PORT, RFID_SS);
	Addr = ((RegAddr<<1)&0x7E);

	for(i=8;i>0;i--)    // Truyen dia chi
 160:	b1 f7       	brne	.-20     	; 0x14e <RFID_write+0xa>
 162:	98 e0       	ldi	r25, 0x08	; 8
		clrb(RFID_PORT, RFID_SCK);
	}
	for(i=8;i>0;i--)    // Truyen gia tri can ghi vao
	{
		//RFID_MOSI = ((Value&0x80)==0x80);
		if ((Addr&0x80)==0x80)
 164:	88 23       	and	r24, r24
 166:	14 f4       	brge	.+4      	; 0x16c <RFID_write+0x28>
		{
			setb(RFID_PORT, RFID_MOSI);
 168:	c3 9a       	sbi	0x18, 3	; 24
 16a:	01 c0       	rjmp	.+2      	; 0x16e <RFID_write+0x2a>
		}
		else
		{
			clrb(RFID_PORT, RFID_MOSI);
 16c:	c3 98       	cbi	0x18, 3	; 24
		}
		//RFID_SCK = 1;
		setb(RFID_PORT, RFID_SCK);
 16e:	c5 9a       	sbi	0x18, 5	; 24
		Value <<= 1;
		//RFID_SCK = 0;
		clrb(RFID_PORT, RFID_SCK);
 170:	c5 98       	cbi	0x18, 5	; 24
 172:	91 50       	subi	r25, 0x01	; 1
		setb(RFID_PORT, RFID_SCK);
		Addr <<= 1;
		//RFID_SCK = 0;
		clrb(RFID_PORT, RFID_SCK);
	}
	for(i=8;i>0;i--)    // Truyen gia tri can ghi vao
 174:	b9 f7       	brne	.-18     	; 0x164 <RFID_write+0x20>
		//RFID_SCK = 0;
		clrb(RFID_PORT, RFID_SCK);
	}
	//RFID_NSS = 1;
	//RFID_SCK = 1;
	setb(RFID_PORT, RFID_SS);
 176:	c2 9a       	sbi	0x18, 2	; 24
	setb(RFID_PORT, RFID_SCK);
 178:	c5 9a       	sbi	0x18, 5	; 24
 17a:	08 95       	ret

0000017c <RFID_read>:
uint8_t RFID_read(uint8_t RegAddr)
{
	uint8_t i, Addr;
	uint8_t Result=0;
	//RFID_SCK = 0;
	clrb(RFID_PORT, RFID_SCK);
 17c:	c5 98       	cbi	0x18, 5	; 24
	//RFID_NSS = 0;
	clrb(RFID_PORT, RFID_SS);
 17e:	c2 98       	cbi	0x18, 2	; 24
	Addr = ((RegAddr<<1)&0x7E)|0x80;
 180:	88 0f       	add	r24, r24
 182:	8e 77       	andi	r24, 0x7E	; 126
 184:	80 68       	ori	r24, 0x80	; 128
 186:	98 e0       	ldi	r25, 0x08	; 8
	for(i=8;i>0;i--)    // Truyen dia chi
	{
		//RFID_MOSI = ((Addr&0x80)==0x80);
		if ((Addr&0x80)==0x80)
 188:	88 23       	and	r24, r24
 18a:	14 f4       	brge	.+4      	; 0x190 <RFID_read+0x14>
		{
			setb(RFID_PORT, RFID_MOSI);
 18c:	c3 9a       	sbi	0x18, 3	; 24
 18e:	01 c0       	rjmp	.+2      	; 0x192 <RFID_read+0x16>
		}
		else
		{
			clrb(RFID_PORT, RFID_MOSI);
 190:	c3 98       	cbi	0x18, 3	; 24
		}
		//RFID_SCK = 1;
		setb(RFID_PORT, RFID_SCK);
 192:	c5 9a       	sbi	0x18, 5	; 24
		Addr <<= 1;
 194:	88 0f       	add	r24, r24
		//RFID_SCK = 0;
		clrb(RFID_PORT, RFID_SCK);
 196:	c5 98       	cbi	0x18, 5	; 24
 198:	91 50       	subi	r25, 0x01	; 1
	//RFID_SCK = 0;
	clrb(RFID_PORT, RFID_SCK);
	//RFID_NSS = 0;
	clrb(RFID_PORT, RFID_SS);
	Addr = ((RegAddr<<1)&0x7E)|0x80;
	for(i=8;i>0;i--)    // Truyen dia chi
 19a:	b1 f7       	brne	.-20     	; 0x188 <RFID_read+0xc>
 19c:	98 e0       	ldi	r25, 0x08	; 8
 19e:	80 e0       	ldi	r24, 0x00	; 0
		clrb(RFID_PORT, RFID_SCK);
	}
	for(i=8;i>0;i--)    // Doc gia tri thanh ghi
	{
		//RFID_SCK = 1;
		setb(RFID_PORT, RFID_SCK);
 1a0:	c5 9a       	sbi	0x18, 5	; 24
		Result <<= 1;
 1a2:	88 0f       	add	r24, r24
		//Result|=RFID_MISO;
		if (inbit(RFID_PIN, RFID_MISO))
 1a4:	b4 99       	sbic	0x16, 4	; 22
		{
			Result|=0x01;
 1a6:	81 60       	ori	r24, 0x01	; 1
		}
		//RFID_SCK = 0;
		clrb(RFID_PORT, RFID_SCK);
 1a8:	c5 98       	cbi	0x18, 5	; 24
 1aa:	91 50       	subi	r25, 0x01	; 1
		setb(RFID_PORT, RFID_SCK);
		Addr <<= 1;
		//RFID_SCK = 0;
		clrb(RFID_PORT, RFID_SCK);
	}
	for(i=8;i>0;i--)    // Doc gia tri thanh ghi
 1ac:	c9 f7       	brne	.-14     	; 0x1a0 <RFID_read+0x24>
		//RFID_SCK = 0;
		clrb(RFID_PORT, RFID_SCK);
	}
	//RFID_NSS = 1;
	//RFID_SCK = 1;
	setb(RFID_PORT, RFID_SS);
 1ae:	c2 9a       	sbi	0x18, 2	; 24
	setb(RFID_PORT, RFID_SCK);
 1b0:	c5 9a       	sbi	0x18, 5	; 24
	return Result;
}
 1b2:	08 95       	ret

000001b4 <RFID_reset>:
void RFID_reset()
{
	RFID_write(CommandReg,SoftReset_CMD);
 1b4:	6f e0       	ldi	r22, 0x0F	; 15
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	c5 df       	rcall	.-118    	; 0x144 <RFID_write>
 1ba:	08 95       	ret

000001bc <RFID_init>:
}

void RFID_init()
{
	uint8_t byte;
	RFID_reset();
 1bc:	fb df       	rcall	.-10     	; 0x1b4 <RFID_reset>
	
	RFID_write(TModeReg, 0x8D);
 1be:	6d e8       	ldi	r22, 0x8D	; 141
 1c0:	8a e2       	ldi	r24, 0x2A	; 42
 1c2:	c0 df       	rcall	.-128    	; 0x144 <RFID_write>
	RFID_write(TPrescalerReg, 0x3E);
 1c4:	6e e3       	ldi	r22, 0x3E	; 62
 1c6:	8b e2       	ldi	r24, 0x2B	; 43
 1c8:	bd df       	rcall	.-134    	; 0x144 <RFID_write>
	RFID_write(TReloadReg_1, 30);
 1ca:	6e e1       	ldi	r22, 0x1E	; 30
 1cc:	8c e2       	ldi	r24, 0x2C	; 44
 1ce:	ba df       	rcall	.-140    	; 0x144 <RFID_write>
	RFID_write(TReloadReg_2, 0);
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	8d e2       	ldi	r24, 0x2D	; 45
 1d4:	b7 df       	rcall	.-146    	; 0x144 <RFID_write>
	RFID_write(TxASKReg, 0x40);
 1d6:	60 e4       	ldi	r22, 0x40	; 64
 1d8:	85 e1       	ldi	r24, 0x15	; 21
 1da:	b4 df       	rcall	.-152    	; 0x144 <RFID_write>
	RFID_write(ModeReg, 0x3D);
 1dc:	6d e3       	ldi	r22, 0x3D	; 61
 1de:	81 e1       	ldi	r24, 0x11	; 17
 1e0:	b1 df       	rcall	.-158    	; 0x144 <RFID_write>
	
	byte = RFID_read(TxControlReg);
 1e2:	84 e1       	ldi	r24, 0x14	; 20
 1e4:	cb df       	rcall	.-106    	; 0x17c <RFID_read>
	if(!(byte&0x03))
 1e6:	98 2f       	mov	r25, r24
 1e8:	93 70       	andi	r25, 0x03	; 3
 1ea:	21 f4       	brne	.+8      	; 0x1f4 <RFID_init+0x38>
	{
		RFID_write(TxControlReg,byte|0x03);
 1ec:	68 2f       	mov	r22, r24
 1ee:	63 60       	ori	r22, 0x03	; 3
 1f0:	84 e1       	ldi	r24, 0x14	; 20
 1f2:	a8 df       	rcall	.-176    	; 0x144 <RFID_write>
 1f4:	08 95       	ret

000001f6 <RFID_ClearBitMask>:
	}
}
void RFID_ClearBitMask(uint8_t RegAddr,uint8_t Mask)
{
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	c8 2f       	mov	r28, r24
 1fc:	d6 2f       	mov	r29, r22
	uint8_t BuffValue = 0x00;
	BuffValue = RFID_read(RegAddr);
 1fe:	be df       	rcall	.-132    	; 0x17c <RFID_read>
	RFID_write(RegAddr, (BuffValue & ~Mask));
 200:	d0 95       	com	r29
 202:	68 2f       	mov	r22, r24
 204:	6d 23       	and	r22, r29
 206:	8c 2f       	mov	r24, r28
 208:	9d df       	rcall	.-198    	; 0x144 <RFID_write>
}
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <RFID_SetBitMask>:
#define MI_NOTAGERR                 1
#define MI_ERR                      2

#define MAXRLEN						18
void RFID_SetBitMask(uint8_t RegAddr,uint8_t Mask)
{
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	c8 2f       	mov	r28, r24
 216:	d6 2f       	mov	r29, r22
	uint8_t BuffValue = 0x00;
	BuffValue = RFID_read(RegAddr);
 218:	b1 df       	rcall	.-158    	; 0x17c <RFID_read>
	RFID_write(RegAddr,(BuffValue | Mask));
 21a:	68 2f       	mov	r22, r24
 21c:	6d 2b       	or	r22, r29
 21e:	8c 2f       	mov	r24, r28
 220:	91 df       	rcall	.-222    	; 0x144 <RFID_write>
}
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	08 95       	ret

00000228 <RFID_ComRFID>:

uint8_t RFID_ComRFID(uint8_t Command,uint8_t *InData,uint8_t InLenByte,uint8_t *OutData, uint16_t  *OutLenBit)
{
 228:	7f 92       	push	r7
 22a:	8f 92       	push	r8
 22c:	9f 92       	push	r9
 22e:	af 92       	push	r10
 230:	bf 92       	push	r11
 232:	cf 92       	push	r12
 234:	df 92       	push	r13
 236:	ef 92       	push	r14
 238:	ff 92       	push	r15
 23a:	0f 93       	push	r16
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	98 2e       	mov	r9, r24
 244:	d6 2f       	mov	r29, r22
 246:	c7 2f       	mov	r28, r23
 248:	c4 2e       	mov	r12, r20
 24a:	b2 2e       	mov	r11, r18
 24c:	a3 2e       	mov	r10, r19
	uint8_t WaitFor = 0x00;
	uint8_t LastBits;
	uint8_t n;
	uint16_t i;

	switch (Command)
 24e:	8c e0       	ldi	r24, 0x0C	; 12
 250:	98 16       	cp	r9, r24
 252:	31 f0       	breq	.+12     	; 0x260 <RFID_ComRFID+0x38>
 254:	ee e0       	ldi	r30, 0x0E	; 14
 256:	9e 16       	cp	r9, r30
 258:	61 f0       	breq	.+24     	; 0x272 <RFID_ComRFID+0x4a>

uint8_t RFID_ComRFID(uint8_t Command,uint8_t *InData,uint8_t InLenByte,uint8_t *OutData, uint16_t  *OutLenBit)
{
	uint8_t Status = MI_ERR;
	uint8_t IrqEn   = 0x00;
	uint8_t WaitFor = 0x00;
 25a:	71 2c       	mov	r7, r1
}

uint8_t RFID_ComRFID(uint8_t Command,uint8_t *InData,uint8_t InLenByte,uint8_t *OutData, uint16_t  *OutLenBit)
{
	uint8_t Status = MI_ERR;
	uint8_t IrqEn   = 0x00;
 25c:	81 2c       	mov	r8, r1
 25e:	10 c0       	rjmp	.+32     	; 0x280 <RFID_ComRFID+0x58>
		}
		break;
		case Transceive_CMD:
		{
			IrqEn   = 0x77;
			WaitFor = 0x30;
 260:	0f 2e       	mov	r0, r31
 262:	f0 e3       	ldi	r31, 0x30	; 48
 264:	7f 2e       	mov	r7, r31
 266:	f0 2d       	mov	r31, r0
			WaitFor = 0x10;
		}
		break;
		case Transceive_CMD:
		{
			IrqEn   = 0x77;
 268:	0f 2e       	mov	r0, r31
 26a:	f7 e7       	ldi	r31, 0x77	; 119
 26c:	8f 2e       	mov	r8, r31
 26e:	f0 2d       	mov	r31, r0
			WaitFor = 0x30;
		}
		break;
 270:	07 c0       	rjmp	.+14     	; 0x280 <RFID_ComRFID+0x58>
	switch (Command)
	{
		case MFAuthent_CMD:
		{
			IrqEn   = 0x12;
			WaitFor = 0x10;
 272:	68 94       	set
 274:	77 24       	eor	r7, r7
 276:	74 f8       	bld	r7, 4

	switch (Command)
	{
		case MFAuthent_CMD:
		{
			IrqEn   = 0x12;
 278:	0f 2e       	mov	r0, r31
 27a:	f2 e1       	ldi	r31, 0x12	; 18
 27c:	8f 2e       	mov	r8, r31
 27e:	f0 2d       	mov	r31, r0
		}
		break;
		default:
		break;
	}
	RFID_write(ComIEnReg,IrqEn|0x80);
 280:	68 2d       	mov	r22, r8
 282:	60 68       	ori	r22, 0x80	; 128
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	5e df       	rcall	.-324    	; 0x144 <RFID_write>
	RFID_ClearBitMask(ComIrqReg,0x80);
 288:	60 e8       	ldi	r22, 0x80	; 128
 28a:	84 e0       	ldi	r24, 0x04	; 4
 28c:	b4 df       	rcall	.-152    	; 0x1f6 <RFID_ClearBitMask>
	RFID_write(CommandReg,Idle_CMD);
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	58 df       	rcall	.-336    	; 0x144 <RFID_write>
	RFID_SetBitMask(FIFOLevelReg,0x80);
 294:	60 e8       	ldi	r22, 0x80	; 128
 296:	8a e0       	ldi	r24, 0x0A	; 10
 298:	bb df       	rcall	.-138    	; 0x210 <RFID_SetBitMask>
	
	for (i=0; i<InLenByte; i++)    // Ghi du lieu vao bo nho FIFO
 29a:	d1 2c       	mov	r13, r1
 29c:	c1 14       	cp	r12, r1
 29e:	d1 04       	cpc	r13, r1
 2a0:	69 f0       	breq	.+26     	; 0x2bc <RFID_ComRFID+0x94>
 2a2:	ed 2e       	mov	r14, r29
 2a4:	fc 2e       	mov	r15, r28
 2a6:	c0 e0       	ldi	r28, 0x00	; 0
 2a8:	d0 e0       	ldi	r29, 0x00	; 0
	{
		RFID_write(FIFODataReg, InData[i]);
 2aa:	f7 01       	movw	r30, r14
 2ac:	61 91       	ld	r22, Z+
 2ae:	7f 01       	movw	r14, r30
 2b0:	89 e0       	ldi	r24, 0x09	; 9
 2b2:	48 df       	rcall	.-368    	; 0x144 <RFID_write>
	RFID_write(ComIEnReg,IrqEn|0x80);
	RFID_ClearBitMask(ComIrqReg,0x80);
	RFID_write(CommandReg,Idle_CMD);
	RFID_SetBitMask(FIFOLevelReg,0x80);
	
	for (i=0; i<InLenByte; i++)    // Ghi du lieu vao bo nho FIFO
 2b4:	21 96       	adiw	r28, 0x01	; 1
 2b6:	cc 15       	cp	r28, r12
 2b8:	dd 05       	cpc	r29, r13
 2ba:	b8 f3       	brcs	.-18     	; 0x2aa <RFID_ComRFID+0x82>
	{
		RFID_write(FIFODataReg, InData[i]);
	}
	RFID_write(CommandReg, Command);
 2bc:	69 2d       	mov	r22, r9
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	41 df       	rcall	.-382    	; 0x144 <RFID_write>
	if (Command == Transceive_CMD)
 2c2:	fc e0       	ldi	r31, 0x0C	; 12
 2c4:	9f 12       	cpse	r9, r31
 2c6:	03 c0       	rjmp	.+6      	; 0x2ce <RFID_ComRFID+0xa6>
	{
		RFID_SetBitMask(BitFramingReg,0x80);
 2c8:	60 e8       	ldi	r22, 0x80	; 128
 2ca:	8d e0       	ldi	r24, 0x0D	; 13
 2cc:	a1 df       	rcall	.-190    	; 0x210 <RFID_SetBitMask>
	}
	i = 600;    //25ms
	do
	{
		n = RFID_read(ComIrqReg);
 2ce:	84 e0       	ldi	r24, 0x04	; 4
 2d0:	55 df       	rcall	.-342    	; 0x17c <RFID_read>
 2d2:	f8 2e       	mov	r15, r24
 2d4:	c7 e5       	ldi	r28, 0x57	; 87
 2d6:	d2 e0       	ldi	r29, 0x02	; 2
 2d8:	87 2d       	mov	r24, r7
 2da:	81 60       	ori	r24, 0x01	; 1
 2dc:	e8 2e       	mov	r14, r24
 2de:	07 c0       	rjmp	.+14     	; 0x2ee <RFID_ComRFID+0xc6>
 2e0:	84 e0       	ldi	r24, 0x04	; 4
 2e2:	4c df       	rcall	.-360    	; 0x17c <RFID_read>
 2e4:	f8 2e       	mov	r15, r24
 2e6:	21 97       	sbiw	r28, 0x01	; 1
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&WaitFor));
 2e8:	20 97       	sbiw	r28, 0x00	; 0
 2ea:	09 f4       	brne	.+2      	; 0x2ee <RFID_ComRFID+0xc6>
 2ec:	4e c0       	rjmp	.+156    	; 0x38a <RFID_ComRFID+0x162>
 2ee:	9f 2d       	mov	r25, r15
 2f0:	9e 21       	and	r25, r14
 2f2:	b1 f3       	breq	.-20     	; 0x2e0 <RFID_ComRFID+0xb8>
 2f4:	51 c0       	rjmp	.+162    	; 0x398 <RFID_ComRFID+0x170>
	if (i!=0)
	{
		if(!(RFID_read(ErrorReg)&0x1B))
		{
			Status = MI_OK;
			if (n & IrqEn & 0x01)
 2f6:	88 2d       	mov	r24, r8
 2f8:	81 70       	andi	r24, 0x01	; 1
 2fa:	f8 22       	and	r15, r24
 2fc:	dd 24       	eor	r13, r13
 2fe:	d3 94       	inc	r13
 300:	f1 10       	cpse	r15, r1
 302:	01 c0       	rjmp	.+2      	; 0x306 <RFID_ComRFID+0xde>
 304:	d1 2c       	mov	r13, r1
			{
				Status = MI_NOTAGERR;
			}
			if (Command == Transceive_CMD)
 306:	ec e0       	ldi	r30, 0x0C	; 12
 308:	9e 12       	cpse	r9, r30
 30a:	51 c0       	rjmp	.+162    	; 0x3ae <RFID_ComRFID+0x186>
			{
				n = RFID_read(FIFOLevelReg);
 30c:	8a e0       	ldi	r24, 0x0A	; 10
 30e:	36 df       	rcall	.-404    	; 0x17c <RFID_read>
 310:	c8 2f       	mov	r28, r24
				LastBits = RFID_read(ControlReg) & 0x07;
 312:	8c e0       	ldi	r24, 0x0C	; 12
 314:	33 df       	rcall	.-410    	; 0x17c <RFID_read>
 316:	87 70       	andi	r24, 0x07	; 7
				if (LastBits)
 318:	81 f0       	breq	.+32     	; 0x33a <RFID_ComRFID+0x112>
				{
					*OutLenBit = (n-1)*8 + LastBits;
 31a:	2c 2f       	mov	r18, r28
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	21 50       	subi	r18, 0x01	; 1
 320:	31 09       	sbc	r19, r1
 322:	22 0f       	add	r18, r18
 324:	33 1f       	adc	r19, r19
 326:	22 0f       	add	r18, r18
 328:	33 1f       	adc	r19, r19
 32a:	22 0f       	add	r18, r18
 32c:	33 1f       	adc	r19, r19
 32e:	28 0f       	add	r18, r24
 330:	31 1d       	adc	r19, r1
 332:	f8 01       	movw	r30, r16
 334:	31 83       	std	Z+1, r19	; 0x01
 336:	20 83       	st	Z, r18
 338:	0b c0       	rjmp	.+22     	; 0x350 <RFID_ComRFID+0x128>
				}
				else
				{
					*OutLenBit = n*8;
 33a:	2c 2f       	mov	r18, r28
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	22 0f       	add	r18, r18
 340:	33 1f       	adc	r19, r19
 342:	22 0f       	add	r18, r18
 344:	33 1f       	adc	r19, r19
 346:	22 0f       	add	r18, r18
 348:	33 1f       	adc	r19, r19
 34a:	f8 01       	movw	r30, r16
 34c:	31 83       	std	Z+1, r19	; 0x01
 34e:	20 83       	st	Z, r18
				}
				if (n == 0)
 350:	c1 11       	cpse	r28, r1
 352:	08 c0       	rjmp	.+16     	; 0x364 <RFID_ComRFID+0x13c>
				}
				if (n > MAXRLEN)
				{
					n = MAXRLEN;
				}
				for (i=0; i<n; i++)
 354:	ee 24       	eor	r14, r14
 356:	e3 94       	inc	r14
 358:	f1 2c       	mov	r15, r1
 35a:	0b 2d       	mov	r16, r11
 35c:	1a 2d       	mov	r17, r10
 35e:	c0 e0       	ldi	r28, 0x00	; 0
 360:	d0 e0       	ldi	r29, 0x00	; 0
 362:	09 c0       	rjmp	.+18     	; 0x376 <RFID_ComRFID+0x14e>
 364:	c3 31       	cpi	r28, 0x13	; 19
 366:	08 f0       	brcs	.+2      	; 0x36a <RFID_ComRFID+0x142>
 368:	c2 e1       	ldi	r28, 0x12	; 18
 36a:	ec 2e       	mov	r14, r28
 36c:	f1 2c       	mov	r15, r1
 36e:	e1 14       	cp	r14, r1
 370:	f1 04       	cpc	r15, r1
 372:	99 f7       	brne	.-26     	; 0x35a <RFID_ComRFID+0x132>
 374:	1c c0       	rjmp	.+56     	; 0x3ae <RFID_ComRFID+0x186>
				{
					OutData[i] = RFID_read(FIFODataReg);
 376:	89 e0       	ldi	r24, 0x09	; 9
 378:	01 df       	rcall	.-510    	; 0x17c <RFID_read>
 37a:	f8 01       	movw	r30, r16
 37c:	81 93       	st	Z+, r24
 37e:	8f 01       	movw	r16, r30
				}
				if (n > MAXRLEN)
				{
					n = MAXRLEN;
				}
				for (i=0; i<n; i++)
 380:	21 96       	adiw	r28, 0x01	; 1
 382:	ce 15       	cp	r28, r14
 384:	df 05       	cpc	r29, r15
 386:	b8 f3       	brcs	.-18     	; 0x376 <RFID_ComRFID+0x14e>
 388:	12 c0       	rjmp	.+36     	; 0x3ae <RFID_ComRFID+0x186>
	{
		n = RFID_read(ComIrqReg);
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&WaitFor));
	RFID_ClearBitMask(BitFramingReg,0x80);
 38a:	60 e8       	ldi	r22, 0x80	; 128
 38c:	8d e0       	ldi	r24, 0x0D	; 13
 38e:	33 df       	rcall	.-410    	; 0x1f6 <RFID_ClearBitMask>
	RFID_write(RegAddr,(BuffValue | Mask));
}

uint8_t RFID_ComRFID(uint8_t Command,uint8_t *InData,uint8_t InLenByte,uint8_t *OutData, uint16_t  *OutLenBit)
{
	uint8_t Status = MI_ERR;
 390:	68 94       	set
 392:	dd 24       	eor	r13, r13
 394:	d1 f8       	bld	r13, 1
 396:	0b c0       	rjmp	.+22     	; 0x3ae <RFID_ComRFID+0x186>
	{
		n = RFID_read(ComIrqReg);
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&WaitFor));
	RFID_ClearBitMask(BitFramingReg,0x80);
 398:	60 e8       	ldi	r22, 0x80	; 128
 39a:	8d e0       	ldi	r24, 0x0D	; 13
 39c:	2c df       	rcall	.-424    	; 0x1f6 <RFID_ClearBitMask>
	if (i!=0)
	{
		if(!(RFID_read(ErrorReg)&0x1B))
 39e:	86 e0       	ldi	r24, 0x06	; 6
 3a0:	ed de       	rcall	.-550    	; 0x17c <RFID_read>
 3a2:	8b 71       	andi	r24, 0x1B	; 27
 3a4:	09 f4       	brne	.+2      	; 0x3a8 <RFID_ComRFID+0x180>
 3a6:	a7 cf       	rjmp	.-178    	; 0x2f6 <RFID_ComRFID+0xce>
				}
			}
		}
		else
		{
			Status = MI_ERR;
 3a8:	68 94       	set
 3aa:	dd 24       	eor	r13, r13
 3ac:	d1 f8       	bld	r13, 1
		}
	}
	RFID_SetBitMask(ControlReg,0x80);                    // stop timer now
 3ae:	60 e8       	ldi	r22, 0x80	; 128
 3b0:	8c e0       	ldi	r24, 0x0C	; 12
 3b2:	2e df       	rcall	.-420    	; 0x210 <RFID_SetBitMask>
	RFID_write(CommandReg,Idle_CMD);
 3b4:	60 e0       	ldi	r22, 0x00	; 0
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	c5 de       	rcall	.-630    	; 0x144 <RFID_write>
	return Status;
}
 3ba:	8d 2d       	mov	r24, r13
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	1f 91       	pop	r17
 3c2:	0f 91       	pop	r16
 3c4:	ff 90       	pop	r15
 3c6:	ef 90       	pop	r14
 3c8:	df 90       	pop	r13
 3ca:	cf 90       	pop	r12
 3cc:	bf 90       	pop	r11
 3ce:	af 90       	pop	r10
 3d0:	9f 90       	pop	r9
 3d2:	8f 90       	pop	r8
 3d4:	7f 90       	pop	r7
 3d6:	08 95       	ret

000003d8 <RFID_Request>:


uint8_t RFID_Request(uint8_t ReqCode,uint8_t *TagType)  
{	
 3d8:	ef 92       	push	r14
 3da:	ff 92       	push	r15
 3dc:	0f 93       	push	r16
 3de:	1f 93       	push	r17
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	cd b7       	in	r28, 0x3d	; 61
 3e6:	de b7       	in	r29, 0x3e	; 62
 3e8:	64 97       	sbiw	r28, 0x14	; 20
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	f8 94       	cli
 3ee:	de bf       	out	0x3e, r29	; 62
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	cd bf       	out	0x3d, r28	; 61
 3f4:	18 2f       	mov	r17, r24
 3f6:	7b 01       	movw	r14, r22
	uint8_t Status=MI_ERR;  
	uint16_t Length;
	uint8_t Buffer[MAXRLEN]; 

	RFID_ClearBitMask(Status2Reg,0x08);
 3f8:	68 e0       	ldi	r22, 0x08	; 8
 3fa:	88 e0       	ldi	r24, 0x08	; 8
 3fc:	fc de       	rcall	.-520    	; 0x1f6 <RFID_ClearBitMask>
	RFID_write(BitFramingReg,0x07);
 3fe:	67 e0       	ldi	r22, 0x07	; 7
 400:	8d e0       	ldi	r24, 0x0D	; 13
 402:	a0 de       	rcall	.-704    	; 0x144 <RFID_write>
	RFID_SetBitMask(TxControlReg,0x03);
 404:	63 e0       	ldi	r22, 0x03	; 3
 406:	84 e1       	ldi	r24, 0x14	; 20
 408:	03 df       	rcall	.-506    	; 0x210 <RFID_SetBitMask>
		
	Buffer[0] = ReqCode;
 40a:	1b 83       	std	Y+3, r17	; 0x03
	Status = RFID_ComRFID(Transceive_CMD,Buffer,1,Buffer,&Length);
 40c:	8e 01       	movw	r16, r28
 40e:	0f 5f       	subi	r16, 0xFF	; 255
 410:	1f 4f       	sbci	r17, 0xFF	; 255
 412:	9e 01       	movw	r18, r28
 414:	2d 5f       	subi	r18, 0xFD	; 253
 416:	3f 4f       	sbci	r19, 0xFF	; 255
 418:	41 e0       	ldi	r20, 0x01	; 1
 41a:	b9 01       	movw	r22, r18
 41c:	8c e0       	ldi	r24, 0x0C	; 12
 41e:	04 df       	rcall	.-504    	; 0x228 <RFID_ComRFID>
	if ((Status == MI_OK) && (Length == 0x10))
 420:	81 11       	cpse	r24, r1
 422:	0b c0       	rjmp	.+22     	; 0x43a <RFID_Request+0x62>
 424:	29 81       	ldd	r18, Y+1	; 0x01
 426:	3a 81       	ldd	r19, Y+2	; 0x02
 428:	20 31       	cpi	r18, 0x10	; 16
 42a:	31 05       	cpc	r19, r1
 42c:	41 f4       	brne	.+16     	; 0x43e <RFID_Request+0x66>
	{    
		*TagType     = Buffer[0];
 42e:	9b 81       	ldd	r25, Y+3	; 0x03
 430:	f7 01       	movw	r30, r14
 432:	90 83       	st	Z, r25
		*(TagType+1) = Buffer[1];
 434:	9c 81       	ldd	r25, Y+4	; 0x04
 436:	91 83       	std	Z+1, r25	; 0x01
 438:	03 c0       	rjmp	.+6      	; 0x440 <RFID_Request+0x68>
	}
	else
	{   
		Status = MI_ERR;   
 43a:	82 e0       	ldi	r24, 0x02	; 2
 43c:	01 c0       	rjmp	.+2      	; 0x440 <RFID_Request+0x68>
 43e:	82 e0       	ldi	r24, 0x02	; 2
	}
	return Status;
}
 440:	64 96       	adiw	r28, 0x14	; 20
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	f8 94       	cli
 446:	de bf       	out	0x3e, r29	; 62
 448:	0f be       	out	0x3f, r0	; 63
 44a:	cd bf       	out	0x3d, r28	; 61
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	1f 91       	pop	r17
 452:	0f 91       	pop	r16
 454:	ff 90       	pop	r15
 456:	ef 90       	pop	r14
 458:	08 95       	ret

0000045a <main>:

int main(void)
{
 45a:	cf 93       	push	r28
 45c:	df 93       	push	r29
 45e:	cd b7       	in	r28, 0x3d	; 61
 460:	de b7       	in	r29, 0x3e	; 62
 462:	62 97       	sbiw	r28, 0x12	; 18
 464:	0f b6       	in	r0, 0x3f	; 63
 466:	f8 94       	cli
 468:	de bf       	out	0x3e, r29	; 62
 46a:	0f be       	out	0x3f, r0	; 63
 46c:	cd bf       	out	0x3d, r28	; 61
	RFID_DDR|=(1<<RFID_SS)|(1<<RFID_MOSI)|(1<<RFID_SCK)|(0<<RFID_MISO);
 46e:	87 b3       	in	r24, 0x17	; 23
 470:	8c 62       	ori	r24, 0x2C	; 44
 472:	87 bb       	out	0x17, r24	; 23
	init_UART();
 474:	5f de       	rcall	.-834    	; 0x134 <init_UART>
	RFID_init();
 476:	a2 de       	rcall	.-700    	; 0x1bc <RFID_init>
	uint8_t str[MAXRLEN];	
	print_UART("RFID Reader - RC522");
 478:	8a e6       	ldi	r24, 0x6A	; 106
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	f4 dd       	rcall	.-1048   	; 0x66 <print_UART>
	int byte = RFID_read(VersionReg);
 47e:	87 e3       	ldi	r24, 0x37	; 55
 480:	7d de       	rcall	.-774    	; 0x17c <RFID_read>
 482:	18 2f       	mov	r17, r24
	print_UART("Version: ");
 484:	8e e7       	ldi	r24, 0x7E	; 126
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	ee dd       	rcall	.-1060   	; 0x66 <print_UART>
	vietso_hex_UART(byte);
 48a:	61 2f       	mov	r22, r17
 48c:	70 e0       	ldi	r23, 0x00	; 0
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	24 de       	rcall	.-952    	; 0xdc <vietso_hex_UART>
	putchar_UART('\r');
 494:	8d e0       	ldi	r24, 0x0D	; 13
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	e2 dd       	rcall	.-1084   	; 0x5e <putchar_UART>

	while(1)
	{
		byte = RFID_Request(0x52, str);
 49a:	be 01       	movw	r22, r28
 49c:	6f 5f       	subi	r22, 0xFF	; 255
 49e:	7f 4f       	sbci	r23, 0xFF	; 255
 4a0:	82 e5       	ldi	r24, 0x52	; 82
 4a2:	9a df       	rcall	.-204    	; 0x3d8 <RFID_Request>
		vietso_dec_UART(byte);
 4a4:	68 2f       	mov	r22, r24
 4a6:	70 e0       	ldi	r23, 0x00	; 0
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	eb dd       	rcall	.-1066   	; 0x84 <vietso_dec_UART>
		putchar_UART(13);
 4ae:	8d e0       	ldi	r24, 0x0D	; 13
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	d5 dd       	rcall	.-1110   	; 0x5e <putchar_UART>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b4:	2f ef       	ldi	r18, 0xFF	; 255
 4b6:	83 ed       	ldi	r24, 0xD3	; 211
 4b8:	90 e3       	ldi	r25, 0x30	; 48
 4ba:	21 50       	subi	r18, 0x01	; 1
 4bc:	80 40       	sbci	r24, 0x00	; 0
 4be:	90 40       	sbci	r25, 0x00	; 0
 4c0:	e1 f7       	brne	.-8      	; 0x4ba <__stack+0x5b>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <__stack+0x65>
 4c4:	00 00       	nop
 4c6:	e9 cf       	rjmp	.-46     	; 0x49a <__stack+0x3b>

000004c8 <sprintf>:
 4c8:	ae e0       	ldi	r26, 0x0E	; 14
 4ca:	b0 e0       	ldi	r27, 0x00	; 0
 4cc:	e9 e6       	ldi	r30, 0x69	; 105
 4ce:	f2 e0       	ldi	r31, 0x02	; 2
 4d0:	91 c2       	rjmp	.+1314   	; 0x9f4 <__prologue_saves__+0x1c>
 4d2:	0d 89       	ldd	r16, Y+21	; 0x15
 4d4:	1e 89       	ldd	r17, Y+22	; 0x16
 4d6:	86 e0       	ldi	r24, 0x06	; 6
 4d8:	8c 83       	std	Y+4, r24	; 0x04
 4da:	1a 83       	std	Y+2, r17	; 0x02
 4dc:	09 83       	std	Y+1, r16	; 0x01
 4de:	8f ef       	ldi	r24, 0xFF	; 255
 4e0:	9f e7       	ldi	r25, 0x7F	; 127
 4e2:	9e 83       	std	Y+6, r25	; 0x06
 4e4:	8d 83       	std	Y+5, r24	; 0x05
 4e6:	ae 01       	movw	r20, r28
 4e8:	47 5e       	subi	r20, 0xE7	; 231
 4ea:	5f 4f       	sbci	r21, 0xFF	; 255
 4ec:	6f 89       	ldd	r22, Y+23	; 0x17
 4ee:	78 8d       	ldd	r23, Y+24	; 0x18
 4f0:	ce 01       	movw	r24, r28
 4f2:	01 96       	adiw	r24, 0x01	; 1
 4f4:	08 d0       	rcall	.+16     	; 0x506 <vfprintf>
 4f6:	ef 81       	ldd	r30, Y+7	; 0x07
 4f8:	f8 85       	ldd	r31, Y+8	; 0x08
 4fa:	e0 0f       	add	r30, r16
 4fc:	f1 1f       	adc	r31, r17
 4fe:	10 82       	st	Z, r1
 500:	2e 96       	adiw	r28, 0x0e	; 14
 502:	e4 e0       	ldi	r30, 0x04	; 4
 504:	93 c2       	rjmp	.+1318   	; 0xa2c <__epilogue_restores__+0x1c>

00000506 <vfprintf>:
 506:	ac e0       	ldi	r26, 0x0C	; 12
 508:	b0 e0       	ldi	r27, 0x00	; 0
 50a:	e8 e8       	ldi	r30, 0x88	; 136
 50c:	f2 e0       	ldi	r31, 0x02	; 2
 50e:	64 c2       	rjmp	.+1224   	; 0x9d8 <__prologue_saves__>
 510:	7c 01       	movw	r14, r24
 512:	6b 01       	movw	r12, r22
 514:	8a 01       	movw	r16, r20
 516:	fc 01       	movw	r30, r24
 518:	17 82       	std	Z+7, r1	; 0x07
 51a:	16 82       	std	Z+6, r1	; 0x06
 51c:	83 81       	ldd	r24, Z+3	; 0x03
 51e:	81 ff       	sbrs	r24, 1
 520:	b0 c1       	rjmp	.+864    	; 0x882 <vfprintf+0x37c>
 522:	ce 01       	movw	r24, r28
 524:	01 96       	adiw	r24, 0x01	; 1
 526:	4c 01       	movw	r8, r24
 528:	f7 01       	movw	r30, r14
 52a:	93 81       	ldd	r25, Z+3	; 0x03
 52c:	f6 01       	movw	r30, r12
 52e:	93 fd       	sbrc	r25, 3
 530:	85 91       	lpm	r24, Z+
 532:	93 ff       	sbrs	r25, 3
 534:	81 91       	ld	r24, Z+
 536:	6f 01       	movw	r12, r30
 538:	88 23       	and	r24, r24
 53a:	09 f4       	brne	.+2      	; 0x53e <vfprintf+0x38>
 53c:	9e c1       	rjmp	.+828    	; 0x87a <vfprintf+0x374>
 53e:	85 32       	cpi	r24, 0x25	; 37
 540:	39 f4       	brne	.+14     	; 0x550 <vfprintf+0x4a>
 542:	93 fd       	sbrc	r25, 3
 544:	85 91       	lpm	r24, Z+
 546:	93 ff       	sbrs	r25, 3
 548:	81 91       	ld	r24, Z+
 54a:	6f 01       	movw	r12, r30
 54c:	85 32       	cpi	r24, 0x25	; 37
 54e:	21 f4       	brne	.+8      	; 0x558 <vfprintf+0x52>
 550:	b7 01       	movw	r22, r14
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	b1 d1       	rcall	.+866    	; 0x8b8 <fputc>
 556:	e8 cf       	rjmp	.-48     	; 0x528 <vfprintf+0x22>
 558:	51 2c       	mov	r5, r1
 55a:	31 2c       	mov	r3, r1
 55c:	20 e0       	ldi	r18, 0x00	; 0
 55e:	20 32       	cpi	r18, 0x20	; 32
 560:	a0 f4       	brcc	.+40     	; 0x58a <vfprintf+0x84>
 562:	8b 32       	cpi	r24, 0x2B	; 43
 564:	69 f0       	breq	.+26     	; 0x580 <vfprintf+0x7a>
 566:	30 f4       	brcc	.+12     	; 0x574 <vfprintf+0x6e>
 568:	80 32       	cpi	r24, 0x20	; 32
 56a:	59 f0       	breq	.+22     	; 0x582 <vfprintf+0x7c>
 56c:	83 32       	cpi	r24, 0x23	; 35
 56e:	69 f4       	brne	.+26     	; 0x58a <vfprintf+0x84>
 570:	20 61       	ori	r18, 0x10	; 16
 572:	2c c0       	rjmp	.+88     	; 0x5cc <vfprintf+0xc6>
 574:	8d 32       	cpi	r24, 0x2D	; 45
 576:	39 f0       	breq	.+14     	; 0x586 <vfprintf+0x80>
 578:	80 33       	cpi	r24, 0x30	; 48
 57a:	39 f4       	brne	.+14     	; 0x58a <vfprintf+0x84>
 57c:	21 60       	ori	r18, 0x01	; 1
 57e:	26 c0       	rjmp	.+76     	; 0x5cc <vfprintf+0xc6>
 580:	22 60       	ori	r18, 0x02	; 2
 582:	24 60       	ori	r18, 0x04	; 4
 584:	23 c0       	rjmp	.+70     	; 0x5cc <vfprintf+0xc6>
 586:	28 60       	ori	r18, 0x08	; 8
 588:	21 c0       	rjmp	.+66     	; 0x5cc <vfprintf+0xc6>
 58a:	27 fd       	sbrc	r18, 7
 58c:	27 c0       	rjmp	.+78     	; 0x5dc <vfprintf+0xd6>
 58e:	30 ed       	ldi	r19, 0xD0	; 208
 590:	38 0f       	add	r19, r24
 592:	3a 30       	cpi	r19, 0x0A	; 10
 594:	78 f4       	brcc	.+30     	; 0x5b4 <vfprintf+0xae>
 596:	26 ff       	sbrs	r18, 6
 598:	06 c0       	rjmp	.+12     	; 0x5a6 <vfprintf+0xa0>
 59a:	fa e0       	ldi	r31, 0x0A	; 10
 59c:	5f 9e       	mul	r5, r31
 59e:	30 0d       	add	r19, r0
 5a0:	11 24       	eor	r1, r1
 5a2:	53 2e       	mov	r5, r19
 5a4:	13 c0       	rjmp	.+38     	; 0x5cc <vfprintf+0xc6>
 5a6:	8a e0       	ldi	r24, 0x0A	; 10
 5a8:	38 9e       	mul	r3, r24
 5aa:	30 0d       	add	r19, r0
 5ac:	11 24       	eor	r1, r1
 5ae:	33 2e       	mov	r3, r19
 5b0:	20 62       	ori	r18, 0x20	; 32
 5b2:	0c c0       	rjmp	.+24     	; 0x5cc <vfprintf+0xc6>
 5b4:	8e 32       	cpi	r24, 0x2E	; 46
 5b6:	21 f4       	brne	.+8      	; 0x5c0 <vfprintf+0xba>
 5b8:	26 fd       	sbrc	r18, 6
 5ba:	5f c1       	rjmp	.+702    	; 0x87a <vfprintf+0x374>
 5bc:	20 64       	ori	r18, 0x40	; 64
 5be:	06 c0       	rjmp	.+12     	; 0x5cc <vfprintf+0xc6>
 5c0:	8c 36       	cpi	r24, 0x6C	; 108
 5c2:	11 f4       	brne	.+4      	; 0x5c8 <vfprintf+0xc2>
 5c4:	20 68       	ori	r18, 0x80	; 128
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <vfprintf+0xc6>
 5c8:	88 36       	cpi	r24, 0x68	; 104
 5ca:	41 f4       	brne	.+16     	; 0x5dc <vfprintf+0xd6>
 5cc:	f6 01       	movw	r30, r12
 5ce:	93 fd       	sbrc	r25, 3
 5d0:	85 91       	lpm	r24, Z+
 5d2:	93 ff       	sbrs	r25, 3
 5d4:	81 91       	ld	r24, Z+
 5d6:	6f 01       	movw	r12, r30
 5d8:	81 11       	cpse	r24, r1
 5da:	c1 cf       	rjmp	.-126    	; 0x55e <vfprintf+0x58>
 5dc:	98 2f       	mov	r25, r24
 5de:	9f 7d       	andi	r25, 0xDF	; 223
 5e0:	95 54       	subi	r25, 0x45	; 69
 5e2:	93 30       	cpi	r25, 0x03	; 3
 5e4:	28 f4       	brcc	.+10     	; 0x5f0 <vfprintf+0xea>
 5e6:	0c 5f       	subi	r16, 0xFC	; 252
 5e8:	1f 4f       	sbci	r17, 0xFF	; 255
 5ea:	ff e3       	ldi	r31, 0x3F	; 63
 5ec:	f9 83       	std	Y+1, r31	; 0x01
 5ee:	0d c0       	rjmp	.+26     	; 0x60a <vfprintf+0x104>
 5f0:	83 36       	cpi	r24, 0x63	; 99
 5f2:	31 f0       	breq	.+12     	; 0x600 <vfprintf+0xfa>
 5f4:	83 37       	cpi	r24, 0x73	; 115
 5f6:	71 f0       	breq	.+28     	; 0x614 <vfprintf+0x10e>
 5f8:	83 35       	cpi	r24, 0x53	; 83
 5fa:	09 f0       	breq	.+2      	; 0x5fe <vfprintf+0xf8>
 5fc:	57 c0       	rjmp	.+174    	; 0x6ac <vfprintf+0x1a6>
 5fe:	21 c0       	rjmp	.+66     	; 0x642 <vfprintf+0x13c>
 600:	f8 01       	movw	r30, r16
 602:	80 81       	ld	r24, Z
 604:	89 83       	std	Y+1, r24	; 0x01
 606:	0e 5f       	subi	r16, 0xFE	; 254
 608:	1f 4f       	sbci	r17, 0xFF	; 255
 60a:	44 24       	eor	r4, r4
 60c:	43 94       	inc	r4
 60e:	51 2c       	mov	r5, r1
 610:	54 01       	movw	r10, r8
 612:	14 c0       	rjmp	.+40     	; 0x63c <vfprintf+0x136>
 614:	38 01       	movw	r6, r16
 616:	f2 e0       	ldi	r31, 0x02	; 2
 618:	6f 0e       	add	r6, r31
 61a:	71 1c       	adc	r7, r1
 61c:	f8 01       	movw	r30, r16
 61e:	a0 80       	ld	r10, Z
 620:	b1 80       	ldd	r11, Z+1	; 0x01
 622:	26 ff       	sbrs	r18, 6
 624:	03 c0       	rjmp	.+6      	; 0x62c <vfprintf+0x126>
 626:	65 2d       	mov	r22, r5
 628:	70 e0       	ldi	r23, 0x00	; 0
 62a:	02 c0       	rjmp	.+4      	; 0x630 <vfprintf+0x12a>
 62c:	6f ef       	ldi	r22, 0xFF	; 255
 62e:	7f ef       	ldi	r23, 0xFF	; 255
 630:	c5 01       	movw	r24, r10
 632:	2c 87       	std	Y+12, r18	; 0x0c
 634:	36 d1       	rcall	.+620    	; 0x8a2 <strnlen>
 636:	2c 01       	movw	r4, r24
 638:	83 01       	movw	r16, r6
 63a:	2c 85       	ldd	r18, Y+12	; 0x0c
 63c:	2f 77       	andi	r18, 0x7F	; 127
 63e:	22 2e       	mov	r2, r18
 640:	16 c0       	rjmp	.+44     	; 0x66e <vfprintf+0x168>
 642:	38 01       	movw	r6, r16
 644:	f2 e0       	ldi	r31, 0x02	; 2
 646:	6f 0e       	add	r6, r31
 648:	71 1c       	adc	r7, r1
 64a:	f8 01       	movw	r30, r16
 64c:	a0 80       	ld	r10, Z
 64e:	b1 80       	ldd	r11, Z+1	; 0x01
 650:	26 ff       	sbrs	r18, 6
 652:	03 c0       	rjmp	.+6      	; 0x65a <vfprintf+0x154>
 654:	65 2d       	mov	r22, r5
 656:	70 e0       	ldi	r23, 0x00	; 0
 658:	02 c0       	rjmp	.+4      	; 0x65e <vfprintf+0x158>
 65a:	6f ef       	ldi	r22, 0xFF	; 255
 65c:	7f ef       	ldi	r23, 0xFF	; 255
 65e:	c5 01       	movw	r24, r10
 660:	2c 87       	std	Y+12, r18	; 0x0c
 662:	14 d1       	rcall	.+552    	; 0x88c <strnlen_P>
 664:	2c 01       	movw	r4, r24
 666:	2c 85       	ldd	r18, Y+12	; 0x0c
 668:	20 68       	ori	r18, 0x80	; 128
 66a:	22 2e       	mov	r2, r18
 66c:	83 01       	movw	r16, r6
 66e:	23 fc       	sbrc	r2, 3
 670:	19 c0       	rjmp	.+50     	; 0x6a4 <vfprintf+0x19e>
 672:	83 2d       	mov	r24, r3
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	48 16       	cp	r4, r24
 678:	59 06       	cpc	r5, r25
 67a:	a0 f4       	brcc	.+40     	; 0x6a4 <vfprintf+0x19e>
 67c:	b7 01       	movw	r22, r14
 67e:	80 e2       	ldi	r24, 0x20	; 32
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	1a d1       	rcall	.+564    	; 0x8b8 <fputc>
 684:	3a 94       	dec	r3
 686:	f5 cf       	rjmp	.-22     	; 0x672 <vfprintf+0x16c>
 688:	f5 01       	movw	r30, r10
 68a:	27 fc       	sbrc	r2, 7
 68c:	85 91       	lpm	r24, Z+
 68e:	27 fe       	sbrs	r2, 7
 690:	81 91       	ld	r24, Z+
 692:	5f 01       	movw	r10, r30
 694:	b7 01       	movw	r22, r14
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	0f d1       	rcall	.+542    	; 0x8b8 <fputc>
 69a:	31 10       	cpse	r3, r1
 69c:	3a 94       	dec	r3
 69e:	f1 e0       	ldi	r31, 0x01	; 1
 6a0:	4f 1a       	sub	r4, r31
 6a2:	51 08       	sbc	r5, r1
 6a4:	41 14       	cp	r4, r1
 6a6:	51 04       	cpc	r5, r1
 6a8:	79 f7       	brne	.-34     	; 0x688 <vfprintf+0x182>
 6aa:	de c0       	rjmp	.+444    	; 0x868 <vfprintf+0x362>
 6ac:	84 36       	cpi	r24, 0x64	; 100
 6ae:	11 f0       	breq	.+4      	; 0x6b4 <vfprintf+0x1ae>
 6b0:	89 36       	cpi	r24, 0x69	; 105
 6b2:	31 f5       	brne	.+76     	; 0x700 <vfprintf+0x1fa>
 6b4:	f8 01       	movw	r30, r16
 6b6:	27 ff       	sbrs	r18, 7
 6b8:	07 c0       	rjmp	.+14     	; 0x6c8 <vfprintf+0x1c2>
 6ba:	60 81       	ld	r22, Z
 6bc:	71 81       	ldd	r23, Z+1	; 0x01
 6be:	82 81       	ldd	r24, Z+2	; 0x02
 6c0:	93 81       	ldd	r25, Z+3	; 0x03
 6c2:	0c 5f       	subi	r16, 0xFC	; 252
 6c4:	1f 4f       	sbci	r17, 0xFF	; 255
 6c6:	08 c0       	rjmp	.+16     	; 0x6d8 <vfprintf+0x1d2>
 6c8:	60 81       	ld	r22, Z
 6ca:	71 81       	ldd	r23, Z+1	; 0x01
 6cc:	88 27       	eor	r24, r24
 6ce:	77 fd       	sbrc	r23, 7
 6d0:	80 95       	com	r24
 6d2:	98 2f       	mov	r25, r24
 6d4:	0e 5f       	subi	r16, 0xFE	; 254
 6d6:	1f 4f       	sbci	r17, 0xFF	; 255
 6d8:	2f 76       	andi	r18, 0x6F	; 111
 6da:	b2 2e       	mov	r11, r18
 6dc:	97 ff       	sbrs	r25, 7
 6de:	09 c0       	rjmp	.+18     	; 0x6f2 <vfprintf+0x1ec>
 6e0:	90 95       	com	r25
 6e2:	80 95       	com	r24
 6e4:	70 95       	com	r23
 6e6:	61 95       	neg	r22
 6e8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ea:	8f 4f       	sbci	r24, 0xFF	; 255
 6ec:	9f 4f       	sbci	r25, 0xFF	; 255
 6ee:	20 68       	ori	r18, 0x80	; 128
 6f0:	b2 2e       	mov	r11, r18
 6f2:	2a e0       	ldi	r18, 0x0A	; 10
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	a4 01       	movw	r20, r8
 6f8:	11 d1       	rcall	.+546    	; 0x91c <__ultoa_invert>
 6fa:	a8 2e       	mov	r10, r24
 6fc:	a8 18       	sub	r10, r8
 6fe:	43 c0       	rjmp	.+134    	; 0x786 <vfprintf+0x280>
 700:	85 37       	cpi	r24, 0x75	; 117
 702:	29 f4       	brne	.+10     	; 0x70e <vfprintf+0x208>
 704:	2f 7e       	andi	r18, 0xEF	; 239
 706:	b2 2e       	mov	r11, r18
 708:	2a e0       	ldi	r18, 0x0A	; 10
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	25 c0       	rjmp	.+74     	; 0x758 <vfprintf+0x252>
 70e:	f2 2f       	mov	r31, r18
 710:	f9 7f       	andi	r31, 0xF9	; 249
 712:	bf 2e       	mov	r11, r31
 714:	8f 36       	cpi	r24, 0x6F	; 111
 716:	c1 f0       	breq	.+48     	; 0x748 <vfprintf+0x242>
 718:	18 f4       	brcc	.+6      	; 0x720 <vfprintf+0x21a>
 71a:	88 35       	cpi	r24, 0x58	; 88
 71c:	79 f0       	breq	.+30     	; 0x73c <vfprintf+0x236>
 71e:	ad c0       	rjmp	.+346    	; 0x87a <vfprintf+0x374>
 720:	80 37       	cpi	r24, 0x70	; 112
 722:	19 f0       	breq	.+6      	; 0x72a <vfprintf+0x224>
 724:	88 37       	cpi	r24, 0x78	; 120
 726:	21 f0       	breq	.+8      	; 0x730 <vfprintf+0x22a>
 728:	a8 c0       	rjmp	.+336    	; 0x87a <vfprintf+0x374>
 72a:	2f 2f       	mov	r18, r31
 72c:	20 61       	ori	r18, 0x10	; 16
 72e:	b2 2e       	mov	r11, r18
 730:	b4 fe       	sbrs	r11, 4
 732:	0d c0       	rjmp	.+26     	; 0x74e <vfprintf+0x248>
 734:	8b 2d       	mov	r24, r11
 736:	84 60       	ori	r24, 0x04	; 4
 738:	b8 2e       	mov	r11, r24
 73a:	09 c0       	rjmp	.+18     	; 0x74e <vfprintf+0x248>
 73c:	24 ff       	sbrs	r18, 4
 73e:	0a c0       	rjmp	.+20     	; 0x754 <vfprintf+0x24e>
 740:	9f 2f       	mov	r25, r31
 742:	96 60       	ori	r25, 0x06	; 6
 744:	b9 2e       	mov	r11, r25
 746:	06 c0       	rjmp	.+12     	; 0x754 <vfprintf+0x24e>
 748:	28 e0       	ldi	r18, 0x08	; 8
 74a:	30 e0       	ldi	r19, 0x00	; 0
 74c:	05 c0       	rjmp	.+10     	; 0x758 <vfprintf+0x252>
 74e:	20 e1       	ldi	r18, 0x10	; 16
 750:	30 e0       	ldi	r19, 0x00	; 0
 752:	02 c0       	rjmp	.+4      	; 0x758 <vfprintf+0x252>
 754:	20 e1       	ldi	r18, 0x10	; 16
 756:	32 e0       	ldi	r19, 0x02	; 2
 758:	f8 01       	movw	r30, r16
 75a:	b7 fe       	sbrs	r11, 7
 75c:	07 c0       	rjmp	.+14     	; 0x76c <vfprintf+0x266>
 75e:	60 81       	ld	r22, Z
 760:	71 81       	ldd	r23, Z+1	; 0x01
 762:	82 81       	ldd	r24, Z+2	; 0x02
 764:	93 81       	ldd	r25, Z+3	; 0x03
 766:	0c 5f       	subi	r16, 0xFC	; 252
 768:	1f 4f       	sbci	r17, 0xFF	; 255
 76a:	06 c0       	rjmp	.+12     	; 0x778 <vfprintf+0x272>
 76c:	60 81       	ld	r22, Z
 76e:	71 81       	ldd	r23, Z+1	; 0x01
 770:	80 e0       	ldi	r24, 0x00	; 0
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	0e 5f       	subi	r16, 0xFE	; 254
 776:	1f 4f       	sbci	r17, 0xFF	; 255
 778:	a4 01       	movw	r20, r8
 77a:	d0 d0       	rcall	.+416    	; 0x91c <__ultoa_invert>
 77c:	a8 2e       	mov	r10, r24
 77e:	a8 18       	sub	r10, r8
 780:	fb 2d       	mov	r31, r11
 782:	ff 77       	andi	r31, 0x7F	; 127
 784:	bf 2e       	mov	r11, r31
 786:	b6 fe       	sbrs	r11, 6
 788:	0b c0       	rjmp	.+22     	; 0x7a0 <vfprintf+0x29a>
 78a:	2b 2d       	mov	r18, r11
 78c:	2e 7f       	andi	r18, 0xFE	; 254
 78e:	a5 14       	cp	r10, r5
 790:	50 f4       	brcc	.+20     	; 0x7a6 <vfprintf+0x2a0>
 792:	b4 fe       	sbrs	r11, 4
 794:	0a c0       	rjmp	.+20     	; 0x7aa <vfprintf+0x2a4>
 796:	b2 fc       	sbrc	r11, 2
 798:	08 c0       	rjmp	.+16     	; 0x7aa <vfprintf+0x2a4>
 79a:	2b 2d       	mov	r18, r11
 79c:	2e 7e       	andi	r18, 0xEE	; 238
 79e:	05 c0       	rjmp	.+10     	; 0x7aa <vfprintf+0x2a4>
 7a0:	7a 2c       	mov	r7, r10
 7a2:	2b 2d       	mov	r18, r11
 7a4:	03 c0       	rjmp	.+6      	; 0x7ac <vfprintf+0x2a6>
 7a6:	7a 2c       	mov	r7, r10
 7a8:	01 c0       	rjmp	.+2      	; 0x7ac <vfprintf+0x2a6>
 7aa:	75 2c       	mov	r7, r5
 7ac:	24 ff       	sbrs	r18, 4
 7ae:	0d c0       	rjmp	.+26     	; 0x7ca <vfprintf+0x2c4>
 7b0:	fe 01       	movw	r30, r28
 7b2:	ea 0d       	add	r30, r10
 7b4:	f1 1d       	adc	r31, r1
 7b6:	80 81       	ld	r24, Z
 7b8:	80 33       	cpi	r24, 0x30	; 48
 7ba:	11 f4       	brne	.+4      	; 0x7c0 <vfprintf+0x2ba>
 7bc:	29 7e       	andi	r18, 0xE9	; 233
 7be:	09 c0       	rjmp	.+18     	; 0x7d2 <vfprintf+0x2cc>
 7c0:	22 ff       	sbrs	r18, 2
 7c2:	06 c0       	rjmp	.+12     	; 0x7d0 <vfprintf+0x2ca>
 7c4:	73 94       	inc	r7
 7c6:	73 94       	inc	r7
 7c8:	04 c0       	rjmp	.+8      	; 0x7d2 <vfprintf+0x2cc>
 7ca:	82 2f       	mov	r24, r18
 7cc:	86 78       	andi	r24, 0x86	; 134
 7ce:	09 f0       	breq	.+2      	; 0x7d2 <vfprintf+0x2cc>
 7d0:	73 94       	inc	r7
 7d2:	23 fd       	sbrc	r18, 3
 7d4:	12 c0       	rjmp	.+36     	; 0x7fa <vfprintf+0x2f4>
 7d6:	20 ff       	sbrs	r18, 0
 7d8:	06 c0       	rjmp	.+12     	; 0x7e6 <vfprintf+0x2e0>
 7da:	5a 2c       	mov	r5, r10
 7dc:	73 14       	cp	r7, r3
 7de:	18 f4       	brcc	.+6      	; 0x7e6 <vfprintf+0x2e0>
 7e0:	53 0c       	add	r5, r3
 7e2:	57 18       	sub	r5, r7
 7e4:	73 2c       	mov	r7, r3
 7e6:	73 14       	cp	r7, r3
 7e8:	60 f4       	brcc	.+24     	; 0x802 <vfprintf+0x2fc>
 7ea:	b7 01       	movw	r22, r14
 7ec:	80 e2       	ldi	r24, 0x20	; 32
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	2c 87       	std	Y+12, r18	; 0x0c
 7f2:	62 d0       	rcall	.+196    	; 0x8b8 <fputc>
 7f4:	73 94       	inc	r7
 7f6:	2c 85       	ldd	r18, Y+12	; 0x0c
 7f8:	f6 cf       	rjmp	.-20     	; 0x7e6 <vfprintf+0x2e0>
 7fa:	73 14       	cp	r7, r3
 7fc:	10 f4       	brcc	.+4      	; 0x802 <vfprintf+0x2fc>
 7fe:	37 18       	sub	r3, r7
 800:	01 c0       	rjmp	.+2      	; 0x804 <vfprintf+0x2fe>
 802:	31 2c       	mov	r3, r1
 804:	24 ff       	sbrs	r18, 4
 806:	11 c0       	rjmp	.+34     	; 0x82a <vfprintf+0x324>
 808:	b7 01       	movw	r22, r14
 80a:	80 e3       	ldi	r24, 0x30	; 48
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	2c 87       	std	Y+12, r18	; 0x0c
 810:	53 d0       	rcall	.+166    	; 0x8b8 <fputc>
 812:	2c 85       	ldd	r18, Y+12	; 0x0c
 814:	22 ff       	sbrs	r18, 2
 816:	16 c0       	rjmp	.+44     	; 0x844 <vfprintf+0x33e>
 818:	21 ff       	sbrs	r18, 1
 81a:	03 c0       	rjmp	.+6      	; 0x822 <vfprintf+0x31c>
 81c:	88 e5       	ldi	r24, 0x58	; 88
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	02 c0       	rjmp	.+4      	; 0x826 <vfprintf+0x320>
 822:	88 e7       	ldi	r24, 0x78	; 120
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	b7 01       	movw	r22, r14
 828:	0c c0       	rjmp	.+24     	; 0x842 <vfprintf+0x33c>
 82a:	82 2f       	mov	r24, r18
 82c:	86 78       	andi	r24, 0x86	; 134
 82e:	51 f0       	breq	.+20     	; 0x844 <vfprintf+0x33e>
 830:	21 fd       	sbrc	r18, 1
 832:	02 c0       	rjmp	.+4      	; 0x838 <vfprintf+0x332>
 834:	80 e2       	ldi	r24, 0x20	; 32
 836:	01 c0       	rjmp	.+2      	; 0x83a <vfprintf+0x334>
 838:	8b e2       	ldi	r24, 0x2B	; 43
 83a:	27 fd       	sbrc	r18, 7
 83c:	8d e2       	ldi	r24, 0x2D	; 45
 83e:	b7 01       	movw	r22, r14
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	3a d0       	rcall	.+116    	; 0x8b8 <fputc>
 844:	a5 14       	cp	r10, r5
 846:	30 f4       	brcc	.+12     	; 0x854 <vfprintf+0x34e>
 848:	b7 01       	movw	r22, r14
 84a:	80 e3       	ldi	r24, 0x30	; 48
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	34 d0       	rcall	.+104    	; 0x8b8 <fputc>
 850:	5a 94       	dec	r5
 852:	f8 cf       	rjmp	.-16     	; 0x844 <vfprintf+0x33e>
 854:	aa 94       	dec	r10
 856:	f4 01       	movw	r30, r8
 858:	ea 0d       	add	r30, r10
 85a:	f1 1d       	adc	r31, r1
 85c:	80 81       	ld	r24, Z
 85e:	b7 01       	movw	r22, r14
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	2a d0       	rcall	.+84     	; 0x8b8 <fputc>
 864:	a1 10       	cpse	r10, r1
 866:	f6 cf       	rjmp	.-20     	; 0x854 <vfprintf+0x34e>
 868:	33 20       	and	r3, r3
 86a:	09 f4       	brne	.+2      	; 0x86e <vfprintf+0x368>
 86c:	5d ce       	rjmp	.-838    	; 0x528 <vfprintf+0x22>
 86e:	b7 01       	movw	r22, r14
 870:	80 e2       	ldi	r24, 0x20	; 32
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	21 d0       	rcall	.+66     	; 0x8b8 <fputc>
 876:	3a 94       	dec	r3
 878:	f7 cf       	rjmp	.-18     	; 0x868 <vfprintf+0x362>
 87a:	f7 01       	movw	r30, r14
 87c:	86 81       	ldd	r24, Z+6	; 0x06
 87e:	97 81       	ldd	r25, Z+7	; 0x07
 880:	02 c0       	rjmp	.+4      	; 0x886 <vfprintf+0x380>
 882:	8f ef       	ldi	r24, 0xFF	; 255
 884:	9f ef       	ldi	r25, 0xFF	; 255
 886:	2c 96       	adiw	r28, 0x0c	; 12
 888:	e2 e1       	ldi	r30, 0x12	; 18
 88a:	c2 c0       	rjmp	.+388    	; 0xa10 <__epilogue_restores__>

0000088c <strnlen_P>:
 88c:	fc 01       	movw	r30, r24
 88e:	05 90       	lpm	r0, Z+
 890:	61 50       	subi	r22, 0x01	; 1
 892:	70 40       	sbci	r23, 0x00	; 0
 894:	01 10       	cpse	r0, r1
 896:	d8 f7       	brcc	.-10     	; 0x88e <strnlen_P+0x2>
 898:	80 95       	com	r24
 89a:	90 95       	com	r25
 89c:	8e 0f       	add	r24, r30
 89e:	9f 1f       	adc	r25, r31
 8a0:	08 95       	ret

000008a2 <strnlen>:
 8a2:	fc 01       	movw	r30, r24
 8a4:	61 50       	subi	r22, 0x01	; 1
 8a6:	70 40       	sbci	r23, 0x00	; 0
 8a8:	01 90       	ld	r0, Z+
 8aa:	01 10       	cpse	r0, r1
 8ac:	d8 f7       	brcc	.-10     	; 0x8a4 <strnlen+0x2>
 8ae:	80 95       	com	r24
 8b0:	90 95       	com	r25
 8b2:	8e 0f       	add	r24, r30
 8b4:	9f 1f       	adc	r25, r31
 8b6:	08 95       	ret

000008b8 <fputc>:
 8b8:	0f 93       	push	r16
 8ba:	1f 93       	push	r17
 8bc:	cf 93       	push	r28
 8be:	df 93       	push	r29
 8c0:	18 2f       	mov	r17, r24
 8c2:	09 2f       	mov	r16, r25
 8c4:	eb 01       	movw	r28, r22
 8c6:	8b 81       	ldd	r24, Y+3	; 0x03
 8c8:	81 fd       	sbrc	r24, 1
 8ca:	03 c0       	rjmp	.+6      	; 0x8d2 <fputc+0x1a>
 8cc:	8f ef       	ldi	r24, 0xFF	; 255
 8ce:	9f ef       	ldi	r25, 0xFF	; 255
 8d0:	20 c0       	rjmp	.+64     	; 0x912 <fputc+0x5a>
 8d2:	82 ff       	sbrs	r24, 2
 8d4:	10 c0       	rjmp	.+32     	; 0x8f6 <fputc+0x3e>
 8d6:	4e 81       	ldd	r20, Y+6	; 0x06
 8d8:	5f 81       	ldd	r21, Y+7	; 0x07
 8da:	2c 81       	ldd	r18, Y+4	; 0x04
 8dc:	3d 81       	ldd	r19, Y+5	; 0x05
 8de:	42 17       	cp	r20, r18
 8e0:	53 07       	cpc	r21, r19
 8e2:	7c f4       	brge	.+30     	; 0x902 <fputc+0x4a>
 8e4:	e8 81       	ld	r30, Y
 8e6:	f9 81       	ldd	r31, Y+1	; 0x01
 8e8:	9f 01       	movw	r18, r30
 8ea:	2f 5f       	subi	r18, 0xFF	; 255
 8ec:	3f 4f       	sbci	r19, 0xFF	; 255
 8ee:	39 83       	std	Y+1, r19	; 0x01
 8f0:	28 83       	st	Y, r18
 8f2:	10 83       	st	Z, r17
 8f4:	06 c0       	rjmp	.+12     	; 0x902 <fputc+0x4a>
 8f6:	e8 85       	ldd	r30, Y+8	; 0x08
 8f8:	f9 85       	ldd	r31, Y+9	; 0x09
 8fa:	81 2f       	mov	r24, r17
 8fc:	09 95       	icall
 8fe:	89 2b       	or	r24, r25
 900:	29 f7       	brne	.-54     	; 0x8cc <fputc+0x14>
 902:	2e 81       	ldd	r18, Y+6	; 0x06
 904:	3f 81       	ldd	r19, Y+7	; 0x07
 906:	2f 5f       	subi	r18, 0xFF	; 255
 908:	3f 4f       	sbci	r19, 0xFF	; 255
 90a:	3f 83       	std	Y+7, r19	; 0x07
 90c:	2e 83       	std	Y+6, r18	; 0x06
 90e:	81 2f       	mov	r24, r17
 910:	90 2f       	mov	r25, r16
 912:	df 91       	pop	r29
 914:	cf 91       	pop	r28
 916:	1f 91       	pop	r17
 918:	0f 91       	pop	r16
 91a:	08 95       	ret

0000091c <__ultoa_invert>:
 91c:	fa 01       	movw	r30, r20
 91e:	aa 27       	eor	r26, r26
 920:	28 30       	cpi	r18, 0x08	; 8
 922:	51 f1       	breq	.+84     	; 0x978 <__ultoa_invert+0x5c>
 924:	20 31       	cpi	r18, 0x10	; 16
 926:	81 f1       	breq	.+96     	; 0x988 <__ultoa_invert+0x6c>
 928:	e8 94       	clt
 92a:	6f 93       	push	r22
 92c:	6e 7f       	andi	r22, 0xFE	; 254
 92e:	6e 5f       	subi	r22, 0xFE	; 254
 930:	7f 4f       	sbci	r23, 0xFF	; 255
 932:	8f 4f       	sbci	r24, 0xFF	; 255
 934:	9f 4f       	sbci	r25, 0xFF	; 255
 936:	af 4f       	sbci	r26, 0xFF	; 255
 938:	b1 e0       	ldi	r27, 0x01	; 1
 93a:	3e d0       	rcall	.+124    	; 0x9b8 <__ultoa_invert+0x9c>
 93c:	b4 e0       	ldi	r27, 0x04	; 4
 93e:	3c d0       	rcall	.+120    	; 0x9b8 <__ultoa_invert+0x9c>
 940:	67 0f       	add	r22, r23
 942:	78 1f       	adc	r23, r24
 944:	89 1f       	adc	r24, r25
 946:	9a 1f       	adc	r25, r26
 948:	a1 1d       	adc	r26, r1
 94a:	68 0f       	add	r22, r24
 94c:	79 1f       	adc	r23, r25
 94e:	8a 1f       	adc	r24, r26
 950:	91 1d       	adc	r25, r1
 952:	a1 1d       	adc	r26, r1
 954:	6a 0f       	add	r22, r26
 956:	71 1d       	adc	r23, r1
 958:	81 1d       	adc	r24, r1
 95a:	91 1d       	adc	r25, r1
 95c:	a1 1d       	adc	r26, r1
 95e:	20 d0       	rcall	.+64     	; 0x9a0 <__ultoa_invert+0x84>
 960:	09 f4       	brne	.+2      	; 0x964 <__ultoa_invert+0x48>
 962:	68 94       	set
 964:	3f 91       	pop	r19
 966:	2a e0       	ldi	r18, 0x0A	; 10
 968:	26 9f       	mul	r18, r22
 96a:	11 24       	eor	r1, r1
 96c:	30 19       	sub	r19, r0
 96e:	30 5d       	subi	r19, 0xD0	; 208
 970:	31 93       	st	Z+, r19
 972:	de f6       	brtc	.-74     	; 0x92a <__ultoa_invert+0xe>
 974:	cf 01       	movw	r24, r30
 976:	08 95       	ret
 978:	46 2f       	mov	r20, r22
 97a:	47 70       	andi	r20, 0x07	; 7
 97c:	40 5d       	subi	r20, 0xD0	; 208
 97e:	41 93       	st	Z+, r20
 980:	b3 e0       	ldi	r27, 0x03	; 3
 982:	0f d0       	rcall	.+30     	; 0x9a2 <__ultoa_invert+0x86>
 984:	c9 f7       	brne	.-14     	; 0x978 <__ultoa_invert+0x5c>
 986:	f6 cf       	rjmp	.-20     	; 0x974 <__ultoa_invert+0x58>
 988:	46 2f       	mov	r20, r22
 98a:	4f 70       	andi	r20, 0x0F	; 15
 98c:	40 5d       	subi	r20, 0xD0	; 208
 98e:	4a 33       	cpi	r20, 0x3A	; 58
 990:	18 f0       	brcs	.+6      	; 0x998 <__ultoa_invert+0x7c>
 992:	49 5d       	subi	r20, 0xD9	; 217
 994:	31 fd       	sbrc	r19, 1
 996:	40 52       	subi	r20, 0x20	; 32
 998:	41 93       	st	Z+, r20
 99a:	02 d0       	rcall	.+4      	; 0x9a0 <__ultoa_invert+0x84>
 99c:	a9 f7       	brne	.-22     	; 0x988 <__ultoa_invert+0x6c>
 99e:	ea cf       	rjmp	.-44     	; 0x974 <__ultoa_invert+0x58>
 9a0:	b4 e0       	ldi	r27, 0x04	; 4
 9a2:	a6 95       	lsr	r26
 9a4:	97 95       	ror	r25
 9a6:	87 95       	ror	r24
 9a8:	77 95       	ror	r23
 9aa:	67 95       	ror	r22
 9ac:	ba 95       	dec	r27
 9ae:	c9 f7       	brne	.-14     	; 0x9a2 <__ultoa_invert+0x86>
 9b0:	00 97       	sbiw	r24, 0x00	; 0
 9b2:	61 05       	cpc	r22, r1
 9b4:	71 05       	cpc	r23, r1
 9b6:	08 95       	ret
 9b8:	9b 01       	movw	r18, r22
 9ba:	ac 01       	movw	r20, r24
 9bc:	0a 2e       	mov	r0, r26
 9be:	06 94       	lsr	r0
 9c0:	57 95       	ror	r21
 9c2:	47 95       	ror	r20
 9c4:	37 95       	ror	r19
 9c6:	27 95       	ror	r18
 9c8:	ba 95       	dec	r27
 9ca:	c9 f7       	brne	.-14     	; 0x9be <__ultoa_invert+0xa2>
 9cc:	62 0f       	add	r22, r18
 9ce:	73 1f       	adc	r23, r19
 9d0:	84 1f       	adc	r24, r20
 9d2:	95 1f       	adc	r25, r21
 9d4:	a0 1d       	adc	r26, r0
 9d6:	08 95       	ret

000009d8 <__prologue_saves__>:
 9d8:	2f 92       	push	r2
 9da:	3f 92       	push	r3
 9dc:	4f 92       	push	r4
 9de:	5f 92       	push	r5
 9e0:	6f 92       	push	r6
 9e2:	7f 92       	push	r7
 9e4:	8f 92       	push	r8
 9e6:	9f 92       	push	r9
 9e8:	af 92       	push	r10
 9ea:	bf 92       	push	r11
 9ec:	cf 92       	push	r12
 9ee:	df 92       	push	r13
 9f0:	ef 92       	push	r14
 9f2:	ff 92       	push	r15
 9f4:	0f 93       	push	r16
 9f6:	1f 93       	push	r17
 9f8:	cf 93       	push	r28
 9fa:	df 93       	push	r29
 9fc:	cd b7       	in	r28, 0x3d	; 61
 9fe:	de b7       	in	r29, 0x3e	; 62
 a00:	ca 1b       	sub	r28, r26
 a02:	db 0b       	sbc	r29, r27
 a04:	0f b6       	in	r0, 0x3f	; 63
 a06:	f8 94       	cli
 a08:	de bf       	out	0x3e, r29	; 62
 a0a:	0f be       	out	0x3f, r0	; 63
 a0c:	cd bf       	out	0x3d, r28	; 61
 a0e:	09 94       	ijmp

00000a10 <__epilogue_restores__>:
 a10:	2a 88       	ldd	r2, Y+18	; 0x12
 a12:	39 88       	ldd	r3, Y+17	; 0x11
 a14:	48 88       	ldd	r4, Y+16	; 0x10
 a16:	5f 84       	ldd	r5, Y+15	; 0x0f
 a18:	6e 84       	ldd	r6, Y+14	; 0x0e
 a1a:	7d 84       	ldd	r7, Y+13	; 0x0d
 a1c:	8c 84       	ldd	r8, Y+12	; 0x0c
 a1e:	9b 84       	ldd	r9, Y+11	; 0x0b
 a20:	aa 84       	ldd	r10, Y+10	; 0x0a
 a22:	b9 84       	ldd	r11, Y+9	; 0x09
 a24:	c8 84       	ldd	r12, Y+8	; 0x08
 a26:	df 80       	ldd	r13, Y+7	; 0x07
 a28:	ee 80       	ldd	r14, Y+6	; 0x06
 a2a:	fd 80       	ldd	r15, Y+5	; 0x05
 a2c:	0c 81       	ldd	r16, Y+4	; 0x04
 a2e:	1b 81       	ldd	r17, Y+3	; 0x03
 a30:	aa 81       	ldd	r26, Y+2	; 0x02
 a32:	b9 81       	ldd	r27, Y+1	; 0x01
 a34:	ce 0f       	add	r28, r30
 a36:	d1 1d       	adc	r29, r1
 a38:	0f b6       	in	r0, 0x3f	; 63
 a3a:	f8 94       	cli
 a3c:	de bf       	out	0x3e, r29	; 62
 a3e:	0f be       	out	0x3f, r0	; 63
 a40:	cd bf       	out	0x3d, r28	; 61
 a42:	ed 01       	movw	r28, r26
 a44:	08 95       	ret

00000a46 <_exit>:
 a46:	f8 94       	cli

00000a48 <__stop_program>:
 a48:	ff cf       	rjmp	.-2      	; 0xa48 <__stop_program>
