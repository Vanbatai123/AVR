
MAIN_ATMEGA8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000180  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 000000a8  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000887  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000002af  00000000  00000000  00000b33  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000314  00000000  00000000  00000de2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000224  00000000  00000000  000010f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000027a  00000000  00000000  0000131c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000905  00000000  00000000  00001596  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000098  00000000  00000000  00001e9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	aa c0       	rjmp	.+340    	; 0x168 <__vector_9>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 e8       	ldi	r30, 0x80	; 128
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	7c d0       	rcall	.+248    	; 0x142 <main>
  4a:	98 c0       	rjmp	.+304    	; 0x17c <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <lcd_write>:
	{
		if ((mask&num))
		vietso_dec_LCD(1);
		else
		vietso_dec_LCD(0);
		mask>>=1;
  4e:	c4 98       	cbi	0x18, 4	; 24
  50:	89 2b       	or	r24, r25
}
void vietso_bin_LCD(unsigned long num)
{
	int mask=0X80;
	//hien thi byte trang thai duong ma nhi phan
	for (int i=0;i<8;i++)
  52:	11 f0       	breq	.+4      	; 0x58 <lcd_write+0xa>
  54:	c6 9a       	sbi	0x18, 6	; 24
  56:	13 c0       	rjmp	.+38     	; 0x7e <lcd_write+0x30>
		vietso_dec_LCD(1);
		else
		vietso_dec_LCD(0);
		mask>>=1;
	}
}
  58:	c6 98       	cbi	0x18, 6	; 24
  5a:	11 c0       	rjmp	.+34     	; 0x7e <lcd_write+0x30>
  5c:	66 23       	and	r22, r22
  5e:	14 f0       	brlt	.+4      	; 0x64 <lcd_write+0x16>
  60:	c5 98       	cbi	0x18, 5	; 24
  62:	01 c0       	rjmp	.+2      	; 0x66 <lcd_write+0x18>
  64:	c5 9a       	sbi	0x18, 5	; 24
  66:	c7 98       	cbi	0x18, 7	; 24
  68:	c7 9a       	sbi	0x18, 7	; 24
		clrb(LCD_PORT,SDA);
		else
		setb(LCD_PORT,SDA);
		clrb(LCD_PORT,SCK);
		setb(LCD_PORT,SCK);
		byte<<=1;
  6a:	66 0f       	add	r22, r22
  6c:	01 97       	sbiw	r24, 0x01	; 1
	clrb(LCD_PORT,CS);
	if(cd)
	setb(LCD_PORT,AO);
	else
	clrb(LCD_PORT,AO);
	for(int h=0;h<8;h++)
  6e:	00 97       	sbiw	r24, 0x00	; 0
  70:	a9 f7       	brne	.-22     	; 0x5c <lcd_write+0xe>
		setb(LCD_PORT,SDA);
		clrb(LCD_PORT,SCK);
		setb(LCD_PORT,SCK);
		byte<<=1;
	}
	daobit(LCD_PORT,AO);
  72:	98 b3       	in	r25, 0x18	; 24
  74:	80 e4       	ldi	r24, 0x40	; 64
  76:	89 27       	eor	r24, r25
  78:	88 bb       	out	0x18, r24	; 24
	clrb(LCD_PORT,CS);
  7a:	c4 98       	cbi	0x18, 4	; 24
  7c:	08 95       	ret
	,{255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 159, 159, 159, 30, 60, 253, 250, 114, 245, 165, 171, 171, 87, 87, 47, 175, 175, 87, 87, 87, 171, 171, 165, 117, 114, 248, 253, 60, 158, 159, 159, 159, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}
	,{255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 249, 240, 245, 255, 248, 250, 248, 248, 249, 254, 224, 199, 205, 204, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 204, 205, 198, 240, 254, 249, 249, 248, 249, 252, 255, 244, 240, 249, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}
	,{255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}							
};
void lcd_write(int cd, char byte)//SPI 4Line
{
  7e:	88 e0       	ldi	r24, 0x08	; 8
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	ec cf       	rjmp	.-40     	; 0x5c <lcd_write+0xe>

00000084 <move_LCD>:
	}
	daobit(LCD_PORT,AO);
	clrb(LCD_PORT,CS);
}
void move_LCD(unsigned char x, unsigned char y)
{
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	d8 2f       	mov	r29, r24
	y--;
  8a:	61 50       	subi	r22, 0x01	; 1
	x--;
	y=y*6;//Graphic Mode thi xoa dong nay di, Text thi de lai
  8c:	c6 2f       	mov	r28, r22
  8e:	cc 0f       	add	r28, r28
  90:	c6 0f       	add	r28, r22
  92:	cc 0f       	add	r28, r28
	lcd_write(0,(y&0x0f));
  94:	6c 2f       	mov	r22, r28
  96:	6f 70       	andi	r22, 0x0F	; 15
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	d8 df       	rcall	.-80     	; 0x4e <lcd_write>
	lcd_write(0,((y>>4)&0x07)|0x10);
  9e:	6c 2f       	mov	r22, r28
  a0:	62 95       	swap	r22
  a2:	6f 70       	andi	r22, 0x0F	; 15
  a4:	67 70       	andi	r22, 0x07	; 7
  a6:	60 61       	ori	r22, 0x10	; 16
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	d0 df       	rcall	.-96     	; 0x4e <lcd_write>
	clrb(LCD_PORT,CS);
}
void move_LCD(unsigned char x, unsigned char y)
{
	y--;
	x--;
  ae:	6f ef       	ldi	r22, 0xFF	; 255
  b0:	6d 0f       	add	r22, r29
	y=y*6;//Graphic Mode thi xoa dong nay di, Text thi de lai
	lcd_write(0,(y&0x0f));
	lcd_write(0,((y>>4)&0x07)|0x10);
	lcd_write(0,(x&0x0f)|0xb0);
  b2:	6f 70       	andi	r22, 0x0F	; 15
  b4:	60 6b       	ori	r22, 0xB0	; 176
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	c9 df       	rcall	.-110    	; 0x4e <lcd_write>
}
  bc:	df 91       	pop	r29
  be:	cf 91       	pop	r28
  c0:	08 95       	ret

000000c2 <clr_LCD>:
void clr_LCD()
{
  c2:	ff 92       	push	r15
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	11 e0       	ldi	r17, 0x01	; 1
	for(int u=0;u<8;u++)
	{
		move_LCD(u+1,1);
  ce:	0f 2e       	mov	r0, r31
  d0:	f2 e8       	ldi	r31, 0x82	; 130
  d2:	ff 2e       	mov	r15, r31
  d4:	f0 2d       	mov	r31, r0
  d6:	00 e0       	ldi	r16, 0x00	; 0
  d8:	61 e0       	ldi	r22, 0x01	; 1
  da:	81 2f       	mov	r24, r17
  dc:	d3 df       	rcall	.-90     	; 0x84 <move_LCD>
  de:	cf 2d       	mov	r28, r15
  e0:	d0 2f       	mov	r29, r16
		for(int w=0;w<130;w++)
		{
			lcd_write(1,0);
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	b2 df       	rcall	.-156    	; 0x4e <lcd_write>
  ea:	21 97       	sbiw	r28, 0x01	; 1
void clr_LCD()
{
	for(int u=0;u<8;u++)
	{
		move_LCD(u+1,1);
		for(int w=0;w<130;w++)
  ec:	20 97       	sbiw	r28, 0x00	; 0
  ee:	c9 f7       	brne	.-14     	; 0xe2 <clr_LCD+0x20>
  f0:	1f 5f       	subi	r17, 0xFF	; 255
	lcd_write(0,((y>>4)&0x07)|0x10);
	lcd_write(0,(x&0x0f)|0xb0);
}
void clr_LCD()
{
	for(int u=0;u<8;u++)
  f2:	19 30       	cpi	r17, 0x09	; 9
  f4:	89 f7       	brne	.-30     	; 0xd8 <clr_LCD+0x16>
		for(int w=0;w<130;w++)
		{
			lcd_write(1,0);
		}
	}
	move_LCD(1,1);
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	c4 df       	rcall	.-120    	; 0x84 <move_LCD>
}
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	1f 91       	pop	r17
 102:	0f 91       	pop	r16
 104:	ff 90       	pop	r15
 106:	08 95       	ret

00000108 <init_LCD>:
	while(*s)
	putchar_LCD(*s++);
}
void init_LCD()//Khoi tao GLCD
{
	LCD_DDR=0xFF;
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	87 bb       	out	0x17, r24	; 23
	lcd_write(0,0xE2); //Reset
 10c:	62 ee       	ldi	r22, 0xE2	; 226
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	9d df       	rcall	.-198    	; 0x4e <lcd_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	81 ee       	ldi	r24, 0xE1	; 225
 118:	94 e0       	ldi	r25, 0x04	; 4
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <init_LCD+0x12>
 122:	00 c0       	rjmp	.+0      	; 0x124 <init_LCD+0x1c>
 124:	00 00       	nop
	_delay_ms(100);	   //Delay 100ms
	lcd_write(0,0xAF); //Display ON, 0xAE - OFF
 126:	6f ea       	ldi	r22, 0xAF	; 175
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	90 df       	rcall	.-224    	; 0x4e <lcd_write>
	lcd_write(0,0x2F); //Power control
 12e:	6f e2       	ldi	r22, 0x2F	; 47
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	8c df       	rcall	.-232    	; 0x4e <lcd_write>
	clr_LCD(); //Xoa man hinh
 136:	c5 df       	rcall	.-118    	; 0xc2 <clr_LCD>
 138:	08 95       	ret

0000013a <init_ADC>:
	while(inbit(ADCSRA,ADIF)==0); //cho den khi nao bit ADIF==1
	return ADCW;
}
void init_ADC()
{
	setb(ADMUX,REFS0);
 13a:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2);
 13c:	84 e8       	ldi	r24, 0x84	; 132
 13e:	86 b9       	out	0x06, r24	; 6
 140:	08 95       	ret

00000142 <main>:
 142:	2f ef       	ldi	r18, 0xFF	; 255
 144:	89 e6       	ldi	r24, 0x69	; 105
 146:	98 e1       	ldi	r25, 0x18	; 24
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0x6>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0x10>
 152:	00 00       	nop
void Init_Timer_0(int div)
{
	TCNT0=0;
 154:	12 be       	out	0x32, r1	; 50
	if (div==1024)
	TCCR0=(1<<CS00)|(1<<CS02);
 156:	85 e0       	ldi	r24, 0x05	; 5
 158:	83 bf       	out	0x33, r24	; 51
int main(void)
{
	_delay_ms(500);
	int div=1024;
	Init_Timer_0(div);
	init_ADC();
 15a:	ef df       	rcall	.-34     	; 0x13a <init_ADC>
	init_LCD();
 15c:	d5 df       	rcall	.-86     	; 0x108 <init_LCD>
	setb(TIMSK,TOIE0);
 15e:	89 b7       	in	r24, 0x39	; 57
 160:	81 60       	ori	r24, 0x01	; 1
 162:	89 bf       	out	0x39, r24	; 57
	sei();
 164:	78 94       	sei
 166:	ff cf       	rjmp	.-2      	; 0x166 <main+0x24>

00000168 <__vector_9>:
	{
		
	}
}
ISR(TIMER0_OVF_vect)
{
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
	
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
