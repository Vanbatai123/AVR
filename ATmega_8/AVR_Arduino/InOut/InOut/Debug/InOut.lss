
InOut.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008d6  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000639  00000000  00000000  00000b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a7  00000000  00000000  0000115b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00001604  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000343  00000000  00000000  00001708  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000041c  00000000  00000000  00001a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001e67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	55 d0       	rcall	.+170    	; 0xde <main>
  34:	61 c0       	rjmp	.+194    	; 0xf8 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <analogRead>:
#include "ADC.h"


uint16_t analogRead(uint8_t pin)
{
	if (pin >= 14) pin -= 14; // convert pin to chanel
  38:	8e 30       	cpi	r24, 0x0E	; 14
  3a:	08 f0       	brcs	.+2      	; 0x3e <__SP_H__>
  3c:	8e 50       	subi	r24, 0x0E	; 14
	
	//config ADC
	ADMUX |= (1<<REFS0);
  3e:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1<<ADEN) | (1<<ADPS2);
  40:	96 b1       	in	r25, 0x06	; 6
  42:	94 68       	ori	r25, 0x84	; 132
  44:	96 b9       	out	0x06, r25	; 6
	
	ADMUX = pin | 0x40;	//select chanel
  46:	80 64       	ori	r24, 0x40	; 64
  48:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC); // start conversion
  4a:	36 9a       	sbi	0x06, 6	; 6
	
	while(inbit(ADCSRA, ADIF) == 0); //wait until conversion completed
  4c:	34 9b       	sbis	0x06, 4	; 6
  4e:	fe cf       	rjmp	.-4      	; 0x4c <__SREG__+0xd>
	
	return ADCW;
  50:	84 b1       	in	r24, 0x04	; 4
  52:	95 b1       	in	r25, 0x05	; 5
}
  54:	08 95       	ret

00000056 <pinToBit>:
	{
		setb(*port, bit);
		clrb(*ddr, bit);
	}
	else	setb(*ddr, bit);
}
  56:	88 30       	cpi	r24, 0x08	; 8
  58:	48 f0       	brcs	.+18     	; 0x6c <pinToBit+0x16>
  5a:	8e 30       	cpi	r24, 0x0E	; 14
  5c:	10 f4       	brcc	.+4      	; 0x62 <pinToBit+0xc>
  5e:	88 50       	subi	r24, 0x08	; 8
  60:	08 95       	ret
  62:	84 31       	cpi	r24, 0x14	; 20
  64:	10 f4       	brcc	.+4      	; 0x6a <pinToBit+0x14>
  66:	8e 50       	subi	r24, 0x0E	; 14
  68:	08 95       	ret
  6a:	80 e0       	ldi	r24, 0x00	; 0
  6c:	08 95       	ret

0000006e <pinToPort>:
  6e:	88 30       	cpi	r24, 0x08	; 8
  70:	38 f0       	brcs	.+14     	; 0x80 <pinToPort+0x12>
  72:	8e 30       	cpi	r24, 0x0E	; 14
  74:	40 f0       	brcs	.+16     	; 0x86 <pinToPort+0x18>
  76:	84 31       	cpi	r24, 0x14	; 20
  78:	48 f0       	brcs	.+18     	; 0x8c <pinToPort+0x1e>
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	08 95       	ret
  80:	82 e3       	ldi	r24, 0x32	; 50
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	08 95       	ret
  86:	88 e3       	ldi	r24, 0x38	; 56
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	08 95       	ret
  8c:	85 e3       	ldi	r24, 0x35	; 53
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	08 95       	ret

00000092 <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t val)
{
  92:	1f 93       	push	r17
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	c8 2f       	mov	r28, r24
  9a:	d6 2f       	mov	r29, r22
	volatile uint8_t *port;
	uint8_t bit = pinToBit(pin);
  9c:	dc df       	rcall	.-72     	; 0x56 <pinToBit>
  9e:	18 2f       	mov	r17, r24
	port = pinToPort(pin);
  a0:	8c 2f       	mov	r24, r28
  a2:	e5 df       	rcall	.-54     	; 0x6e <pinToPort>
  a4:	fc 01       	movw	r30, r24
	
	if (val == 1)	setb(*port, bit);
  a6:	d1 30       	cpi	r29, 0x01	; 1
  a8:	59 f4       	brne	.+22     	; 0xc0 <digitalWrite+0x2e>
  aa:	20 81       	ld	r18, Z
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <digitalWrite+0x24>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	1a 95       	dec	r17
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <digitalWrite+0x20>
  ba:	82 2b       	or	r24, r18
  bc:	80 83       	st	Z, r24
  be:	0b c0       	rjmp	.+22     	; 0xd6 <digitalWrite+0x44>
	else	clrb(*port, bit);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <digitalWrite+0x3a>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	1a 95       	dec	r17
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <digitalWrite+0x36>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
}
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	1f 91       	pop	r17
  dc:	08 95       	ret

000000de <main>:

int main(void)
{
	while(1)
	{
		if (analogRead(0) > 300)
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	ab df       	rcall	.-170    	; 0x38 <analogRead>
  e2:	8d 32       	cpi	r24, 0x2D	; 45
  e4:	91 40       	sbci	r25, 0x01	; 1
  e6:	20 f0       	brcs	.+8      	; 0xf0 <main+0x12>
		{
			digitalWrite(LED, HIGH);
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	85 e0       	ldi	r24, 0x05	; 5
  ec:	d2 df       	rcall	.-92     	; 0x92 <digitalWrite>
  ee:	f7 cf       	rjmp	.-18     	; 0xde <main>
		}
		else
		{
			digitalWrite(LED, 0);
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	85 e0       	ldi	r24, 0x05	; 5
  f4:	ce df       	rcall	.-100    	; 0x92 <digitalWrite>
  f6:	f3 cf       	rjmp	.-26     	; 0xde <main>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
